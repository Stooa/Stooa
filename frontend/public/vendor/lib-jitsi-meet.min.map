{"version":3,"file":"lib-jitsi-meet.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAqB,YAAID,IAEzBD,EAAkB,YAAIC,IARxB,CASGK,MAAM,WACT,iFCVA,mCASA,WACE,aAEA,IAAIC,MAAQ,wBACRC,OAA2B,iBAAXC,OAChBT,KAAOQ,OAASC,OAAS,GACzBT,KAAKU,mBACPF,QAAS,GAEX,IAAIG,YAAcH,QAA0B,iBAATF,KAC/BM,SAAWZ,KAAKa,mBAAwC,iBAAZC,SAAwBA,QAAQC,UAAYD,QAAQC,SAASC,KACzGJ,QACFZ,KAAOiB,oBAAAA,EACEN,aACTX,KAAOM,MAET,IAAIY,WAAalB,KAAKmB,qBAAqDhB,OAAOD,QAC9EkB,IAAsChB,oBAAAA,KACtCiB,cAAgBrB,KAAKsB,wBAAiD,oBAAhBC,YACtDC,UAAY,mBAAmBC,MAAM,IACrCC,MAAQ,CAAC,IAAK,MAAO,SAAU,YAC/BC,MAAQ,CAAC,EAAG,EAAG,GAAI,IACnBC,aAAe,CAAC,MAAO,QAAS,SAAU,SAAU,cAAe,UACnEC,mBAAqB,mEAAmEJ,MAAM,IAE9FK,OAAS,GAAIC,QACjB,GAAIV,aAAc,CAChB,IAAIW,OAAS,IAAIT,YAAY,IAC7BQ,QAAU,IAAIE,WAAWD,QACzBF,OAAS,IAAII,YAAYF,SAGvBhC,KAAKa,mBAAsBsB,MAAMC,UACnCD,MAAMC,QAAU,SAAUC,GACxB,MAA+C,mBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,MAItChB,eAAiBrB,KAAK0C,gCAAmCnB,YAAYoB,SACvEpB,YAAYoB,OAAS,SAAUN,GAC7B,MAAsB,iBAARA,GAAoBA,EAAIL,QAAUK,EAAIL,OAAOY,cAAgBrB,cA6D/E,IAAIsB,mBAAqB,SAAUC,GACjC,OAAO,SAAUC,GACf,OAAO,IAAIC,KAAI,GAAMC,OAAOF,GAASD,OAwBrCI,aAAe,WACjB,IAAIC,EAASN,mBAAmB,OAC5BjC,UACFuC,EAASC,SAASD,IAEpBA,EAAOE,OAAS,WACd,OAAO,IAAIL,KAEbG,EAAOF,OAAS,SAAUF,GACxB,OAAOI,EAAOE,SAASJ,OAAOF,IAEhC,IAAK,IAAIO,EAAI,EAAGA,EAAI1B,aAAa2B,SAAUD,EAAG,CAC5C,IAAIE,EAAO5B,aAAa0B,GACxBH,EAAOK,GAAQX,mBAAmBW,GAEpC,OAAOL,GAGLC,SAAW,SAAUD,QACvB,IAAIM,OAASC,KAAK,qBACdC,OAASD,KAAK,4BACdE,WAAa,SAAUb,GACzB,GAAuB,iBAAZA,EACT,OAAOU,OAAOI,WAAW,OAAOZ,OAAOF,EAAS,QAAQe,OAAO,OAE/D,GAAIf,MAAAA,EACF,MAAMxC,MAKV,OAJawC,EAAQH,cAAgBrB,cACjCwB,EAAU,IAAId,WAAWc,IAGzBZ,MAAMC,QAAQW,IAAYxB,YAAYoB,OAAOI,IAC/CA,EAAQH,cAAgBe,OACjBF,OAAOI,WAAW,OAAOZ,OAAO,IAAIU,OAAOZ,IAAUe,OAAO,OAE5DX,OAAOJ,IAGlB,OAAOa,YAST,SAASZ,IAAIe,GACX,GAAIA,EACFjC,OAAO,GAAKA,OAAO,IAAMA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GACxDA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAC3CA,OAAO,GAAKA,OAAO,GAAKA,OAAO,IAAMA,OAAO,IAC5CA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAM,EACpDkC,KAAKlC,OAASA,OACdkC,KAAKjC,QAAUA,aAEf,GAAIV,aAAc,CAChB,IAAIW,EAAS,IAAIT,YAAY,IAC7ByC,KAAKjC,QAAU,IAAIE,WAAWD,GAC9BgC,KAAKlC,OAAS,IAAII,YAAYF,QAE9BgC,KAAKlC,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnEkC,KAAKC,GAAKD,KAAKE,GAAKF,KAAKG,GAAKH,KAAKI,GAAKJ,KAAKK,MAAQL,KAAKM,MAAQN,KAAKO,OAAS,EAChFP,KAAKQ,UAAYR,KAAKS,QAAS,EAC/BT,KAAKU,OAAQ,EAYf1B,IAAIT,UAAUU,OAAS,SAAUF,GAC/B,IAAIiB,KAAKQ,UAAT,CAIA,IAAIG,EAAWnB,SAAcT,EAC7B,GAAa,WAATS,EAAmB,CACrB,GAAa,WAATA,EAWF,MAAMjD,MAVN,GAAgB,OAAZwC,EACF,MAAMxC,MACD,GAAIc,cAAgB0B,EAAQH,cAAgBrB,YACjDwB,EAAU,IAAId,WAAWc,QACpB,KAAKZ,MAAMC,QAAQW,IACnB1B,cAAiBE,YAAYoB,OAAOI,IACvC,MAAMxC,MAMZoE,GAAY,EAKd,IAHA,IAAIC,EAAiBtB,EAAXuB,EAAQ,EAAMtB,EAASR,EAAQQ,OAAQzB,EAASkC,KAAKlC,OAC3DC,EAAUiC,KAAKjC,QAEZ8C,EAAQtB,GAAQ,CAUrB,GATIS,KAAKS,SACPT,KAAKS,QAAS,EACd3C,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAGlD6C,EACF,GAAItD,aACF,IAAKiC,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,EAC/C9C,EAAQuB,KAAOP,EAAQ8B,QAGzB,IAAKvB,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,EAC/C/C,EAAOwB,GAAK,IAAMP,EAAQ8B,IAAUlD,MAAY,EAAN2B,UAI9C,GAAIjC,aACF,IAAKiC,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,GAC/CD,EAAO7B,EAAQ+B,WAAWD,IACf,IACT9C,EAAQuB,KAAOsB,EACNA,EAAO,MAChB7C,EAAQuB,KAAO,IAAQsB,GAAQ,EAC/B7C,EAAQuB,KAAO,IAAe,GAAPsB,GACdA,EAAO,OAAUA,GAAQ,OAClC7C,EAAQuB,KAAO,IAAQsB,GAAQ,GAC/B7C,EAAQuB,KAAO,IAASsB,GAAQ,EAAK,GACrC7C,EAAQuB,KAAO,IAAe,GAAPsB,IAEvBA,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9B7B,EAAQ+B,aAAaD,IACjE9C,EAAQuB,KAAO,IAAQsB,GAAQ,GAC/B7C,EAAQuB,KAAO,IAASsB,GAAQ,GAAM,GACtC7C,EAAQuB,KAAO,IAASsB,GAAQ,EAAK,GACrC7C,EAAQuB,KAAO,IAAe,GAAPsB,QAI3B,IAAKtB,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,GAC/CD,EAAO7B,EAAQ+B,WAAWD,IACf,IACT/C,EAAOwB,GAAK,IAAMsB,GAAQjD,MAAY,EAAN2B,KACvBsB,EAAO,MAChB9C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,IAAOjD,MAAY,EAAN2B,KAChDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,MACzCsB,EAAO,OAAUA,GAAQ,OAClC9C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,KAAQjD,MAAY,EAAN2B,KACjDxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,EAAK,KAAUjD,MAAY,EAAN2B,KACzDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,OAElDsB,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9B7B,EAAQ+B,aAAaD,IACjE/C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,KAAQjD,MAAY,EAAN2B,KACjDxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,GAAM,KAAUjD,MAAY,EAAN2B,KAC1DxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,EAAK,KAAUjD,MAAY,EAAN2B,KACzDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,MAK1DU,KAAKe,cAAgBzB,EACrBU,KAAKM,OAAShB,EAAIU,KAAKK,MACnBf,GAAK,IACPU,KAAKK,MAAQf,EAAI,GACjBU,KAAKgB,OACLhB,KAAKS,QAAS,GAEdT,KAAKK,MAAQf,EAOjB,OAJIU,KAAKM,MAAQ,aACfN,KAAKO,QAAUP,KAAKM,MAAQ,YAAc,EAC1CN,KAAKM,MAAQN,KAAKM,MAAQ,YAErBN,OAGThB,IAAIT,UAAU0C,SAAW,WACvB,IAAIjB,KAAKQ,UAAT,CAGAR,KAAKQ,WAAY,EACjB,IAAI1C,EAASkC,KAAKlC,OAAQwB,EAAIU,KAAKe,cACnCjD,EAAOwB,GAAK,IAAM5B,MAAU,EAAJ4B,GACpBA,GAAK,KACFU,KAAKS,QACRT,KAAKgB,OAEPlD,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAEtDA,EAAO,IAAMkC,KAAKM,OAAS,EAC3BxC,EAAO,IAAMkC,KAAKO,QAAU,EAAIP,KAAKM,QAAU,GAC/CN,KAAKgB,SAGPhC,IAAIT,UAAUyC,KAAO,WACnB,IAAIE,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIzD,EAASkC,KAAKlC,OAElCkC,KAAKU,MAQPS,IADAA,IALAD,IADAA,EAAIpD,EAAO,GAAK,YACN,EAAIoD,IAAM,IAAM,WAAa,IAIvCE,IADAA,IAAM,WADNC,IADAA,IAAM,WAAiB,WAAJH,GAAkBpD,EAAO,GAAK,YACvC,GAAKuD,IAAM,IAAMH,GAAK,KACH,UAALA,IAAoBpD,EAAO,GAAK,aAC9C,GAAKsD,IAAM,IAAMC,GAAK,IACjBA,EAAIH,IAAOpD,EAAO,GAAK,aAC5B,GAAKqD,IAAM,IAAMC,GAAK,GAEhCF,EAAIlB,KAAKC,GACTkB,EAAInB,KAAKE,GACTkB,EAAIpB,KAAKG,GASTgB,IADAA,KALAD,IADAA,KADAG,EAAIrB,KAAKI,IACEe,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,GAAK,YAC7B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,GAAK,aAC7B,GAAKqD,IAAM,IAAMC,GAAK,GAUlCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,aAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,GAAK,aAC7B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,GAAK,WAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,aAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,aAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,IAAM,QAC9B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,IAAM,aAC9B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,IAAM,WAC9B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,IAAM,aAC9B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,GAAK,aAC7B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,IAAM,YAC9B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,YAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,IAAM,WAC9B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,IAAM,YAC9B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,YAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,IAAM,aAC9B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,GAAK,YAC7B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,aAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,IAAM,aAC9B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,GAAK,WAC7B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,GAAK,aAC7B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAUhCD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,SAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,aAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,IAAM,aACnB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,IAAM,WACnB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,aAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,aAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,GAAK,YAClB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,IAAM,aACnB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,IAAM,YACnB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,YAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,GAAK,YAClB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,GAAK,WAClB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,YAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,IAAM,YACnB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,IAAM,YACnB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,GAAK,YAClB,GAAKqD,IAAM,GAAKC,GAAK,EAQ/BD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,YACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,GAAK,aACxB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,IAAM,aACzB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,WACxB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,IAAM,aACzB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,GAAK,aACxB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,IAAM,UACzB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,aACxB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,aACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,IAAM,WACzB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,GAAK,aACxB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,IAAM,aACzB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,YACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,IAAM,aACzB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,GAAK,YACxB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,YACxB,GAAKqD,IAAM,IAAMC,GAAK,EAE5BpB,KAAKU,OACPV,KAAKC,GAAKiB,EAAI,YAAc,EAC5BlB,KAAKE,GAAKiB,EAAI,WAAa,EAC3BnB,KAAKG,GAAKiB,EAAI,YAAc,EAC5BpB,KAAKI,GAAKiB,EAAI,WAAa,EAC3BrB,KAAKU,OAAQ,IAEbV,KAAKC,GAAKD,KAAKC,GAAKiB,GAAK,EACzBlB,KAAKE,GAAKF,KAAKE,GAAKiB,GAAK,EACzBnB,KAAKG,GAAKH,KAAKG,GAAKiB,GAAK,EACzBpB,KAAKI,GAAKJ,KAAKI,GAAKiB,GAAK,IAc7BrC,IAAIT,UAAUiD,IAAM,WAClBxB,KAAKiB,WAEL,IAAIhB,EAAKD,KAAKC,GAAIC,EAAKF,KAAKE,GAAIC,EAAKH,KAAKG,GAAIC,EAAKJ,KAAKI,GAExD,OAAO5C,UAAWyC,GAAM,EAAK,IAAQzC,UAAe,GAALyC,GAC7CzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,EAAK,IACrDzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,GAAM,IACtDzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,GAAM,IACtDzC,UAAW0C,GAAM,EAAK,IAAQ1C,UAAe,GAAL0C,GACxC1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,EAAK,IACrD1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,GAAM,IACtD1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,GAAM,IACtD1C,UAAW2C,GAAM,EAAK,IAAQ3C,UAAe,GAAL2C,GACxC3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,EAAK,IACrD3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,GAAM,IACtD3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,GAAM,IACtD3C,UAAW4C,GAAM,EAAK,IAAQ5C,UAAe,GAAL4C,GACxC5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,EAAK,IACrD5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,GAAM,IACtD5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,GAAM,KAa1DpB,IAAIT,UAAUC,SAAWQ,IAAIT,UAAUiD,IAYvCxC,IAAIT,UAAUuB,OAAS,WACrBE,KAAKiB,WAEL,IAAIhB,EAAKD,KAAKC,GAAIC,EAAKF,KAAKE,GAAIC,EAAKH,KAAKG,GAAIC,EAAKJ,KAAKI,GACxD,MAAO,CACA,IAALH,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,MAcjEpB,IAAIT,UAAUkD,MAAQzC,IAAIT,UAAUuB,OAYpCd,IAAIT,UAAUmD,YAAc,WAC1B1B,KAAKiB,WAEL,IAAIjD,EAAS,IAAIT,YAAY,IACzBO,EAAS,IAAII,YAAYF,GAK7B,OAJAF,EAAO,GAAKkC,KAAKC,GACjBnC,EAAO,GAAKkC,KAAKE,GACjBpC,EAAO,GAAKkC,KAAKG,GACjBrC,EAAO,GAAKkC,KAAKI,GACVpC,GAcTgB,IAAIT,UAAUP,OAASgB,IAAIT,UAAUmD,YAYrC1C,IAAIT,UAAUoD,OAAS,WAErB,IADA,IAAIC,EAAIC,EAAIC,EAAIC,EAAY,GAAIzB,EAAQN,KAAKyB,QACpCnC,EAAI,EAAGA,EAAI,IAClBsC,EAAKtB,EAAMhB,KACXuC,EAAKvB,EAAMhB,KACXwC,EAAKxB,EAAMhB,KACXyC,GAAalE,mBAAmB+D,IAAO,GACrC/D,mBAA0C,IAAtB+D,GAAM,EAAIC,IAAO,IACrChE,mBAA0C,IAAtBgE,GAAM,EAAIC,IAAO,IACrCjE,mBAAwB,GAALiE,GAMvB,OAJAF,EAAKtB,EAAMhB,GACXyC,GAAalE,mBAAmB+D,IAAO,GACrC/D,mBAAoB+D,GAAM,EAAK,IAC/B,OAIJ,IAAI1F,QAAUgD,eAEVhC,UACFf,OAAOD,QAAUA,SAmBjBF,KAAKgG,IAAM9F,QACPkB,MACFhB,8BAAAA,WACE,OAAOF,SADH,2IA5pBZ,mBCKA,IAAI+F,EAASC,EAAQ,MAgDrB,SAASC,EAAaC,EAAYC,GAC9BrC,KAAKoC,WAAaA,EAClBpC,KAAKsC,oBAAmBD,IAAWA,EAAQC,mBAAmBD,EAAQC,iBACtEtC,KAAKuC,cAAgBF,GAAWA,EAAQE,cAAgBF,EAAQE,cAAe,IAC/EvC,KAAKwC,eAAiBH,GAAWA,EAAQG,eAAiBH,EAAQG,eAAiB,IAGnFlE,OAAOmE,KAAKR,EAAOS,QAAQC,QAC3B,SAAUC,GAEN5C,KADiBiC,EAAOS,OAAOE,IACZ,WACf5C,KAAK6C,KAAKC,MAAM9C,KAAM+C,YACxBC,KAAKhD,KAAM4C,IACfI,KAAKhD,OAMPA,KAAKiD,oBAAsB,KAM3BjD,KAAKkD,MAAQ,GAKblD,KAAKmD,SAAW,EAMhBnD,KAAKoD,YAAc,GAiBvBjB,EAAa5D,UAAU8E,UAAY,SAAUC,GACzC,IACI,OAAOC,KAAKF,UAAUC,GACxB,MAAOE,GACL,MAAO,iCAmBfrB,EAAa5D,UAAUkF,iBAAmB,SAC1Cb,GAEI,IADA,IAAIc,EAAM,GACDpE,EAAI,EAAGqE,EAAMZ,UAAUxD,OAAQD,EAAIqE,EAAKrE,IAAK,CAClD,IAAIsE,EAAMb,UAAUzD,IAEfU,KAAKsC,kBAAoBM,IAAaX,EAAOS,OAAOnG,OACtC,iBAARqH,IACPA,EAAM5D,KAAKqD,UAAUO,IAEzBF,GAAOE,EACHtE,IAAMqE,EAAM,IACZD,GAAO,KAGf,OAAOA,EAAInE,OAASmE,EAAM,MAS9BvB,EAAa5D,UAAUsE,KAAO,WAG1B,IAAIgB,EAAYd,UAAU,GACtBW,EAAM1D,KAAKyD,iBAAiBX,MAAM9C,KAAM+C,WAC5C,GAAIW,EAAK,CAEL,IAAII,EAAc9D,KAAKkD,MAAMlD,KAAKkD,MAAM3D,OAAS,GAC7CwE,EAAkBD,GAAeA,EAAYE,KAC7CD,IAAoBL,EACpBI,EAAYG,OAAS,GAErBjE,KAAKkD,MAAMgB,KAAK,CACZF,KAAMN,EACNG,UAAWA,EACXI,MAAO,IAEXjE,KAAKmD,UAAYO,EAAInE,QAIzBS,KAAKmD,UAAYnD,KAAKwC,gBACtBxC,KAAKmE,QAAO,GAAkB,IAQtChC,EAAa5D,UAAU8B,MAAQ,WAC3BL,KAAKoE,8BAQTjC,EAAa5D,UAAU6F,2BAA6B,WAC5CpE,KAAKiD,sBACLxG,OAAO4H,aAAarE,KAAKiD,qBACzBjD,KAAKiD,oBAAsB,MAG/BjD,KAAKiD,oBAAsBxG,OAAO6H,WAC9BtE,KAAKmE,OAAOnB,KACRhD,MAAM,GAA0B,GACpCA,KAAKuC,gBAObJ,EAAa5D,UAAUgG,MAAQ,WAC3BvE,KAAKmE,QACD,GACA,IAcRhC,EAAa5D,UAAU4F,OAAS,SAASK,EAAOC,GAExCzE,KAAKmD,SAAW,IAAMnD,KAAKoC,WAAWsC,WAAaF,KAG/CxE,KAAKoC,WAAWsC,WAEZ1E,KAAKoD,YAAY7D,SACjBS,KAAKoD,YAAYT,QACb,SAAUgC,GACN3E,KAAKoC,WAAWwC,UAAUD,IAC5B3B,KAAKhD,OAGXA,KAAKoD,YAAc,IAGvBpD,KAAKoC,WAAWwC,UAAU5E,KAAKkD,QAE/BlD,KAAKoD,YAAYc,KAAKlE,KAAKkD,OAG/BlD,KAAKkD,MAAQ,GACblD,KAAKmD,SAAW,GAGhBsB,GACAzE,KAAKoE,8BAQbjC,EAAa5D,UAAUsG,KAAO,WAE1B7E,KAAKmE,QAAO,GAA0B,IAG1ChI,EAAOD,QAAUiG,YC/PjB,IAAIO,EAAS,CACT,MAAS,EACT,MAAS,EACT,KAAQ,EACR,IAAO,EACP,KAAQ,EACR,MAAS,GAObT,EAAO6C,iBAAmBC,QAM1B,IAAIC,EAAmB,CAAE/C,EAAO6C,kBAOhC7C,EAAOgD,mBAAqB,SAASC,IACY,IAAzCF,EAAiBG,QAAQD,IACzBF,EAAiBd,KAAKgB,IAS9BjD,EAAOmD,sBAAwB,SAASF,GACpC,IAAIG,EAAeL,EAAiBG,QAAQD,IACtB,IAAlBG,GACAL,EAAiBM,OAAOD,EAAc,IAO9C,IAAIE,EAAgB,GAgBpB,SAASC,IACL,IAAIC,EAAa,CACbC,WAAY,GACZC,aAAc,GACdC,KAAM,KACNC,OAAQ,MAGRrC,EAAQ,IAAIsC,MACZC,EAAQvC,EAAMuC,MAAOvC,EAAMuC,MAAMtI,MAAM,MAAQ,GACnD,IAAIsI,GAASA,EAAMxG,OAAS,EACxB,OAAOkG,EAEX,IAAIO,EAAI,KAIR,OAHGD,EAAM,KACLC,EAAID,EAAM,GAAGE,MAAM,iDAEnBD,GAAKA,EAAEzG,QAAU,GAEe,IAA7BwG,EAAM,GAAGZ,QAAQ,QAEhBM,EAAWC,WAAaK,EAAM,GAAGG,OAAO,EAAGH,EAAM,GAAGZ,QAAQ,MAG5DM,EAAWC,WAAaK,EAAM,GAAGG,OAAO,EAAGH,EAAM,GAAGZ,QAAQ,MAEzDM,IAGXA,EAAWC,WAAaM,EAAE,GAC1BP,EAAWE,aAAeK,EAAE,GAC5BP,EAAWG,KAAOI,EAAE,GACpBP,EAAWI,OAASG,EAAE,GACfP,GASX,SAASU,IACL,IAAIC,EAASrD,UAAU,GAAIsD,EAAQtD,UAAU,GACzCuD,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GACjD,KAAGL,EAAO2D,GAASD,EAAOC,OAQ1B,IAJA,IAAIZ,IACIW,EAAO/D,QAAQmE,mBAAqBjB,EAAciB,oBAClDhB,IACJiB,EAAazB,EAAiB0B,OAAON,EAAOK,YACxCnH,EAAI,EAAGA,EAAImH,EAAWlH,OAAQD,IAAK,CACvC,IAAIqH,EAAIF,EAAWnH,GACfsH,EAAID,EAAEN,GACV,GAAGO,GAAmB,mBAAPA,EAAmB,CAC9B,IAAIC,EAAc,GAElBA,EAAY3C,MAAK,IAAI4C,MAAOC,eAExBX,EAAOY,IACPH,EAAY3C,KAAK,IAAMkC,EAAOY,GAAK,KAGnCvB,GAAcA,EAAWC,WAAWnG,OAAS,GAC7CsH,EAAY3C,KAAK,IAAMuB,EAAWC,WAAa,OAGnD,IAAIuB,EAAeJ,EAAYH,OAAOJ,GAEtCM,EAAE5D,KAAK2D,GAAG7D,MAAM6D,EAAGM,KAiB/B,SAAShF,EAAOoE,EAAOW,EAAIP,EAAYpE,GACnCrC,KAAKgH,GAAKA,EACVhH,KAAKqC,QAAUA,GAAW,GAC1BrC,KAAKyG,WAAaA,EACdzG,KAAKyG,aACLzG,KAAKyG,WAAa,IAEtBzG,KAAKqG,MAAQ3D,EAAO2D,GAEpB,IADA,IAAIa,EAAU5I,OAAOmE,KAAKC,GAClBpD,EAAI,EAAGA,EAAI4H,EAAQ3H,OAAQD,IAC/BU,KAAKkH,EAAQ5H,IACT6G,EAAInD,KAAK,KAAMhD,KAAMkH,EAAQ5H,IA7GzC2C,EAAOkF,iBAAmB,SAAS9E,GAC/BkD,EAAgBlD,GAAW,IAoH/BJ,EAAO1D,UAAU6I,SAAW,SAAUf,GAClCrG,KAAKqG,MAAQ3D,EAAO2D,IAExBlK,EAAOD,QAAU+F,EAKjBA,EAAOS,OAAS,CACZ2E,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNlL,MAAO,yBC7LX,IAAI0F,EAASC,EAAQ,MACjBC,EAAeD,EAAQ,MAwBvBwF,EAAY,GAKZC,EAAU,GAKVC,EAAW3F,EAAOS,OAAO2E,MAG7BlL,EAAOD,QAAU,CAMb+I,mBAAoB,SAASC,GACzBjD,EAAOgD,mBAAmBC,IAO9BE,sBAAuB,SAASF,GAC5BjD,EAAOmD,sBAAsBF,IAMjCiC,iBAAkB,SAAS9E,GACvBJ,EAAOkF,iBAAiB9E,IAM5BwF,UAAW,SAASb,EAAIP,EAAYpE,GAChC,IAAI+D,EAAS,IAAInE,EAAO2F,EAAUZ,EAAIP,EAAYpE,GAOlD,OANG2E,GACCU,EAAUV,GAAMU,EAAUV,IAAO,GACjCU,EAAUV,GAAI9C,KAAKkC,IAEnBuB,EAAQzD,KAAKkC,GAEVA,GASX0B,gBAAiB,SAASzB,EAAOW,GAE7B,IADA,IAAIJ,EAAII,EAAKU,EAAUV,IAAO,GAAMW,EAC5BrI,EAAI,EAAGA,EAAIsH,EAAErH,OAAQD,IACzBsH,EAAEtH,GAAG8H,SAASf,IAOtB0B,YAAa,SAAU1B,GACnBuB,EAAWvB,EAEX,IADA,IAAI/G,EAAI,EACFA,EAAIqI,EAAQpI,OAAQD,IACtBqI,EAAQrI,GAAG8H,SAASf,GAGxB,IAAI,IAAIW,KAAMU,EAAW,CACrB,IAAId,EAAIc,EAAUV,IAAO,GACzB,IAAI1H,EAAI,EAAGA,EAAIsH,EAAErH,OAAQD,IACrBsH,EAAEtH,GAAG8H,SAASf,KAO1B3D,OAAQT,EAAOS,OAIfP,aAAcA,aChIlB,IAAI6F,EAAU7L,EAAOD,QAAU,CAC7B+L,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAGFF,KAAM,SACNC,IAAK,wCACLE,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEC,OAAQ,wBAGVC,EAAG,CAAC,CAAEL,KAAM,SACZ5I,EAAG,CAAC,CAAE4I,KAAM,gBACZM,EAAG,CAAC,CAAEN,KAAM,QACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,UACZS,EAAG,CAAC,CAAET,KAAM,cACZU,EAAG,CAAC,CAAEV,KAAM,YAEZvB,EAAG,CAAC,CAEFuB,KAAM,SACNC,IAAK,eACLE,MAAO,CAAC,QAAS,QACjBC,OAAQ,UAEVlH,EAAG,CAAC,CAEF8G,KAAM,aACNC,IAAK,mBACLE,MAAO,CAAC,UAAW,MACnBC,OAAQ,eAEVnH,EAAG,CAAC,CAEF+C,KAAM,YACNiE,IAAK,4BACLE,MAAO,CAAC,OAAQ,SAChBC,OAAQ,UAEVtC,EAAG,CAAC,CAIFmC,IAAK,kCACLE,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCC,OAAQ,gBAEVpH,EAAG,CACD,CAEEgD,KAAM,MACNiE,IAAK,yDACLE,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCC,OAAQ,SAAUF,GAChB,OAAQA,EAAES,SACN,qBACAT,EAAEU,KACA,kBACA,iBAGV,CAGE5E,KAAM,OACNiE,IAAK,wBACLE,MAAO,CAAC,UAAW,UACnBC,OAAQ,cAEV,CAEEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAEV,CAEEJ,KAAM,OACNC,IAAK,sCACLE,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEW,QACN,qBACA,YAGR,CAEE7E,KAAM,eACNiE,IAAK,kCACLE,MAAO,CAAC,UAAW,SACnBC,OAAQ,yBAEV,CAEEpE,KAAM,SACNiE,IAAK,6CACLE,MAAO,CAAC,UAAW,OAAQ,WAC3BC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEY,QACN,mBACA,kBAGR,CAIE9E,KAAM,MACNiE,IAAK,uFACLE,MAAO,CAAC,QAAS,YAAa,cAAe,MAAO,UACpDC,OAAQ,SAAUF,GAChB,MACE,aACCA,EAAEa,UAAY,MAAQ,OACtBb,EAAE,eAAiB,MAAQ,MAC5B,OACCA,EAAEc,OAAS,MAAQ,MAI1B,CAEEhB,KAAM,mBACNC,IAAK,yBAEP,CAEEjE,KAAM,SACNiE,IAAK,0CACLE,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCC,OAAQ,SAAUF,GAChB,OAA2B,MAAnBA,EAAEe,cACN,qBACA,oBAGR,CAEEjB,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CAEEJ,KAAM,iBACNC,IAAK,6BACLG,OAAQ,iBAEV,CAEEJ,KAAM,MACNC,IAAK,gBACLG,OAAQ,UAEV,CAEEJ,KAAM,OACNC,IAAK,aACLG,OAAQ,WAEV,CAEEJ,KAAM,QACNC,IAAK,yBACLG,OAAQ,YAEV,CAEEJ,KAAM,WACNC,IAAK,4BACLG,OAAQ,eAEV,CAEEJ,KAAM,YACNC,IAAK,0CAEP,CAEED,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,WACNC,IAAK,mBACLG,OAAQ,gBAEV,CAEEJ,KAAM,SACNC,IAAK,iBACLG,OAAQ,cAEV,CAEEJ,KAAM,cACNC,IAAK,2BACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,qBAEV,CAMEpE,KAAK,aACLiE,IAAK,+KACLE,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IC,OAAQ,SAAUF,GAChB,IAAIgB,EAAM,qCAaV,OAXAA,GAAmB,MAAXhB,EAAEiB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAbhB,EAAEkB,QAAmB,cAAgB,KAEzB,MAAhBlB,EAAEmB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBhB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,QAI9D,CAEEF,KAAM,kBACNC,IAAK,wBAEP,CAEED,KAAM,mBACNC,IAAK,0BACLG,OAAQ,wBAEV,CAEEJ,KAAM,aACNC,IAAK,qBACLG,OAAQ,kBAEV,CAEEpE,KAAM,QACNiE,IAAK,kCACLE,MAAO,CAAC,KAAM,YAAa,SAC3BC,OAAQ,SAAUF,GAChB,IAAIgB,EAAM,UAOV,OANmB,MAAfhB,EAAEoB,YACJJ,GAAO,MACQ,MAAXhB,EAAEqB,QACJL,GAAO,QAGJA,IAGX,CAGElF,KAAM,aAENiE,IAAK,mEACLE,MAAO,CAAC,YAAa,SACrBC,OAAQ,oBAEV,CAEEJ,KAAM,eACNC,IAAK,gCACLE,MAAO,CAAC,WAAY,SACpBC,OAAQ,wBAEV,CAEEpE,KAAM,SACNiE,IAAK,oBACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,eAEV,CAEEJ,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,YACNC,IAAK,iBAEP,CAEED,KAAM,UACNC,IAAK,sCACLE,MAAO,CAAC,gBAAiB,MAAO,kBAChCC,OAAQ,SAAUF,GAChB,OAA4B,MAApBA,EAAEsB,eACN,mBACA,kBAGR,CAEExB,KAAM,cACNC,IAAK,0BACLG,OAAQ,oBAEV,CAEEpE,KAAM,OACNiE,IAAK,sCACLE,MAAO,CAAC,KAAM,YAAa,UAC3BC,OAAQ,SAAUF,GAChB,OAAQA,EAAEuB,OAAU,eAAiB,cAGzC,CAIEzF,KAAM,aACNiE,IAAK,IAAIyB,OAEP,wKAMFvB,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCC,OAAQ,SAAUF,GAChB,MAAO,sBAAwBA,EAAEyB,KAAO,SAAW,MAGvD,CAGE3B,KAAM,YACNC,IAAK,IAAIyB,OAEP,2FAQFvB,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCC,OAAQ,SAAUF,GAChB,MAAO,mBAAqBA,EAAEyB,KAAO,SAAW,MAGpD,CAKE3B,KAAM,eACNC,IAAK,kCACLE,MAAO,CAAC,SACRC,OAAQ,iBAEV,CAGEJ,KAAM,YACNC,IAAK,8BACLG,OAAQ,gBAEV,CAGEJ,KAAM,eACNC,IAAK,6DACLE,MAAO,CAAC,aAAc,UAAW,eAAgB,cAAe,WAChEC,OAAQ,iCAEV,CAEEJ,KAAM,aACNC,IAAK,kBAEP,CAEED,KAAM,QACNC,IAAK,cACLG,OAAQ,YAEV,CAGEJ,KAAM,WACNC,IAAK,oBACLG,OAAQ,gBAEV,CAGEJ,KAAM,iBACNC,IAAK,2BACLG,OAAQ,uBAEV,CAGEpE,KAAK,cACLiE,IAAK,kCACLE,MAAO,CAAC,SAAU,aAClBC,OAAQ,SAAUF,GAChB,MAAO,gBAAiC,MAAfA,EAAE0B,UAAoB,MAAQ,MAG3D,CAGE5B,KAAK,WACLC,IAAK,wEACLE,MAAO,CAAC,KAAM,iBAAkB,kBAAmB,gBAAiB,mBACpEC,OAAQ,SAAUF,GAChB,IAAIgB,EAAM,YAKV,OAJAA,GAAgB,MAARhB,EAAEpB,GAAa,WAAa,OACpCoC,GAA6B,MAArBhB,EAAE2B,gBAA0B,MAAQ,IAC5CX,GAA2B,MAAnBhB,EAAE4B,cAAwB,WAAa,KAClB,MAArB5B,EAAE6B,gBAA0B,MAAQ,MAIhD,CAEE/B,KAAM,WACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAGV,CAEEJ,KAAM,gBACNC,IAAK,iCACLG,OAAQ,gBAEV,CAEEJ,KAAM,aACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,aACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,cACNC,IAAK,wCACLE,MAAO,CAAC,KAAM,WACdC,OAAQ,uBAEV,CAEEpE,KAAM,UACNmE,MAAO,CAAC,YAMd/J,OAAOmE,KAAKuF,GAASrF,SAAQ,SAAUuH,GAC1BlC,EAAQkC,GACdvH,SAAQ,SAAUtE,GAChBA,EAAI8J,MACP9J,EAAI8J,IAAM,QAEP9J,EAAIiK,SACPjK,EAAIiK,OAAS,4BC1enB,IAAI6B,EAASjI,EAAQ,MACjBkI,EAASlI,EAAQ,MAErBhG,EAAQmO,MAAQD,EAChBlO,EAAQoO,MAAQH,EAAOG,MACvBpO,EAAQqO,YAAcJ,EAAOI,YAC7BrO,EAAQsO,gBAAkBL,EAAOK,gBACjCtO,EAAQuO,cAAgBN,EAAOM,cAC/BvO,EAAQwO,sBAAwBP,EAAOO,sBACvCxO,EAAQyO,qBAAuBR,EAAOQ,qBACtCzO,EAAQ0O,yBAA2BT,EAAOS,yCCV1C,IAAIC,EAAa,SAAU5C,GACzB,OAAO6C,OAAOC,OAAO9C,MAAQA,EAAI8C,OAAO9C,GAAKA,GAgB3C+C,EAAW,SAAU3M,EAAK4M,EAAUC,GACtC,IAAIC,EAAa9M,EAAI6J,MAAQ7J,EAAIgK,MAC7BhK,EAAI6F,OAAS+G,EAAS5M,EAAI6F,MAC5B+G,EAAS5M,EAAI6F,MAAQ,GAEdiH,IAAeF,EAAS5M,EAAI6J,QACnC+C,EAAS5M,EAAI6J,MAAQ,IAEvB,IAAIkD,EAAc/M,EAAI6F,KACpB,GACAiH,EAAaF,EAAS5M,EAAI6J,MAAQ+C,GAvBf,SAAUhF,EAAOgF,EAAU5C,EAAOgD,GACvD,GAAIA,IAAYhD,EACd4C,EAASI,GAAWR,EAAW5E,EAAM,SAGrC,IAAK,IAAI3G,EAAI,EAAGA,EAAI+I,EAAM9I,OAAQD,GAAK,EACnB,MAAd2G,EAAM3G,EAAE,KACV2L,EAAS5C,EAAM/I,IAAMuL,EAAW5E,EAAM3G,EAAE,KAkB9CgM,CAAiBJ,EAAQjF,MAAM5H,EAAI8J,KAAMiD,EAAa/M,EAAIgK,MAAOhK,EAAI6J,MAEjE7J,EAAI6F,MACN+G,EAAS5M,EAAI6F,MAAMA,KAAKkH,IAIxBpD,EAAU9F,EAAQ,MAClBqJ,EAAY3B,OAAOrL,UAAUiN,KAAKxI,KAAK,iBAE3C9G,EAAQoO,MAAQ,SAAUmB,GACxB,IAAIC,EAAU,GACVC,EAAQ,GACRV,EAAWS,EAoBf,OAjBAD,EAAIhO,MAAM,gBAAgBmO,OAAOL,GAAW5I,SAAQ,SAAUiE,GAC5D,IAAIpH,EAAOoH,EAAE,GACTsE,EAAUtE,EAAEL,MAAM,GACT,MAAT/G,IACFmM,EAAMzH,KAAK,CAAC2H,IAAK,GAAIC,KAAM,KAC3Bb,EAAWU,EAAMA,EAAMpM,OAAO,IAGhC,IAAK,IAAIwM,EAAI,EAAGA,GAAK/D,EAAQxI,IAAS,IAAID,OAAQwM,GAAK,EAAG,CACxD,IAAI1N,EAAM2J,EAAQxI,GAAMuM,GACxB,GAAI1N,EAAI8J,IAAIqD,KAAKN,GACf,OAAOF,EAAS3M,EAAK4M,EAAUC,OAKrCQ,EAAQC,MAAQA,EACTD,GAGT,IAAIM,EAAe,SAAUC,EAAKC,GAChC,IAAI3D,EAAI2D,EAAKzO,MAAM,QAAS,GAM5B,OALiB,IAAb8K,EAAEhJ,OACJ0M,EAAI1D,EAAE,IAAMsC,EAAWtC,EAAE,IACH,IAAbA,EAAEhJ,QAAgB2M,EAAK3M,OAAS,IACzC0M,EAAI1D,EAAE,SAAM4D,GAEPF,GAGT/P,EAAQqO,YAAc,SAAUnB,GAC9B,OAAOA,EAAI3L,MAAM,QAAQ2O,OAAOJ,EAAc,KAIhD9P,EAAQsO,gBAAkBtO,EAAQqO,YAElCrO,EAAQuO,cAAgB,SAAUrB,GAChC,OAAOA,EAAI5K,WAAWf,MAAM,KAAK4O,IAAItB,SAGvC7O,EAAQwO,sBAAwB,SAAUtB,GAGxC,IAFA,IAAIkD,EAAa,GACbC,EAAQnD,EAAI3L,MAAM,KAAK4O,IAAIxB,GACtBvL,EAAI,EAAGA,EAAIiN,EAAMhN,OAAQD,GAAK,EACrCgN,EAAWpI,KAAK,CACdsI,UAAWD,EAAMjN,GACjBmN,GAAIF,EAAMjN,EAAI,GACdoN,KAAMH,EAAMjN,EAAI,KAGpB,OAAOgN,GAGTpQ,EAAQyO,qBAAuB,SAAUvB,GACvC,OAAOA,EAAI3L,MAAM,KAAK4O,KAAI,SAAUM,GAClC,OAAOA,EAAKC,UAAU,EAAGD,EAAKpN,OAAO,GAAG9B,MAAM,KAAK2O,OAAOJ,EAAc,QAI5E9P,EAAQ0O,yBAA2B,SAAUxB,GAC3C,OAAOA,EAAI3L,MAAM,KAAK4O,KAAI,SAAUQ,GAClC,OAAOA,EAAOpP,MAAM,KAAK4O,KAAI,SAAU/D,GACrC,IAAIwE,EAAMC,GAAS,EASnB,MAPkB,MAAdzE,EAAO,GACTwE,EAAOjC,EAAWvC,IAElBwE,EAAOjC,EAAWvC,EAAOsE,UAAU,EAAGtE,EAAO/I,SAC7CwN,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,0BCvHhB,IAAI/E,EAAU9F,EAAQ,MAGlB8K,EAAe,WACf1E,EAAS,SAAU2E,GACrB,IAAI3N,EAAI,EACJgH,EAAOvD,UACPY,EAAM2C,EAAK/G,OACf,OAAO0N,EAAUC,QAAQF,GAAc,SAAUG,GAC/C,GAAI7N,GAAKqE,EACP,OAAOwJ,EAET,IAAIvJ,EAAM0C,EAAKhH,GAEf,OADAA,GAAK,EACG6N,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAOrC,OAAOlH,GAChB,IAAK,KACH,OAAOmH,OAAOnH,GAChB,IAAK,KACH,MAAO,QAMTwJ,EAAW,SAAU5N,EAAMnB,EAAK4M,GAClC,IAII3E,EAAO,CAAC9G,EAAO,KAJTnB,EAAIiK,kBAAkB+E,SAC7BhP,EAAIiK,OAAOjK,EAAI6F,KAAO+G,EAAWA,EAAS5M,EAAI6J,OAC/C7J,EAAIiK,SAGN,GAAIjK,EAAIgK,MACN,IAAK,IAAI/I,EAAI,EAAGA,EAAIjB,EAAIgK,MAAM9I,OAAQD,GAAK,EAAG,CAC5C,IAAIgO,EAAIjP,EAAIgK,MAAM/I,GACdjB,EAAI6J,KACN5B,EAAKpC,KAAK+G,EAAS5M,EAAI6J,MAAMoF,IAG7BhH,EAAKpC,KAAK+G,EAAS5M,EAAIgK,MAAM/I,UAKjCgH,EAAKpC,KAAK+G,EAAS5M,EAAI6J,OAEzB,OAAOI,EAAOxF,MAAM,KAAMwD,IAKxBiH,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCrR,EAAOD,QAAU,SAAUwP,EAAS+B,GAClCA,EAAOA,GAAQ,GAEQ,MAAnB/B,EAAQgC,UACVhC,EAAQgC,QAAU,GAEA,MAAhBhC,EAAQxD,OACVwD,EAAQxD,KAAO,KAEjBwD,EAAQC,MAAMhJ,SAAQ,SAAUgL,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,OAIrB,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChC/B,EAAM,GAkCV,OA/BAoC,EAAWlL,SAAQ,SAAUnD,GAC3BwI,EAAQxI,GAAMmD,SAAQ,SAAUtE,GAC1BA,EAAI6J,QAAQwD,GAAgC,MAArBA,EAAQrN,EAAI6J,MACrCuD,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAKqN,IAEtBrN,EAAI6F,QAAQwH,GAAgC,MAArBA,EAAQrN,EAAI6F,OAC1CwH,EAAQrN,EAAI6F,MAAMvB,SAAQ,SAAUoL,GAClCtC,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAK0P,aAOrCrC,EAAQC,MAAMhJ,SAAQ,SAAUgL,GAC9BlC,EAAIvH,KAAKkJ,EAAS,IAAKpF,EAAQhC,EAAE,GAAI2H,IAErCG,EAAWnL,SAAQ,SAAUnD,GAC3BwI,EAAQxI,GAAMmD,SAAQ,SAAUtE,GAC1BA,EAAI6J,QAAQyF,GAA4B,MAAnBA,EAAMtP,EAAI6J,MACjCuD,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAKsP,IAEtBtP,EAAI6F,QAAQyJ,GAA4B,MAAnBA,EAAMtP,EAAI6F,OACtCyJ,EAAMtP,EAAI6F,MAAMvB,SAAQ,SAAUoL,GAChCtC,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAK0P,gBAOhCtC,EAAIuC,KAAK,QAAU,wBCjG5B,IAAIC,EAAY/L,EAAQ,MACpBgM,EAAiBhM,EAAQ,MACzBiM,EAAaD,EAAeC,WAC5BC,EAAaF,EAAeE,WAQhC,SAASC,EAAkBV,EAAOW,EAAMC,GACpC,OAAOZ,EACFa,MACA5C,QAAO,SAAS6C,GAAY,OAAOA,EAASzH,KAAOsH,KACnD1C,QAAO,SAAS6C,GAAY,OAAOA,EAASjF,YAAc+E,KAC1DlC,KAAI,SAASoC,GAAY,OAAOA,EAAShF,SAAU,GAK5D,SAASiF,EAAUrM,GAEfrC,KAAKqC,QAAUA,GAAoB,GAE9BrC,KAAKqC,QAAQsM,cACd3O,KAAKqC,QAAQsM,YAnBO,GAqBxB5J,QAAQoB,IAAI,uBAAyBnG,KAAKqC,QAAQsM,YAAc,WAMhE3O,KAAK4O,UAAY,GAiBrB,SAASC,EAAanD,EAASoD,GACZ,MAAXpD,GAAoBvN,MAAMC,QAAQsN,EAAQC,QAI9CD,EAAQC,MAAMhJ,SAAQ,SAAUgL,GACT,UAAfA,EAAMnO,MACNsP,EAAOnB,MAKnB,SAASoB,EAAoBC,GAEzB,OAAOA,GAAgB,MAARA,GACRA,EAAKxP,MAAqB,IAAbwP,EAAKxP,MAClBwP,EAAKvD,KAAmB,IAAZuD,EAAKvD,IAkJ5BiD,EAAUnQ,UAAU0Q,eAAiB,WACjCjP,KAAK4O,UAAY,IAWrBF,EAAUnQ,UAAU2Q,aAAe,SAASV,GACxCxO,KAAK4O,UAAYJ,GAYrBE,EAAUnQ,UAAU4Q,gBAAkB,SAAUxB,GAC5C,IAAIyB,EAAWzB,EAAM0B,YACjB1B,EAAM0B,WAAWC,MAAK,SAASC,GAAS,MAA2B,QAApBA,EAAMC,aACzD,OAAIJ,EACOA,EAASZ,MACX/Q,MAAM,KACN4O,KAAI,SAASoD,GAAW,OAAOC,SAASD,MAEtC,CAAC9B,EAAMa,MAAM,GAAGxH,KAI/B0H,EAAUnQ,UAAUoR,sBAAwB,SAAUC,EAAaC,GAE/D,IADA,IAAIC,EAAU,GACLxQ,EAAI,EAAGA,EAAIsQ,EAAYrQ,SAAUD,EAAG,CACzC,IAAIyQ,EAAUH,EAAYtQ,GACtB0Q,EAAUH,EAAYvQ,IAAM,KAChCwQ,EAAQC,GAAWC,EAEvB,OAAOF,GAGXpB,EAAUnQ,UAAU0R,2BAA6B,SAAStC,GACtD5I,QAAQoB,IAAI,sCAAuCnG,KAAK4O,WACxD,IAAIsB,EAAclQ,KAAKmP,gBAAgBxB,GACvC5I,QAAQoB,IAAI,sCAAuC+J,GACnD,IAAIC,EAAU9B,EAAiBV,EAAOuC,EAAY,GAAI,QAClDE,EAAW/B,EAAiBV,EAAOuC,EAAY,GAAI,SACnDG,EAAiBrQ,KAAK2P,sBAAsBO,EAAalQ,KAAK4O,WAClE7J,QAAQoB,IAAI,uCAAwCkK,GAGpD,IAAIC,EAAatQ,KAAK4O,UACjBhD,QAAO,SAAS0C,GAAQ,OAAwD,IAAjDhQ,OAAOiS,OAAOF,GAAgBlL,QAAQmJ,MA2B1E,OA1BAvJ,QAAQoB,IAAI,oCAAqCmK,GAGjD3C,EAAMa,MAAM7L,SAAQ,SAAS2L,GACrB+B,EAAe/B,EAAKtH,MACpBsH,EAAKtH,GAAKqJ,EAAe/B,EAAKtH,QAItCsJ,EAAW3N,SAAQ,SAAS2L,GACxBX,EAAMa,MAAMtK,KAAK,CACb8C,GAAIsH,EACJ9E,UAAW,OACXC,MAAO0G,IAEXxC,EAAMa,MAAMtK,KAAK,CACb8C,GAAIsH,EACJ9E,UAAW,QACXC,MAAO2G,OAGfzC,EAAM0B,WAAa1B,EAAM0B,YAAc,GACvC1B,EAAM0B,WAAWnL,KAAK,CAClBsL,UAAW,MACXhB,MAAOxO,KAAK4O,UAAUZ,KAAK,OAExBL,GAGXe,EAAUnQ,UAAUiS,oBAAsB,SAAS7C,EAAO8C,GACtD,IAAIC,EAAsB,SAAS/C,EAAOW,GACtCX,EAAMa,MAAMtK,KAAK,CACb8C,GAAIsH,EACJ9E,UAAW,QACXC,MAAOkH,IAEXhD,EAAMa,MAAMtK,KAAK,CACb8C,GAAIsH,EACJ9E,UAAW,OACXC,MAAOmH,KAGXA,EAAkBvC,EAAiBV,EAAO8C,EAAa,QACvDE,EAAmBtC,EAAiBV,EAAO8C,EAAa,SAKxDzQ,KAAKqC,QAAQwO,kBAAoBD,IACjCA,EAAkBjD,EAAMmD,KACLnD,EAAMa,MACZ7L,SAAQ2L,IACjBX,EAAMa,MAAMtK,KAAK,CACb8C,GAAIsH,EAAKtH,GACTwC,UAAW,OACXC,MAAOmH,QAOnB,IADA,IAAIG,EAAW,GACNzR,EAAI,EAAGA,EAAIU,KAAKqC,QAAQsM,YAAc,IAAKrP,EAAG,CACnD,IAAI0R,EA/RDC,KAAKC,MAAM,WAAAD,KAAKE,UADb,EAiSNT,EAAoB/C,EAAOqD,GAC3BD,EAAS7M,KAAK8M,GAOlB,OALArD,EAAM0B,WAAa1B,EAAM0B,YAAc,GACvC1B,EAAM0B,WAAWnL,KAAK,CAClBsL,UAAW,MACXhB,MAAOiC,EAAc,IAAMM,EAAS/C,KAAK,OAEtCL,GAoBXe,EAAUnQ,UAAU6S,kBAAoB,SAASzD,GAG7C,IAAI8C,EACAY,EAAW1D,EAAMa,OAASb,EAAMa,MAC/BnC,KAAI,SAASoC,GAAY,OAAOA,EAASzH,MACzC4E,QAAO,SAAS0C,EAAMzN,EAAOY,GAC1B,OAAOA,EAAM0D,QAAQmJ,KAAUzN,KAElCtB,QAAU,EACX+R,EAAa3D,EAAM0B,YAAc1B,EAAM0B,WAAW9P,QAAW,EAEjE,GAAiB,IAAb8R,GAAkBA,EAAW,EAE7B,OAAO1D,EAEX,GAAgB,GAAZ0D,GAA+B,IAAdC,EAEjB,OAAO3D,EAGX,GAAiB,IAAb0D,EACAZ,EAAc9C,EAAMa,MAAM,GAAGxH,OAC1B,CAGH,IAAIuK,EAAW5D,EAAM0B,WAAWzD,QAAO,SAAS2D,GAAS,MAA2B,QAApBA,EAAMC,aAAwB,GAC9F,IAAI+B,EAIA,OAAO5D,EAHP8C,EAAcf,SAAS6B,EAAS/C,MAAM/Q,MAAM,KAAK,IAsBzD,OAhBAsH,QAAQoB,IAAI,qCAAsCnG,KAAK4O,WACvD7J,QAAQoB,IAAI,qCAAuCsK,IAEY,IAAzCzQ,KAAK4O,UAAUzJ,QAAQsL,IAGzC1L,QAAQoB,IAAI,2EAEZwH,EAAQ3N,KAAKiQ,2BAA2BtC,KAExC5I,QAAQoB,IAAI,2EAEZwH,EAAQ3N,KAAKwQ,oBAAoB7C,EAAO8C,IAG5CzQ,KAAK4O,UAAY5O,KAAKmP,gBAAgBxB,GAC/BA,GAaXe,EAAUnQ,UAAUiT,uBAAyB,SAAUxC,EAAMyC,GAEzD,IAAK1C,EAAoBC,GACrB,OAAOA,EAGX,IAAItD,EAAUuC,EAAU3D,MAAM0E,EAAKvD,KAE/BnP,EAAO0D,KAqBX,OApBA6O,EAAanD,GAAS,SAAUiC,GAGxBrR,EAAK+F,QAAQqP,uBAjXzB,SAAgC/D,GAE5B,GAAKA,GAAUxP,MAAMC,QAAQuP,EAAM0B,YASnC,IALA,IAAIsC,EAAUxD,EAAWR,GACrBiE,EAAQ,GAGR7F,EAAI4B,EAAM0B,WAAW9P,OAClBwM,KAEH,GAAsC,QAAlC4B,EAAM0B,WAAWtD,GAAGyD,UAAxB,CAMA,IAFA,IAAIqC,EAAiBlE,EAAM0B,WAAWtD,GAAGyC,MAAM/Q,MAAM,KAE5C6B,EAAI,EAAGA,EAAIuS,EAAetS,OAAQD,IAAK,CAE5C,IAAIgP,EAAOuD,EAAevS,GAC1BsS,EAAM1N,KAAKoK,GAEX,IAAI/B,EAAQoF,EAAQrD,GAAMwC,KAAKrT,MAAM,KACrCkU,EAAQrD,GAAMwC,KAAO,CAACvE,EAAM,GAAI,IAAKjN,EAAG,IAAKiN,EAAM,GAAI,IAAKjN,GAAG0O,KAAK,IACpE2D,EAAQrD,GAAMwD,MAAQ,CAACH,EAAQrD,GAAMwD,MAAO,IAAKxS,GAAG0O,KAAK,IAGzDL,EAAM0B,WAAW1M,SAAQ,SAAUoP,GAC/B,GAA+B,QAA3BA,EAAavC,UAAjB,CAIA,IAAIwC,EAAeD,EAAavD,MAAM/Q,MAAM,MACR,IAAhCuU,EAAa7M,QAAQmJ,IAKzB0D,EAAarP,SAAQ,SAAUsP,GAC3BN,EAAQM,GAAanB,KAAOa,EAAQrD,GAAMwC,KAC1Ca,EAAQM,GAAaH,MAAQH,EAAQrD,GAAMwD,MACvCG,IAAgB3D,GAChBsD,EAAM1N,KAAK+N,UAQ3BtE,EAAMa,MAAQJ,EAAWuD,EAASC,GAClCjE,EAAM0B,WAAW/J,OAAOyG,EAAG,IA6TvB2F,CAAuB/D,GAzTnC,SAAgCA,GAE5B,GAAKA,GAAUxP,MAAMC,QAAQuP,EAAM0B,YAAnC,CAMA,IAAIsC,EAAUxD,EAAWR,GAGzBA,EAAM0B,WAAW1M,SAAQ,SAAUuP,GAC/B,GAAiC,QAA7BA,EAAe1C,UAAnB,CAIAzK,QAAQoN,KAAK,wBAA0BD,EAAe1D,OAEtD0D,EAAeE,MAAO,EAKtB,IAHA,IAAIP,EAAiBK,EAAe1D,MAAM/Q,MAAM,KAGvC6B,EAAI,EAAGA,EAAIuS,EAAetS,OAAQD,IAAK,CAE5C,IAAIgP,EAAOuD,EAAevS,UACnBqS,EAAQrD,GAGfX,EAAM0B,WAAW1M,SAAQ,SAAUoP,GAC/B,GAA+B,QAA3BA,EAAavC,UAAjB,CAIA,IAAIwC,EAAeD,EAAavD,MAAM/Q,MAAM,MACR,IAAhCuU,EAAa7M,QAAQmJ,KAKzB0D,EAAarP,SAAQ,SAAUsP,UACpBN,EAAQM,MAInBF,EAAaK,MAAO,YAOhCzE,EAAMa,MAAQJ,EAAWuD,GAIzB,IADA,IAAIrS,EAAIqO,EAAM0B,WAAW9P,OAClBD,KACCqO,EAAM0B,WAAW/P,GAAG8S,MACpBzE,EAAM0B,WAAW/J,OAAOhG,EAAG,QAvD/ByF,QAAQoN,KAAK,6DAwTTE,CAAuB1E,IAOtBrR,EAAK+F,QAAQwO,iBAAmBY,EA3P7C,SAA8B9D,GACrBA,IAIAxP,MAAMC,QAAQuP,EAAM2E,WACrB3E,EAAM2E,QAAU,IAGf3E,EAAM2E,QAAQC,MACX,SAAUjT,GAAK,MAAmB,6BAAZA,EAAEmK,UAC5BkE,EAAM2E,QAAQpO,KAAK,CAAC,MAAS,8BAiPzBsO,CAAqB7E,GApQjC,SAA8BA,GACrBA,QAAsC,IAAtBA,EAAM8E,cAI3B9E,EAAM8E,iBAActG,GAiQZuG,CAAqB/E,MAItB,IAAIgF,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKwC,EAAU5D,MAAMqB,MAW7BgD,EAAUnQ,UAAUqU,sBAAwB,SAAU5D,GAElD,IAAKD,EAAoBC,GACrB,OAAOA,EAGX,IAAItD,EAAUuC,EAAU3D,MAAM0E,EAAKvD,KAE/BnP,EAAO0D,KASX,OARA6O,EAAanD,GAAS,SAAUiC,GACL,YAAnBA,EAAM1E,WAA8C,YAAnB0E,EAAM1E,WAI3C3M,EAAK8U,kBAAkBzD,MAGpB,IAAIgF,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKwC,EAAU5D,MAAMqB,MAM7BvP,EAAOD,QAAUwS,gBCrejBxS,EAAQkS,WAAa,SAASuD,EAASC,GACrC,IAAIpD,EAAQ,GAGZ,QAAuB,IAAZmD,GACyB,IAAhCrT,OAAOmE,KAAKkP,GAASpS,OAAc,CAEhCpB,MAAMC,QAAQwT,KACjBA,EAAQ,IAIV,IAAK,IAAItS,EAAI,EAAGA,EAAIsS,EAAMrS,OAAQD,IAAK,CACrC,IAAIgP,EAAOsD,EAAMtS,GACbuT,EAASlB,EAAQrD,GACrBhQ,OAAOmE,KAAKoQ,GAAQlQ,SAAQ,SAAU6G,GACpCgF,EAAMtK,KAAK,CACT8C,GAAIsH,EACJ9E,UAAWA,EACXC,MAAOoJ,EAAOrJ,QAMpBlL,OAAOmE,KAAKkP,GAAShP,SAAQ,SAAU2L,GAErC,GADAA,EAAOoB,SAASpB,KACZsD,EAAMzM,QAAQmJ,IAAS,GAA3B,CAKA,IAAIuE,EAASlB,EAAQrD,GACrBhQ,OAAOmE,KAAKoQ,GAAQlQ,SAAQ,SAAU6G,GACpCgF,EAAMtK,KAAK,CACT8C,GAAIsH,EACJ9E,UAAWA,EACXC,MAAOoJ,EAAOrJ,YAMtB,OAAOgF,GAGTtS,EAAQiS,WAAa,SAAUR,GAC7B,IAAIgE,EAAU,GASd,YAP2B,IAAhBhE,EAAMa,OAAyBrQ,MAAMC,QAAQuP,EAAMa,QAC5Db,EAAMa,MAAM7L,SAAQ,SAAU2L,GACvBqD,EAAQrD,EAAKtH,MAChB2K,EAAQrD,EAAKtH,IAAM,IACrB2K,EAAQrD,EAAKtH,IAAIsH,EAAK9E,WAAa8E,EAAK7E,SAGrCkI,iBChFT,OASC,WAEG,IAGI3V,EAAM8W,EAHNC,EAAQ,GAeZ,SAASC,EAAUC,GACf,IAAIC,GAAS,EACb,OAAO,WACH,GAAIA,EAAQ,MAAM,IAAIpN,MAAM,gCAC5BoN,GAAS,EACTD,EAAGnQ,MAAM9G,EAAM+G,YAdX,OADZ/G,EAAOgE,QAEL8S,EAAiB9W,EAAK+W,OAGxBA,EAAMI,WAAa,WAEf,OADAnX,EAAK+W,MAAQD,EACNC,GAcX,IAAIK,EAAY9U,OAAOC,UAAUC,SAE7B6U,EAAWlV,MAAMC,SAAW,SAAUC,GACtC,MAA+B,mBAAxB+U,EAAU3U,KAAKJ,IAGtBiV,EAAQ,SAAUC,EAAKC,GACvB,GAAID,EAAI5Q,QACJ,OAAO4Q,EAAI5Q,QAAQ6Q,GAEvB,IAAK,IAAIlU,EAAI,EAAGA,EAAIiU,EAAIhU,OAAQD,GAAK,EACjCkU,EAASD,EAAIjU,GAAIA,EAAGiU,IAIxBE,EAAO,SAAUF,EAAKC,GACtB,GAAID,EAAIlH,IACJ,OAAOkH,EAAIlH,IAAImH,GAEnB,IAAIE,EAAU,GAId,OAHAJ,EAAMC,GAAK,SAAUpG,EAAG7N,EAAG4B,GACvBwS,EAAQxP,KAAKsP,EAASrG,EAAG7N,EAAG4B,OAEzBwS,GAaPC,EAAQ,SAAUtV,GAClB,GAAIC,OAAOmE,KACP,OAAOnE,OAAOmE,KAAKpE,GAEvB,IAAIoE,EAAO,GACX,IAAK,IAAImR,KAAKvV,EACNA,EAAIwV,eAAeD,IACnBnR,EAAKyB,KAAK0P,GAGlB,OAAOnR,GAMY,oBAAZ3F,SAA6BA,QAAQgX,UAgB5Cf,EAAMe,SAAWhX,QAAQgX,SACG,oBAAjBC,aACPhB,EAAMgB,aAAe,SAAUd,GAE7Bc,aAAad,IAIfF,EAAMgB,aAAehB,EAAMe,UAvBH,mBAAjBC,cACPhB,EAAMe,SAAW,SAAUb,GAEvBc,aAAad,IAEjBF,EAAMgB,aAAehB,EAAMe,WAG3Bf,EAAMe,SAAW,SAAUb,GACvB3O,WAAW2O,EAAI,IAEnBF,EAAMgB,aAAehB,EAAMe,UAgBnCf,EAAMiB,KAAO,SAAUT,EAAKC,EAAUS,GAElC,GADAA,EAAWA,GAAY,cAClBV,EAAIhU,OACL,OAAO0U,IAEX,IAAIC,EAAY,EAIhB,SAASC,EAAKC,GACRA,GACAH,EAASG,GACTH,EAAW,eAGXC,GAAa,IACIX,EAAIhU,QACjB0U,IAXVX,EAAMC,GAAK,SAAUpG,GACjBqG,EAASrG,EAAG6F,EAAUmB,QAe9BpB,EAAMpQ,QAAUoQ,EAAMiB,KAEtBjB,EAAMsB,WAAa,SAAUd,EAAKC,EAAUS,GAExC,GADAA,EAAWA,GAAY,cAClBV,EAAIhU,OACL,OAAO0U,IAEX,IAAIC,EAAY,EACZI,EAAU,WACVd,EAASD,EAAIW,IAAY,SAAUE,GAC3BA,GACAH,EAASG,GACTH,EAAW,eAGXC,GAAa,IACIX,EAAIhU,OACjB0U,IAGAK,QAKhBA,KAEJvB,EAAMwB,cAAgBxB,EAAMsB,WAE5BtB,EAAMyB,UAAY,SAAUjB,EAAKkB,EAAOjB,EAAUS,GACrCS,EAAWD,GACjB3R,MAAM,KAAM,CAACyQ,EAAKC,EAAUS,KAEnClB,EAAM4B,aAAe5B,EAAMyB,UAE3B,IAAIE,EAAa,SAAUD,GAEvB,OAAO,SAAUlB,EAAKC,EAAUS,GAE5B,GADAA,EAAWA,GAAY,cAClBV,EAAIhU,QAAUkV,GAAS,EACxB,OAAOR,IAEX,IAAIC,EAAY,EACZU,EAAU,EACVC,EAAU,GAEd,SAAUC,IACN,GAAIZ,GAAaX,EAAIhU,OACjB,OAAO0U,IAGX,KAAOY,EAAUJ,GAASG,EAAUrB,EAAIhU,QAEpCsV,GAAW,EACXrB,EAASD,GAFTqB,GAAW,GAEY,IAAI,SAAUR,GAC7BA,GACAH,EAASG,GACTH,EAAW,eAIXY,GAAW,GADXX,GAAa,IAEIX,EAAIhU,OACjB0U,IAGAa,QApBpB,KA8BJC,EAAa,SAAU9B,GACvB,OAAO,WACH,IAAI3M,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WACtC,OAAOkQ,EAAGnQ,MAAM,KAAM,CAACiQ,EAAMiB,MAAMtN,OAAOJ,MAS9C0O,EAAW,SAAU/B,GACrB,OAAO,WACH,IAAI3M,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WACtC,OAAOkQ,EAAGnQ,MAAM,KAAM,CAACiQ,EAAMsB,YAAY3N,OAAOJ,MAKpD2O,EAAY,SAAUC,EAAQ3B,EAAKC,EAAUS,GAI7C,GAHAV,EAAME,EAAKF,GAAK,SAAUpG,EAAG7N,GACzB,MAAO,CAACuB,MAAOvB,EAAGmK,MAAO0D,MAExB8G,EAME,CACH,IAAIP,EAAU,GACdwB,EAAO3B,GAAK,SAAUpG,EAAG8G,GACrBT,EAASrG,EAAE1D,OAAO,SAAU2K,EAAKnM,GAC7ByL,EAAQvG,EAAEtM,OAASoH,EACnBgM,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKV,WAblBwB,EAAO3B,GAAK,SAAUpG,EAAG8G,GACrBT,EAASrG,EAAE1D,OAAO,SAAU2K,GACxBH,EAASG,UAezBrB,EAAM1G,IAAM0I,EAAWE,GACvBlC,EAAMoC,UAAYH,EAASC,GAC3BlC,EAAMqC,SAAW,SAAU7B,EAAKkB,EAAOjB,EAAUS,GAC7C,OAAOoB,EAAUZ,EAAVY,CAAiB9B,EAAKC,EAAUS,IAG3C,IAAIoB,EAAY,SAASZ,GACrB,OA3CkB,SAASA,EAAOxB,GAClC,OAAO,WACH,IAAI3M,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WACtC,OAAOkQ,EAAGnQ,MAAM,KAAM,CAAC4R,EAAWD,IAAQ/N,OAAOJ,KAwC9CgP,CAAgBb,EAAOQ,IAKlClC,EAAM3G,OAAS,SAAUmH,EAAKgC,EAAM/B,EAAUS,GAC1ClB,EAAMsB,WAAWd,GAAK,SAAUpG,EAAG8G,GAC/BT,EAAS+B,EAAMpI,GAAG,SAAUiH,EAAKnM,GAC7BsN,EAAOtN,EACPgM,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKmB,OAItBxC,EAAMyC,OAASzC,EAAM3G,OAErB2G,EAAM0C,MAAQ1C,EAAM3G,OAEpB2G,EAAM2C,YAAc,SAAUnC,EAAKgC,EAAM/B,EAAUS,GAC/C,IAAI0B,EAAWlC,EAAKF,GAAK,SAAUpG,GAC/B,OAAOA,KACRyI,UACH7C,EAAM3G,OAAOuJ,EAAUJ,EAAM/B,EAAUS,IAG3ClB,EAAM8C,MAAQ9C,EAAM2C,YAEpB,IAAII,EAAU,SAAUZ,EAAQ3B,EAAKC,EAAUS,GAC3C,IAAIP,EAAU,GAIdwB,EAHA3B,EAAME,EAAKF,GAAK,SAAUpG,EAAG7N,GACzB,MAAO,CAACuB,MAAOvB,EAAGmK,MAAO0D,OAEjB,SAAUA,EAAG8G,GACrBT,EAASrG,EAAE1D,OAAO,SAAUxB,GACpBA,GACAyL,EAAQxP,KAAKiJ,GAEjB8G,UAEL,SAAUG,GACTH,EAASR,EAAKC,EAAQqC,MAAK,SAAU7U,EAAGC,GACpC,OAAOD,EAAEL,MAAQM,EAAEN,UACnB,SAAUsM,GACV,OAAOA,EAAE1D,cAIrBsJ,EAAMnH,OAASmJ,EAAWe,GAC1B/C,EAAMiD,aAAehB,EAASc,GAE9B/C,EAAMkD,OAASlD,EAAMnH,OACrBmH,EAAMmD,aAAenD,EAAMiD,aAE3B,IAAIG,EAAU,SAAUjB,EAAQ3B,EAAKC,EAAUS,GAC3C,IAAIP,EAAU,GAIdwB,EAHA3B,EAAME,EAAKF,GAAK,SAAUpG,EAAG7N,GACzB,MAAO,CAACuB,MAAOvB,EAAGmK,MAAO0D,OAEjB,SAAUA,EAAG8G,GACrBT,EAASrG,EAAE1D,OAAO,SAAUxB,GACnBA,GACDyL,EAAQxP,KAAKiJ,GAEjB8G,UAEL,SAAUG,GACTH,EAASR,EAAKC,EAAQqC,MAAK,SAAU7U,EAAGC,GACpC,OAAOD,EAAEL,MAAQM,EAAEN,UACnB,SAAUsM,GACV,OAAOA,EAAE1D,cAIrBsJ,EAAMqD,OAASrB,EAAWoB,GAC1BpD,EAAMsD,aAAerB,EAASmB,GAE9B,IAAIG,EAAU,SAAUpB,EAAQ3B,EAAKC,EAAU+C,GAC3CrB,EAAO3B,GAAK,SAAUpG,EAAG8G,GACrBT,EAASrG,GAAG,SAAUqJ,GACdA,GACAD,EAAcpJ,GACdoJ,EAAgB,cAGhBtC,UAGT,SAAUG,GACTmC,QAGRxD,EAAM0D,OAAS1B,EAAWuB,GAC1BvD,EAAM2D,aAAe1B,EAASsB,GAE9BvD,EAAMR,KAAO,SAAUgB,EAAKC,EAAU+C,GAClCxD,EAAMiB,KAAKT,GAAK,SAAUpG,EAAG8G,GACzBT,EAASrG,GAAG,SAAUlF,GACdA,IACAsO,GAAc,GACdA,EAAgB,cAEpBtC,UAEL,SAAUG,GACTmC,GAAc,OAItBxD,EAAM4D,IAAM5D,EAAMR,KAElBQ,EAAM6D,MAAQ,SAAUrD,EAAKC,EAAU+C,GACnCxD,EAAMiB,KAAKT,GAAK,SAAUpG,EAAG8G,GACzBT,EAASrG,GAAG,SAAUlF,GACbA,IACDsO,GAAc,GACdA,EAAgB,cAEpBtC,UAEL,SAAUG,GACTmC,GAAc,OAItBxD,EAAM8D,IAAM9D,EAAM6D,MAElB7D,EAAM+D,OAAS,SAAUvD,EAAKC,EAAUS,GACpClB,EAAM1G,IAAIkH,GAAK,SAAUpG,EAAG8G,GACxBT,EAASrG,GAAG,SAAUiH,EAAK2C,GACnB3C,EACAH,EAASG,GAGTH,EAAS,KAAM,CAACxK,MAAO0D,EAAG4J,SAAUA,UAG7C,SAAU3C,EAAKV,GACd,GAAIU,EACA,OAAOH,EAASG,GAOhBH,EAAS,KAAMR,EAAKC,EAAQqC,MAJnB,SAAUiB,EAAMC,GACrB,IAAI/V,EAAI8V,EAAKD,SAAU5V,EAAI8V,EAAMF,SACjC,OAAO7V,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,MAEE,SAAUgM,GAC5C,OAAOA,EAAE1D,cAMzBsJ,EAAMmE,KAAO,SAAUC,EAAOlD,GAC1BA,EAAWA,GAAY,aACvB,IAAIxR,EAAOkR,EAAMwD,GACbC,EAAiB3U,EAAKlD,OAC1B,IAAK6X,EACD,OAAOnD,IAGX,IAAIP,EAAU,GAEV2D,EAAY,GACZC,EAAc,SAAUrE,GACxBoE,EAAUE,QAAQtE,IAUlBuE,EAAe,WACfJ,IACA9D,EAAM+D,EAAU9Q,MAAM,IAAI,SAAU0M,GAChCA,QAIRqE,GAAY,WACR,IAAKF,EAAgB,CACjB,IAAIK,EAAcxD,EAElBA,EAAW,aAEXwD,EAAY,KAAM/D,OAI1BJ,EAAM7Q,GAAM,SAAUmR,GAClB,IAAI8D,EAAOrE,EAAS8D,EAAMvD,IAAMuD,EAAMvD,GAAI,CAACuD,EAAMvD,IAC7C+D,EAAe,SAAUvD,GACzB,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAIjD,GAHIuD,EAAK/G,QAAU,IACf+G,EAAOA,EAAK,IAEZ8N,EAAK,CACL,IAAIwD,EAAc,GAClBtE,EAAMK,EAAMD,IAAU,SAASmE,GAC3BD,EAAYC,GAAQnE,EAAQmE,MAEhCD,EAAYhE,GAAKtN,EACjB2N,EAASG,EAAKwD,GAEd3D,EAAW,kBAGXP,EAAQE,GAAKtN,EACbyM,EAAMgB,aAAayD,IAGvBM,EAAWJ,EAAKnR,MAAM,EAAG0K,KAAK8G,IAAIL,EAAKnY,OAAS,KAAO,GACvDyY,EAAQ,WACR,OAlaiBxE,EAkaQ,SAAUtS,EAAGiM,GAClC,OAAQjM,GAAKwS,EAAQG,eAAe1G,IAnaboI,GAoaxB,IApaShC,EAkaGuE,GAjaf1L,OACGmH,EAAInH,OAAOoH,EAAU+B,IAEhCjC,EAAMC,GAAK,SAAUpG,EAAG7N,EAAG4B,GACvBqU,EAAO/B,EAAS+B,EAAMpI,MAEnBoI,MA6Zc7B,EAAQG,eAAeD,GApalC,IAAUL,EAAKC,EAAU+B,GAsa/B,GAAIyC,IACAN,EAAKA,EAAKnY,OAAS,GAAGoY,EAAcjE,OAEnC,CACD,IAAIuE,EAAW,WACPD,MA1DK,SAAU/E,GAC3B,IAAK,IAAI3T,EAAI,EAAGA,EAAI+X,EAAU9X,OAAQD,GAAK,EACvC,GAAI+X,EAAU/X,KAAO2T,EAEjB,YADAoE,EAAU/R,OAAOhG,EAAG,GAwDhB4Y,CAAeD,GACfP,EAAKA,EAAKnY,OAAS,GAAGoY,EAAcjE,KAG5C4D,EAAYW,QAKxBlF,EAAMoF,MAAQ,SAASC,EAAOV,EAAMzD,GAChC,IACIoE,EAAW,GAEM,mBAAVD,IACPnE,EAAWyD,EACXA,EAAOU,EACPA,EANgB,GASpBA,EAAQ1I,SAAS0I,EAAO,KATJ,EAUpB,IAAIE,EAAc,SAASC,EAAiBC,GAQxC,IAPA,IAAIC,EAAe,SAASf,EAAMgB,GAC9B,OAAO,SAASC,GACZjB,GAAK,SAAStD,EAAKoC,GACfmC,GAAgBvE,GAAOsE,EAAc,CAACtE,IAAKA,EAAKoC,OAAQA,MACzDgC,KAGJJ,GACHC,EAASnU,KAAKuU,EAAaf,IAAQU,GAAO,KAE9CrF,EAAM6F,OAAOP,GAAU,SAASlE,EAAM0E,GAClCA,EAAOA,EAAKA,EAAKtZ,OAAS,IACzBgZ,GAAmBtE,GAAU4E,EAAKzE,IAAKyE,EAAKrC,YAIrD,OAAOvC,EAAWqE,IAAgBA,GAGtCvF,EAAM+F,UAAY,SAAU3B,EAAOlD,GAE/B,GADAA,EAAWA,GAAY,cAClBZ,EAAS8D,GAAQ,CACpB,IAAI/C,EAAM,IAAItO,MAAM,6DACpB,OAAOmO,EAASG,GAElB,IAAK+C,EAAM5X,OACP,OAAO0U,IAEX,IAAI8E,EAAe,SAAUvF,GACzB,OAAO,SAAUY,GACb,GAAIA,EACAH,EAASnR,MAAM,KAAMC,WACrBkR,EAAW,iBAEV,CACD,IAAI3N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CiW,EAAOxF,EAASwF,OAChBA,EACA1S,EAAKpC,KAAK6U,EAAaC,IAGvB1S,EAAKpC,KAAK+P,GAEdlB,EAAMgB,cAAa,WACfP,EAAS1Q,MAAM,KAAMwD,SAKrCyS,EAAahG,EAAMS,SAAS2D,GAA5B4B,IAGJ,IAAIE,EAAY,SAAS/D,EAAQiC,EAAOlD,GAEpC,GADAA,EAAWA,GAAY,aACnBZ,EAAS8D,GACTjC,EAAO7I,IAAI8K,GAAO,SAAUlE,EAAIgB,GACxBhB,GACAA,GAAG,SAAUmB,GACT,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CuD,EAAK/G,QAAU,IACf+G,EAAOA,EAAK,IAEhB2N,EAASxV,KAAK,KAAM2V,EAAK9N,QAGlC2N,OAEF,CACD,IAAIP,EAAU,GACdwB,EAAOlB,KAAKL,EAAMwD,IAAQ,SAAUvD,EAAGK,GACnCkD,EAAMvD,IAAG,SAAUQ,GACf,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CuD,EAAK/G,QAAU,IACf+G,EAAOA,EAAK,IAEhBoN,EAAQE,GAAKtN,EACb2N,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKV,QAK1BX,EAAMmG,SAAW,SAAU/B,EAAOlD,GAC9BgF,EAAU,CAAE5M,IAAK0G,EAAM1G,IAAK2H,KAAMjB,EAAMiB,MAAQmD,EAAOlD,IAG3DlB,EAAMoG,cAAgB,SAAShC,EAAO1C,EAAOR,GACzCgF,EAAU,CAAE5M,IAAKgJ,EAAUZ,GAAQT,KAAMU,EAAWD,IAAU0C,EAAOlD,IAGzElB,EAAM6F,OAAS,SAAUzB,EAAOlD,GAE5B,GADAA,EAAWA,GAAY,aACnBZ,EAAS8D,GACTpE,EAAMoC,UAAUgC,GAAO,SAAUlE,EAAIgB,GAC7BhB,GACAA,GAAG,SAAUmB,GACT,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CuD,EAAK/G,QAAU,IACf+G,EAAOA,EAAK,IAEhB2N,EAASxV,KAAK,KAAM2V,EAAK9N,QAGlC2N,OAEF,CACD,IAAIP,EAAU,GACdX,EAAMsB,WAAWV,EAAMwD,IAAQ,SAAUvD,EAAGK,GACxCkD,EAAMvD,IAAG,SAAUQ,GACf,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CuD,EAAK/G,QAAU,IACf+G,EAAOA,EAAK,IAEhBoN,EAAQE,GAAKtN,EACb2N,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKV,QAK1BX,EAAMS,SAAW,SAAU2D,GACvB,IAAIiC,EAAe,SAAUvY,GACzB,IAAIoS,EAAK,WAIL,OAHIkE,EAAM5X,QACN4X,EAAMtW,GAAOiC,MAAM,KAAMC,WAEtBkQ,EAAG+F,QAKd,OAHA/F,EAAG+F,KAAO,WACN,OAAQnY,EAAQsW,EAAM5X,OAAS,EAAK6Z,EAAavY,EAAQ,GAAI,MAE1DoS,GAEX,OAAOmG,EAAa,IAGxBrG,EAAMjQ,MAAQ,SAAUmQ,GACpB,IAAI3M,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GACjD,OAAO,WACH,OAAOkQ,EAAGnQ,MACN,KAAMwD,EAAKI,OAAOvI,MAAMI,UAAUgI,MAAM9H,KAAKsE,eAKzD,IAAIsW,EAAU,SAAUnE,EAAQ3B,EAAKN,EAAIgB,GACrC,IAAIrL,EAAI,GACRsM,EAAO3B,GAAK,SAAUpG,EAAGmM,GACrBrG,EAAG9F,GAAG,SAAUiH,EAAKmF,GACjB3Q,EAAIA,EAAElC,OAAO6S,GAAK,IAClBD,EAAGlF,SAER,SAAUA,GACTH,EAASG,EAAKxL,OAGtBmK,EAAMrM,OAASqO,EAAWsE,GAC1BtG,EAAMyG,aAAexE,EAASqE,GAE9BtG,EAAM0G,OAAS,SAAUjO,EAAMgI,EAAUS,GACjCzI,IACAgI,GAAS,SAAUY,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpBrB,EAAM0G,OAAOjO,EAAMgI,EAAUS,MAIjCA,KAIRlB,EAAM2G,SAAW,SAAUlG,EAAUhI,EAAMyI,GACvCT,GAAS,SAAUY,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpB,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC7CyI,EAAK1I,MAAM,KAAMwD,GACjByM,EAAM2G,SAASlG,EAAUhI,EAAMyI,GAG/BA,QAKZlB,EAAM4G,MAAQ,SAAUnO,EAAMgI,EAAUS,GAC/BzI,IASDyI,IARAT,GAAS,SAAUY,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpBrB,EAAM4G,MAAMnO,EAAMgI,EAAUS,OAQxClB,EAAM6G,QAAU,SAAUpG,EAAUhI,EAAMyI,GACtCT,GAAS,SAAUY,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpB,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC5CyI,EAAK1I,MAAM,KAAMwD,GAIlB2N,IAHAlB,EAAM6G,QAAQpG,EAAUhI,EAAMyI,OAQ1ClB,EAAM7P,MAAQ,SAAU2W,EAAQC,GAI5B,SAASC,EAAQC,EAAGnB,EAAMoB,EAAKhG,GAO7B,GANK+F,EAAEpF,UACLoF,EAAEpF,SAAU,GAETvB,EAASwF,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAKtZ,OAEL,OAAOwT,EAAMgB,cAAa,WAClBiG,EAAEE,OACFF,EAAEE,WAIb5G,EAAMuF,GAAM,SAASnB,GACjB,IAAI/K,EAAO,CACPkM,KAAMnB,EACNzD,SAA8B,mBAAbA,EAA0BA,EAAW,MAGtDgG,EACFD,EAAE7C,MAAMI,QAAQ5K,GAEhBqN,EAAE7C,MAAMjT,KAAKyI,GAGXqN,EAAEG,WAAaH,EAAE7C,MAAM5X,SAAWya,EAAEF,aACpCE,EAAEG,YAENpH,EAAMgB,aAAaiG,EAAEld,iBAjCPqP,IAAhB2N,IACAA,EAAc,GAoClB,IAAIM,EAAU,EACVJ,EAAI,CACJ7C,MAAO,GACP2C,YAAaA,EACbK,UAAW,KACXE,MAAO,KACPH,MAAO,KACPtF,SAAS,EACT7H,QAAQ,EACR7I,KAAM,SAAU2U,EAAM5E,GACpB8F,EAAQC,EAAGnB,GAAM,EAAO5E,IAE1BqG,KAAM,WACJN,EAAEE,MAAQ,KACVF,EAAE7C,MAAQ,IAEZI,QAAS,SAAUsB,EAAM5E,GACvB8F,EAAQC,EAAGnB,GAAM,EAAM5E,IAEzBnX,QAAS,WACL,IAAKkd,EAAEjN,QAAUqN,EAAUJ,EAAEF,aAAeE,EAAE7C,MAAM5X,OAAQ,CACxD,IAAImY,EAAOsC,EAAE7C,MAAMoD,QACfP,EAAEK,OAA4B,IAAnBL,EAAE7C,MAAM5X,QACnBya,EAAEK,QAEND,GAAW,EACX,IAUId,EAAKtG,GAVE,WACPoH,GAAW,EACP1C,EAAKzD,UACLyD,EAAKzD,SAASnR,MAAM4U,EAAM3U,WAE1BiX,EAAEE,OAASF,EAAE7C,MAAM5X,OAAS6a,IAAY,GACxCJ,EAAEE,QAENF,EAAEld,aAGN+c,EAAOnC,EAAKmB,KAAMS,KAG1B/Z,OAAQ,WACJ,OAAOya,EAAE7C,MAAM5X,QAEnBsV,QAAS,WACL,OAAOuF,GAEXI,KAAM,WACF,OAAOR,EAAE7C,MAAM5X,OAAS6a,IAAY,GAExCK,MAAO,YACc,IAAbT,EAAEjN,SACNiN,EAAEjN,QAAS,EACXiN,EAAEld,YAEN4d,OAAQ,YACa,IAAbV,EAAEjN,SACNiN,EAAEjN,QAAS,EACXiN,EAAEld,aAGV,OAAOkd,GAGXjH,EAAM4H,cAAgB,SAAUd,EAAQC,GAEpC,SAASc,EAAc1Z,EAAGC,GACxB,OAAOD,EAAE2Z,SAAW1Z,EAAE0Z,SAiDxB,IAAIb,EAAIjH,EAAM7P,MAAM2W,EAAQC,GAU5B,OAPAE,EAAE9V,KAAO,SAAU2U,EAAMgC,EAAU5G,IAnCnC,SAAiB+F,EAAGnB,EAAMgC,EAAU5G,GAOlC,GANK+F,EAAEpF,UACLoF,EAAEpF,SAAU,GAETvB,EAASwF,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAKtZ,OAEL,OAAOwT,EAAMgB,cAAa,WAClBiG,EAAEE,OACFF,EAAEE,WAIb5G,EAAMuF,GAAM,SAASnB,GACjB,IAAI/K,EAAO,CACPkM,KAAMnB,EACNmD,SAAUA,EACV5G,SAA8B,mBAAbA,EAA0BA,EAAW,MAG1D+F,EAAE7C,MAAM7R,OApCd,SAAuBwV,EAAUnO,EAAMoO,GAGrC,IAFA,IAAIC,GAAO,EACPC,EAAMH,EAASvb,OAAS,EACrByb,EAAMC,GAAK,CAChB,IAAIC,EAAMF,GAAQC,EAAMD,EAAM,IAAO,GACjCD,EAAQpO,EAAMmO,EAASI,KAAS,EAClCF,EAAME,EAEND,EAAMC,EAAM,EAGhB,OAAOF,EAyBYG,CAAcnB,EAAE7C,MAAOxK,EAAMiO,GAAiB,EAAG,EAAGjO,GAE/DqN,EAAEG,WAAaH,EAAE7C,MAAM5X,SAAWya,EAAEF,aACpCE,EAAEG,YAENpH,EAAMgB,aAAaiG,EAAEld,YASzBid,CAAQC,EAAGnB,EAAMgC,EAAU5G,WAItB+F,EAAEzC,QAEFyC,GAGXjH,EAAMqI,MAAQ,SAAUvB,EAAQwB,GAC5B,IAAIC,GAAc,EACdnE,EAAc,GAEdiE,EAAQ,CACRjE,MAAOA,EACPkE,QAASA,EACTlB,UAAW,KACXE,MAAO,KACPH,MAAO,KACPqB,SAAS,EACTrX,KAAM,SAAU2U,EAAM5E,GACbZ,EAASwF,KACVA,EAAO,CAACA,IAEZvF,EAAMuF,GAAM,SAASnB,GACjBP,EAAMjT,KAAK,CACP2U,KAAMnB,EACNzD,SAA8B,mBAAbA,EAA0BA,EAAW,OAE1DmH,EAAMG,SAAU,EACZH,EAAMjB,WAAahD,EAAM5X,SAAW8b,GACpCD,EAAMjB,eAGdpH,EAAMgB,aAAaqH,EAAMte,UAE7BA,QAAS,SAASA,IACd,IAAIwe,EAAJ,CACA,GAAqB,IAAjBnE,EAAM5X,OAGN,OAFG6b,EAAMlB,QAAUkB,EAAMG,SAASH,EAAMlB,aACxCkB,EAAMG,SAAU,GAIpB,IAAIC,EAAwB,iBAAZH,EACFlE,EAAM7R,OAAO,EAAG+V,GAChBlE,EAAM7R,OAAO,EAAG6R,EAAM5X,QAEhCkc,EAAKhI,EAAK+H,GAAI,SAAU9D,GACxB,OAAOA,EAAKmB,QAGbuC,EAAMf,OAAOe,EAAMf,QACtBiB,GAAU,EACVzB,EAAO4B,GAAI,WACPH,GAAU,EAEV,IAAIhV,EAAOvD,UACXuQ,EAAMkI,GAAI,SAAU3C,GACZA,EAAK5E,UACL4E,EAAK5E,SAASnR,MAAM,KAAMwD,MAIlCxJ,SAGRyC,OAAQ,WACJ,OAAO4X,EAAM5X,QAEjBsV,QAAS,WACL,OAAOyG,IAGf,OAAOF,GAGX,IAAIM,EAAc,SAAUxT,GACxB,OAAO,SAAU+K,GACb,IAAI3M,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GACjDkQ,EAAGnQ,MAAM,KAAMwD,EAAKI,OAAO,CAAC,SAAU0N,GAClC,IAAI9N,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GAC1B,oBAAZgC,UACHqP,EACIrP,QAAQvB,OACRuB,QAAQvB,MAAM4Q,GAGbrP,QAAQmD,IACboL,EAAMhN,GAAM,SAAU6G,GAClBpI,QAAQmD,GAAMiF,aAOtC4F,EAAM5M,IAAMuV,EAAY,OACxB3I,EAAM4I,IAAMD,EAAY,OAKxB3I,EAAM6I,QAAU,SAAU3I,EAAI4I,GAC1B,IAAItG,EAAO,GACPuG,EAAS,GACbD,EAASA,GAAU,SAAU1O,GACzB,OAAOA,GAEX,IAAI4O,EAAW,WACX,IAAIzV,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WAClCkR,EAAW3N,EAAK0V,MAChB9R,EAAM2R,EAAO/Y,MAAM,KAAMwD,GACzB4D,KAAOqL,EACPxC,EAAMe,UAAS,WACXG,EAASnR,MAAM,KAAMyS,EAAKrL,OAGzBA,KAAO4R,EACZA,EAAO5R,GAAKhG,KAAK+P,IAGjB6H,EAAO5R,GAAO,CAAC+J,GACfhB,EAAGnQ,MAAM,KAAMwD,EAAKI,OAAO,CAAC,WACxB6O,EAAKrL,GAAOnH,UACZ,IAAIiX,EAAI8B,EAAO5R,UACR4R,EAAO5R,GACd,IAAK,IAAI5K,EAAI,EAAGsH,EAAIoT,EAAEza,OAAQD,EAAIsH,EAAGtH,IACnC0a,EAAE1a,GAAGwD,MAAM,KAAMC,iBAO/B,OAFAgZ,EAASxG,KAAOA,EAChBwG,EAASE,WAAahJ,EACf8I,GAGXhJ,EAAMmJ,UAAY,SAAUjJ,GAC1B,OAAO,WACL,OAAQA,EAAGgJ,YAAchJ,GAAInQ,MAAM,KAAMC,aAI7CgQ,EAAMqF,MAAQ,SAAUnU,EAAOuP,EAAUS,GAErC,IADA,IAAIkI,EAAU,GACL7c,EAAI,EAAGA,EAAI2E,EAAO3E,IACvB6c,EAAQjY,KAAK5E,GAEjB,OAAOyT,EAAM1G,IAAI8P,EAAS3I,EAAUS,IAGxClB,EAAMqJ,YAAc,SAAUnY,EAAOuP,EAAUS,GAE3C,IADA,IAAIkI,EAAU,GACL7c,EAAI,EAAGA,EAAI2E,EAAO3E,IACvB6c,EAAQjY,KAAK5E,GAEjB,OAAOyT,EAAMoC,UAAUgH,EAAS3I,EAAUS,IAG9ClB,EAAMsJ,IAAM,WACR,IAAIC,EAAMvZ,UACV,OAAO,WACH,IAAIwZ,EAAOvc,KACPsG,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WAClCkR,EAAW3N,EAAK0V,MACpBjJ,EAAM3G,OAAOkQ,EAAKhW,GAAM,SAAUkW,EAASvJ,EAAIqG,GAC3CrG,EAAGnQ,MAAMyZ,EAAMC,EAAQ9V,OAAO,CAAC,WAC3B,IAAI0N,EAAMrR,UAAU,GAChB0Z,EAAWte,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GACrDuW,EAAGlF,EAAKqI,UAGhB,SAAUrI,EAAKV,GACXO,EAASnR,MAAMyZ,EAAM,CAACnI,GAAK1N,OAAOgN,SAK9CX,EAAM2J,QAAU,WACd,OAAO3J,EAAMsJ,IAAIvZ,MAAM,KAAM3E,MAAMI,UAAUqX,QAAQnX,KAAKsE,aAG5D,IAAI4Z,EAAa,SAAUzH,EAAQoH,GAC/B,IAAIM,EAAK,WACL,IAAIL,EAAOvc,KACPsG,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,WAClCkR,EAAW3N,EAAK0V,MACpB,OAAO9G,EAAOoH,GAAK,SAAUrJ,EAAIqG,GAC7BrG,EAAGnQ,MAAMyZ,EAAMjW,EAAKI,OAAO,CAAC4S,OAEhCrF,IAEJ,GAAIlR,UAAUxD,OAAS,EAAG,CACtB,IAAI+G,EAAOnI,MAAMI,UAAUgI,MAAM9H,KAAKsE,UAAW,GACjD,OAAO6Z,EAAG9Z,MAAM9C,KAAMsG,GAGtB,OAAOsW,GAGf7J,EAAM8J,UAAY9H,EAAW4H,GAC7B5J,EAAM+J,gBAAkB9H,EAAS2H,GAEjC5J,EAAMgK,QAAU,SAAU9J,EAAIgB,IAC1B,SAAS+E,EAAK5E,GACV,GAAIA,EAAK,CACL,GAAIH,EACA,OAAOA,EAASG,GAEpB,MAAMA,EAEVnB,EAAG+F,GAEPA,IAIiC7c,EAAOD,QACxCC,EAAOD,QAAU6W,OAIX,kBACF,OAAOA,GADL,QAAC,OAAD,aAhlCb,6BCPD7W,EAAQ8gB,WAuCR,SAAqBC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,GA1ClDnhB,EAAQohB,YAiDR,SAAsBL,GACpB,IAAIM,EAcAje,EAbA4d,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvB3J,EAAM,IAAIiK,EAVhB,SAAsBP,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,EAS9BI,CAAYR,EAAKG,EAAUC,IAEzCK,EAAU,EAGV/Z,EAAM0Z,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK9d,EAAI,EAAGA,EAAIqE,EAAKrE,GAAK,EACxBie,EACGI,EAAUV,EAAInc,WAAWxB,KAAO,GAChCqe,EAAUV,EAAInc,WAAWxB,EAAI,KAAO,GACpCqe,EAAUV,EAAInc,WAAWxB,EAAI,KAAO,EACrCqe,EAAUV,EAAInc,WAAWxB,EAAI,IAC/BiU,EAAImK,KAAcH,GAAO,GAAM,IAC/BhK,EAAImK,KAAcH,GAAO,EAAK,IAC9BhK,EAAImK,KAAmB,IAANH,EAmBnB,OAhBwB,IAApBF,IACFE,EACGI,EAAUV,EAAInc,WAAWxB,KAAO,EAChCqe,EAAUV,EAAInc,WAAWxB,EAAI,KAAO,EACvCiU,EAAImK,KAAmB,IAANH,GAGK,IAApBF,IACFE,EACGI,EAAUV,EAAInc,WAAWxB,KAAO,GAChCqe,EAAUV,EAAInc,WAAWxB,EAAI,KAAO,EACpCqe,EAAUV,EAAInc,WAAWxB,EAAI,KAAO,EACvCiU,EAAImK,KAAcH,GAAO,EAAK,IAC9BhK,EAAImK,KAAmB,IAANH,GAGZhK,GA3FTrX,EAAQ0hB,cAkHR,SAAwBC,GAQtB,IAPA,IAAIN,EACA5Z,EAAMka,EAAMte,OACZue,EAAana,EAAM,EACnB4I,EAAQ,GACRwR,EAAiB,MAGZze,EAAI,EAAG0e,EAAOra,EAAMma,EAAYxe,EAAI0e,EAAM1e,GAAKye,EACtDxR,EAAMrI,KAAK+Z,EACTJ,EAAOve,EAAIA,EAAIye,EAAkBC,EAAOA,EAAQ1e,EAAIye,IAsBxD,OAjBmB,IAAfD,GACFP,EAAMM,EAAMla,EAAM,GAClB4I,EAAMrI,KACJga,EAAOX,GAAO,GACdW,EAAQX,GAAO,EAAK,IACpB,OAEsB,IAAfO,IACTP,GAAOM,EAAMla,EAAM,IAAM,GAAKka,EAAMla,EAAM,GAC1C4I,EAAMrI,KACJga,EAAOX,GAAO,IACdW,EAAQX,GAAO,EAAK,IACpBW,EAAQX,GAAO,EAAK,IACpB,MAIGhR,EAAMyB,KAAK,KA3IpB,IALA,IAAIkQ,EAAS,GACTP,EAAY,GACZH,EAA4B,oBAAfvf,WAA6BA,WAAaE,MAEvDyC,EAAO,mEACFtB,EAAI,EAAGqE,EAAM/C,EAAKrB,OAAQD,EAAIqE,IAAOrE,EAC5C4e,EAAO5e,GAAKsB,EAAKtB,GACjBqe,EAAU/c,EAAKE,WAAWxB,IAAMA,EAQlC,SAAS6d,EAASF,GAChB,IAAItZ,EAAMsZ,EAAI1d,OAEd,GAAIoE,EAAM,EAAI,EACZ,MAAM,IAAImC,MAAM,kDAKlB,IAAIsX,EAAWH,EAAI9X,QAAQ,KAO3B,OANkB,IAAdiY,IAAiBA,EAAWzZ,GAMzB,CAACyZ,EAJcA,IAAazZ,EAC/B,EACA,EAAKyZ,EAAW,GAsEtB,SAASa,EAAaJ,EAAOxd,EAAO4a,GAGlC,IAFA,IAAIsC,EARoBY,EASpBC,EAAS,GACJ9e,EAAIe,EAAOf,EAAI2b,EAAK3b,GAAK,EAChCie,GACIM,EAAMve,IAAM,GAAM,WAClBue,EAAMve,EAAI,IAAM,EAAK,QACP,IAAfue,EAAMve,EAAI,IACb8e,EAAOla,KAdFga,GADiBC,EAeMZ,IAdT,GAAK,IACxBW,EAAOC,GAAO,GAAK,IACnBD,EAAOC,GAAO,EAAI,IAClBD,EAAa,GAANC,IAaT,OAAOC,EAAOpQ,KAAK,IAjGrB2P,EAAU,IAAI7c,WAAW,IAAM,GAC/B6c,EAAU,IAAI7c,WAAW,IAAM,qBCnBkC3E,EAAOD,QAAiJ,SAASuM,GAAG,IAAI9B,EAAE,GAAG,SAASiC,EAAEtJ,GAAG,GAAGqH,EAAErH,GAAG,OAAOqH,EAAErH,GAAGpD,QAAQ,IAAIoR,EAAE3G,EAAErH,GAAG,CAACA,EAAIsH,GAAE,EAAG1K,QAAQ,IAAI,OAAOuM,EAAEnJ,GAAGb,KAAK6O,EAAEpR,QAAQoR,EAAEA,EAAEpR,QAAQ0M,GAAG0E,EAAE1G,GAAE,EAAG0G,EAAEpR,QAAQ,OAAO0M,EAAE5C,EAAEyC,EAAEG,EAAExH,EAAEuF,EAAEiC,EAAEvH,EAAE,SAASoH,EAAE9B,EAAErH,GAAGsJ,EAAER,EAAEK,EAAE9B,IAAIrI,OAAO+f,eAAe5V,EAAE9B,EAAE,CAAC2X,YAAW,EAAGC,IAAIjf,KAAKsJ,EAAEA,EAAE,SAASH,GAAG,oBAAoB+V,QAAQA,OAAOC,aAAangB,OAAO+f,eAAe5V,EAAE+V,OAAOC,YAAY,CAAChV,MAAM,WAAWnL,OAAO+f,eAAe5V,EAAE,aAAa,CAACgB,OAAM,KAAMb,EAAEjC,EAAE,SAAS8B,EAAE9B,GAAG,GAAG,EAAEA,IAAI8B,EAAEG,EAAEH,IAAI,EAAE9B,EAAE,OAAO8B,EAAE,GAAG,EAAE9B,GAAG,iBAAiB8B,GAAGA,GAAGA,EAAEiW,WAAW,OAAOjW,EAAE,IAAInJ,EAAEhB,OAAOe,OAAO,MAAM,GAAGuJ,EAAEA,EAAEtJ,GAAGhB,OAAO+f,eAAe/e,EAAE,UAAU,CAACgf,YAAW,EAAG7U,MAAMhB,IAAI,EAAE9B,GAAG,iBAAiB8B,EAAE,IAAI,IAAI6E,KAAK7E,EAAEG,EAAEvH,EAAE/B,EAAEgO,EAAE,SAAS3G,GAAG,OAAO8B,EAAE9B,IAAI3D,KAAK,KAAKsK,IAAI,OAAOhO,GAAGsJ,EAAE0E,EAAE,SAAS7E,GAAG,IAAI9B,EAAE8B,GAAGA,EAAEiW,WAAW,WAAW,OAAOjW,EAAEkW,SAAS,WAAW,OAAOlW,GAAG,OAAOG,EAAEvH,EAAEsF,EAAE,IAAIA,GAAGA,GAAGiC,EAAER,EAAE,SAASK,EAAE9B,GAAG,OAAOrI,OAAOC,UAAUsV,eAAepV,KAAKgK,EAAE9B,IAAIiC,EAAEF,EAAE,GAAGE,EAAEA,EAAEL,EAAE,IAAj5B,CAAs5B,CAAC,GAAG,SAASE,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEsJ,EAAE,IAAI0E,EAAE,WAAW,SAAS7E,KAAK,OAAOA,EAAEmW,cAAc,SAASnW,EAAE9B,GAAG,IAAIiC,EAAEjC,EAAEV,MAAMwC,GAAG,OAAOG,GAAGA,EAAErJ,OAAO,GAAGqJ,EAAE,IAAI,IAAIH,EAAEoW,eAAe,SAASpW,EAAE9B,GAAG,IAAIiC,EAAEjC,EAAEV,MAAMwC,GAAG,OAAOG,GAAGA,EAAErJ,OAAO,GAAGqJ,EAAE,IAAI,IAAIH,EAAEqW,oBAAoB,SAASrW,EAAE9B,EAAEiC,GAAG,GAAGH,EAAE+C,KAAK7E,GAAG,OAAOiC,GAAGH,EAAEsW,sBAAsB,SAAStW,GAAG,OAAOA,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAA0C,IAAI,SAAS,MAAM,KAA7C,IAAI,SAAS,MAAM,OAA+B,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,MAAM,IAAI,UAAU,MAAM,KAAK,QAAQ,SAASA,EAAEuW,oBAAoB,SAASvW,GAAG,IAAI9B,EAAE8B,EAAEhL,MAAM,KAAK6H,OAAO,EAAE,GAAG+G,KAAK,SAAS5D,GAAG,OAAOiH,SAASjH,EAAE,KAAK,KAAK,GAAG9B,EAAEzC,KAAK,GAAG,KAAKyC,EAAE,GAAG,OAAOA,EAAE,IAAI,KAAK,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM,eAAe,KAAK,EAAE,MAAM,OAAO,KAAK,EAAE,MAAM,gBAAgB,KAAK,EAAE,MAAM,YAAY,KAAK,GAAG,MAAM,WAAW,KAAK,GAAG,MAAM,aAAa,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,WAAW,QAAQ,SAAS8B,EAAEwW,sBAAsB,SAASxW,GAAG,IAAI9B,EAAE8B,EAAEhL,MAAM,KAAK6H,OAAO,EAAE,GAAG+G,KAAK,SAAS5D,GAAG,OAAOiH,SAASjH,EAAE,KAAK,KAAK,GAAG9B,EAAEzC,KAAK,KAAK,IAAIyC,EAAE,IAAIA,EAAE,GAAG,GAAG,OAAO,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,UAAU,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,SAAS,IAAIA,EAAE,IAAI,IAAIA,EAAE,GAAG,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,cAAc,IAAIA,EAAE,GAAG,YAAY,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,qBAAqB,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,aAAa,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,SAAS,IAAIA,EAAE,GAAG,WAAW,IAAIA,EAAE,GAAG,cAAc,IAAIA,EAAE,GAAG,SAAS,IAAIA,EAAE,GAAG,OAAO,IAAIA,EAAE,GAAG,WAAM,GAAQ8B,EAAEyW,oBAAoB,SAASzW,GAAG,OAAOA,EAAEhL,MAAM,KAAK8B,QAAQkJ,EAAE0W,gBAAgB,SAASxY,EAAEiC,EAAEtJ,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIgO,EAAE7E,EAAEyW,oBAAoBvY,GAAG4B,EAAEE,EAAEyW,oBAAoBtW,GAAGR,EAAE6I,KAAKmO,IAAI9R,EAAE/E,GAAGrH,EAAE,EAAEsH,EAAEC,EAAE4D,IAAI,CAAC1F,EAAEiC,IAAI,SAASjC,GAAG,IAAIiC,EAAER,EAAEK,EAAEyW,oBAAoBvY,GAAGrH,EAAEqH,EAAE,IAAIxI,MAAMyK,EAAE,GAAGoF,KAAK,MAAM,OAAOvF,EAAE4D,IAAI/M,EAAE7B,MAAM,MAAM,SAASgL,GAAG,OAAO,IAAItK,MAAM,GAAGsK,EAAElJ,QAAQyO,KAAK,KAAKvF,KAAKmN,aAAa,IAAItW,IAAI4B,EAAEkH,EAAE6I,KAAKoO,IAAI/R,EAAE/E,IAAIH,GAAG,EAAEA,GAAGlH,GAAG,CAAC,GAAGsH,EAAE,GAAGJ,GAAGI,EAAE,GAAGJ,GAAG,OAAO,EAAE,GAAGI,EAAE,GAAGJ,KAAKI,EAAE,GAAGJ,GAAG,CAAC,GAAGA,IAAIlH,EAAE,OAAO,EAAEkH,GAAG,OAAO,GAAGI,EAAE,GAAGJ,GAAGI,EAAE,GAAGJ,GAAG,OAAO,IAAIK,EAAE4D,IAAI,SAAS5D,EAAE9B,GAAG,IAAIiC,EAAEtJ,EAAE,GAAG,GAAGnB,MAAMI,UAAU8N,IAAI,OAAOlO,MAAMI,UAAU8N,IAAI5N,KAAKgK,EAAE9B,GAAG,IAAIiC,EAAE,EAAEA,EAAEH,EAAElJ,OAAOqJ,GAAG,EAAEtJ,EAAE4E,KAAKyC,EAAE8B,EAAEG,KAAK,OAAOtJ,GAAGmJ,EAAE6W,gBAAgB,SAAS7W,GAAG,OAAOnJ,EAAEigB,oBAAoB9W,IAAIA,EAAE+W,sBAAsB,SAAS/W,GAAG,OAAOnJ,EAAEmgB,YAAYhX,IAAI,IAAIA,EAAtvE,GAA2vE9B,EAAEgY,QAAQrR,EAAE7E,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAE+Y,WAAW/Y,EAAEgZ,OAAOhZ,EAAEiZ,cAAcjZ,EAAE8Y,YAAY9Y,EAAE4Y,yBAAoB,EAAO5Y,EAAE4Y,oBAAoB,CAAC,cAAc,cAAc,kBAAkB,UAAUM,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAU,gBAAgB,gBAAgBC,UAAU,YAAY,oBAAoB,KAAK,WAAW,WAAWC,QAAQ,UAAU,iBAAiB,OAAO,aAAa,KAAK,sBAAsB,QAAQC,MAAM,QAAQ,cAAc,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,KAAKC,OAAO,SAASC,OAAO,SAASC,SAAS,WAAW,+BAA+B,mBAAmBC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQ,aAAa,KAAKC,QAAQ,UAAU,gBAAgB,QAAQC,OAAO,SAAS,iBAAiB,SAASC,KAAK,QAAQ1a,EAAE8Y,YAAY,CAAC6B,YAAY,cAAcC,QAAQ,kBAAkBC,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAUC,UAAU,YAAYC,cAAc,gBAAgBC,GAAG,oBAAoBC,SAAS,WAAWC,QAAQ,UAAUC,KAAK,iBAAiBC,GAAG,aAAaC,MAAM,sBAAsBC,MAAM,QAAQC,YAAY,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,aAAaC,OAAO,kBAAkBC,OAAO,SAASC,SAAS,WAAWC,iBAAiB,+BAA+BC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQC,GAAG,aAAaC,QAAQ,UAAUC,MAAM,gBAAgBC,OAAO,SAASC,OAAO,kBAAkB/c,EAAEiZ,cAAc,CAAC+D,OAAO,SAASC,OAAO,SAASC,QAAQ,UAAUC,GAAG,MAAMnd,EAAEgZ,OAAO,CAACoE,aAAa,gBAAgBC,QAAQ,UAAUC,MAAM,QAAQC,IAAI,MAAMC,QAAQ,UAAUC,MAAM,QAAQtE,WAAW,aAAaD,KAAK,OAAOqB,MAAM,QAAQmD,MAAM,QAAQC,SAAS,YAAYC,aAAa,gBAAgBlD,KAAK,QAAQ1a,EAAE+Y,WAAW,CAAC8E,SAAS,WAAWC,MAAM,QAAQC,QAAQ,UAAUC,OAAO,SAASC,MAAM,QAAQC,OAAO,WAAW,GAAG,SAASpc,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEgO,GAAGhO,EAAEsJ,EAAE,MAAMtJ,EAAEof,WAAWpf,EAAE,CAACqf,QAAQrf,GAAGiJ,EAAEK,EAAE,IAAI,SAASR,EAAEK,EAAE9B,GAAG,IAAI,IAAIiC,EAAE,EAAEA,EAAEjC,EAAEpH,OAAOqJ,IAAI,CAAC,IAAItJ,EAAEqH,EAAEiC,GAAGtJ,EAAEgf,WAAWhf,EAAEgf,aAAY,EAAGhf,EAAEwlB,cAAa,EAAG,UAAUxlB,IAAIA,EAAEylB,UAAS,GAAIzmB,OAAO+f,eAAe5V,EAAEnJ,EAAE4K,IAAI5K,IAAI,IAAI4B,EAAE,WAAW,SAASuH,KAAK,IAAI9B,EAAIrH,EAAE,OAAOmJ,EAAEuc,UAAU,SAASvc,EAAE9B,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,iBAAiB8B,EAAE,MAAM,IAAI3C,MAAM,gCAAgC,OAAO,IAAIwH,EAAEqR,QAAQlW,EAAE9B,IAAI8B,EAAE6B,MAAM,SAAS7B,GAAG,OAAO,IAAI6E,EAAEqR,QAAQlW,GAAGwc,aAAate,EAAE8B,EAAEnJ,EAAE,CAAC,CAAC4K,IAAI,cAAcqU,IAAI,WAAW,OAAOhW,EAAEkX,cAAc,CAACvV,IAAI,aAAaqU,IAAI,WAAW,OAAOhW,EAAEmX,aAAa,CAACxV,IAAI,SAASqU,IAAI,WAAW,OAAOhW,EAAEoX,SAAS,CAACzV,IAAI,gBAAgBqU,IAAI,WAAW,OAAOhW,EAAEqX,iBAAoB,MAAOxX,EAAEzB,EAAEpI,UAAX,MAAwBe,GAAG8I,EAAEzB,EAAErH,GAAGmJ,EAA1f,GAA+f9B,EAAEgY,QAAQzd,EAAEuH,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEkJ,EAAEI,EAAE,KAAK0E,EAAE9E,EAAEI,EAAE,KAAKL,EAAEC,EAAEI,EAAE,KAAKR,EAAEI,EAAEI,EAAE,KAAK1H,EAAEsH,EAAEI,EAAE,KAAK,SAASJ,EAAEC,GAAG,OAAOA,GAAGA,EAAEiW,WAAWjW,EAAE,CAACkW,QAAQlW,GAAG,IAAIpH,EAAE,WAAW,SAASoH,EAAEA,EAAE9B,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,MAAM8B,GAAG,KAAKA,EAAE,MAAM,IAAI3C,MAAM,sCAAsC9F,KAAKklB,IAAIzc,EAAEzI,KAAKmlB,aAAa,IAAG,IAAKxe,GAAG3G,KAAKsK,QAAQ,IAAI3D,EAAE8B,EAAElK,UAAU,OAAOoI,EAAEye,MAAM,WAAW,OAAOplB,KAAKklB,KAAKve,EAAE6E,KAAK,SAAS/C,GAAG,OAAOA,EAAE+C,KAAKxL,KAAKklB,MAAMve,EAAE0e,aAAa,WAAW,IAAI5c,EAAEzI,KAAKA,KAAKmlB,aAAaG,QAAQ,GAAG,IAAI3e,EAAErH,EAAEqf,QAAQrP,MAAM,SAAS3I,GAAG,GAAG,mBAAmBA,EAAE6E,KAAK,OAAO7E,EAAE6E,KAAK/C,GAAG,GAAG9B,EAAE6E,gBAAgBrN,MAAM,OAAOwI,EAAE6E,KAAK+G,MAAM,SAAS5L,GAAG,OAAO8B,EAAE+C,KAAK7E,MAAM,MAAM,IAAIb,MAAM,2CAA2C,OAAOa,IAAI3G,KAAKmlB,aAAaG,QAAQ3e,EAAE4e,SAASvlB,KAAKolB,UAAUplB,KAAKmlB,aAAaG,SAAS3e,EAAE6e,WAAW,WAAW,OAAOxlB,KAAKmlB,aAAaG,QAAQtlB,KAAKmlB,aAAaG,QAAQtlB,KAAKqlB,gBAAgB1e,EAAE8e,eAAe,SAAShd,GAAG,OAAOA,EAAEqC,OAAO9K,KAAKwlB,aAAatd,MAAMwd,eAAe,GAAG1lB,KAAKwlB,aAAatd,MAAM,IAAIvB,EAAEgf,kBAAkB,WAAW,OAAO3lB,KAAKwlB,aAAa9X,SAAS/G,EAAEif,MAAM,WAAW,OAAO5lB,KAAKmlB,aAAaU,GAAG7lB,KAAKmlB,aAAaU,GAAG7lB,KAAK8lB,WAAWnf,EAAEmf,QAAQ,WAAW,IAAIrd,EAAEzI,KAAKA,KAAKmlB,aAAaU,GAAG,GAAG,IAAIlf,EAAE2G,EAAEqR,QAAQrP,MAAM,SAAS3I,GAAG,GAAG,mBAAmBA,EAAE6E,KAAK,OAAO7E,EAAE6E,KAAK/C,GAAG,GAAG9B,EAAE6E,gBAAgBrN,MAAM,OAAOwI,EAAE6E,KAAK+G,MAAM,SAAS5L,GAAG,OAAO8B,EAAE+C,KAAK7E,MAAM,MAAM,IAAIb,MAAM,2CAA2C,OAAOa,IAAI3G,KAAKmlB,aAAaU,GAAGlf,EAAE4e,SAASvlB,KAAKolB,UAAUplB,KAAKmlB,aAAaU,IAAIlf,EAAEof,UAAU,SAAStd,GAAG,IAAI9B,EAAE3G,KAAK4lB,QAAQ1d,KAAK,OAAOO,EAAEqC,OAAOnE,GAAG+e,eAAe,GAAG/e,GAAG,IAAIA,EAAEqf,aAAa,WAAW,OAAOhmB,KAAK4lB,QAAQlY,SAAS/G,EAAEsf,YAAY,WAAW,OAAOjmB,KAAKmlB,aAAae,SAASlmB,KAAKmlB,aAAae,SAASlmB,KAAKmmB,iBAAiBxf,EAAEyf,gBAAgB,SAAS3d,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAI9B,EAAE3G,KAAKimB,cAAczmB,KAAK,OAAOiJ,EAAEqC,OAAOnE,GAAG+e,eAAe,GAAG/e,GAAG,IAAIA,EAAEwf,cAAc,WAAW,IAAI1d,EAAEzI,KAAKA,KAAKmlB,aAAae,SAAS,GAAG,IAAIvf,EAAE4B,EAAEoW,QAAQrP,MAAM,SAAS3I,GAAG,GAAG,mBAAmBA,EAAE6E,KAAK,OAAO7E,EAAE6E,KAAK/C,GAAG,GAAG9B,EAAE6E,gBAAgBrN,MAAM,OAAOwI,EAAE6E,KAAK+G,MAAM,SAAS5L,GAAG,OAAO8B,EAAE+C,KAAK7E,MAAM,MAAM,IAAIb,MAAM,2CAA2C,OAAOa,IAAI3G,KAAKmlB,aAAae,SAASvf,EAAE4e,SAASvlB,KAAKolB,UAAUplB,KAAKmlB,aAAae,UAAUvf,EAAE0f,UAAU,WAAW,OAAOrmB,KAAKmlB,aAAamB,OAAOtmB,KAAKmlB,aAAamB,OAAOtmB,KAAKumB,eAAe5f,EAAE6f,cAAc,SAAS/d,GAAG,OAAOA,EAAEqC,OAAO9K,KAAKqmB,YAAYne,MAAMwd,eAAe,GAAG1lB,KAAKqmB,YAAYne,MAAM,IAAIvB,EAAE4f,YAAY,WAAW,IAAI9d,EAAEzI,KAAKA,KAAKmlB,aAAamB,OAAO,GAAG,IAAI3f,EAAEyB,EAAEuW,QAAQrP,MAAM,SAAS3I,GAAG,GAAG,mBAAmBA,EAAE6E,KAAK,OAAO7E,EAAE6E,KAAK/C,GAAG,GAAG9B,EAAE6E,gBAAgBrN,MAAM,OAAOwI,EAAE6E,KAAK+G,MAAM,SAAS5L,GAAG,OAAO8B,EAAE+C,KAAK7E,MAAM,MAAM,IAAIb,MAAM,2CAA2C,OAAOa,IAAI3G,KAAKmlB,aAAamB,OAAO3f,EAAE4e,SAASvlB,KAAKolB,UAAUplB,KAAKmlB,aAAamB,QAAQ3f,EAAE2D,MAAM,WAAW,OAAOtK,KAAKqlB,eAAerlB,KAAK8lB,UAAU9lB,KAAKmmB,gBAAgBnmB,KAAKumB,cAAcvmB,MAAM2G,EAAEse,UAAU,WAAW,OAAO3mB,OAAOmoB,OAAO,GAAGzmB,KAAKmlB,eAAexe,EAAE+f,UAAU,SAASje,GAAG,IAAI9B,EAAE3G,KAAK4I,EAAE,GAAGtJ,EAAE,EAAEgO,EAAE,GAAG/E,EAAE,EAAE,GAAGjK,OAAOmE,KAAKgG,GAAG9F,SAAS,SAASgE,GAAG,IAAIyB,EAAEK,EAAE9B,GAAG,iBAAiByB,GAAGkF,EAAE3G,GAAGyB,EAAEG,GAAG,GAAG,iBAAiBH,IAAIQ,EAAEjC,GAAGyB,EAAE9I,GAAG,MAAMA,EAAE,EAAE,CAAC,IAAI8I,EAAE9J,OAAOmE,KAAKmG,GAAG1H,EAAEkH,EAAEkH,MAAM,SAAS7G,GAAG,OAAO9B,EAAEggB,KAAKle,MAAM,GAAGvH,EAAE,CAAC,IAAIsH,EAAExI,KAAK0mB,UAAU9d,EAAE1H,IAAI,QAAG,IAASsH,EAAE,OAAOA,EAAE,IAAInH,EAAE+G,EAAEkH,MAAM,SAAS7G,GAAG,OAAO9B,EAAEigB,WAAWne,MAAM,GAAGpH,EAAE,CAAC,IAAID,EAAEpB,KAAK0mB,UAAU9d,EAAEvH,IAAI,QAAG,IAASD,EAAE,OAAOA,GAAG,GAAGmH,EAAE,EAAE,CAAC,IAAIse,EAAEvoB,OAAOmE,KAAK6K,GAAGgC,MAAM,SAAS7G,GAAG,OAAO9B,EAAEmgB,UAAUre,GAAE,MAAO,QAAG,IAASoe,EAAE,OAAO7mB,KAAK+mB,eAAezZ,EAAEuZ,MAAMlgB,EAAEmgB,UAAU,SAASre,EAAE9B,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIiC,EAAE5I,KAAKylB,iBAAiBC,cAAcpmB,EAAEmJ,EAAEid,cAAcpY,EAAEpM,EAAEyd,QAAQa,sBAAsBlgB,GAAG,OAAOqH,GAAG2G,IAAIhO,EAAEgO,EAAEoY,eAAepmB,IAAIsJ,GAAGjC,EAAEogB,eAAe,SAASte,GAAG,IAAI9B,EAAE,CAAC,GAAGiC,EAAEH,EAAEnJ,GAAE,EAAGgO,EAAEtN,KAAK2lB,oBAAoB,GAAG,iBAAiBrY,EAAE,MAAM,MAAM7E,EAAE,IAAI,MAAMA,EAAE,IAAIG,EAAEH,EAAEvC,OAAO,GAAG,MAAMuC,EAAE,IAAInJ,GAAE,EAAGsJ,EAAEH,EAAEvC,OAAO,IAAIS,EAAE,GAAG,MAAM8B,EAAE,GAAG9B,EAAEzC,KAAK,GAAGyC,EAAEzC,MAAM,IAAI,MAAMuE,EAAE,GAAGG,EAAEH,EAAEvC,OAAO,GAAG,MAAMuC,EAAE,KAAKnJ,GAAE,EAAGsJ,EAAEH,EAAEvC,OAAO,IAAIS,EAAExB,QAAQjE,EAAEyd,QAAQQ,gBAAgB7R,EAAE1E,EAAEtJ,KAAK,GAAGqH,EAAEggB,KAAK,SAASle,GAAG,OAAOzI,KAAK+lB,WAAU,KAAMjb,OAAOrC,GAAGid,eAAe/e,EAAEigB,WAAW,SAASne,GAAG,OAAOzI,KAAKomB,iBAAgB,KAAMtb,OAAOrC,GAAGid,eAAe/e,EAAEqgB,SAAS,SAASve,GAAG,OAAOzI,KAAKwmB,eAAc,KAAM1b,OAAOrC,GAAGid,eAAe/e,EAAEsgB,GAAG,SAASxe,GAAG,OAAOzI,KAAK8mB,UAAUre,IAAIzI,KAAK2mB,KAAKle,IAAIzI,KAAK4mB,WAAWne,IAAI9B,EAAE4L,KAAK,SAAS9J,GAAG,IAAI9B,EAAE3G,KAAK,YAAO,IAASyI,IAAIA,EAAE,IAAIA,EAAE8J,MAAM,SAAS9J,GAAG,OAAO9B,EAAEsgB,GAAGxe,OAAOA,EAAluI,GAAuuI9B,EAAEgY,QAAQtd,EAAEoH,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEgO,GAAGhO,EAAEsJ,EAAE,MAAMtJ,EAAEof,WAAWpf,EAAE,CAACqf,QAAQrf,GAAOiJ,EAAE,6BAA6BH,EAAE,CAAC,CAACoD,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,aAAaU,EAAE0E,EAAEqR,QAAQC,cAAc,2BAA2BnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,SAASU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,kCAAkCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,gBAAgB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,SAASU,EAAE0E,EAAEqR,QAAQC,cAAc,2BAA2BnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,mBAAmB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,gCAAgCU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,2CAA2CnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,uBAAuBU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,iCAAiCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,cAAcU,EAAE0E,EAAEqR,QAAQC,cAAc,qCAAqCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,SAASU,EAAE0E,EAAEqR,QAAQC,cAAc,iCAAiCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,SAASU,EAAE0E,EAAEqR,QAAQC,cAAc,iCAAiCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,eAAeU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,kCAAkCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,kBAAkBU,EAAE0E,EAAEqR,QAAQC,cAAc,sCAAsCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,cAAcU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,sCAAsCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,kBAAkB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,WAAWU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,0CAA0CnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,WAAW+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,UAAUU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,mCAAmCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,mBAAmB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,UAAUU,EAAE0E,EAAEqR,QAAQC,cAAc,2CAA2CnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,iBAAiBsD,KAAK/C,GAAG,kBAAkB,cAAcG,EAAE0E,EAAEqR,QAAQC,cAAc,kDAAkDnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,iBAAiB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,qBAAqBU,EAAE0E,EAAEqR,QAAQC,cAAc,iCAAiCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,kBAAkBU,EAAE0E,EAAEqR,QAAQC,cAAc,2BAA2BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,kBAAkB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,kBAAkBU,EAAE0E,EAAEqR,QAAQE,eAAe,mCAAmCpW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,WAAWU,EAAE0E,EAAEqR,QAAQC,cAAc,6BAA6BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,aAAaU,EAAE0E,EAAEqR,QAAQC,cAAc,+BAA+BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,SAAS+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,eAAeU,EAAE0E,EAAEqR,QAAQC,cAAc,0BAA0BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,aAAaU,EAAE0E,EAAEqR,QAAQC,cAAc,+BAA+BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAc,8BAA8BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,sBAAsB,gBAAgB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,cAAcU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,mBAAmB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,iBAAiBU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,IAAI6E,EAAEqR,QAAQC,cAAc,0CAA0CnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,SAAS+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,QAAQU,EAAE0E,EAAEqR,QAAQC,cAAc,4BAA4BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,SAASU,EAAE0E,EAAEqR,QAAQC,cAAc,0CAA0CnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAc,qCAAqCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,4BAA4B+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,WAAWU,EAAE0E,EAAEqR,QAAQC,cAAc,oDAAoDnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,YAAYU,EAAE0E,EAAEqR,QAAQC,cAAc,qCAAqCnW,IAAI6E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,sBAAsB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,UAAUU,EAAE0E,EAAEqR,QAAQC,cAAc,2CAA2CnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,QAAQ+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,iBAAiBU,EAAE0E,EAAEqR,QAAQC,cAAc,6BAA6BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,SAAS/C,GAAG,IAAI9B,GAAG8B,EAAE+C,KAAK,iBAAiB5C,EAAEH,EAAE+C,KAAK,YAAY,OAAO7E,GAAGiC,GAAG2c,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,mBAAmBU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,kBAAkB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,iBAAiBU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,uBAAuB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAK,UAAUU,EAAE0E,EAAEqR,QAAQC,cAAcrW,EAAEE,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,OAAO+Z,SAAS,SAAS9c,GAAG,IAAI9B,GAAG,IAAI8B,EAAEye,OAAO,OAAO,yBAAyB,eAAe,MAAM,CAAChf,KAAKoF,EAAEqR,QAAQC,cAAcjY,EAAE8B,GAAGiF,QAAQJ,EAAEqR,QAAQE,eAAelY,EAAE8B,OAAO9B,EAAEgY,QAAQvW,EAAEK,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEgO,GAAGhO,EAAEsJ,EAAE,MAAMtJ,EAAEof,WAAWpf,EAAE,CAACqf,QAAQrf,GAAGiJ,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAACoD,KAAK,CAAC,aAAa+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,wBAAwBnW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAO0B,KAAK3T,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,kBAAkB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,yCAAyCnW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAOoE,aAAarW,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,iCAAiCnW,GAAGG,EAAE0E,EAAEqR,QAAQI,sBAAsBpY,GAAG,MAAM,CAACuB,KAAKK,EAAEoX,OAAOqE,QAAQtW,QAAQ/G,EAAEwgB,YAAYve,KAAK,CAAC4C,KAAK,CAAC,cAAc+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,6BAA6BnW,GAAGyE,QAAQ,SAAS,KAAKtE,EAAE0E,EAAEqR,QAAQK,oBAAoBrY,GAAGrH,EAAE,CAAC4I,KAAKK,EAAEoX,OAAOsE,MAAMvW,QAAQ/G,GAAG,OAAOiC,IAAItJ,EAAE6nB,YAAYve,GAAGtJ,IAAI,CAACkM,KAAK,CAAC,uBAAuB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,qCAAqCnW,GAAGyE,QAAQ,SAAS,KAAK,MAAM,CAAChF,KAAKK,EAAEoX,OAAOuE,IAAIxW,QAAQ/G,KAAK,CAAC6E,KAAK,SAAS/C,GAAG,IAAI9B,GAAG8B,EAAE+C,KAAK,iBAAiB5C,EAAEH,EAAE+C,KAAK,YAAY,OAAO7E,GAAGiC,GAAG2c,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,8BAA8BnW,GAAGG,EAAE0E,EAAEqR,QAAQM,sBAAsBtY,GAAGrH,EAAE,CAAC4I,KAAKK,EAAEoX,OAAOwE,QAAQzW,QAAQ/G,GAAG,OAAOiC,IAAItJ,EAAE6nB,YAAYve,GAAGtJ,IAAI,CAACkM,KAAK,CAAC,mBAAmB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,mCAAmCnW,GAAGG,EAAE,CAACV,KAAKK,EAAEoX,OAAOyE,OAAO,OAAOzd,GAAGA,EAAEpH,SAASqJ,EAAE8E,QAAQ/G,GAAGiC,IAAI,CAAC4C,KAAK,CAAC,sBAAsB,gBAAgB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,kCAAkCnW,IAAI6E,EAAEqR,QAAQC,cAAc,mCAAmCnW,IAAI6E,EAAEqR,QAAQC,cAAc,aAAanW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAOG,WAAWpS,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,SAAS+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,uBAAuBnW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAOE,KAAKnS,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,2BAA2BnW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAOuB,MAAMxT,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,UAAU+Z,SAAS,WAAW,MAAM,CAACrd,KAAKK,EAAEoX,OAAO0E,SAAS,CAAC7Y,KAAK,CAAC,QAAQ+Z,SAAS,WAAW,MAAM,CAACrd,KAAKK,EAAEoX,OAAO2E,YAAY,CAAC9Y,KAAK,CAAC,iBAAiB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,mCAAmCnW,GAAG,MAAM,CAACP,KAAKK,EAAEoX,OAAO4E,aAAa7W,QAAQ/G,MAAMA,EAAEgY,QAAQvW,EAAEK,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEgO,GAAGhO,EAAEsJ,EAAE,MAAMtJ,EAAEof,WAAWpf,EAAE,CAACqf,QAAQrf,GAAGiJ,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAACoD,KAAK,CAAC,cAAc+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK,MAAM4nB,OAAO,YAAY,CAAC5b,KAAK,CAAC,WAAW+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,aAAanW,IAAI,OAAOG,EAAE,CAACpJ,KAAK+I,EAAEqX,cAAcgE,OAAOwD,OAAO,UAAU,OAAOzgB,IAAIiC,EAAEye,MAAM1gB,GAAGiC,IAAI,CAAC4C,KAAK,CAAC,2BAA2B+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,OAAOyD,OAAO,WAAW,CAAC5b,KAAK,CAAC,SAAS+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,OAAOyD,OAAO,QAAQC,MAAM,UAAU,CAAC7b,KAAK,CAAC,eAAe+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,OAAOyD,OAAO,SAASC,MAAM,sBAAsB,CAAC7b,KAAK,CAAC,SAAS+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,OAAOyD,OAAO,YAAY,CAAC5b,KAAK,CAAC,kBAAkB+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,UAAU,CAACnY,KAAK,SAAS/C,GAAG,IAAI9B,EAAE8B,EAAE+C,KAAK,gBAAgB5C,EAAEH,EAAE+C,KAAK,uBAAuB,OAAO7E,IAAIiC,GAAG2c,SAAS,SAAS9c,GAAG,IAAI9B,EAAE2G,EAAEqR,QAAQC,cAAc,iBAAiBnW,GAAG,MAAM,CAACjJ,KAAK+I,EAAEqX,cAAcgE,OAAOwD,OAAO,QAAQC,MAAM1gB,KAAK,CAAC6E,KAAK,CAAC,mBAAmB,iBAAiB+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,OAAOwD,OAAO,WAAW,CAAC5b,KAAK,CAAC,aAAa+Z,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,UAAU,CAACpY,KAAK,SAAS/C,GAAG,MAAM,eAAeA,EAAEgd,gBAAe,IAAKF,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,OAAOwD,OAAO,gBAAgB,CAAC5b,KAAK,SAAS/C,GAAG,MAAM,SAASA,EAAEgd,gBAAe,IAAKF,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,UAAU,CAACpY,KAAK,SAAS/C,GAAG,MAAM,kBAAkBA,EAAEgd,kBAAkBF,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,OAAOwD,OAAO,eAAe,CAAC5b,KAAK,SAAS/C,GAAG,IAAI9B,EAAEoE,OAAOD,OAAOrC,EAAEud,gBAAgBvoB,MAAM,KAAK,IAAI,MAAM,YAAYgL,EAAEsd,WAAU,IAAKpf,GAAG,GAAG4e,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAc+D,UAAU,CAACnY,KAAK,SAAS/C,GAAG,MAAM,YAAYA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAcgE,UAAU,CAACpY,KAAK,SAAS/C,GAAG,MAAM,UAAUA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAciE,QAAQuD,OAAO,WAAW,CAAC5b,KAAK,SAAS/C,GAAG,MAAM,YAAYA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAciE,WAAW,CAACrY,KAAK,SAAS/C,GAAG,MAAM,UAAUA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAciE,WAAW,CAACrY,KAAK,SAAS/C,GAAG,MAAM,kBAAkBA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAckE,MAAM,CAACtY,KAAK,SAAS/C,GAAG,MAAM,SAASA,EAAEsd,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC/lB,KAAK+I,EAAEqX,cAAckE,OAAOnd,EAAEgY,QAAQvW,EAAEK,EAAEvM,QAAQyK,EAAEgY,SAAS,GAAG,SAASlW,EAAE9B,EAAEiC,GAAG,aAAajC,EAAE+X,YAAW,EAAG/X,EAAEgY,aAAQ,EAAO,IAAIrf,EAAEgO,GAAGhO,EAAEsJ,EAAE,MAAMtJ,EAAEof,WAAWpf,EAAE,CAACqf,QAAQrf,GAAGiJ,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAACoD,KAAK,SAAS/C,GAAG,MAAM,mBAAmBA,EAAEgd,gBAAe,IAAKF,SAAS,SAAS9c,GAAG,GAAG,WAAW+C,KAAK/C,GAAG,MAAM,CAACP,KAAKK,EAAEmX,WAAW+E,OAAO,IAAI9d,EAAE2G,EAAEqR,QAAQC,cAAc,0BAA0BnW,GAAG,MAAM,CAACP,KAAKK,EAAEmX,WAAW8E,SAAS9W,QAAQ/G,KAAK,CAAC6E,KAAK,CAAC,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAKK,EAAEmX,WAAWgF,SAAS9b,EAAE0E,EAAEqR,QAAQC,cAAc,6BAA6BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,SAAS/C,GAAG,OAAOA,EAAE+C,KAAK,YAAY+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAKK,EAAEmX,WAAWiF,QAAQ/b,EAAE0E,EAAEqR,QAAQC,cAAc,4BAA4BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,SAAS/C,GAAG,IAAI9B,EAAE8B,EAAE+C,KAAK,UAAU5C,EAAEH,EAAE+C,KAAK,eAAe,OAAO7E,IAAIiC,GAAG2c,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAKK,EAAEmX,WAAWkF,OAAOhc,EAAE0E,EAAEqR,QAAQC,cAAc,2BAA2BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,IAAI,CAAC6E,KAAK,CAAC,4BAA4B+Z,SAAS,WAAW,MAAM,CAACrd,KAAKK,EAAEmX,WAAW+E,SAAS,CAACjZ,KAAK,CAAC,mBAAmB+Z,SAAS,SAAS9c,GAAG,IAAI9B,EAAE,CAACuB,KAAKK,EAAEmX,WAAWmF,QAAQjc,EAAE0E,EAAEqR,QAAQC,cAAc,4BAA4BnW,GAAG,OAAOG,IAAIjC,EAAE+G,QAAQ9E,GAAGjC,KAAKA,EAAEgY,QAAQvW,EAAEK,EAAEvM,QAAQyK,EAAEgY,+BCA3+vB,QAsBE3e,MAAQvD,YAXA,4BAcR,WAEF,IAAI6qB,EAAmB,kCAGnBC,EAAgB9qB,OAAOwO,SAAWxO,OAAOwO,SAASuc,KAAO,KACzDC,EAAUF,GAAcA,EAAYra,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,KAAc,KAGvFwa,EAAUC,SAASC,qBAAqB,UAGxCC,EAA2B,eAAiBH,EAAQ,IAAMC,SAASG,cAAc,WAGjFC,GAActrB,OAAO+lB,OAAqC,mBAA5B/lB,OAAO+lB,MAAMhkB,WAG3CwpB,EAAiC,kBAAmBL,SAIpD,oBAAqB7hB,OAASA,MAAMmiB,kBAAoBC,EAAAA,IAC/BpiB,MAAMmiB,gBACjCniB,MAAMmiB,gBAAkBC,EAAAA,GAO1B,IAAIC,GAAyB,EACzBC,GAAwB,EAoF5B,SAASC,EAAsBtiB,EAAOuiB,GACpC,IAAIC,EACAC,EAAM,KACNC,EAA0C,iBAAnBH,EA+B3B,OA9BAA,EAAiBG,EAAgBxX,KAAKyX,MAAMJ,GAAkB,EACzC,iBAAVviB,GAAsBA,IAC3B0iB,EACFF,EAAUxiB,EAAME,MAAM,+GAGtBsiB,EAAUxiB,EAAME,MAAM,kNAELsiB,EAAQ,KACvBA,EAAUxiB,EAAME,MAAM,kHAItBsiB,GAAWA,EAAQ,KAGnBC,EAFEF,EAAiB,EAEbD,EADWtiB,EAAMQ,MAAMR,EAAMZ,QAAQojB,EAAQ,IAAMA,EAAQ,GAAGhpB,QACvB+oB,EAAiB,GAGxDC,EAAQ,KAWbC,EAyHT,SAASG,IAIP,GAAuB,IAAnBjB,EAAQnoB,OACV,OAAO,KAGT,IAAID,EAAGmJ,EAAG1C,EAAOyiB,EAAKI,EAClBC,EAAkB,GAClBP,EAAiBK,EAAwBL,gBAAkB,EAQ/D,IAAKhpB,EAAI,EAAGA,EAAIooB,EAAQnoB,OAAQD,IAC1ByoB,GAAcF,EACZP,EAAiB9b,KAAKkc,EAAQpoB,GAAGwpB,aACnCD,EAAgB3kB,KAAKwjB,EAAQpoB,IAI/BupB,EAAgB3kB,KAAKwjB,EAAQpoB,IAQjC,GAJAmJ,EAAI,IAAI3C,MACJqiB,IACFpiB,EAAQ0C,EAAE1C,QAEPA,GAASqiB,EACZ,IACE,MAAM3f,EAER,MAAO2L,GAELrO,EAAQqO,EAAIrO,MAiEhB,GA7DIA,KAEF6iB,EAzQJ,SAA0BJ,EAAKK,GAC7B,IAAIvpB,EACAspB,EAAS,KAIb,GAFAC,EAAkBA,GAAmBnB,EAElB,iBAARc,GAAoBA,EAC7B,IAAKlpB,EAAIupB,EAAgBtpB,OAAQD,KAC/B,GAAIupB,EAAgBvpB,GAAGypB,MAAQP,EAAK,CAGlCI,EAASC,EAAgBvpB,GACzB,MAIN,OAAOspB,EAyPII,CADTR,EAAMH,EAAsBtiB,EAAOuiB,GACJO,KAEhBpB,GAAWe,IAAQf,IAK9BmB,EAhOR,SAA6BC,GAC3B,IAAIvpB,EAAGqE,EACHilB,EAAS,KAEb,IAAKtpB,EAAI,EAAGqE,GADZklB,EAAkBA,GAAmBnB,GACHnoB,OAAQD,EAAIqE,EAAKrE,IACjD,IAAKupB,EAAgBvpB,GAAG2pB,aAAa,OAAQ,CAC3C,GAAIL,EAAQ,CACVA,EAAS,KACT,MAEFA,EAASC,EAAgBvpB,GAG7B,OAAOspB,EA+NQM,CAAoBL,IAU9BD,GAK4B,IAA3BC,EAAgBtpB,SAClBqpB,EAASC,EAAgB,IAIxBD,GAeCZ,IACFY,EAASjB,SAASwB,gBAIjBP,GAeCb,GAAcF,EAChB,IAAKvoB,EAAIupB,EAAgBtpB,OAAQD,KAC/B,GAAsC,gBAAlCupB,EAAgBvpB,GAAGwpB,WAA8B,CACnDF,EAASC,EAAgBvpB,GACzB,MAkCR,OA5BKspB,IAyBHA,EAASC,EAAgBA,EAAgBtpB,OAAS,IAAM,MAGnDqpB,GA3YT,WACE,IACE,IAAIxU,EAAM,IAAItO,MAEd,MADAqiB,EAA8C,iBAAd/T,EAAIrO,SAAwBqO,EAAIrO,MAC1DqO,EAER,MAAOgV,GACLhB,EAAmD,iBAApBgB,EAAUrjB,SAAwBqjB,EAAUrjB,QAP/E,GA+YA4iB,EAAwBL,eAAiB,EAOrC,IAAIe,EAA4BV,EAShC,OARAU,EAAuBC,KAASX,EAChCU,EAAuBE,IA1R3B,WAME,OAAO,MAqRLF,EAAuBG,OArL3B,WAIE,OAAO,MAuLEH,IA9cD,UAAC,IAAD,yCCYV,IAOII,EAPAC,EAAuB,iBAAZC,QAAuBA,QAAU,KAC5CC,EAAeF,GAAwB,mBAAZA,EAAE5mB,MAC7B4mB,EAAE5mB,MACF,SAAsB+mB,EAAQC,EAAUxjB,GACxC,OAAO+G,SAAS9O,UAAUuE,MAAMrE,KAAKorB,EAAQC,EAAUxjB,IAKzDmjB,EADEC,GAA0B,mBAAdA,EAAEK,QACCL,EAAEK,QACVzrB,OAAO0rB,sBACC,SAAwBH,GACvC,OAAOvrB,OAAO2rB,oBAAoBJ,GAC/BnjB,OAAOpI,OAAO0rB,sBAAsBH,KAGxB,SAAwBA,GACvC,OAAOvrB,OAAO2rB,oBAAoBJ,IAQtC,IAAIK,EAAcnf,OAAOof,OAAS,SAAqB1gB,GACrD,OAAOA,GAAUA,GAGnB,SAAS2gB,IACPA,EAAaC,KAAK5rB,KAAKuB,MAEzB7D,EAAOD,QAAUkuB,EACjBjuB,EAAOD,QAAQouB,KAwYf,SAAcC,EAASriB,GACrB,OAAO,IAAIsiB,SAAQ,SAAUC,EAASrU,GACpC,SAASsU,EAActW,GACrBmW,EAAQrS,eAAehQ,EAAMyiB,GAC7BvU,EAAOhC,GAGT,SAASuW,IAC+B,mBAA3BJ,EAAQrS,gBACjBqS,EAAQrS,eAAe,QAASwS,GAElCD,EAAQ,GAAGlkB,MAAM9H,KAAKsE,YAGxB6nB,EAA+BL,EAASriB,EAAMyiB,EAAU,CAAEL,MAAM,IACnD,UAATpiB,GAMR,SAAuCqiB,EAASM,EAASC,GAC7B,mBAAfP,EAAQQ,IACjBH,EAA+BL,EAAS,QAASM,EAPO,CAAEP,MAAM,IAA9DU,CAA8BT,EAASG,OArZ7CN,EAAaA,aAAeA,EAE5BA,EAAa7rB,UAAU0sB,aAAU9e,EACjCie,EAAa7rB,UAAU2sB,aAAe,EACtCd,EAAa7rB,UAAU4sB,mBAAgBhf,EAIvC,IAAIif,EAAsB,GAE1B,SAASC,EAAcpT,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAIqT,UAAU,0EAA4ErT,GAsCpG,SAASsT,EAAiBhP,GACxB,YAA2BpQ,IAAvBoQ,EAAK4O,cACAf,EAAagB,oBACf7O,EAAK4O,cAmDd,SAASK,EAAa3B,EAAQrqB,EAAMyY,EAAUwT,GAC5C,IAAIzlB,EACA0lB,EACAC,EA1HsBC,EAgJ1B,GApBAP,EAAcpT,QAGC9L,KADfuf,EAAS7B,EAAOoB,UAEdS,EAAS7B,EAAOoB,QAAU3sB,OAAOe,OAAO,MACxCwqB,EAAOqB,aAAe,SAIK/e,IAAvBuf,EAAOG,cACThC,EAAOiC,KAAK,cAAetsB,EACfyY,EAASA,SAAWA,EAASA,SAAWA,GAIpDyT,EAAS7B,EAAOoB,SAElBU,EAAWD,EAAOlsB,SAGH2M,IAAbwf,EAEFA,EAAWD,EAAOlsB,GAAQyY,IACxB4R,EAAOqB,kBAeT,GAbwB,mBAAbS,EAETA,EAAWD,EAAOlsB,GAChBisB,EAAU,CAACxT,EAAU0T,GAAY,CAACA,EAAU1T,GAErCwT,EACTE,EAASpU,QAAQU,GAEjB0T,EAASznB,KAAK+T,IAIhBjS,EAAIulB,EAAiB1B,IACb,GAAK8B,EAASpsB,OAASyG,IAAM2lB,EAASI,OAAQ,CACpDJ,EAASI,QAAS,EAGlB,IAAIC,EAAI,IAAIlmB,MAAM,+CACE6lB,EAASpsB,OAAS,IAAMuL,OAAOtL,GADjC,qEAIlBwsB,EAAE9jB,KAAO,8BACT8jB,EAAEzB,QAAUV,EACZmC,EAAExsB,KAAOA,EACTwsB,EAAE/nB,MAAQ0nB,EAASpsB,OA7KGqsB,EA8KHI,EA7KnBjnB,SAAWA,QAAQknB,MAAMlnB,QAAQknB,KAAKL,GAiL1C,OAAO/B,EAcT,SAASqC,IACP,IAAKlsB,KAAKmsB,MAGR,OAFAnsB,KAAK6pB,OAAO3R,eAAelY,KAAKR,KAAMQ,KAAKosB,QAC3CpsB,KAAKmsB,OAAQ,EACY,IAArBppB,UAAUxD,OACLS,KAAKiY,SAASxZ,KAAKuB,KAAK6pB,QAC1B7pB,KAAKiY,SAASnV,MAAM9C,KAAK6pB,OAAQ9mB,WAI5C,SAASspB,EAAUxC,EAAQrqB,EAAMyY,GAC/B,IAAIqU,EAAQ,CAAEH,OAAO,EAAOC,YAAQjgB,EAAW0d,OAAQA,EAAQrqB,KAAMA,EAAMyY,SAAUA,GACjFsU,EAAUL,EAAYlpB,KAAKspB,GAG/B,OAFAC,EAAQtU,SAAWA,EACnBqU,EAAMF,OAASG,EACRA,EA0HT,SAASC,EAAW3C,EAAQrqB,EAAMitB,GAChC,IAAIf,EAAS7B,EAAOoB,QAEpB,QAAe9e,IAAXuf,EACF,MAAO,GAET,IAAIgB,EAAahB,EAAOlsB,GACxB,YAAmB2M,IAAfugB,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAWzU,UAAYyU,GAAc,CAACA,GAElDD,EAsDT,SAAyBlZ,GAEvB,IADA,IAAIoZ,EAAM,IAAIxuB,MAAMoV,EAAIhU,QACfD,EAAI,EAAGA,EAAIqtB,EAAIptB,SAAUD,EAChCqtB,EAAIrtB,GAAKiU,EAAIjU,GAAG2Y,UAAY1E,EAAIjU,GAElC,OAAOqtB,EA1DLC,CAAgBF,GAAcG,EAAWH,EAAYA,EAAWntB,QAoBpE,SAASutB,EAActtB,GACrB,IAAIksB,EAAS1rB,KAAKirB,QAElB,QAAe9e,IAAXuf,EAAsB,CACxB,IAAIgB,EAAahB,EAAOlsB,GAExB,GAA0B,mBAAfktB,EACT,OAAO,EACF,QAAmBvgB,IAAfugB,EACT,OAAOA,EAAWntB,OAItB,OAAO,EAOT,SAASstB,EAAWtZ,EAAKjG,GAEvB,IADA,IAAIyf,EAAO,IAAI5uB,MAAMmP,GACZhO,EAAI,EAAGA,EAAIgO,IAAKhO,EACvBytB,EAAKztB,GAAKiU,EAAIjU,GAChB,OAAOytB,EA4CT,SAASnC,EAA+BL,EAASriB,EAAM+P,EAAU6S,GAC/D,GAA0B,mBAAfP,EAAQQ,GACbD,EAAMR,KACRC,EAAQD,KAAKpiB,EAAM+P,GAEnBsS,EAAQQ,GAAG7iB,EAAM+P,OAEd,IAAwC,mBAA7BsS,EAAQyC,iBAYxB,MAAM,IAAI1B,UAAU,6EAA+Ef,GATnGA,EAAQyC,iBAAiB9kB,GAAM,SAAS+kB,EAAarpB,GAG/CknB,EAAMR,MACRC,EAAQ2C,oBAAoBhlB,EAAM+kB,GAEpChV,EAASrU,OAhaftF,OAAO+f,eAAe+L,EAAc,sBAAuB,CACzD9L,YAAY,EACZC,IAAK,WACH,OAAO6M,GAET+B,IAAK,SAASvpB,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAKsmB,EAAYtmB,GACpD,MAAM,IAAIwpB,WAAW,kGAAoGxpB,EAAM,KAEjIwnB,EAAsBxnB,KAI1BwmB,EAAaC,KAAO,gBAEGle,IAAjBnM,KAAKirB,SACLjrB,KAAKirB,UAAY3sB,OAAO+uB,eAAertB,MAAMirB,UAC/CjrB,KAAKirB,QAAU3sB,OAAOe,OAAO,MAC7BW,KAAKkrB,aAAe,GAGtBlrB,KAAKmrB,cAAgBnrB,KAAKmrB,oBAAiBhf,GAK7Cie,EAAa7rB,UAAU+uB,gBAAkB,SAAyBhgB,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAK4c,EAAY5c,GAChD,MAAM,IAAI8f,WAAW,gFAAkF9f,EAAI,KAG7G,OADAtN,KAAKmrB,cAAgB7d,EACdtN,MASToqB,EAAa7rB,UAAUgvB,gBAAkB,WACvC,OAAOhC,EAAiBvrB,OAG1BoqB,EAAa7rB,UAAUutB,KAAO,SAActsB,GAE1C,IADA,IAAI8G,EAAO,GACFhH,EAAI,EAAGA,EAAIyD,UAAUxD,OAAQD,IAAKgH,EAAKpC,KAAKnB,UAAUzD,IAC/D,IAAIkuB,EAAoB,UAAThuB,EAEXksB,EAAS1rB,KAAKirB,QAClB,QAAe9e,IAAXuf,EACF8B,EAAWA,QAA4BrhB,IAAjBuf,EAAOloB,WAC1B,IAAKgqB,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFInnB,EAAK/G,OAAS,IAChBkuB,EAAKnnB,EAAK,IACRmnB,aAAc3nB,MAGhB,MAAM2nB,EAGR,IAAIrZ,EAAM,IAAItO,MAAM,oBAAsB2nB,EAAK,KAAOA,EAAG1uB,QAAU,IAAM,KAEzE,MADAqV,EAAIsZ,QAAUD,EACRrZ,EAGR,IAAIyW,EAAUa,EAAOlsB,GAErB,QAAgB2M,IAAZ0e,EACF,OAAO,EAET,GAAuB,mBAAZA,EACTjB,EAAaiB,EAAS7qB,KAAMsG,OAE5B,KAAI3C,EAAMknB,EAAQtrB,OACd8X,EAAYwV,EAAWhC,EAASlnB,GACpC,IAASrE,EAAI,EAAGA,EAAIqE,IAAOrE,EACzBsqB,EAAavS,EAAU/X,GAAIU,KAAMsG,GAGrC,OAAO,GAiET8jB,EAAa7rB,UAAU+Y,YAAc,SAAqB9X,EAAMyY,GAC9D,OAAOuT,EAAaxrB,KAAMR,EAAMyY,GAAU,IAG5CmS,EAAa7rB,UAAUwsB,GAAKX,EAAa7rB,UAAU+Y,YAEnD8S,EAAa7rB,UAAUovB,gBACnB,SAAyBnuB,EAAMyY,GAC7B,OAAOuT,EAAaxrB,KAAMR,EAAMyY,GAAU,IAqBhDmS,EAAa7rB,UAAU+rB,KAAO,SAAc9qB,EAAMyY,GAGhD,OAFAoT,EAAcpT,GACdjY,KAAK+qB,GAAGvrB,EAAM6sB,EAAUrsB,KAAMR,EAAMyY,IAC7BjY,MAGToqB,EAAa7rB,UAAUqvB,oBACnB,SAA6BpuB,EAAMyY,GAGjC,OAFAoT,EAAcpT,GACdjY,KAAK2tB,gBAAgBnuB,EAAM6sB,EAAUrsB,KAAMR,EAAMyY,IAC1CjY,MAIboqB,EAAa7rB,UAAU2Z,eACnB,SAAwB1Y,EAAMyY,GAC5B,IAAI4V,EAAMnC,EAAQoC,EAAUxuB,EAAGyuB,EAK/B,GAHA1C,EAAcpT,QAGC9L,KADfuf,EAAS1rB,KAAKirB,SAEZ,OAAOjrB,KAGT,QAAamM,KADb0hB,EAAOnC,EAAOlsB,IAEZ,OAAOQ,KAET,GAAI6tB,IAAS5V,GAAY4V,EAAK5V,WAAaA,EACb,KAAtBjY,KAAKkrB,aACTlrB,KAAKirB,QAAU3sB,OAAOe,OAAO,cAEtBqsB,EAAOlsB,GACVksB,EAAOxT,gBACTlY,KAAK8rB,KAAK,iBAAkBtsB,EAAMquB,EAAK5V,UAAYA,SAElD,GAAoB,mBAAT4V,EAAqB,CAGrC,IAFAC,GAAY,EAEPxuB,EAAIuuB,EAAKtuB,OAAS,EAAGD,GAAK,EAAGA,IAChC,GAAIuuB,EAAKvuB,KAAO2Y,GAAY4V,EAAKvuB,GAAG2Y,WAAaA,EAAU,CACzD8V,EAAmBF,EAAKvuB,GAAG2Y,SAC3B6V,EAAWxuB,EACX,MAIJ,GAAIwuB,EAAW,EACb,OAAO9tB,KAEQ,IAAb8tB,EACFD,EAAKtT,QAiIf,SAAmBsT,EAAMhtB,GACvB,KAAOA,EAAQ,EAAIgtB,EAAKtuB,OAAQsB,IAC9BgtB,EAAKhtB,GAASgtB,EAAKhtB,EAAQ,GAC7BgtB,EAAK7R,MAlIGgS,CAAUH,EAAMC,GAGE,IAAhBD,EAAKtuB,SACPmsB,EAAOlsB,GAAQquB,EAAK,SAEQ1hB,IAA1Buf,EAAOxT,gBACTlY,KAAK8rB,KAAK,iBAAkBtsB,EAAMuuB,GAAoB9V,GAG1D,OAAOjY,MAGboqB,EAAa7rB,UAAU0vB,IAAM7D,EAAa7rB,UAAU2Z,eAEpDkS,EAAa7rB,UAAU2vB,mBACnB,SAA4B1uB,GAC1B,IAAI6X,EAAWqU,EAAQpsB,EAGvB,QAAe6M,KADfuf,EAAS1rB,KAAKirB,SAEZ,OAAOjrB,KAGT,QAA8BmM,IAA1Buf,EAAOxT,eAUT,OATyB,IAArBnV,UAAUxD,QACZS,KAAKirB,QAAU3sB,OAAOe,OAAO,MAC7BW,KAAKkrB,aAAe,QACM/e,IAAjBuf,EAAOlsB,KACY,KAAtBQ,KAAKkrB,aACTlrB,KAAKirB,QAAU3sB,OAAOe,OAAO,aAEtBqsB,EAAOlsB,IAEXQ,KAIT,GAAyB,IAArB+C,UAAUxD,OAAc,CAC1B,IACI2K,EADAzH,EAAOnE,OAAOmE,KAAKipB,GAEvB,IAAKpsB,EAAI,EAAGA,EAAImD,EAAKlD,SAAUD,EAEjB,oBADZ4K,EAAMzH,EAAKnD,KAEXU,KAAKkuB,mBAAmBhkB,GAK1B,OAHAlK,KAAKkuB,mBAAmB,kBACxBluB,KAAKirB,QAAU3sB,OAAOe,OAAO,MAC7BW,KAAKkrB,aAAe,EACblrB,KAKT,GAAyB,mBAFzBqX,EAAYqU,EAAOlsB,IAGjBQ,KAAKkY,eAAe1Y,EAAM6X,QACrB,QAAkBlL,IAAdkL,EAET,IAAK/X,EAAI+X,EAAU9X,OAAS,EAAGD,GAAK,EAAGA,IACrCU,KAAKkY,eAAe1Y,EAAM6X,EAAU/X,IAIxC,OAAOU,MAoBboqB,EAAa7rB,UAAU8Y,UAAY,SAAmB7X,GACpD,OAAOgtB,EAAWxsB,KAAMR,GAAM,IAGhC4qB,EAAa7rB,UAAU4vB,aAAe,SAAsB3uB,GAC1D,OAAOgtB,EAAWxsB,KAAMR,GAAM,IAGhC4qB,EAAa0C,cAAgB,SAASvC,EAAS/qB,GAC7C,MAAqC,mBAA1B+qB,EAAQuC,cACVvC,EAAQuC,cAActtB,GAEtBstB,EAAcruB,KAAK8rB,EAAS/qB,IAIvC4qB,EAAa7rB,UAAUuuB,cAAgBA,EAiBvC1C,EAAa7rB,UAAU6vB,WAAa,WAClC,OAAOpuB,KAAKkrB,aAAe,EAAIzB,EAAezpB,KAAKirB,SAAW,oBCtahE9uB,EAAOD,QAAU,EAAjBC,MAAAA,kBCqKAA,EAAOD,QAhKP,MAWI0C,YAAYyvB,EAAQC,EAAaC,GAC7BvuB,KAAKwuB,QAAUH,EACfruB,KAAKyuB,eAAeH,GACpBtuB,KAAK0uB,cAAgBH,IAAgB,EACrCvuB,KAAK2uB,oBAAmB,GACxB3uB,KAAK4uB,yBAA2B,EAChC5uB,KAAK6uB,sBAAwB,EAC7B7uB,KAAK8uB,UAAW,EAChB9uB,KAAK+uB,mBAAqB,CACtBC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,IAAK,GASbC,YACI,OAAOvvB,KAAKwuB,QAQhBgB,iBACI,OAAOxvB,KAAKsuB,YAShBG,eAAegB,GACXzvB,KAAKsuB,YAAcmB,EAQvBlB,eACI,OAAOvuB,KAAK0uB,cAQhBgB,oBACI,OAAO1vB,KAAK6uB,sBAAwB,EAWxCF,mBAAmBgB,GACf,IAAK3vB,KAAK0vB,qBAAuBC,EAC7B3vB,KAAK6uB,sBAAwB/nB,KAAK8oB,WAC/B,GAAI5vB,KAAK0vB,sBAAwBC,EAAsB,CAC1D,MACME,EADM/oB,KAAK8oB,MACS5vB,KAAK6uB,sBAE/B7uB,KAAK4uB,0BAA4BiB,EACjC7vB,KAAK6uB,sBAAwB,GASrCiB,8BACI,IAAIC,EAAQ/vB,KAAK4uB,yBAMjB,OAJI5uB,KAAK0vB,sBACLK,GAASjpB,KAAK8oB,MAAQ5vB,KAAK6uB,uBAGxBkB,EAQXC,UACI,OAAOhwB,KAAK8uB,SAQhBmB,gBACIjwB,KAAK8uB,UAAW,EAChB9uB,KAAK2uB,oBAAmB,GAQ5BuB,uBACI,OAAOlwB,KAAK+uB,mBAShBoB,qBAAqBC,GACjBpwB,KAAK+uB,mBAAqBqB,EAS9BC,oBAAoBC,EAAkBC,GAClCvwB,KAAK+uB,mBAAmBuB,IAAqBC,oBCnKrD,MAAMC,EAAkBtuB,EAAQ,MAK1BuuB,EAAa,aACbC,EAAY,YAOZC,EAAgB,SAASC,GAE3B5wB,KAAK4wB,MAAQA,EAGb5wB,KAAK6wB,SAAW,KAIhB7wB,KAAK6Y,KAAO,KAIZ7Y,KAAKkI,KAAO,KAGZlI,KAAK8wB,UAAY,MAQrB,SAASC,EAAcC,GACnB,QAA+B7kB,IAA3B6kB,EAAcH,SACd,MAAM,IAAI/qB,MAAM,yEAGpBkrB,EAAcH,SAASxwB,QACvB2wB,EAAcF,UAAY,IAAIhqB,KAQlC,SAASmqB,EAAaD,GAClB,QAA+B7kB,IAA3B6kB,EAAcH,SACd,MAAM,IAAI/qB,MAAM,wEAGpBkrB,EAAcH,SAAShsB,OAO3B,SAASqsB,IACL,GAAIC,cAAcC,gBAAgBX,GAC9B,OAAOA,EACJ,GAAIU,cAAcC,gBAAgBV,GACrC,OAAOA,EAEX,MAAM,IAAI5qB,MACN,6DASR,SAASurB,EAAcC,GAGnBtxB,KAAKuxB,UAAY,GAGjBvxB,KAAKwxB,SAAWN,IAGhBlxB,KAAKyxB,aAAc,EAGnBzxB,KAAKsxB,gBAAkBA,EAM3BD,EAAcH,yBAA2BA,EAOzCG,EAAc9yB,UAAUmzB,SAAW,SAASd,GACxC,GAAIA,EAAMe,eAAgB,CAEtB,MAAMX,EAAgBhxB,KAAK4xB,yBAAyBhB,GAIpD5wB,KAAKuxB,UAAUrtB,KAAK8sB,GAGpBhxB,KAAK6xB,cAID7xB,KAAKyxB,aACLV,EAAcC,KAU1BK,EAAc9yB,UAAUqzB,yBAA2B,SAAShB,GACxD,MAAMI,EAAgB,IAAIL,EAAcC,GAGlCkB,EAAiBd,EAAcJ,MAAMmB,oBACrCllB,EAAS,IAAImlB,YAmBnB,OAjBAF,EAAeG,iBAAiBtvB,SAAQgE,GAAKkG,EAAO6kB,SAAS/qB,KAG7DqqB,EAAcH,SAAW,IAAIM,cAActkB,EACvC,CAAEqlB,SAAUlyB,KAAKwxB,WAIrBR,EAAcnY,KAAO,GAGrBmY,EAAcH,SAASsB,gBAAkB,SAASC,GAC1CA,EAAUvZ,KAAKwZ,KAAO,GACtBrB,EAAcnY,KAAK3U,KAAKkuB,EAAUvZ,OAInCmY,GAaXK,EAAc9yB,UAAU+zB,YAAc,SAAS1B,GAC3C,GAAIA,EAAM2B,eACN,OAGJ,MAAM9wB,EAAQzB,KAAKuxB,UACnB,IAAIjyB,EAEJ,IAAKA,EAAI,EAAGA,EAAImC,EAAMlC,OAAQD,IAC1B,GAAImC,EAAMnC,GAAGsxB,MAAM4B,qBAAuB5B,EAAM4B,mBAAoB,CAChE,MAAMC,EAAmBhxB,EAAMnC,GAE3BU,KAAKyxB,YACLR,EAAawB,GAGbhxB,EAAM6D,OAAOhG,EAAG,GAM5BU,KAAK6xB,eAQTR,EAAc9yB,UAAUszB,YAAc,WAClC,MAAMa,EAAa1yB,KAAKsxB,gBAExBtxB,KAAKuxB,UAAU5uB,SAAQquB,IACnB,GAAIA,EAAcJ,MAAM+B,UACpB3B,EAAc9oB,KAAO,sBAClB,CACH,MAAMlB,EAAKgqB,EAAcJ,MAAM4B,mBAEzB/C,EADciD,EAAWE,mBAAmB5rB,GACtBwoB,iBAEZ,cAAZC,IACAuB,EAAc9oB,KAAOunB,QASrC4B,EAAc9yB,UAAU8B,MAAQ,WAC5B,GAAIL,KAAKyxB,YACL,MAAM,IAAI3rB,MAAM,sCAKpB9F,KAAKyxB,aAAc,EAGnBzxB,KAAKuxB,UAAU5uB,SAAQquB,GAAiBD,EAAcC,KAGtDjsB,QAAQoB,IACH,2DACGnG,KAAKuxB,UAAUhyB,6BAM3B8xB,EAAc9yB,UAAUsG,KAAO,WAE3B7E,KAAKyxB,aAAc,EAGnBzxB,KAAKuxB,UAAU5uB,SAAQquB,GAAiBC,EAAaD,KACrDjsB,QAAQoB,IAAI,sBAMhBkrB,EAAc9yB,UAAUs0B,SAAW,WAC/B7yB,KAAKuxB,UAAU5uB,SAAQquB,IACnB,MAAM8B,EAAO,IAAIC,KAAK/B,EAAcnY,KAAM,CAAErZ,KAAMQ,KAAKwxB,WACjDhJ,EAAMwK,IAAIC,gBAAgBH,GAC1B5xB,EAAIymB,SAASG,cAAc,KAEjCH,SAASuL,KAAKC,YAAYjyB,GAC1BA,EAAEkyB,MAAQ,gBACVlyB,EAAEsmB,KAAOgB,EACTtnB,EAAE2xB,SAAY,QAAO7yB,KAAKwxB,SAAS/zB,MAAM,KAAK,KAC9CyD,EAAEmyB,QACF52B,OAAOu2B,IAAIM,gBAAgB9K,OASnC6I,EAAc9yB,UAAUg1B,oBAAsB,WAC1C,GAAIvzB,KAAKyxB,YACL,MAAM,IAAI3rB,MACN,kEAIR9F,KAAK6xB,cAEL,MAAMpwB,EAAQ,GAUd,OARAzB,KAAKuxB,UAAU5uB,SACXkuB,GACIpvB,EAAMyC,KACF,IAAIssB,EACA,IAAIuC,KAAKlC,EAAShY,KAAM,CAAErZ,KAAMQ,KAAKwxB,WACrCX,EAAS3oB,KACT2oB,EAASC,cAElBrvB,GAOX4vB,EAAc9yB,UAAUi1B,YAAc,WAClC,OAAOxzB,KAAKwxB,UAMhBr1B,EAAOD,QAAUm1B,YC1RjBl1B,EAAOD,QATiB,SAAS42B,EAAM5qB,EAAM4oB,EAAW2C,GACpDzzB,KAAK8yB,KAAOA,EACZ9yB,KAAKkI,KAAOA,EACZlI,KAAK8wB,UAAYA,EACjB9wB,KAAKyzB,UAAYA,mBChBrB,MAAMpC,EAAgBnvB,EAAQ,MACxBwxB,EAAgBxxB,EAClB,MAEEyxB,EAAe,SACfC,EAAkB,YAClBC,EAAqB,eACrBC,EAAiB,WAYvB,SAASC,IAEL/zB,KAAKg0B,cAAgB,IAAI3C,EAGzBrxB,KAAKi0B,qBAAuB,IAAIP,EAGhC1zB,KAAKmc,QAAU,KAIfnc,KAAK8wB,UAAY,KAGjB9wB,KAAKk0B,cAAgB,KAIrBl0B,KAAKiU,SAAW,KAIhBjU,KAAK0T,QAAU,GAGf1T,KAAKssB,MAAQqH,EAIb3zB,KAAKm0B,WAAa,EA+DtB,SAASC,EAAaC,EAAaC,GAO/B,GANAvvB,QAAQoB,IAEG,0FAAoBmuB,EAAOb,UAAUl0B,UAI5C+0B,EAAOb,UAAUl0B,OAAS,EAAG,CAC7B,IAAIg1B,EAASD,EAAOxD,UAAU0D,qBACxBH,EAAYvD,UAAU0D,qBAIxBD,EAAS,IACTA,EAAS,GAGb,IAAI9yB,EAAQ,IAEZ6yB,EAAOb,UAAU9wB,SAAQ8xB,IACrBA,EAAWC,OAASH,EACpBE,EAAWxZ,KAAOsZ,EAClB9yB,GAAU,GAAEgzB,EAAWE,WAE3BlzB,GAAS,IACTsD,QAAQoB,IAAI1E,GAKZ6yB,EAAOb,UAAUvrB,KAAOosB,EAAOpsB,KAInCmsB,EAAY3gB,QAAQxP,KAAKowB,EAAOb,WAChCY,EAAYlY,UACZpX,QAAQoB,IAAK,oBAAmBkuB,EAAYlY,WAG5CkY,EAAYO,aAkHhB,SAASC,EAAmBC,GACxB,IAAK,IAAIx1B,EAAI,EAAGA,EAAIw1B,EAAoBv1B,OAAQD,IACN,IAAlCw1B,EAAoBx1B,GAAGC,QACvBu1B,EAAoBxvB,OAAOhG,EAAG,GAItC,OAAOw1B,EAAoBv1B,OAAS,EAvNxCw0B,EAAYx1B,UAAU8B,MAAQ,WAC1B,GAAIL,KAAKssB,QAAUqH,EACf,MAAM,IAAI7tB,MACL,4FAEG9F,KAAKssB,gBAEjBtsB,KAAKssB,MAAQsH,EACb5zB,KAAKg0B,cAAc3zB,QACnBL,KAAK8wB,UAAY,IAAIhqB,MASzBitB,EAAYx1B,UAAUsG,KAAO,SAAcoP,GACvC,GAAIjU,KAAKssB,QAAUsH,EACf,MAAM,IAAI9tB,MACL,8FAEG9F,KAAKssB,gBAIjBvnB,QAAQoB,IAAI,8CACZnG,KAAKg0B,cAAcnvB,OAGnB,MAAMkwB,EAAWX,EAAapxB,KAAK,KAAMhD,MAEzCA,KAAKg0B,cAAcT,sBAAsB5wB,SAAQqyB,IAC7Ch1B,KAAKi0B,qBAAqBgB,KAAKD,EAAiBD,GAChD/0B,KAAKmc,aAITnc,KAAKssB,MAAQuH,EAGb7zB,KAAKiU,SAAWA,GA2DpB8f,EAAYx1B,UAAUq2B,WAAa,WAC3B50B,KAAKssB,QAAUuH,GAAuC,IAAjB7zB,KAAKmc,SAG1Cnc,KAAKk1B,SAQbnB,EAAYx1B,UAAU22B,MAAQ,WAC1BnwB,QAAQoB,IACH,sDACGnG,KAAK0T,QAAQnU,UACrBS,KAAKk0B,cAAgB,GAOrB,MAAMiB,EAASn1B,KAAK0T,QAGd0hB,EAAiB,GASvB,IANAP,EAAmBM,GAGnBA,EAAOxyB,SAAQlB,GA6FnB,SAA+BA,EAAOkzB,GAClC,GAAqB,IAAjBlzB,EAAMlC,OACNkC,EAAMyC,KAAKywB,OACR,CACH,GAAIlzB,EAAMA,EAAMlC,OAAS,GAAGm1B,OAASC,EAAKD,MAGtC,YAFAjzB,EAAMyC,KAAKywB,GAKf,IAAK,IAAIr1B,EAAI,EAAGA,EAAImC,EAAMlC,OAAQD,IAC9B,GAAIq1B,EAAKD,MAAQjzB,EAAMnC,GAAGo1B,MAGtB,YAFAjzB,EAAM6D,OAAOhG,EAAG,EAAGq1B,GAK3BlzB,EAAMyC,KAAKywB,IA9GSU,CAAsBD,EAAgB3zB,KAGvDozB,EAAmBM,IAAS,CAE/B,IAAIG,EAAkBH,EAAO,GAE7BA,EAAOxyB,SAAQ8wB,IACPA,EAAU,GAAGiB,MAAQY,EAAgB,GAAGZ,QACxCY,EAAkB7B,MAK1B,IAAI8B,EAAYD,EAAgB/a,QAMhC,IAJAva,KAAKw1B,oBAAoBD,EAAWD,EAAgBptB,MAI7CotB,EAAgB/1B,OAAS,GAAG,CAC/B,IAAIk2B,GAAe,EACnB,MAAMC,EAAgBJ,EAAgB,GAAGZ,MASzC,GAPAS,EAAOxyB,SAAQ8wB,IACPA,EAAU,GAAGiB,MAAQgB,IACrBD,GAAe,MAKnBA,EACA,MAGJF,EAAYD,EAAgB/a,QAC5Bva,KAAKw1B,oBAAoBD,EAAW,OAM5Cv1B,KAAKssB,MAAQwH,EACT9zB,KAAKiU,UACLjU,KAAKiU,SAASjU,KAAKk0B,gBAU3BH,EAAYx1B,UAAUi3B,oBAAsB,SAASb,EAAMzsB,GACnDA,MAAAA,IACAlI,KAAKk0B,eAAkB,KAAIhsB,KAC3BlI,KAAKm0B,WAAajsB,EAAK3I,OAAS,GAEhCS,KAAKm0B,WAAaQ,EAAKA,KAAKp1B,OA/OJ,KAgPxBS,KAAKk0B,eAAiB,SACtBl0B,KAAKm0B,WAAa,GAEtBn0B,KAAKk0B,eAAkB,IAAGS,EAAKA,OAC/B30B,KAAKm0B,YAAcQ,EAAKA,KAAKp1B,OAAS,GAwD1Cw0B,EAAYx1B,UAAUmzB,SAAW,SAASd,GACtC5wB,KAAKg0B,cAActC,SAASd,IAOhCmD,EAAYx1B,UAAU+zB,YAAc,SAAS1B,GACzC5wB,KAAKg0B,cAAc1B,YAAY1B,IAQnCmD,EAAYx1B,UAAUo3B,iBAAmB,WACrC,GAAI31B,KAAKssB,QAAUwH,EACf,MAAM,IAAIhuB,MACL,qGAEG9F,KAAKssB,gBAGjB,OAAOtsB,KAAKk0B,eAMhBH,EAAYx1B,UAAUq3B,SAAW,WAC7B,OAAO51B,KAAKssB,OAOhByH,EAAYx1B,UAAUs3B,MAAQ,WAC1B71B,KAAKssB,MAAQqH,EACb3zB,KAAKmc,QAAU,KACfnc,KAAKk0B,cAAgB,KACrBl0B,KAAK8wB,UAAY,KACjB9wB,KAAKiU,SAAW,KAChBjU,KAAK0T,QAAU,GACf1T,KAAKm0B,WAAa,GAGtBh4B,EAAOD,QAAU63B,YCnWjB,MAAM+B,EAAuB,WACzB,MAAM,IAAIhwB,MAAM,0DAapBgwB,EAAqBv3B,UAAU02B,KAAO,SAAcD,EAAiB/gB,GACjEjU,KAAK+1B,YAAYf,EAAgBlC,MAAMkD,IAC/Bh2B,KAAKi2B,OAAOD,GACZhB,EAAgBvB,UAAYzzB,KAAKk2B,eAAeF,IAEhDjxB,QAAQoB,IAAI,wDACZ6uB,EAAgBvB,UAAY,IAEhCxf,EAAS+gB,OAcjBc,EAAqBv3B,UAAUw3B,YAAc,SAASI,EAAWliB,GAC7D,MAAM,IAAInO,MAAM,iDAmBpBgwB,EAAqBv3B,UAAU23B,eAAiB,SAASF,GACrD,MAAM,IAAIlwB,MAAM,4CAUpBgwB,EAAqBv3B,UAAU03B,OAAS,SAASD,GAC7C,MAAM,IAAIlwB,MAAM,4CAGpB3J,EAAOD,QAAU45B,kBCzEjB,MAAMM,EAAOl0B,EAAQ,MAEf8xB,EAAgB9xB,EAAQ,MACxB4zB,EAAuB5zB,EAAQ,MAK/BwxB,EAAgB,WAElB1zB,KAAKwoB,IAiHT,WACI,MAAMzpB,EAAU,2DAEhB,QAAyBoN,IAArBjD,OAAOmtB,UACPtxB,QAAQoB,IAAIpH,OACT,CACH,MAAMu3B,EAAWptB,OAAOmtB,UAExB,QAA0BlqB,IAAtBmqB,EAASC,UAA0BD,EAASC,SAAS,YACrD,OAAOD,EAEXvxB,QAAQoB,IAAIpH,IA5HLy3B,IAMf9C,EAAcn1B,UAAYD,OAAOe,OAAOy2B,EAAqBv3B,WAK7Dm1B,EAAc90B,YAAc80B,EAS5BA,EAAcn1B,UAAUw3B,YAAc,SAASU,EAAexiB,GAC1DlP,QAAQoB,IAAK,6BAA4BnG,KAAKwoB,OAC9CzjB,QAAQoB,IAAK,8BAA6BswB,KAC1C,MAAMC,EAAU,IAAIC,eAEpBD,EAAQE,mBAAqB,WACzB,GAAIF,EAAQ5N,aAAe6N,eAAeE,MAChB,MAAnBH,EAAQI,OACX7iB,EAASyiB,EAAQK,mBACd,GAAIL,EAAQ5N,aAAe6N,eAAeE,KAC7C,MAAM,IAAI/wB,MACL,yDACG4wB,EAAQI,WAKxBJ,EAAQM,KAAK,OAAQh3B,KAAKwoB,KAC1BkO,EAAQO,iBAAiB,eACrBjD,EAAc9C,4BAClBwF,EAAQzB,KAAKwB,GACb1xB,QAAQoB,IAAK,QAAOswB,MASxB/C,EAAcn1B,UAAU23B,eAAiB,SAASF,GAC9C,MAAMxf,EAASjT,KAAK+G,MAAM0rB,GAAUkB,QAKpC1gB,EAAO+D,QACP,MAAM9Y,EAAQ,GAOd,OALA+U,EAAO7T,SACHgyB,GACIA,EAAKwC,QACE11B,EAAMyC,KAAK,IAAIkyB,EAAKzB,EAAKA,KAAMA,EAAKt0B,MAAOs0B,EAAK1Z,QAExDxZ,GAQXiyB,EAAcn1B,UAAU03B,OAAS,SAASD,GAItC,GAHAjxB,QAAQoB,IAAK,wBAAuB6vB,EAASx3B,cAGrB,iBAAbw3B,EACP,OAAO,EAIX,IAAIoB,EAEJ,IACIA,EAAO7zB,KAAK+G,MAAM0rB,GACpB,MAAOxyB,GAGL,OAFAuB,QAAQoB,IAAI3C,IAEL,EAIX,QAAqB2I,IAAjBirB,EAAKF,QACL,OAAO,EAIX,MAAMz1B,EAAQ21B,EAAKF,QAEnB,SAAMz1B,EAAM,KAAMA,EAAM,GAAG,gBA8B/BtF,EAAOD,QAAUw3B,YCvIjB,MAAM0C,EAAO,SAASzB,EAAMD,EAAOzZ,GAC/Bjb,KAAK20B,KAAOA,EACZ30B,KAAK00B,MAAQA,EACb10B,KAAKib,IAAMA,GAOfmb,EAAK73B,UAAU84B,QAAU,WACrB,OAAOr3B,KAAK20B,MAOhByB,EAAK73B,UAAU+4B,aAAe,WAC1B,OAAOt3B,KAAK00B,OAOhB0B,EAAK73B,UAAUg5B,WAAa,WACxB,OAAOv3B,KAAKib,KAGhB9e,EAAOD,QAAUk6B,WCFjBj6B,EAAOD,QAlCU,CAsBbs7B,gBAAe,CAACC,EAAYC,EAAUC,IAGf,iBAFPF,EAGD,KAHCA,EAMDvqB,QAAQ,SAAUwqB,GACxBxqB,QAAQ,iBAAiC,IAAhByqB,cCvBtC,SAASC,EAAsB7O,EAAK8O,GAChC,IAAK9O,IAAQ8O,GAAmC,mBAApB9O,EAAIzR,aACJ,mBAAdugB,EAAK/L,KACf,MAAM,IAAIhmB,MAAM,qDAEpB9F,KAAK+oB,IAAMA,EACX/oB,KAAK63B,KAAOA,EAWhBD,EAAsBr5B,UAAUu5B,QAAU,WAAkB,2BAANxxB,EAAM,yBAANA,EAAM,gBACxD,MAAMyxB,EAAWzxB,EAAK,GAItBA,EAAK,GAAKtG,KAAK63B,KAGf73B,KAAK+oB,IAAIzR,YACLygB,EACA1qB,SAAS9O,UAAUyE,KAAKF,MAAM9C,KAAK63B,KAAK/L,KAAMxlB,KAGtDnK,EAAOD,QAAU07B,YC1BjB,MAAMI,EAAW,GAGXC,EAAoBx7B,OAAOy7B,QAY3BC,EAA0B17B,OAAO27B,qBAYvC37B,OAAOy7B,QAlBP,WAA0C,2BAAN5xB,EAAM,yBAANA,EAAM,gBACtC0xB,EAASr1B,SAAQkoB,GAAWA,KAAWvkB,KACvC2xB,GAAqBA,KAAqB3xB,IAiB9C7J,OAAO27B,qBAPP,SAAuCC,GACnCL,EAASr1B,SAAQkoB,GAAWA,EAAQ,KAAM,KAAM,KAAM,KAAMwN,EAAMC,UAClEH,GAA2BA,EAAwBE,IAOvD,MAAME,EAAuB,CAKzBC,WAAW3N,GACPmN,EAAS9zB,KAAK2mB,IAOlB4N,iBAAiBj1B,GACb,MAAMk1B,EAAaj8B,OAAOy7B,QAErBQ,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMl1B,IAOvCm1B,8BAA8Bn1B,GAC1B,MAAMk1B,EAAaj8B,OAAO27B,qBAErBM,GAGLA,EAAWl1B,KAKnBrH,EAAOD,QAAUq8B,YC5DjB,SAASK,EAAUvZ,EAAKD,GACpB,OAAOnO,KAAKC,MAAMD,KAAKE,UAAYiO,EAAMC,EAAM,IAAMA,EAQzD,SAASwZ,EAActlB,GACnB,OAAOA,EAAIqlB,EAAU,EAAGrlB,EAAIhU,OAAS,IAqBzC,MAAMu5B,EAAa,CAKfC,eAAc,IACHF,EA7CI,oBAoDfG,gBAAgBr1B,GACZ,IAAIgpB,EAAM,GAEV,KAAOhpB,KACHgpB,GAAO3sB,KAAK+4B,iBAGhB,OAAOpM,GAEXkM,cAAAA,EACAI,kBApCJ,SAA2B15B,GACvB,IAAIiX,EAAS,GAEb,IAAK,IAAIlX,EAAI,EAAGA,EAAIC,EAAQD,GAAK,EAC7BkX,GAAUqiB,EApCZ,kEAuCF,OAAOriB,GA8BPoiB,UAAAA,GAGJz8B,EAAOD,QAAU48B,kBC5EjB,MAAMzP,EAAyBnnB,EAAQ,MAQjCg3B,EAAa,CAgBfC,WACQpQ,EACAhW,EACA0Y,EACA2N,EACAC,EACAC,GACJ,MAAMj4B,EAAIsmB,SACJ4R,EAAU,SACV3Q,EAASvnB,EAAEymB,cAAcyR,GACzBC,EAAgBn4B,EAAEumB,qBAAqB2R,GAAS,GAItD,GAFA3Q,EAAO7V,MAAQA,EAEXqmB,EAAa,CAGb,MAAMK,EAAWpQ,IAEjB,GAAIoQ,EAAU,CACV,MAAMC,EAAYD,EAAS1Q,IACrB4Q,EACAD,EAAU9sB,UAAU,EAAG8sB,EAAUE,YAAY,KAAO,GAEtDF,GAAaC,IAEb5Q,EAAM4Q,EAAgB5Q,IAK9BsQ,IACAzQ,EAAOiR,OAASR,GAEhBC,IACA1Q,EAAOsP,QAAUoB,GAGrB1Q,EAAOG,IAAMA,EACT0C,EACA+N,EAAcM,WAAWC,aAAanR,EAAQ4Q,GAE9CA,EAAcM,WAAW3G,YAAYvK,KAOjDzsB,EAAOD,QAAUg9B,YClDjB/8B,EAAOD,QAAU,CAAE89B,YAhBnB,SAAqBC,GACjB,IAAKA,EACD,OAAO,EAGX,IAAIC,EAAgB56B,EAAV0B,EAAO,EAEjB,IAAK1B,EAAI,EAAGA,EAAI26B,EAAO16B,OAAQD,IAC3B46B,EAAOD,EAAOn5B,WAAWxB,GACzB0B,GAAQk5B,EAAOjpB,KAAKkpB,IAAI,GAAIF,EAAO16B,OAAS,EAAID,GAChD0B,EAAOiQ,KAAK8G,IAAW,EAAP/W,GAGpB,OAAOA,oBCpBX,MAAM83B,EAAa52B,EAAQ,MASrBmG,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7BlM,EAAOD,QAAU,CACbk+B,iBARJ,WAII,MAAQ,GAHKtB,EAAWD,cAAcxwB,MACvBywB,EAAWG,kBAAkB,iBCvZhD98B,EAAOD,QAtBiB,CAIpBm+B,OAAQ,SAKRC,QAAS,UAKTC,iBAAkB,mBAKlBC,KAAM,kBCFVr+B,EAAOD,QAZkB,CAIrBu+B,YAAa,cAKbC,KAAM,kBCcVv+B,EAAOD,QA5Be,CAIlBy+B,KAAM,OAKNC,KAAM,OAKNC,OAAQ,SAKRC,IAAK,MAKLC,IAAK,iBCFT5+B,EAAOD,QAtBgB,CAInB8+B,SAAU,WAKVC,SAAU,WAKVC,SAAU,WAKVC,SAAU,sBC2Fdh/B,EAAOD,QAlHW,CAIdk/B,qBAAsB,2BAKtBC,oBAAqB,0BACrBC,kBAAmB,wBACnBC,6BAA8B,mCAC9BC,yBAA0B,+BAC1BC,uBAAwB,6BAOxBC,oBAAqB,0BAErBC,iCAAkC,uCAOlCC,oBAAqB,0BAQrBC,yBAA0B,+BAK1BC,2CAA4C,iDAE5CC,eAAgB,qBAMhBC,mBAAoB,yBAIpBC,kBAAmB,wBAMnBC,qBAAsB,2BAItBC,oBAAqB,0BAKrBC,6BAA8B,mCAK9BC,8BAA+B,oCAC/BC,4BAA6B,kCAC7BC,oBAAqB,0BAKrBC,wBAAyB,8BACzBC,sBAAuB,4BAMvBC,0BAA2B,gCAK3BC,wBAAyB,8BASzBC,oBAAqB,0BASrBC,qBAAsB,sCCxD1B1gC,EAAOD,QAvDa,CAChB,KAAQ,CACJ4gC,MAAO,KACPC,OAAQ,MAEZ,KAAM,CACFD,MAAO,KACPC,OAAQ,MAEZ,KAAQ,CACJD,MAAO,KACPC,OAAQ,MAEZ,OAAU,CACND,MAAO,KACPC,OAAQ,MAEZ,IAAO,CACHD,MAAO,KACPC,OAAQ,KAEZ,GAAM,CACFD,MAAO,KACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,gBCnChB5gC,EAAOD,QAZW,CAIdm+B,OAAQ,SAKRC,QAAS,oBCDbn+B,EAAOD,QAZsB,CASzB8gC,iBAAkB,6CCLtB7gC,EAAOD,QAJW,CACd+gC,UAAW,mBC8Xf9gC,EAAOD,QA/XY,CAIfghC,yBAA0B,gCAI1BC,qBAAsB,4BAItBC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,YAAa,mBAKbC,cAAe,2BAIfC,cAAe,2BAMfC,WAAY,wBACZC,oBAAqB,2BAGrBC,8BAA+B,qCAK/BC,uBAAwB,4BAIxBC,kBAAmB,yBAInBC,uBAAwB,8BAIxBC,oBAAqB,2BAIrBC,sBAAuB,6BAIvBC,qBAAsB,0BAKtBC,0BAA2B,iCAI3BC,qBAAsB,4BAKtBC,gBAAiB,uBAKjBC,kBAAmB,yBACnBC,SAAU,gBACVC,mBAAoB,0BACpBC,WAAY,kBACZC,kBAAmB,yBAMnBC,eAAgB,qBAMhBC,oBAAqB,0BAWrBC,OAAQ,cAGRC,mBAAoB,yBAKpBC,eAAgB,sBAIhBC,iBAAkB,wBAIlBC,wBAAyB,+BAIzBC,yBAA0B,gCAG1BC,4BAA6B,mCAG7BC,cAAe,qBAGfC,qBAAsB,4BAGtBC,WAAY,kBAGZC,kBAAmB,yBAGnBC,gBAAiB,uBAGjBC,wBAAyB,+BAGzBC,yBAA0B,gCAG1BC,sBAAuB,6BAGvBC,kBAAmB,yBAGnBC,SAAU,gBAIVC,iBAAkB,wBAGlBC,iBAAkB,wBAGlBC,yBAA0B,gCAI1BC,wBAAyB,mBAIzBC,wBAAyB,mBAMzBC,+BAAgC,kBAKhCC,6BAA8B,oCAC9BC,kBAAmB,yBAKnBC,qBAAsB,gCACtBC,kBAAmB,yBACnBC,gBAAiB,uBACjBC,iBAAkB,wBAGlBC,cAAe,qBAKfC,uBAAwB,4BAIxBC,aAAc,oBAKdC,qBAAsB,4BACtBC,kBAAmB,8BACnBC,mBAAoB,0BACpBC,+BAAgC,sCAChCC,gBAAiB,uBACjBC,gCAAiC,uCAKjCC,qBAAsB,4BAGtBC,qBAAsB,4BAItBC,6BAA8B,oCAK9BC,eAAgB,sBAKhBC,qBAAsB,4BAYtBC,uBAAwB,8BAKxBC,WAAY,kBAKZC,iBAAkB,wBAKlBC,cAAe,qBAKfC,oBAAqB,2BAKrBC,uBAAwB,8BAKxBC,8BAA+B,qCAK/BC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,sBAAuB,6BAKvBC,mCAAoC,0CAKpCC,mCAAoC,0CAKpCC,4BAA6B,mCAK7BC,qBAAsB,4BAKtBC,uBAAwB,8BAIxBC,uBAAwB,8BAIxBC,gBAAiB,uBAIjBC,iBAAkB,wBAQlBC,6BAA8B,oCAK9BC,eAAgB,4BAQhBC,kCAAmC,qCAUnCC,mCACI,qCAIJC,6BAA8B,oCAM9BC,sBAAuB,yDClX3B,IAGIC,EAAiB,4BAGjBC,EAAmB,iBAGnBC,EAAU,qBAEVC,EAAU,mBACVC,EAAU,gBAEVC,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBACbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBACdC,EAAa,wBACbC,EAAa,wBACbC,EAAU,qBACVC,EAAW,sBACXC,EAAW,sBACXC,EAAW,sBACXC,EAAkB,6BAClBC,EAAY,uBACZC,EAAY,uBASZC,EAAU,OAGVC,EAAe,8BAGfC,EAAW,mBAGXC,EAAgB,GACpBA,EAAc5B,GAAW4B,EA7CV,kBA8CfA,EAAcd,GAAkBc,EAAcb,GAC9Ca,EAAc3B,GAAW2B,EAAc1B,GACvC0B,EAAcZ,GAAcY,EAAcX,GAC1CW,EAAcV,GAAWU,EAAcT,GACvCS,EAAcR,GAAYQ,EAAcvB,GACxCuB,EAActB,GAAasB,EAAcrB,GACzCqB,EAAcnB,GAAamB,EAAclB,GACzCkB,EAAcjB,GAAaiB,EAAchB,GACzCgB,EAAcP,GAAYO,EAAcN,GACxCM,EAAcL,GAAaK,EAAcJ,IAAa,EACtDI,EArDe,kBAqDWA,EAAczB,GACxCyB,EAAcf,IAAc,EAG5B,IAAIgB,EAA8B,iBAAV9nC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhF+nC,EAA0B,iBAAR1oC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAO+oC,GAAcC,GAAY33B,SAAS,cAATA,GAGjC43B,EAA4C/oC,IAAYA,EAAQgpC,UAAYhpC,EAG5EipC,EAAaF,GAA4C9oC,IAAWA,EAAO+oC,UAAY/oC,EAGvFipC,EAAgBD,GAAcA,EAAWjpC,UAAY+oC,EAUzD,SAASI,EAAYh5B,EAAKi5B,GAGxB,OADAj5B,EAAI8gB,IAAImY,EAAK,GAAIA,EAAK,IACfj5B,EAWT,SAASk5B,EAAYpY,EAAK1jB,GAGxB,OADA0jB,EAAIqY,IAAI/7B,GACD0jB,EAuDT,SAASsY,EAAYhkC,EAAOikC,EAAUC,EAAaC,GACjD,IAAI/kC,GAAS,EACTtB,EAASkC,EAAQA,EAAMlC,OAAS,EAKpC,IAHIqmC,GAAarmC,IACfomC,EAAclkC,IAAQZ,MAEfA,EAAQtB,GACfomC,EAAcD,EAASC,EAAalkC,EAAMZ,GAAQA,EAAOY,GAE3D,OAAOkkC,EAyCT,SAASE,EAAap8B,GAGpB,IAAI+M,GAAS,EACb,GAAa,MAAT/M,GAA0C,mBAAlBA,EAAMjL,SAChC,IACEgY,KAAY/M,EAAQ,IACpB,MAAOhB,IAEX,OAAO+N,EAUT,SAASsvB,EAAWz5B,GAClB,IAAIxL,GAAS,EACT2V,EAASrY,MAAMkO,EAAIgmB,MAKvB,OAHAhmB,EAAI1J,SAAQ,SAAS8G,EAAOS,GAC1BsM,IAAS3V,GAAS,CAACqJ,EAAKT,MAEnB+M,EAWT,SAASuvB,EAAQC,EAAM/3B,GACrB,OAAO,SAASrK,GACd,OAAOoiC,EAAK/3B,EAAUrK,KAW1B,SAASqiC,EAAW9Y,GAClB,IAAItsB,GAAS,EACT2V,EAASrY,MAAMgvB,EAAIkF,MAKvB,OAHAlF,EAAIxqB,SAAQ,SAAS8G,GACnB+M,IAAS3V,GAAS4I,KAEb+M,EAIT,IASM0vB,EATFC,EAAahoC,MAAMI,UACnB6nC,EAAY/4B,SAAS9O,UACrB8nC,EAAc/nC,OAAOC,UAGrB+nC,EAAatqC,EAAK,sBAGlBuqC,GACEL,EAAM,SAASM,KAAKF,GAAcA,EAAW7jC,MAAQ6jC,EAAW7jC,KAAKgkC,UAAY,KACvE,iBAAmBP,EAAO,GAItCQ,EAAeN,EAAU5nC,SAGzBqV,GAAiBwyB,EAAYxyB,eAO7B8yB,GAAiBN,EAAY7nC,SAG7BooC,GAAah9B,OAAO,IACtB88B,EAAajoC,KAAKoV,IAAgB3G,QAzQjB,sBAyQuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EvN,GAASylC,EAAgBppC,EAAK2D,YAASwM,EACvCqS,GAASxiB,EAAKwiB,OACdvgB,GAAajC,EAAKiC,WAClB4oC,GAAed,EAAQznC,OAAO+uB,eAAgB/uB,QAC9CwoC,GAAexoC,OAAOe,OACtB0nC,GAAuBV,EAAYU,qBACnCzhC,GAAS6gC,EAAW7gC,OAGpB0hC,GAAmB1oC,OAAO0rB,sBAC1Bid,GAAiBtnC,GAASA,GAAOunC,cAAW/6B,EAC5Cg7B,GAAapB,EAAQznC,OAAOmE,KAAMnE,QAGlC8oC,GAAWC,GAAUrrC,EAAM,YAC3BsrC,GAAMD,GAAUrrC,EAAM,OACtBwuB,GAAU6c,GAAUrrC,EAAM,WAC1BurC,GAAMF,GAAUrrC,EAAM,OACtBwrC,GAAUH,GAAUrrC,EAAM,WAC1ByrC,GAAeJ,GAAU/oC,OAAQ,UAGjCopC,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAASnd,IAC7Bsd,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcxpB,GAASA,GAAOjgB,eAAY4N,EAC1C87B,GAAgBD,GAAcA,GAAYE,aAAU/7B,EASxD,SAASg8B,GAAKC,GACZ,IAAIvnC,GAAS,EACTtB,EAAS6oC,EAAUA,EAAQ7oC,OAAS,EAGxC,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KA2F7B,SAASC,GAAUH,GACjB,IAAIvnC,GAAS,EACTtB,EAAS6oC,EAAUA,EAAQ7oC,OAAS,EAGxC,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KAyG7B,SAASE,GAASJ,GAChB,IAAIvnC,GAAS,EACTtB,EAAS6oC,EAAUA,EAAQ7oC,OAAS,EAGxC,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KAuF7B,SAASG,GAAML,GACbpoC,KAAK0oC,SAAW,IAAIH,GAAUH,GAyHhC,SAASO,GAAYC,EAAQ1+B,EAAKT,GAChC,IAAIo/B,EAAWD,EAAO1+B,GAChB2J,GAAepV,KAAKmqC,EAAQ1+B,IAAQ4+B,GAAGD,EAAUp/B,UACxC0C,IAAV1C,GAAyBS,KAAO0+B,KACnCA,EAAO1+B,GAAOT,GAYlB,SAASs/B,GAAatnC,EAAOyI,GAE3B,IADA,IAAI3K,EAASkC,EAAMlC,OACZA,KACL,GAAIupC,GAAGrnC,EAAMlC,GAAQ,GAAI2K,GACvB,OAAO3K,EAGX,OAAQ,EA8BV,SAASypC,GAAUv/B,EAAOw/B,EAAQC,EAAQC,EAAYj/B,EAAK0+B,EAAQ7iC,GACjE,IAAIyQ,EAIJ,GAHI2yB,IACF3yB,EAASoyB,EAASO,EAAW1/B,EAAOS,EAAK0+B,EAAQ7iC,GAASojC,EAAW1/B,SAExD0C,IAAXqK,EACF,OAAOA,EAET,IAAK4yB,GAAS3/B,GACZ,OAAOA,EAET,IAAI4/B,EAAQjrC,GAAQqL,GACpB,GAAI4/B,GAEF,GADA7yB,EA2XJ,SAAwB/U,GACtB,IAAIlC,EAASkC,EAAMlC,OACfiX,EAAS/U,EAAM7C,YAAYW,GAO/B,OAJIA,GAA6B,iBAAZkC,EAAM,IAAkBoS,GAAepV,KAAKgD,EAAO,WACtE+U,EAAO3V,MAAQY,EAAMZ,MACrB2V,EAAO8yB,MAAQ7nC,EAAM6nC,OAEhB9yB,EApYI+yB,CAAe9/B,IACnBw/B,EACH,OA6ON,SAAmBp2B,EAAQpR,GACzB,IAAIZ,GAAS,EACTtB,EAASsT,EAAOtT,OAGpB,IADAkC,IAAUA,EAAQtD,MAAMoB,MACfsB,EAAQtB,GACfkC,EAAMZ,GAASgS,EAAOhS,GAExB,OAAOY,EArPI+nC,CAAU//B,EAAO+M,OAErB,CACL,IAAIizB,EAAMC,GAAOjgC,GACbkgC,EAASF,GAAOpG,GAAWoG,GAAOnG,EAEtC,GAAI4D,GAASz9B,GACX,OA0HN,SAAqBzL,EAAQirC,GAC3B,GAAIA,EACF,OAAOjrC,EAAOuI,QAEhB,IAAIiQ,EAAS,IAAIxY,EAAOY,YAAYZ,EAAOuB,QAE3C,OADAvB,EAAO+uB,KAAKvW,GACLA,EAhIIozB,CAAYngC,EAAOw/B,GAE5B,GAAIQ,GAAOhG,GAAagG,GAAOvG,GAAYyG,IAAWf,EAAS,CAC7D,GAAI/C,EAAap8B,GACf,OAAOm/B,EAASn/B,EAAQ,GAG1B,GADA+M,EA+XN,SAAyBoyB,GACvB,MAAqC,mBAAtBA,EAAOhqC,aAA8BirC,GAAYjB,GAE5D,GAxVGQ,GADWU,EAwVHjD,GAAa+B,IAvVH9B,GAAagD,GAAS,GADjD,IAAoBA,EAzCLC,CAAgBJ,EAAS,GAAKlgC,IAClCw/B,EACH,OA6QR,SAAqBp2B,EAAQ+1B,GAC3B,OAAOoB,GAAWn3B,EAAQo3B,GAAWp3B,GAAS+1B,GA9QjCsB,CAAYzgC,EAhD3B,SAAoBm/B,EAAQ/1B,GAC1B,OAAO+1B,GAAUoB,GAAWn3B,EAAQpQ,GAAKoQ,GAAS+1B,GA+ClBuB,CAAW3zB,EAAQ/M,QAE1C,CACL,IAAKq7B,EAAc2E,GACjB,OAAOb,EAASn/B,EAAQ,GAE1B+M,EA0YN,SAAwBoyB,EAAQa,EAAKW,EAAWnB,GAC9C,IA5MmBoB,EA4MfC,EAAO1B,EAAOhqC,YAClB,OAAQ6qC,GACN,KAAKzF,EACH,OAAOuG,GAAiB3B,GAE1B,KAAKzF,EACL,KAAKC,EACH,OAAO,IAAIkH,GAAM1B,GAEnB,KAAK3E,EACH,OA3QN,SAAuBuG,EAAUvB,GAC/B,IAAIjrC,EAASirC,EAASsB,GAAiBC,EAASxsC,QAAUwsC,EAASxsC,OACnE,OAAO,IAAIwsC,EAAS5rC,YAAYZ,EAAQwsC,EAASC,WAAYD,EAASxtB,YAyQ3D0tB,CAAc9B,EAAQK,GAE/B,KAAK/E,EAAY,KAAKC,EACtB,KAAKC,EAAS,KAAKC,EAAU,KAAKC,EAClC,KAAKC,EAAU,KAAKC,EAAiB,KAAKC,EAAW,KAAKC,EACxD,OA/MN,SAAyBiG,EAAY1B,GACnC,IAAIjrC,EAASirC,EAASsB,GAAiBI,EAAW3sC,QAAU2sC,EAAW3sC,OACvE,OAAO,IAAI2sC,EAAW/rC,YAAYZ,EAAQ2sC,EAAWF,WAAYE,EAAWprC,QA6MjEqrC,CAAgBhC,EAAQK,GAEjC,KAAK1F,EACH,OArQN,SAAkBl3B,EAAK48B,EAAQmB,GAE7B,OAAO3E,EADKwD,EAASmB,EAAUtE,EAAWz5B,IAAM,GAAQy5B,EAAWz5B,GACzCg5B,EAAa,IAAIh5B,EAAIzN,aAmQpCisC,CAASjC,EAAQK,EAAQmB,GAElC,KAAK5G,EACL,KAAKK,EACH,OAAO,IAAIyG,EAAK1B,GAElB,KAAKjF,EACH,OAhQN,SAAqBmH,GACnB,IAAIt0B,EAAS,IAAIs0B,EAAOlsC,YAAYksC,EAAOj4B,OAAQ8xB,EAAQ6B,KAAKsE,IAEhE,OADAt0B,EAAOu0B,UAAYD,EAAOC,UACnBv0B,EA6PIw0B,CAAYpC,GAErB,KAAKhF,EACH,OApPN,SAAkBzW,EAAK8b,EAAQmB,GAE7B,OAAO3E,EADKwD,EAASmB,EAAUnE,EAAW9Y,IAAM,GAAQ8Y,EAAW9Y,GACzCoY,EAAa,IAAIpY,EAAIvuB,aAkPpCqsC,CAASrC,EAAQK,EAAQmB,GAElC,KAAKtG,EACH,OA3OeuG,EA2OIzB,EA1OhBX,GAAgB3pC,OAAO2pC,GAAcxpC,KAAK4rC,IAAW,IAhM/Ca,CAAezhC,EAAOggC,EAAKT,GAAWC,IAInDljC,IAAUA,EAAQ,IAAI0iC,IACtB,IAAI0C,EAAUplC,EAAMwY,IAAI9U,GACxB,GAAI0hC,EACF,OAAOA,EAIT,GAFAplC,EAAMonB,IAAI1jB,EAAO+M,IAEZ6yB,EACH,IAAI+B,EAAQlC,EAsQhB,SAAoBN,GAClB,OAnOF,SAAwBA,EAAQyC,EAAUC,GACxC,IAAI90B,EAAS60B,EAASzC,GACtB,OAAOxqC,GAAQwqC,GAAUpyB,EApwB3B,SAAmB/U,EAAO8O,GAKxB,IAJA,IAAI1P,GAAS,EACTtB,EAASgR,EAAOhR,OAChBg1B,EAAS9yB,EAAMlC,SAEVsB,EAAQtB,GACfkC,EAAM8yB,EAAS1zB,GAAS0P,EAAO1P,GAEjC,OAAOY,EA4vB2B8pC,CAAU/0B,EAAQ80B,EAAY1C,IAiOzD4C,CAAe5C,EAAQnmC,GAAMwnC,IAvQbwB,CAAWhiC,GAAShH,GAAKgH,GAUhD,OA5vBF,SAAmBhI,EAAOikC,GAIxB,IAHA,IAAI7kC,GAAS,EACTtB,EAASkC,EAAQA,EAAMlC,OAAS,IAE3BsB,EAAQtB,IAC8B,IAAzCmmC,EAASjkC,EAAMZ,GAAQA,MA+uB7B6qC,CAAUN,GAAS3hC,GAAO,SAASkiC,EAAUzhC,GACvCkhC,IAEFO,EAAWliC,EADXS,EAAMyhC,IAIRhD,GAAYnyB,EAAQtM,EAAK8+B,GAAU2C,EAAU1C,EAAQC,EAAQC,EAAYj/B,EAAKT,EAAO1D,OAEhFyQ,EAsGT,SAAS+zB,GAAiB7oC,GACxB,IAAI8U,EAAS,IAAI9U,EAAY9C,YAAY8C,EAAYsb,YAErD,OADA,IAAI/e,GAAWuY,GAAQ2W,IAAI,IAAIlvB,GAAWyD,IACnC8U,EA8GT,SAASwzB,GAAWn3B,EAAQu4B,EAAOxC,EAAQO,GACzCP,IAAWA,EAAS,IAKpB,IAHA,IAAI/nC,GAAS,EACTtB,EAAS6rC,EAAM7rC,SAEVsB,EAAQtB,GAAQ,CACvB,IAAI2K,EAAMkhC,EAAMvqC,GAEZ+qC,EAAWzC,EACXA,EAAWP,EAAO1+B,GAAM2I,EAAO3I,GAAMA,EAAK0+B,EAAQ/1B,QAClD1G,EAEJw8B,GAAYC,EAAQ1+B,OAAkBiC,IAAby/B,EAAyB/4B,EAAO3I,GAAO0hC,GAElE,OAAOhD,EAkCT,SAASiD,GAAWx/B,EAAKnC,GACvB,IAqKiBT,EACbjK,EAtKAqZ,EAAOxM,EAAIq8B,SACf,OAsKgB,WADZlpC,SADaiK,EApKAS,KAsKmB,UAAR1K,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAViK,EACU,OAAVA,GAvKDoP,EAAmB,iBAAP3O,EAAkB,SAAW,QACzC2O,EAAKxM,IAWX,SAASg7B,GAAUuB,EAAQ1+B,GACzB,IAAIT,EAj8BN,SAAkBm/B,EAAQ1+B,GACxB,OAAiB,MAAV0+B,OAAiBz8B,EAAYy8B,EAAO1+B,GAg8B/B4hC,CAASlD,EAAQ1+B,GAC7B,OAvOF,SAAsBT,GACpB,SAAK2/B,GAAS3/B,KAyYEu8B,EAzYiBv8B,EA0YxB88B,GAAeA,KAAcP,MAvYvB+F,GAAWtiC,IAAUo8B,EAAap8B,GAAUm9B,GAAahC,GACzDp5B,KAAKm8B,GAASl+B,IAqY/B,IAAkBu8B,EAnKTgG,CAAaviC,GAASA,OAAQ0C,EA7tBvCg8B,GAAK5pC,UAAU8pC,MAnEf,WACEroC,KAAK0oC,SAAWjB,GAAeA,GAAa,MAAQ,IAmEtDU,GAAK5pC,UAAL,OAtDA,SAAoB2L,GAClB,OAAOlK,KAAKisC,IAAI/hC,WAAelK,KAAK0oC,SAASx+B,IAsD/Ci+B,GAAK5pC,UAAUggB,IA1Cf,SAAiBrU,GACf,IAAI2O,EAAO7Y,KAAK0oC,SAChB,GAAIjB,GAAc,CAChB,IAAIjxB,EAASqC,EAAK3O,GAClB,OAAOsM,IAAWwsB,OAAiB72B,EAAYqK,EAEjD,OAAO3C,GAAepV,KAAKoa,EAAM3O,GAAO2O,EAAK3O,QAAOiC,GAqCtDg8B,GAAK5pC,UAAU0tC,IAzBf,SAAiB/hC,GACf,IAAI2O,EAAO7Y,KAAK0oC,SAChB,OAAOjB,QAA6Bt7B,IAAd0M,EAAK3O,GAAqB2J,GAAepV,KAAKoa,EAAM3O,IAwB5Ei+B,GAAK5pC,UAAU4uB,IAXf,SAAiBjjB,EAAKT,GAGpB,OAFWzJ,KAAK0oC,SACXx+B,GAAQu9B,SAA0Bt7B,IAAV1C,EAAuBu5B,EAAiBv5B,EAC9DzJ,MAoHTuoC,GAAUhqC,UAAU8pC,MAjFpB,WACEroC,KAAK0oC,SAAW,IAiFlBH,GAAUhqC,UAAV,OArEA,SAAyB2L,GACvB,IAAI2O,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAE/B,QAAIrJ,EAAQ,IAIRA,GADYgY,EAAKtZ,OAAS,EAE5BsZ,EAAKmD,MAEL1W,GAAO7G,KAAKoa,EAAMhY,EAAO,GAEpB,KAyDT0nC,GAAUhqC,UAAUggB,IA7CpB,SAAsBrU,GACpB,IAAI2O,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAE/B,OAAOrJ,EAAQ,OAAIsL,EAAY0M,EAAKhY,GAAO,IA0C7C0nC,GAAUhqC,UAAU0tC,IA9BpB,SAAsB/hC,GACpB,OAAO6+B,GAAa/oC,KAAK0oC,SAAUx+B,IAAQ,GA8B7Cq+B,GAAUhqC,UAAU4uB,IAjBpB,SAAsBjjB,EAAKT,GACzB,IAAIoP,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAO/B,OALIrJ,EAAQ,EACVgY,EAAK3U,KAAK,CAACgG,EAAKT,IAEhBoP,EAAKhY,GAAO,GAAK4I,EAEZzJ,MAkGTwoC,GAASjqC,UAAU8pC,MA/DnB,WACEroC,KAAK0oC,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKb,IAAOiB,IACnB,OAAU,IAAIJ,KA4DlBK,GAASjqC,UAAT,OA/CA,SAAwB2L,GACtB,OAAO2hC,GAAW7rC,KAAMkK,GAAjB,OAAgCA,IA+CzCs+B,GAASjqC,UAAUggB,IAnCnB,SAAqBrU,GACnB,OAAO2hC,GAAW7rC,KAAMkK,GAAKqU,IAAIrU,IAmCnCs+B,GAASjqC,UAAU0tC,IAvBnB,SAAqB/hC,GACnB,OAAO2hC,GAAW7rC,KAAMkK,GAAK+hC,IAAI/hC,IAuBnCs+B,GAASjqC,UAAU4uB,IAVnB,SAAqBjjB,EAAKT,GAExB,OADAoiC,GAAW7rC,KAAMkK,GAAKijB,IAAIjjB,EAAKT,GACxBzJ,MAgGTyoC,GAAMlqC,UAAU8pC,MApEhB,WACEroC,KAAK0oC,SAAW,IAAIH,IAoEtBE,GAAMlqC,UAAN,OAxDA,SAAqB2L,GACnB,OAAOlK,KAAK0oC,SAAL,OAAwBx+B,IAwDjCu+B,GAAMlqC,UAAUggB,IA5ChB,SAAkBrU,GAChB,OAAOlK,KAAK0oC,SAASnqB,IAAIrU,IA4C3Bu+B,GAAMlqC,UAAU0tC,IAhChB,SAAkB/hC,GAChB,OAAOlK,KAAK0oC,SAASuD,IAAI/hC,IAgC3Bu+B,GAAMlqC,UAAU4uB,IAnBhB,SAAkBjjB,EAAKT,GACrB,IAAIyiC,EAAQlsC,KAAK0oC,SACjB,GAAIwD,aAAiB3D,GAAW,CAC9B,IAAI4D,EAAQD,EAAMxD,SAClB,IAAKpB,IAAQ6E,EAAM5sC,OAAS6sC,IAE1B,OADAD,EAAMjoC,KAAK,CAACgG,EAAKT,IACVzJ,KAETksC,EAAQlsC,KAAK0oC,SAAW,IAAIF,GAAS2D,GAGvC,OADAD,EAAM/e,IAAIjjB,EAAKT,GACRzJ,MAicT,IAAIiqC,GAAajD,GAAmBjB,EAAQiB,GAAkB1oC,QAyhB9D,WACE,MAAO,IAjhBLorC,GAtQJ,SAAoBjgC,GAClB,OAAOk9B,GAAeloC,KAAKgL,IAyX7B,SAAS4iC,GAAQ5iC,EAAOlK,GAEtB,SADAA,EAAmB,MAAVA,EAAiB0jC,EAAmB1jC,KAE1B,iBAATkK,GAAqBo7B,EAASr5B,KAAK/B,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQlK,EAmC7C,SAASsqC,GAAYpgC,GACnB,IAAI6gC,EAAO7gC,GAASA,EAAM7K,YAG1B,OAAO6K,KAFqB,mBAAR6gC,GAAsBA,EAAK/rC,WAAc8nC,GAY/D,SAASsB,GAAS3B,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOU,EAAajoC,KAAKunC,GACzB,MAAOv9B,IACT,IACE,OAAQu9B,EAAO,GACf,MAAOv9B,KAEX,MAAO,GAyDT,SAASqgC,GAAGr/B,EAAO6iC,GACjB,OAAO7iC,IAAU6iC,GAAU7iC,GAAUA,GAAS6iC,GAAUA,GAxOrDlF,IAAYsC,GAAO,IAAItC,GAAS,IAAI7pC,YAAY,MAAQ0mC,GACxDqD,IAAOoC,GAAO,IAAIpC,KAAQ/D,GAC1B/Y,IAAWkf,GAAOlf,GAAQC,YAAciZ,GACxC6D,IAAOmC,GAAO,IAAInC,KAAQ3D,GAC1B4D,IAAWkC,GAAO,IAAIlC,KAAYzD,KACrC2F,GAAS,SAASjgC,GAChB,IAAI+M,EAASmwB,GAAeloC,KAAKgL,GAC7B6gC,EAAO9zB,GAAUitB,EAAYh6B,EAAM7K,iBAAcuN,EACjDogC,EAAajC,EAAO3C,GAAS2C,QAAQn+B,EAEzC,GAAIogC,EACF,OAAQA,GACN,KAAK7E,GAAoB,OAAOzD,EAChC,KAAK2D,GAAe,OAAOrE,EAC3B,KAAKsE,GAAmB,OAAOnE,EAC/B,KAAKoE,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAGnC,OAAOvtB,IAuQX,IAAIpY,GAAUD,MAAMC,QA2BpB,SAASouC,GAAY/iC,GACnB,OAAgB,MAATA,GAqGT,SAAkBA,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAASw5B,EAvGnBwJ,CAAShjC,EAAMlK,UAAYwsC,GAAWtiC,GAiDhE,IAAIy9B,GAAWD,IAsLf,WACE,OAAO,GApKT,SAAS8E,GAAWtiC,GAGlB,IAAIggC,EAAML,GAAS3/B,GAASk9B,GAAeloC,KAAKgL,GAAS,GACzD,OAAOggC,GAAOpG,GAAWoG,GAAOnG,EA2DlC,SAAS8F,GAAS3/B,GAChB,IAAIjK,SAAciK,EAClB,QAASA,IAAkB,UAARjK,GAA4B,YAARA,GA2DzC,SAASiD,GAAKmmC,GACZ,OAAO4D,GAAY5D,GAn7BrB,SAAuBn/B,EAAOijC,GAG5B,IAAIl2B,EAAUpY,GAAQqL,IAsrBxB,SAAqBA,GAEnB,OAmFF,SAA2BA,GACzB,OAmIF,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EApIlBkjC,CAAaljC,IAAU+iC,GAAY/iC,GApFnCmjC,CAAkBnjC,IAAUoK,GAAepV,KAAKgL,EAAO,aAC1Ds9B,GAAqBtoC,KAAKgL,EAAO,WAAak9B,GAAeloC,KAAKgL,IAAUy5B,GAzrBhD2J,CAAYpjC,GAljB9C,SAAmB6D,EAAGo4B,GAIpB,IAHA,IAAI7kC,GAAS,EACT2V,EAASrY,MAAMmP,KAEVzM,EAAQyM,GACfkJ,EAAO3V,GAAS6kC,EAAS7kC,GAE3B,OAAO2V,EA4iBHs2B,CAAUrjC,EAAMlK,OAAQuL,QACxB,GAEAvL,EAASiX,EAAOjX,OAChBwtC,IAAgBxtC,EAEpB,IAAK,IAAI2K,KAAOT,GACTijC,IAAa74B,GAAepV,KAAKgL,EAAOS,IACvC6iC,IAAuB,UAAP7iC,GAAmBmiC,GAAQniC,EAAK3K,KACpDiX,EAAOtS,KAAKgG,GAGhB,OAAOsM,EAm6BsBw2B,CAAcpE,GAtuB7C,SAAkBA,GAChB,IAAKiB,GAAYjB,GACf,OAAOzB,GAAWyB,GAEpB,IAAIpyB,EAAS,GACb,IAAK,IAAItM,KAAO5L,OAAOsqC,GACjB/0B,GAAepV,KAAKmqC,EAAQ1+B,IAAe,eAAPA,GACtCsM,EAAOtS,KAAKgG,GAGhB,OAAOsM,EA4tB8Cy2B,CAASrE,GA0ChEzsC,EAAOD,QA9VP,SAAmBuN,GACjB,OAAOu/B,GAAUv/B,GAAO,GAAM,oBC52ChC,IASIyjC,EAAS,aAGTC,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAe59B,SAGfq1B,EAA8B,iBAAV9nC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhF+nC,EAA0B,iBAAR1oC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAO+oC,GAAcC,GAAY33B,SAAS,cAATA,GAUjCs5B,EAPcroC,OAAOC,UAOQC,SAG7B+uC,EAAYt8B,KAAKmO,IACjBouB,EAAYv8B,KAAKoO,IAkBjBuQ,EAAM,WACR,OAAO5zB,EAAK8K,KAAK8oB,OA4MnB,SAASwZ,EAAS3/B,GAChB,IAAIjK,SAAciK,EAClB,QAASA,IAAkB,UAARjK,GAA4B,YAARA,GA4EzC,SAASiuC,EAAShkC,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EAsBtBkjC,CAAaljC,IAzTF,mBAyTYk9B,EAAeloC,KAAKgL,GA8B1CikC,CAASjkC,GACX,OA3VM,IA6VR,GAAI2/B,EAAS3/B,GAAQ,CACnB,IAAI6iC,EAAgC,mBAAjB7iC,EAAMy+B,QAAwBz+B,EAAMy+B,UAAYz+B,EACnEA,EAAQ2/B,EAASkD,GAAUA,EAAQ,GAAMA,EAE3C,GAAoB,iBAAT7iC,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAMyD,QAAQggC,EAAQ,IAC9B,IAAIS,EAAWP,EAAW5hC,KAAK/B,GAC/B,OAAQkkC,GAAYN,EAAU7hC,KAAK/B,GAC/B6jC,EAAa7jC,EAAMlD,MAAM,GAAIonC,EAAW,EAAI,GAC3CR,EAAW3hC,KAAK/B,GAxWb,KAwW6BA,EAGvCtN,EAAOD,QAtPP,SAAkB8pC,EAAM4H,EAAMvrC,GAC5B,IAAIwrC,EACAC,EACAC,EACAv3B,EACAw3B,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAARrI,EACT,MAAM,IAAI1a,UArIQ,uBA+IpB,SAASgjB,EAAWC,GAClB,IAAIjoC,EAAOunC,EACPW,EAAUV,EAKd,OAHAD,EAAWC,OAAW3hC,EACtB+hC,EAAiBK,EACjB/3B,EAASwvB,EAAKljC,MAAM0rC,EAASloC,GAI/B,SAASmoC,EAAYF,GAMnB,OAJAL,EAAiBK,EAEjBP,EAAU1pC,WAAWoqC,EAAcd,GAE5BO,EAAUG,EAAWC,GAAQ/3B,EAWtC,SAASm4B,EAAaJ,GACpB,IAAIK,EAAoBL,EAAON,EAM/B,YAAyB9hC,IAAjB8hC,GAA+BW,GAAqBhB,GACzDgB,EAAoB,GAAOR,GANJG,EAAOL,GAM8BH,EAGjE,SAASW,IACP,IAAIH,EAAO3e,IACX,GAAI+e,EAAaJ,GACf,OAAOM,EAAaN,GAGtBP,EAAU1pC,WAAWoqC,EAzBvB,SAAuBH,GACrB,IAEI/3B,EAASo3B,GAFWW,EAAON,GAI/B,OAAOG,EAASZ,EAAUh3B,EAAQu3B,GAHRQ,EAAOL,IAGkC13B,EAoBhCs4B,CAAcP,IAGnD,SAASM,EAAaN,GAKpB,OAJAP,OAAU7hC,EAINkiC,GAAYR,EACPS,EAAWC,IAEpBV,EAAWC,OAAW3hC,EACfqK,GAeT,SAASu4B,IACP,IAAIR,EAAO3e,IACPof,EAAaL,EAAaJ,GAM9B,GAJAV,EAAW9qC,UACX+qC,EAAW9tC,KACXiuC,EAAeM,EAEXS,EAAY,CACd,QAAgB7iC,IAAZ6hC,EACF,OAAOS,EAAYR,GAErB,GAAIG,EAGF,OADAJ,EAAU1pC,WAAWoqC,EAAcd,GAC5BU,EAAWL,GAMtB,YAHgB9hC,IAAZ6hC,IACFA,EAAU1pC,WAAWoqC,EAAcd,IAE9Bp3B,EAIT,OAxGAo3B,EAAOH,EAASG,IAAS,EACrBxE,EAAS/mC,KACX8rC,IAAY9rC,EAAQ8rC,QAEpBJ,GADAK,EAAS,YAAa/rC,GACHkrC,EAAUE,EAASprC,EAAQ0rC,UAAY,EAAGH,GAAQG,EACrEM,EAAW,aAAchsC,IAAYA,EAAQgsC,SAAWA,GAiG1DU,EAAUE,OAnCV,gBACkB9iC,IAAZ6hC,GACF3pC,aAAa2pC,GAEfE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAU7hC,GA+BjD4iC,EAAUxqC,MA5BV,WACE,YAAmB4H,IAAZ6hC,EAAwBx3B,EAASq4B,EAAajf,MA4BhDmf,8BC/OT,IAGI/L,EAAiB,4BAOjBC,EAAmB,iBAGnBC,EAAU,qBACVgM,EAAW,iBAEX/L,EAAU,mBACVC,EAAU,gBACV+L,EAAW,iBACX9L,EAAU,oBAEVE,EAAS,eACTC,EAAY,kBAEZC,EAAY,kBACZC,EAAa,mBAEbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBAGZE,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBAkBdW,EAAe,8BAGfC,EAAW,mBAGXuK,EAAiB,GACrBA,EAxBiB,yBAwBYA,EAvBZ,yBAwBjBA,EAvBc,sBAuBYA,EAtBX,uBAuBfA,EAtBe,uBAsBYA,EArBZ,uBAsBfA,EArBsB,8BAqBYA,EApBlB,wBAqBhBA,EApBgB,yBAoBY,EAC5BA,EAAelM,GAAWkM,EAAeF,GACzCE,EAAepL,GAAkBoL,EAAejM,GAChDiM,EAAenL,GAAemL,EAAehM,GAC7CgM,EAAeD,GAAYC,EAAe/L,GAC1C+L,EAAe7L,GAAU6L,EAAe5L,GACxC4L,EAAe3L,GAAa2L,EAAezL,GAC3CyL,EAAexL,GAAUwL,EAAevL,GACxCuL,EAAerL,IAAc,EAG7B,IAAIgB,EAA8B,iBAAV9nC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhF+nC,EAA0B,iBAAR1oC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAO+oC,GAAcC,GAAY33B,SAAS,cAATA,GAGjC43B,EAA4C/oC,IAAYA,EAAQgpC,UAAYhpC,EAG5EipC,EAAaF,GAA4C9oC,IAAWA,EAAO+oC,UAAY/oC,EAGvFipC,EAAgBD,GAAcA,EAAWjpC,UAAY+oC,EAGrDoK,EAAcjK,GAAiBL,EAAWjoC,QAG1CwyC,EAAY,WACd,IACE,OAAOD,GAAeA,EAAYE,SAAWF,EAAYE,QAAQ,QACjE,MAAO9mC,KAHK,GAOZ+mC,EAAmBF,GAAYA,EAASG,aAuD5C,SAASC,EAAUjuC,EAAOkuC,GAIxB,IAHA,IAAI9uC,GAAS,EACTtB,EAAkB,MAATkC,EAAgB,EAAIA,EAAMlC,SAE9BsB,EAAQtB,GACf,GAAIowC,EAAUluC,EAAMZ,GAAQA,EAAOY,GACjC,OAAO,EAGX,OAAO,EAkET,SAASqkC,EAAWz5B,GAClB,IAAIxL,GAAS,EACT2V,EAASrY,MAAMkO,EAAIgmB,MAKvB,OAHAhmB,EAAI1J,SAAQ,SAAS8G,EAAOS,GAC1BsM,IAAS3V,GAAS,CAACqJ,EAAKT,MAEnB+M,EAwBT,SAASyvB,EAAW9Y,GAClB,IAAItsB,GAAS,EACT2V,EAASrY,MAAMgvB,EAAIkF,MAKvB,OAHAlF,EAAIxqB,SAAQ,SAAS8G,GACnB+M,IAAS3V,GAAS4I,KAEb+M,EAIT,IAeM0vB,EAvCWF,EAAM/3B,EAwBnBk4B,EAAahoC,MAAMI,UACnB6nC,EAAY/4B,SAAS9O,UACrB8nC,EAAc/nC,OAAOC,UAGrB+nC,EAAatqC,EAAK,sBAGlB0qC,EAAeN,EAAU5nC,SAGzBqV,EAAiBwyB,EAAYxyB,eAG7B0yB,GACEL,EAAM,SAASM,KAAKF,GAAcA,EAAW7jC,MAAQ6jC,EAAW7jC,KAAKgkC,UAAY,KACvE,iBAAmBP,EAAO,GAQtC0J,EAAuBvJ,EAAY7nC,SAGnCooC,EAAah9B,OAAO,IACtB88B,EAAajoC,KAAKoV,GAAgB3G,QA7PjB,sBA6PuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EvN,EAASylC,EAAgBppC,EAAK2D,YAASwM,EACvCqS,EAASxiB,EAAKwiB,OACdvgB,EAAajC,EAAKiC,WAClB8oC,EAAuBV,EAAYU,qBACnCzhC,EAAS6gC,EAAW7gC,OACpBuqC,EAAiBrxB,EAASA,EAAOC,iBAActS,EAG/C66B,GAAmB1oC,OAAO0rB,sBAC1Bid,GAAiBtnC,EAASA,EAAOunC,cAAW/6B,EAC5Cg7B,IAnEanB,EAmEQ1nC,OAAOmE,KAnETwL,EAmEe3P,OAlE7B,SAASsF,GACd,OAAOoiC,EAAK/3B,EAAUrK,MAoEtBwjC,GAAWC,GAAUrrC,EAAM,YAC3BsrC,GAAMD,GAAUrrC,EAAM,OACtBwuB,GAAU6c,GAAUrrC,EAAM,WAC1BurC,GAAMF,GAAUrrC,EAAM,OACtBwrC,GAAUH,GAAUrrC,EAAM,WAC1ByrC,GAAeJ,GAAU/oC,OAAQ,UAGjCopC,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAASnd,IAC7Bsd,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcxpB,EAASA,EAAOjgB,eAAY4N,EAC1C87B,GAAgBD,GAAcA,GAAYE,aAAU/7B,EASxD,SAASg8B,GAAKC,GACZ,IAAIvnC,GAAS,EACTtB,EAAoB,MAAX6oC,EAAkB,EAAIA,EAAQ7oC,OAG3C,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KA+F7B,SAASC,GAAUH,GACjB,IAAIvnC,GAAS,EACTtB,EAAoB,MAAX6oC,EAAkB,EAAIA,EAAQ7oC,OAG3C,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KA4G7B,SAASE,GAASJ,GAChB,IAAIvnC,GAAS,EACTtB,EAAoB,MAAX6oC,EAAkB,EAAIA,EAAQ7oC,OAG3C,IADAS,KAAKqoC,UACIxnC,EAAQtB,GAAQ,CACvB,IAAI+oC,EAAQF,EAAQvnC,GACpBb,KAAKmtB,IAAImb,EAAM,GAAIA,EAAM,KA+F7B,SAASwH,GAASv/B,GAChB,IAAI1P,GAAS,EACTtB,EAAmB,MAAVgR,EAAiB,EAAIA,EAAOhR,OAGzC,IADAS,KAAK0oC,SAAW,IAAIF,KACX3nC,EAAQtB,GACfS,KAAKwlC,IAAIj1B,EAAO1P,IA2CpB,SAAS4nC,GAAML,GACb,IAAIvvB,EAAO7Y,KAAK0oC,SAAW,IAAIH,GAAUH,GACzCpoC,KAAKqyB,KAAOxZ,EAAKwZ,KAsInB,SAAS0W,GAAatnC,EAAOyI,GAE3B,IADA,IAAI3K,EAASkC,EAAMlC,OACZA,KACL,GAAIupC,GAAGrnC,EAAMlC,GAAQ,GAAI2K,GACvB,OAAO3K,EAGX,OAAQ,EA0BV,SAASwwC,GAAWtmC,GAClB,OAAa,MAATA,OACe0C,IAAV1C,EAt1BQ,qBARL,gBAg2BJomC,GAAkBA,KAAkBvxC,OAAOmL,GA0arD,SAAmBA,GACjB,IAAIumC,EAAQn8B,EAAepV,KAAKgL,EAAOomC,GACnCpG,EAAMhgC,EAAMomC,GAEhB,IACEpmC,EAAMomC,QAAkB1jC,EACxB,IAAI8jC,GAAW,EACf,MAAOxnC,IAET,IAAI+N,EAASo5B,EAAqBnxC,KAAKgL,GAQvC,OAPIwmC,IACED,EACFvmC,EAAMomC,GAAkBpG,SAEjBhgC,EAAMomC,IAGVr5B,EA1bH05B,CAAUzmC,GA4iBhB,SAAwBA,GACtB,OAAOmmC,EAAqBnxC,KAAKgL,GA5iB7Bk9B,CAAel9B,GAUrB,SAAS0mC,GAAgB1mC,GACvB,OAAOkjC,GAAaljC,IAAUsmC,GAAWtmC,IAAUy5B,EAiBrD,SAASkN,GAAY3mC,EAAO6iC,EAAO+D,EAASlH,EAAYpjC,GACtD,OAAI0D,IAAU6iC,IAGD,MAAT7iC,GAA0B,MAAT6iC,IAAmBK,GAAaljC,KAAWkjC,GAAaL,GACpE7iC,GAAUA,GAAS6iC,GAAUA,EAmBxC,SAAyB1D,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAWvqC,GACtE,IAAIwqC,EAAWnyC,GAAQwqC,GACnB4H,EAAWpyC,GAAQkuC,GACnBmE,EAASF,EAAWrB,EAAWxF,GAAOd,GACtC8H,EAASF,EAAWtB,EAAWxF,GAAO4C,GAKtCqE,GAHJF,EAASA,GAAUvN,EAAUO,EAAYgN,IAGhBhN,EACrBmN,GAHJF,EAASA,GAAUxN,EAAUO,EAAYiN,IAGhBjN,EACrBoN,EAAYJ,GAAUC,EAE1B,GAAIG,GAAa3J,GAAS0B,GAAS,CACjC,IAAK1B,GAASoF,GACZ,OAAO,EAETiE,GAAW,EACXI,GAAW,EAEb,GAAIE,IAAcF,EAEhB,OADA5qC,IAAUA,EAAQ,IAAI0iC,IACd8H,GAAYd,GAAa7G,GAC7BkI,GAAYlI,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAWvqC,GAiKnE,SAAoB6iC,EAAQ0D,EAAO7C,EAAK4G,EAASlH,EAAYmH,EAAWvqC,GACtE,OAAQ0jC,GACN,KAAKxF,EACH,GAAK2E,EAAO5rB,YAAcsvB,EAAMtvB,YAC3B4rB,EAAO6B,YAAc6B,EAAM7B,WAC9B,OAAO,EAET7B,EAASA,EAAO5qC,OAChBsuC,EAAQA,EAAMtuC,OAEhB,KAAKgmC,EACH,QAAK4E,EAAO5rB,YAAcsvB,EAAMtvB,aAC3BszB,EAAU,IAAIryC,EAAW2qC,GAAS,IAAI3qC,EAAWquC,KAKxD,KAAKnJ,EACL,KAAKC,EACL,KAAKI,EAGH,OAAOsF,IAAIF,GAAS0D,GAEtB,KAAK6C,EACH,OAAOvG,EAAO1gC,MAAQokC,EAAMpkC,MAAQ0gC,EAAO7pC,SAAWutC,EAAMvtC,QAE9D,KAAK4kC,EACL,KAAKE,EAIH,OAAO+E,GAAW0D,EAAQ,GAE5B,KAAK/I,EACH,IAAIwN,EAAUjL,EAEhB,KAAKlC,EACH,IAAIoN,EAroCiB,EAqoCLX,EAGhB,GAFAU,IAAYA,EAAU9K,GAElB2C,EAAOvW,MAAQia,EAAMja,OAAS2e,EAChC,OAAO,EAGT,IAAI7F,EAAUplC,EAAMwY,IAAIqqB,GACxB,GAAIuC,EACF,OAAOA,GAAWmB,EAEpB+D,GA/oCuB,EAkpCvBtqC,EAAMonB,IAAIyb,EAAQ0D,GAClB,IAAI91B,EAASs6B,GAAYC,EAAQnI,GAASmI,EAAQzE,GAAQ+D,EAASlH,EAAYmH,EAAWvqC,GAE1F,OADAA,EAAK,OAAW6iC,GACTpyB,EAET,IAhoCY,kBAioCV,GAAIyxB,GACF,OAAOA,GAAcxpC,KAAKmqC,IAAWX,GAAcxpC,KAAK6tC,GAG9D,OAAO,EA9ND2E,CAAWrI,EAAQ0D,EAAOmE,EAAQJ,EAASlH,EAAYmH,EAAWvqC,GAExE,KAj8ByB,EAi8BnBsqC,GAAiC,CACrC,IAAIa,EAAeP,GAAY98B,EAAepV,KAAKmqC,EAAQ,eACvDuI,EAAeP,GAAY/8B,EAAepV,KAAK6tC,EAAO,eAE1D,GAAI4E,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAetI,EAAOn/B,QAAUm/B,EAC/CyI,EAAeF,EAAe7E,EAAM7iC,QAAU6iC,EAGlD,OADAvmC,IAAUA,EAAQ,IAAI0iC,IACf6H,EAAUc,EAAcC,EAAchB,EAASlH,EAAYpjC,IAGtE,QAAK8qC,IAGL9qC,IAAUA,EAAQ,IAAI0iC,IA6NxB,SAAsBG,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAWvqC,GACnE,IAAIirC,EA9qCqB,EA8qCTX,EACZiB,EAAW7F,GAAW7C,GACtB2I,EAAYD,EAAS/xC,OAIzB,GAAIgyC,GAHW9F,GAAWa,GACD/sC,SAEMyxC,EAC7B,OAAO,EAGT,IADA,IAAInwC,EAAQ0wC,EACL1wC,KAAS,CACd,IAAIqJ,EAAMonC,EAASzwC,GACnB,KAAMmwC,EAAY9mC,KAAOoiC,EAAQz4B,EAAepV,KAAK6tC,EAAOpiC,IAC1D,OAAO,EAIX,IAAIihC,EAAUplC,EAAMwY,IAAIqqB,GACxB,GAAIuC,GAAWplC,EAAMwY,IAAI+tB,GACvB,OAAOnB,GAAWmB,EAEpB,IAAI91B,GAAS,EACbzQ,EAAMonB,IAAIyb,EAAQ0D,GAClBvmC,EAAMonB,IAAImf,EAAO1D,GAGjB,IADA,IAAI4I,EAAWR,IACNnwC,EAAQ0wC,GAAW,CAE1B,IAAI1I,EAAWD,EADf1+B,EAAMonC,EAASzwC,IAEX4wC,EAAWnF,EAAMpiC,GAErB,GAAIi/B,EACF,IAAIuI,EAAWV,EACX7H,EAAWsI,EAAU5I,EAAU3+B,EAAKoiC,EAAO1D,EAAQ7iC,GACnDojC,EAAWN,EAAU4I,EAAUvnC,EAAK0+B,EAAQ0D,EAAOvmC,GAGzD,UAAmBoG,IAAbulC,EACG7I,IAAa4I,GAAYnB,EAAUzH,EAAU4I,EAAUpB,EAASlH,EAAYpjC,GAC7E2rC,GACD,CACLl7B,GAAS,EACT,MAEFg7B,IAAaA,EAAkB,eAAPtnC,GAE1B,GAAIsM,IAAWg7B,EAAU,CACvB,IAAIG,EAAU/I,EAAOhqC,YACjBgzC,EAAUtF,EAAM1tC,YAGhB+yC,GAAWC,KACV,gBAAiBhJ,MAAU,gBAAiB0D,IACzB,mBAAXqF,GAAyBA,aAAmBA,GACjC,mBAAXC,GAAyBA,aAAmBA,IACvDp7B,GAAS,GAKb,OAFAzQ,EAAK,OAAW6iC,GAChB7iC,EAAK,OAAWumC,GACT91B,EAzRAq7B,CAAajJ,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAWvqC,IA3D5D+rC,CAAgBroC,EAAO6iC,EAAO+D,EAASlH,EAAYiH,GAAarqC,IA2HzE,SAAS+qC,GAAYrvC,EAAO6qC,EAAO+D,EAASlH,EAAYmH,EAAWvqC,GACjE,IAAIirC,EAlhCqB,EAkhCTX,EACZ0B,EAAYtwC,EAAMlC,OAClByyC,EAAY1F,EAAM/sC,OAEtB,GAAIwyC,GAAaC,KAAehB,GAAagB,EAAYD,GACvD,OAAO,EAGT,IAAI5G,EAAUplC,EAAMwY,IAAI9c,GACxB,GAAI0pC,GAAWplC,EAAMwY,IAAI+tB,GACvB,OAAOnB,GAAWmB,EAEpB,IAAIzrC,GAAS,EACT2V,GAAS,EACTy7B,EA/hCuB,EA+hCf5B,EAAoC,IAAIP,QAAW3jC,EAM/D,IAJApG,EAAMonB,IAAI1rB,EAAO6qC,GACjBvmC,EAAMonB,IAAImf,EAAO7qC,KAGRZ,EAAQkxC,GAAW,CAC1B,IAAIG,EAAWzwC,EAAMZ,GACjB4wC,EAAWnF,EAAMzrC,GAErB,GAAIsoC,EACF,IAAIuI,EAAWV,EACX7H,EAAWsI,EAAUS,EAAUrxC,EAAOyrC,EAAO7qC,EAAOsE,GACpDojC,EAAW+I,EAAUT,EAAU5wC,EAAOY,EAAO6qC,EAAOvmC,GAE1D,QAAiBoG,IAAbulC,EAAwB,CAC1B,GAAIA,EACF,SAEFl7B,GAAS,EACT,MAGF,GAAIy7B,GACF,IAAKvC,EAAUpD,GAAO,SAASmF,EAAUU,GACnC,GA72BajoC,EA62BOioC,GAANF,EA52BXhG,IAAI/hC,KA62BFgoC,IAAaT,GAAYnB,EAAU4B,EAAUT,EAAUpB,EAASlH,EAAYpjC,IAC/E,OAAOksC,EAAK/tC,KAAKiuC,GA/2B/B,IAAyBjoC,KAi3BX,CACNsM,GAAS,EACT,YAEG,GACD07B,IAAaT,IACXnB,EAAU4B,EAAUT,EAAUpB,EAASlH,EAAYpjC,GACpD,CACLyQ,GAAS,EACT,OAKJ,OAFAzQ,EAAK,OAAWtE,GAChBsE,EAAK,OAAWumC,GACT91B,EAyKT,SAASi1B,GAAW7C,GAClB,OApZF,SAAwBA,EAAQyC,EAAUC,GACxC,IAAI90B,EAAS60B,EAASzC,GACtB,OAAOxqC,GAAQwqC,GAAUpyB,EAhuB3B,SAAmB/U,EAAO8O,GAKxB,IAJA,IAAI1P,GAAS,EACTtB,EAASgR,EAAOhR,OAChBg1B,EAAS9yB,EAAMlC,SAEVsB,EAAQtB,GACfkC,EAAM8yB,EAAS1zB,GAAS0P,EAAO1P,GAEjC,OAAOY,EAwtB2B8pC,CAAU/0B,EAAQ80B,EAAY1C,IAkZzD4C,CAAe5C,EAAQnmC,GAAMwnC,IAWtC,SAAS4B,GAAWx/B,EAAKnC,GACvB,IAsHiBT,EACbjK,EAvHAqZ,EAAOxM,EAAIq8B,SACf,OAuHgB,WADZlpC,SADaiK,EArHAS,KAuHmB,UAAR1K,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAViK,EACU,OAAVA,GAxHDoP,EAAmB,iBAAP3O,EAAkB,SAAW,QACzC2O,EAAKxM,IAWX,SAASg7B,GAAUuB,EAAQ1+B,GACzB,IAAIT,EAxjCN,SAAkBm/B,EAAQ1+B,GACxB,OAAiB,MAAV0+B,OAAiBz8B,EAAYy8B,EAAO1+B,GAujC/B4hC,CAASlD,EAAQ1+B,GAC7B,OArTF,SAAsBT,GACpB,SAAK2/B,GAAS3/B,IAwahB,SAAkBu8B,GAChB,QAASO,GAAeA,KAAcP,EAzadoM,CAAS3oC,MAGnBsiC,GAAWtiC,GAASm9B,EAAahC,GAChCp5B,KAAKm8B,GAASl+B,IAgTtBuiC,CAAaviC,GAASA,OAAQ0C,EAp2BvCg8B,GAAK5pC,UAAU8pC,MAvEf,WACEroC,KAAK0oC,SAAWjB,GAAeA,GAAa,MAAQ,GACpDznC,KAAKqyB,KAAO,GAsEd8V,GAAK5pC,UAAL,OAzDA,SAAoB2L,GAClB,IAAIsM,EAASxW,KAAKisC,IAAI/hC,WAAelK,KAAK0oC,SAASx+B,GAEnD,OADAlK,KAAKqyB,MAAQ7b,EAAS,EAAI,EACnBA,GAuDT2xB,GAAK5pC,UAAUggB,IA3Cf,SAAiBrU,GACf,IAAI2O,EAAO7Y,KAAK0oC,SAChB,GAAIjB,GAAc,CAChB,IAAIjxB,EAASqC,EAAK3O,GAClB,OAAOsM,IAAWwsB,OAAiB72B,EAAYqK,EAEjD,OAAO3C,EAAepV,KAAKoa,EAAM3O,GAAO2O,EAAK3O,QAAOiC,GAsCtDg8B,GAAK5pC,UAAU0tC,IA1Bf,SAAiB/hC,GACf,IAAI2O,EAAO7Y,KAAK0oC,SAChB,OAAOjB,QAA8Bt7B,IAAd0M,EAAK3O,GAAsB2J,EAAepV,KAAKoa,EAAM3O,IAyB9Ei+B,GAAK5pC,UAAU4uB,IAZf,SAAiBjjB,EAAKT,GACpB,IAAIoP,EAAO7Y,KAAK0oC,SAGhB,OAFA1oC,KAAKqyB,MAAQryB,KAAKisC,IAAI/hC,GAAO,EAAI,EACjC2O,EAAK3O,GAAQu9B,SAA0Bt7B,IAAV1C,EAAuBu5B,EAAiBv5B,EAC9DzJ,MAuHTuoC,GAAUhqC,UAAU8pC,MApFpB,WACEroC,KAAK0oC,SAAW,GAChB1oC,KAAKqyB,KAAO,GAmFdkW,GAAUhqC,UAAV,OAvEA,SAAyB2L,GACvB,IAAI2O,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAE/B,QAAIrJ,EAAQ,IAIRA,GADYgY,EAAKtZ,OAAS,EAE5BsZ,EAAKmD,MAEL1W,EAAO7G,KAAKoa,EAAMhY,EAAO,KAEzBb,KAAKqyB,KACA,KA0DTkW,GAAUhqC,UAAUggB,IA9CpB,SAAsBrU,GACpB,IAAI2O,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAE/B,OAAOrJ,EAAQ,OAAIsL,EAAY0M,EAAKhY,GAAO,IA2C7C0nC,GAAUhqC,UAAU0tC,IA/BpB,SAAsB/hC,GACpB,OAAO6+B,GAAa/oC,KAAK0oC,SAAUx+B,IAAQ,GA+B7Cq+B,GAAUhqC,UAAU4uB,IAlBpB,SAAsBjjB,EAAKT,GACzB,IAAIoP,EAAO7Y,KAAK0oC,SACZ7nC,EAAQkoC,GAAalwB,EAAM3O,GAQ/B,OANIrJ,EAAQ,KACRb,KAAKqyB,KACPxZ,EAAK3U,KAAK,CAACgG,EAAKT,KAEhBoP,EAAKhY,GAAO,GAAK4I,EAEZzJ,MAyGTwoC,GAASjqC,UAAU8pC,MAtEnB,WACEroC,KAAKqyB,KAAO,EACZryB,KAAK0oC,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKb,IAAOiB,IACnB,OAAU,IAAIJ,KAkElBK,GAASjqC,UAAT,OArDA,SAAwB2L,GACtB,IAAIsM,EAASq1B,GAAW7rC,KAAMkK,GAAjB,OAAgCA,GAE7C,OADAlK,KAAKqyB,MAAQ7b,EAAS,EAAI,EACnBA,GAmDTgyB,GAASjqC,UAAUggB,IAvCnB,SAAqBrU,GACnB,OAAO2hC,GAAW7rC,KAAMkK,GAAKqU,IAAIrU,IAuCnCs+B,GAASjqC,UAAU0tC,IA3BnB,SAAqB/hC,GACnB,OAAO2hC,GAAW7rC,KAAMkK,GAAK+hC,IAAI/hC,IA2BnCs+B,GAASjqC,UAAU4uB,IAdnB,SAAqBjjB,EAAKT,GACxB,IAAIoP,EAAOgzB,GAAW7rC,KAAMkK,GACxBmoB,EAAOxZ,EAAKwZ,KAIhB,OAFAxZ,EAAKsU,IAAIjjB,EAAKT,GACdzJ,KAAKqyB,MAAQxZ,EAAKwZ,MAAQA,EAAO,EAAI,EAC9BryB,MAyDT8vC,GAASvxC,UAAUinC,IAAMsK,GAASvxC,UAAU2F,KAnB5C,SAAqBuF,GAEnB,OADAzJ,KAAK0oC,SAASvb,IAAI1jB,EAAOu5B,GAClBhjC,MAkBT8vC,GAASvxC,UAAU0tC,IANnB,SAAqBxiC,GACnB,OAAOzJ,KAAK0oC,SAASuD,IAAIxiC,IAqG3Bg/B,GAAMlqC,UAAU8pC,MA3EhB,WACEroC,KAAK0oC,SAAW,IAAIH,GACpBvoC,KAAKqyB,KAAO,GA0EdoW,GAAMlqC,UAAN,OA9DA,SAAqB2L,GACnB,IAAI2O,EAAO7Y,KAAK0oC,SACZlyB,EAASqC,EAAI,OAAW3O,GAG5B,OADAlK,KAAKqyB,KAAOxZ,EAAKwZ,KACV7b,GA0DTiyB,GAAMlqC,UAAUggB,IA9ChB,SAAkBrU,GAChB,OAAOlK,KAAK0oC,SAASnqB,IAAIrU,IA8C3Bu+B,GAAMlqC,UAAU0tC,IAlChB,SAAkB/hC,GAChB,OAAOlK,KAAK0oC,SAASuD,IAAI/hC,IAkC3Bu+B,GAAMlqC,UAAU4uB,IArBhB,SAAkBjjB,EAAKT,GACrB,IAAIoP,EAAO7Y,KAAK0oC,SAChB,GAAI7vB,aAAgB0vB,GAAW,CAC7B,IAAI4D,EAAQtzB,EAAK6vB,SACjB,IAAKpB,IAAQ6E,EAAM5sC,OAAS6sC,IAG1B,OAFAD,EAAMjoC,KAAK,CAACgG,EAAKT,IACjBzJ,KAAKqyB,OAASxZ,EAAKwZ,KACZryB,KAET6Y,EAAO7Y,KAAK0oC,SAAW,IAAIF,GAAS2D,GAItC,OAFAtzB,EAAKsU,IAAIjjB,EAAKT,GACdzJ,KAAKqyB,KAAOxZ,EAAKwZ,KACVryB,MA+hBT,IAAIiqC,GAAcjD,GAA+B,SAAS4B,GACxD,OAAc,MAAVA,EACK,IAETA,EAAStqC,OAAOsqC,GA9sClB,SAAqBnnC,EAAOkuC,GAM1B,IALA,IAAI9uC,GAAS,EACTtB,EAAkB,MAATkC,EAAgB,EAAIA,EAAMlC,OACnC8yC,EAAW,EACX77B,EAAS,KAEJ3V,EAAQtB,GAAQ,CACvB,IAAIkK,EAAQhI,EAAMZ,GAwsCkCwpC,EAvsCtC5gC,EAwsCPs9B,EAAqBtoC,KAAKmqC,EAAQyB,KAvsCvC7zB,EAAO67B,KAAc5oC,GAssCoB,IAAS4gC,EAnsCtD,OAAO7zB,EAmsCA87B,CAAYtL,GAAiB4B,MAudtC,WACE,MAAO,IA5cLc,GAASqG,GAkCb,SAAS1D,GAAQ5iC,EAAOlK,GAEtB,SADAA,EAAmB,MAAVA,EAAiB0jC,EAAmB1jC,KAE1B,iBAATkK,GAAqBo7B,EAASr5B,KAAK/B,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQlK,EA4D7C,SAASooC,GAAS3B,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOU,EAAajoC,KAAKunC,GACzB,MAAOv9B,IACT,IACE,OAAQu9B,EAAO,GACf,MAAOv9B,KAEX,MAAO,GAmCT,SAASqgC,GAAGr/B,EAAO6iC,GACjB,OAAO7iC,IAAU6iC,GAAU7iC,GAAUA,GAAS6iC,GAAUA,GA5IrDlF,IAAYsC,GAAO,IAAItC,GAAS,IAAI7pC,YAAY,MAAQ0mC,GACxDqD,IAAOoC,GAAO,IAAIpC,KAAQ/D,GAC1B/Y,IAAWkf,GAAOlf,GAAQC,YAAciZ,GACxC6D,IAAOmC,GAAO,IAAInC,KAAQ3D,GAC1B4D,IAAWkC,GAAO,IAAIlC,KAAYzD,KACrC2F,GAAS,SAASjgC,GAChB,IAAI+M,EAASu5B,GAAWtmC,GACpB6gC,EAAO9zB,GAAUitB,EAAYh6B,EAAM7K,iBAAcuN,EACjDogC,EAAajC,EAAO3C,GAAS2C,GAAQ,GAEzC,GAAIiC,EACF,OAAQA,GACN,KAAK7E,GAAoB,OAAOzD,EAChC,KAAK2D,GAAe,OAAOrE,EAC3B,KAAKsE,GAAmB,OAAOnE,EAC/B,KAAKoE,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAGnC,OAAOvtB,IA8IX,IAAIq2B,GAAcsD,GAAgB,WAAa,OAAOptC,UAApB,IAAsCotC,GAAkB,SAAS1mC,GACjG,OAAOkjC,GAAaljC,IAAUoK,EAAepV,KAAKgL,EAAO,YACtDs9B,EAAqBtoC,KAAKgL,EAAO,WA0BlCrL,GAAUD,MAAMC,QAgDhB8oC,GAAWD,IA4Of,WACE,OAAO,GA1LT,SAAS8E,GAAWtiC,GAClB,IAAK2/B,GAAS3/B,GACZ,OAAO,EAIT,IAAIggC,EAAMsG,GAAWtmC,GACrB,OAAOggC,GAAOpG,GAnmDH,8BAmmDcoG,GAxmDZ,0BAwmD6BA,GA7lD7B,kBA6lDgDA,EA6B/D,SAASgD,GAAShjC,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAASw5B,EA4B7C,SAASmG,GAAS3/B,GAChB,IAAIjK,SAAciK,EAClB,OAAgB,MAATA,IAA0B,UAARjK,GAA4B,YAARA,GA2B/C,SAASmtC,GAAaljC,GACpB,OAAgB,MAATA,GAAiC,iBAATA,EAoBjC,IAAIgmC,GAAeD,EAhiDnB,SAAmBxJ,GACjB,OAAO,SAASv8B,GACd,OAAOu8B,EAAKv8B,IA8hDsB8oC,CAAU/C,GAnvBhD,SAA0B/lC,GACxB,OAAOkjC,GAAaljC,IAClBgjC,GAAShjC,EAAMlK,WAAa6vC,EAAeW,GAAWtmC,KA+wB1D,SAAShH,GAAKmmC,GACZ,OA1NgB,OADGn/B,EA2NAm/B,IA1NK6D,GAAShjC,EAAMlK,UAAYwsC,GAAWtiC,GA1vBhE,SAAuBA,EAAOijC,GAC5B,IAAIrD,EAAQjrC,GAAQqL,GAChB+oC,GAASnJ,GAASwD,GAAYpjC,GAC9BgpC,GAAUpJ,IAAUmJ,GAAStL,GAASz9B,GACtCipC,GAAUrJ,IAAUmJ,IAAUC,GAAUhD,GAAahmC,GACrDsjC,EAAc1D,GAASmJ,GAASC,GAAUC,EAC1Cl8B,EAASu2B,EAloBf,SAAmBz/B,EAAGo4B,GAIpB,IAHA,IAAI7kC,GAAS,EACT2V,EAASrY,MAAMmP,KAEVzM,EAAQyM,GACfkJ,EAAO3V,GAAS6kC,EAAS7kC,GAE3B,OAAO2V,EA2nBoBs2B,CAAUrjC,EAAMlK,OAAQuL,QAAU,GACzDvL,EAASiX,EAAOjX,OAEpB,IAAK,IAAI2K,KAAOT,GACTijC,IAAa74B,EAAepV,KAAKgL,EAAOS,IACvC6iC,IAEQ,UAAP7iC,GAECuoC,IAAkB,UAAPvoC,GAA0B,UAAPA,IAE9BwoC,IAAkB,UAAPxoC,GAA0B,cAAPA,GAA8B,cAAPA,IAEtDmiC,GAAQniC,EAAK3K,KAElBiX,EAAOtS,KAAKgG,GAGhB,OAAOsM,EA47BsBw2B,CAAcpE,GAtwB7C,SAAkBA,GAChB,GAyZI0B,GADe7gC,EAxZFm/B,IAyZGn/B,EAAM7K,YAGnB6K,KAFqB,mBAAR6gC,GAAsBA,EAAK/rC,WAAc8nC,GAzZ3D,OAAOc,GAAWyB,GAuZtB,IAAqBn/B,EACf6gC,EAtZA9zB,EAAS,GACb,IAAK,IAAItM,KAAO5L,OAAOsqC,GACjB/0B,EAAepV,KAAKmqC,EAAQ1+B,IAAe,eAAPA,GACtCsM,EAAOtS,KAAKgG,GAGhB,OAAOsM,EA4vB8Cy2B,CAASrE,GA3NhE,IAAqBn/B,EAqQrBtN,EAAOD,QAlNP,SAAiBuN,EAAO6iC,GACtB,OAAO8D,GAAY3mC,EAAO6iC,cCtmD5B,IAAItkC,EAAU7L,EAAOD,QAAU,CAC7B+L,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAEFF,KAAM,SACNC,IAAK,wCACLE,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEC,OAAQ,wBAGVC,EAAG,CAAC,CAAEL,KAAM,SACZ5I,EAAG,CAAC,CAAE4I,KAAM,gBACZM,EAAG,CAAC,CAAEN,KAAM,QACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,UACZS,EAAG,CAAC,CAAET,KAAM,cACZU,EAAG,CAAC,CAAEV,KAAM,YAEZvB,EAAG,CAAC,CACFuB,KAAM,SACNC,IAAK,eACLE,MAAO,CAAC,QAAS,QACjBC,OAAQ,UAEVlH,EAAG,CAAC,CACF8G,KAAM,aACNC,IAAK,mBACLE,MAAO,CAAC,UAAW,MACnBC,OAAQ,eAEVnH,EAAG,CAAC,CACF+C,KAAM,YACNiE,IAAK,4BACLE,MAAO,CAAC,OAAQ,SAChBC,OAAQ,UAEVtC,EAAG,CAAC,CAGFmC,IAAK,mCACLE,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCC,OAAQ,gBAEVpH,EAAG,CACD,CACEgD,KAAM,MACNiE,IAAK,0DACLE,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCC,OAAQ,SAAUF,GAChB,OAAQA,EAAES,SACR,qBACAT,EAAEU,KACF,kBACA,iBAGN,CAEE5E,KAAM,OACNiE,IAAK,wBACLE,MAAO,CAAC,UAAW,UACnBC,OAAQ,cAEV,CACEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAEV,CACEJ,KAAM,OACNC,IAAK,sCACLE,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEW,QACR,qBACA,YAGN,CACE7E,KAAM,eACNiE,IAAK,kCACLE,MAAO,CAAC,UAAW,SACnBC,OAAQ,yBAEV,CACEpE,KAAM,SACNiE,IAAK,6CACLE,MAAO,CAAC,UAAW,OAAQ,WAC3BC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEY,QACR,mBACA,kBAGN,CAEE9E,KAAM,MACNiE,IAAK,6CACLE,MAAO,CAAC,QAAS,YAAa,MAAO,UACrCC,OAAQ,SAAUF,GAChB,MAAO,aAAeA,EAAEa,UAAY,MAAQ,MAAQ,OAASb,EAAEc,OAAS,MAAQ,MAGpF,CACEhF,KAAM,SACNiE,IAAK,0CACLE,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCC,OAAQ,SAAUF,GAChB,OAA2B,MAAnBA,EAAEe,cACR,qBACA,oBAGN,CACEjB,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CACEJ,KAAM,MACNC,IAAK,gBACLG,OAAQ,UAEV,CACEJ,KAAM,OACNC,IAAK,aACLG,OAAQ,WAEV,CACEJ,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CACEJ,KAAM,WACNC,IAAK,kBACLG,OAAQ,eAEV,CACEJ,KAAM,YACNC,IAAK,0CAEP,CACED,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,WACNC,IAAK,mBACLG,OAAQ,gBAEV,CACEJ,KAAM,SACNC,IAAK,iBACLG,OAAQ,cAEV,CACEJ,KAAM,cACNC,IAAK,2BACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,qBAEV,CAKEpE,KAAK,aACLiE,IAAK,+KACLE,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IC,OAAQ,SAAUF,GAChB,IAAIgB,EAAM,qCAaV,OAXAA,GAAmB,MAAXhB,EAAEiB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAbhB,EAAEkB,QAAmB,cAAgB,KAEzB,MAAhBlB,EAAEmB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBhB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,QAI9D,CACEF,KAAM,kBACNC,IAAK,wBAEP,CACED,KAAM,mBACNC,IAAK,0BACLG,OAAQ,wBAEV,CACEJ,KAAM,aACNC,IAAK,qBACLG,OAAQ,kBAEV,CACEpE,KAAM,QACNiE,IAAK,iCACLE,MAAO,CAAC,KAAM,YAAa,SAC3BC,OAAQ,SAAUF,GAChB,IAAIgB,EAAM,UAOV,OANmB,MAAfhB,EAAEoB,YACJJ,GAAO,MACQ,MAAXhB,EAAEqB,QACJL,GAAO,QAGJA,IAGX,CAEElF,KAAM,aAENiE,IAAK,mEACLE,MAAO,CAAC,YAAa,SACrBC,OAAQ,oBAEV,CACEJ,KAAM,eACNC,IAAK,gCACLE,MAAO,CAAC,WAAY,SACpBC,OAAQ,wBAEV,CACEpE,KAAM,SACNiE,IAAK,oBACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,eAEV,CACEJ,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,YACNC,IAAK,iBAEP,CACED,KAAM,UACNC,IAAK,uCACLE,MAAO,CAAC,gBAAiB,MAAO,kBAChCC,OAAQ,SAAUF,GAChB,OAA4B,MAApBA,EAAEsB,eACR,mBACA,kBAGN,CACExB,KAAM,cACNC,IAAK,0BACLG,OAAQ,oBAEV,CACEpE,KAAM,OACNiE,IAAK,sCACLE,MAAO,CAAC,KAAM,YAAa,UAC3BC,OAAQ,SAAUF,GAChB,OAAQA,EAAEuB,OAAU,eAAiB,cAGzC,CAGEzF,KAAM,aACNiE,IAAK,IAAIyB,OAEP,wKAMFvB,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCC,OAAQ,SAAUF,GAChB,MAAO,sBAAwBA,EAAEyB,KAAO,SAAW,MAGvD,CAEE3B,KAAM,YACNC,IAAK,IAAIyB,OAEP,2FAQFvB,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCC,OAAQ,SAAUF,GAChB,MAAO,mBAAqBA,EAAEyB,KAAO,SAAW,MAGpD,CAIE3B,KAAM,eACNC,IAAK,kCACLE,MAAO,CAAC,SACRC,OAAQ,iBAEV,CAGEJ,KAAM,YACNC,IAAK,8BACLG,OAAQ,gBAEV,CACEpE,KAAM,UACNmE,MAAO,CAAC,YAMd/J,OAAOmE,KAAKuF,GAASrF,SAAQ,SAAUuH,GAC1BlC,EAAQkC,GACdvH,SAAQ,SAAUtE,GAChBA,EAAI8J,MACP9J,EAAI8J,IAAM,QAEP9J,EAAIiK,SACPjK,EAAIiK,OAAS,4BChVnB,IAAI6B,EAASjI,EAAQ,MACjBkI,EAASlI,EAAQ,MAErBhG,EAAQmO,MAAQD,EAChBlO,EAAQoO,MAAQH,EAAOG,MACvBpO,EAAQsO,gBAAkBL,EAAOK,gBACjCtO,EAAQqO,YAAcJ,EAAOI,YAC7BrO,EAAQuO,cAAgBN,EAAOM,cAC/BvO,EAAQwO,sBAAwBP,EAAOO,sBACvCxO,EAAQyO,qBAAuBR,EAAOQ,qBACtCzO,EAAQ0O,yBAA2BT,EAAOS,yCCV1C,IAAIC,EAAa,SAAU5C,GACzB,OAAO6C,OAAOC,OAAO9C,MAAQA,EAAI8C,OAAO9C,GAAKA,GAgB3C+C,EAAW,SAAU3M,EAAK4M,EAAUC,GACtC,IAAIC,EAAa9M,EAAI6J,MAAQ7J,EAAIgK,MAC7BhK,EAAI6F,OAAS+G,EAAS5M,EAAI6F,MAC5B+G,EAAS5M,EAAI6F,MAAQ,GAEdiH,IAAeF,EAAS5M,EAAI6J,QACnC+C,EAAS5M,EAAI6J,MAAQ,IAEvB,IAAIkD,EAAc/M,EAAI6F,KACpB,GACAiH,EAAaF,EAAS5M,EAAI6J,MAAQ+C,GAvBf,SAAUhF,EAAOgF,EAAU5C,EAAOgD,GACvD,GAAIA,IAAYhD,EACd4C,EAASI,GAAWR,EAAW5E,EAAM,SAGrC,IAAK,IAAI3G,EAAI,EAAGA,EAAI+I,EAAM9I,OAAQD,GAAK,EACnB,MAAd2G,EAAM3G,EAAE,KACV2L,EAAS5C,EAAM/I,IAAMuL,EAAW5E,EAAM3G,EAAE,KAkB9CgM,CAAiBJ,EAAQjF,MAAM5H,EAAI8J,KAAMiD,EAAa/M,EAAIgK,MAAOhK,EAAI6J,MAEjE7J,EAAI6F,MACN+G,EAAS5M,EAAI6F,MAAMA,KAAKkH,IAIxBpD,EAAU9F,EAAQ,MAClBqJ,EAAY3B,OAAOrL,UAAUiN,KAAKxI,KAAK,iBAE3C9G,EAAQoO,MAAQ,SAAUmB,GACxB,IAAIC,EAAU,GACVC,EAAQ,GACRV,EAAWS,EAoBf,OAjBAD,EAAIhO,MAAM,gBAAgBmO,OAAOL,GAAW5I,SAAQ,SAAUiE,GAC5D,IAAIpH,EAAOoH,EAAE,GACTsE,EAAUtE,EAAEL,MAAM,GACT,MAAT/G,IACFmM,EAAMzH,KAAK,CAAC2H,IAAK,GAAIC,KAAM,KAC3Bb,EAAWU,EAAMA,EAAMpM,OAAO,IAGhC,IAAK,IAAIwM,EAAI,EAAGA,GAAK/D,EAAQxI,IAAS,IAAID,OAAQwM,GAAK,EAAG,CACxD,IAAI1N,EAAM2J,EAAQxI,GAAMuM,GACxB,GAAI1N,EAAI8J,IAAIqD,KAAKN,GACf,OAAOF,EAAS3M,EAAK4M,EAAUC,OAKrCQ,EAAQC,MAAQA,EACTD,GAGT,IAAIM,EAAe,SAAUC,EAAKC,GAChC,IAAI3D,EAAI2D,EAAKzO,MAAM,QAAS,GAI5B,OAHiB,IAAb8K,EAAEhJ,SACJ0M,EAAI1D,EAAE,IAAMsC,EAAWtC,EAAE,KAEpB0D,GAGT/P,EAAQqO,YAAc,SAAUnB,GAC9B,OAAOA,EAAI3L,MAAM,SAAS2O,OAAOJ,EAAc,KAIjD9P,EAAQsO,gBAAkBtO,EAAQqO,YAElCrO,EAAQuO,cAAgB,SAAUrB,GAChC,OAAOA,EAAI3L,MAAM,KAAK4O,IAAItB,SAG5B7O,EAAQwO,sBAAwB,SAAUtB,GAGxC,IAFA,IAAIkD,EAAa,GACbC,EAAQnD,EAAI3L,MAAM,KAAK4O,IAAIxB,GACtBvL,EAAI,EAAGA,EAAIiN,EAAMhN,OAAQD,GAAK,EACrCgN,EAAWpI,KAAK,CACdsI,UAAWD,EAAMjN,GACjBmN,GAAIF,EAAMjN,EAAI,GACdoN,KAAMH,EAAMjN,EAAI,KAGpB,OAAOgN,GAGTpQ,EAAQyO,qBAAuB,SAAUvB,GACvC,OAAOA,EAAI3L,MAAM,KAAK4O,KAAI,SAAUM,GAClC,OAAOA,EAAKC,UAAU,EAAGD,EAAKpN,OAAO,GAAG9B,MAAM,KAAK2O,OAAOJ,EAAc,QAI5E9P,EAAQ0O,yBAA2B,SAAUxB,GAC3C,OAAOA,EAAI3L,MAAM,KAAK4O,KAAI,SAAUQ,GAClC,OAAOA,EAAOpP,MAAM,KAAK4O,KAAI,SAAU/D,GACrC,IAAIwE,EAAMC,GAAS,EASnB,MAPkB,MAAdzE,EAAO,GACTwE,EAAOjC,EAAWvC,IAElBwE,EAAOjC,EAAWvC,EAAOsE,UAAU,EAAGtE,EAAO/I,SAC7CwN,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,0BCrHhB,IAAI/E,EAAU9F,EAAQ,MAGlB8K,EAAe,WACf1E,EAAS,SAAU2E,GACrB,IAAI3N,EAAI,EACJgH,EAAOvD,UACPY,EAAM2C,EAAK/G,OACf,OAAO0N,EAAUC,QAAQF,GAAc,SAAUG,GAC/C,GAAI7N,GAAKqE,EACP,OAAOwJ,EAET,IAAIvJ,EAAM0C,EAAKhH,GAEf,OADAA,GAAK,EACG6N,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAOrC,OAAOlH,GAChB,IAAK,KACH,OAAOmH,OAAOnH,GAChB,IAAK,KACH,MAAO,QAMTwJ,EAAW,SAAU5N,EAAMnB,EAAK4M,GAClC,IAII3E,EAAO,CAAC9G,EAAO,KAJTnB,EAAIiK,kBAAkB+E,SAC7BhP,EAAIiK,OAAOjK,EAAI6F,KAAO+G,EAAWA,EAAS5M,EAAI6J,OAC/C7J,EAAIiK,SAGN,GAAIjK,EAAIgK,MACN,IAAK,IAAI/I,EAAI,EAAGA,EAAIjB,EAAIgK,MAAM9I,OAAQD,GAAK,EAAG,CAC5C,IAAIgO,EAAIjP,EAAIgK,MAAM/I,GACdjB,EAAI6J,KACN5B,EAAKpC,KAAK+G,EAAS5M,EAAI6J,MAAMoF,IAG7BhH,EAAKpC,KAAK+G,EAAS5M,EAAIgK,MAAM/I,UAKjCgH,EAAKpC,KAAK+G,EAAS5M,EAAI6J,OAEzB,OAAOI,EAAOxF,MAAM,KAAMwD,IAKxBiH,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCrR,EAAOD,QAAU,SAAUwP,EAAS+B,GAClCA,EAAOA,GAAQ,GAEQ,MAAnB/B,EAAQgC,UACVhC,EAAQgC,QAAU,GAEA,MAAhBhC,EAAQxD,OACVwD,EAAQxD,KAAO,KAEjBwD,EAAQC,MAAMhJ,SAAQ,SAAUgL,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,OAIrB,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChC/B,EAAM,GAkCV,OA/BAoC,EAAWlL,SAAQ,SAAUnD,GAC3BwI,EAAQxI,GAAMmD,SAAQ,SAAUtE,GAC1BA,EAAI6J,QAAQwD,GAAgC,MAArBA,EAAQrN,EAAI6J,MACrCuD,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAKqN,IAEtBrN,EAAI6F,QAAQwH,GAAgC,MAArBA,EAAQrN,EAAI6F,OAC1CwH,EAAQrN,EAAI6F,MAAMvB,SAAQ,SAAUoL,GAClCtC,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAK0P,aAOrCrC,EAAQC,MAAMhJ,SAAQ,SAAUgL,GAC9BlC,EAAIvH,KAAKkJ,EAAS,IAAKpF,EAAQhC,EAAE,GAAI2H,IAErCG,EAAWnL,SAAQ,SAAUnD,GAC3BwI,EAAQxI,GAAMmD,SAAQ,SAAUtE,GAC1BA,EAAI6J,QAAQyF,GAA4B,MAAnBA,EAAMtP,EAAI6J,MACjCuD,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAKsP,IAEtBtP,EAAI6F,QAAQyJ,GAA4B,MAAnBA,EAAMtP,EAAI6F,OACtCyJ,EAAMtP,EAAI6F,MAAMvB,SAAQ,SAAUoL,GAChCtC,EAAIvH,KAAKkJ,EAAS5N,EAAMnB,EAAK0P,gBAOhCtC,EAAIuC,KAAK,QAAU,+BC5G5B,MAAM2kC,EAAW,CAIjBA,mBAA8B,WAC5B,OAAO1hC,KAAKE,SAAS3S,SAAS,IAAI0H,OAAO,EAAG,MAI9CysC,EAASC,WAAaD,EAASE,qBAG/BF,EAASG,WAAa,SAAShgB,GAC7B,OAAOA,EAAKigB,OAAOt1C,MAAM,MAAM4O,KAAIzG,GAAQA,EAAKmtC,UAGlDJ,EAASK,cAAgB,SAASlgB,GAEhC,OADcA,EAAKr1B,MAAM,QACZ4O,KAAI,CAAC4mC,EAAMpyC,KAAWA,EAAQ,EACzC,KAAOoyC,EAAOA,GAAMF,OAAS,UAIjCJ,EAASO,eAAiB,SAASpgB,GACjC,MAAMqgB,EAAWR,EAASK,cAAclgB,GACxC,OAAOqgB,GAAYA,EAAS,IAI9BR,EAASS,iBAAmB,SAAStgB,GACnC,MAAMqgB,EAAWR,EAASK,cAAclgB,GAExC,OADAqgB,EAAS54B,QACF44B,GAITR,EAASU,YAAc,SAASvgB,EAAMwgB,GACpC,OAAOX,EAASG,WAAWhgB,GAAMlnB,QAAOhG,GAAiC,IAAzBA,EAAKT,QAAQmuC,MAO/DX,EAASY,eAAiB,SAAS3tC,GACjC,IAAI2G,EAGFA,EADmC,IAAjC3G,EAAKT,QAAQ,gBACPS,EAAKgH,UAAU,IAAInP,MAAM,KAEzBmI,EAAKgH,UAAU,IAAInP,MAAM,KAGnC,MAAM+1C,EAAY,CAChBC,WAAYlnC,EAAM,GAClBC,UAAW,CAAC,EAAG,MAAO,EAAG,QAAQD,EAAM,KAAOA,EAAM,GACpDmnC,SAAUnnC,EAAM,GAAGmZ,cACnB7K,SAAUnL,SAASnD,EAAM,GAAI,IAC7BE,GAAIF,EAAM,GACVxD,QAASwD,EAAM,GACfG,KAAMgD,SAASnD,EAAM,GAAI,IAEzB/M,KAAM+M,EAAM,IAGd,IAAK,IAAIjN,EAAI,EAAGA,EAAIiN,EAAMhN,OAAQD,GAAK,EACrC,OAAQiN,EAAMjN,IACZ,IAAK,QACHk0C,EAAUG,eAAiBpnC,EAAMjN,EAAI,GACrC,MACF,IAAK,QACHk0C,EAAUI,YAAclkC,SAASnD,EAAMjN,EAAI,GAAI,IAC/C,MACF,IAAK,UACHk0C,EAAUK,QAAUtnC,EAAMjN,EAAI,GAC9B,MACF,IAAK,QACHk0C,EAAUM,MAAQvnC,EAAMjN,EAAI,GAC5Bk0C,EAAUO,iBAAmBxnC,EAAMjN,EAAI,GACvC,MACF,aAC8B6M,IAAxBqnC,EAAUjnC,EAAMjN,MAClBk0C,EAAUjnC,EAAMjN,IAAMiN,EAAMjN,EAAI,IAKxC,OAAOk0C,GAKTb,EAASqB,eAAiB,SAASR,GACjC,MAAM/nC,EAAM,GACZA,EAAIvH,KAAKsvC,EAAUC,YAEnB,MAAMjnC,EAAYgnC,EAAUhnC,UACV,QAAdA,EACFf,EAAIvH,KAAK,GACc,SAAdsI,EACTf,EAAIvH,KAAK,GAETuH,EAAIvH,KAAKsI,GAEXf,EAAIvH,KAAKsvC,EAAUE,SAASO,eAC5BxoC,EAAIvH,KAAKsvC,EAAU34B,UACnBpP,EAAIvH,KAAKsvC,EAAUzqC,SAAWyqC,EAAU/mC,IACxChB,EAAIvH,KAAKsvC,EAAU9mC,MAEnB,MAAMlN,EAAOg0C,EAAUh0C,KAkBvB,OAjBAiM,EAAIvH,KAAK,OACTuH,EAAIvH,KAAK1E,GACI,SAATA,GAAmBg0C,EAAUG,gBAC7BH,EAAUI,cACZnoC,EAAIvH,KAAK,SACTuH,EAAIvH,KAAKsvC,EAAUG,gBACnBloC,EAAIvH,KAAK,SACTuH,EAAIvH,KAAKsvC,EAAUI,cAEjBJ,EAAUK,SAAgD,QAArCL,EAAUE,SAAShuB,gBAC1Cja,EAAIvH,KAAK,WACTuH,EAAIvH,KAAKsvC,EAAUK,WAEjBL,EAAUO,kBAAoBP,EAAUM,SAC1CroC,EAAIvH,KAAK,SACTuH,EAAIvH,KAAKsvC,EAAUO,kBAAoBP,EAAUM,QAE5C,aAAeroC,EAAIuC,KAAK,MAMjC2kC,EAASuB,gBAAkB,SAAStuC,GAClC,OAAOA,EAAKM,OAAO,IAAIzI,MAAM,MAK/Bk1C,EAASwB,YAAc,SAASvuC,GAC9B,IAAI2G,EAAQ3G,EAAKM,OAAO,GAAGzI,MAAM,KACjC,MAAM22C,EAAS,CACbC,YAAa3kC,SAASnD,EAAMgO,QAAS,KAUvC,OAPAhO,EAAQA,EAAM,GAAG9O,MAAM,KAEvB22C,EAAOlsC,KAAOqE,EAAM,GACpB6nC,EAAOE,UAAY5kC,SAASnD,EAAM,GAAI,IACtC6nC,EAAOG,SAA4B,IAAjBhoC,EAAMhN,OAAemQ,SAASnD,EAAM,GAAI,IAAM,EAEhE6nC,EAAOI,YAAcJ,EAAOG,SACrBH,GAKTzB,EAAS8B,YAAc,SAASC,GAC9B,IAAIC,EAAKD,EAAML,iBACoBloC,IAA/BuoC,EAAME,uBACRD,EAAKD,EAAME,sBAEb,MAAML,EAAWG,EAAMH,UAAYG,EAAMF,aAAe,EACxD,MAAO,YAAcG,EAAK,IAAMD,EAAMxsC,KAAO,IAAMwsC,EAAMJ,WACvC,IAAbC,EAAiB,IAAMA,EAAW,IAAM,QAM/C5B,EAASkC,YAAc,SAASjvC,GAC9B,MAAM2G,EAAQ3G,EAAKM,OAAO,GAAGzI,MAAM,KACnC,MAAO,CACLuJ,GAAI0I,SAASnD,EAAM,GAAI,IACvBtD,UAAWsD,EAAM,GAAGpH,QAAQ,KAAO,EAAIoH,EAAM,GAAG9O,MAAM,KAAK,GAAK,WAChEq3C,IAAKvoC,EAAM,KAMfomC,EAASoC,YAAc,SAASC,GAC9B,MAAO,aAAeA,EAAgBhuC,IAAMguC,EAAgBC,cACvDD,EAAgB/rC,WAA2C,aAA9B+rC,EAAgB/rC,UAC1C,IAAM+rC,EAAgB/rC,UACtB,IACJ,IAAM+rC,EAAgBF,IAAM,QAMlCnC,EAASuC,UAAY,SAAStvC,GAC5B,MAAMwuC,EAAS,GACf,IAAIe,EACJ,MAAM5oC,EAAQ3G,EAAKM,OAAON,EAAKT,QAAQ,KAAO,GAAG1H,MAAM,KACvD,IAAK,IAAIsO,EAAI,EAAGA,EAAIQ,EAAMhN,OAAQwM,IAChCopC,EAAK5oC,EAAMR,GAAGgnC,OAAOt1C,MAAM,KAC3B22C,EAAOe,EAAG,GAAGpC,QAAUoC,EAAG,GAE5B,OAAOf,GAITzB,EAASyC,UAAY,SAASV,GAC5B,IAAI9uC,EAAO,GACP+uC,EAAKD,EAAML,YAIf,QAHmCloC,IAA/BuoC,EAAME,uBACRD,EAAKD,EAAME,sBAETF,EAAMW,YAAc/2C,OAAOmE,KAAKiyC,EAAMW,YAAY91C,OAAQ,CAC5D,MAAMoK,EAAS,GACfrL,OAAOmE,KAAKiyC,EAAMW,YAAY1yC,SAAQ2yC,SACJnpC,IAA5BuoC,EAAMW,WAAWC,GACnB3rC,EAAOzF,KAAKoxC,EAAQ,IAAMZ,EAAMW,WAAWC,IAE3C3rC,EAAOzF,KAAKoxC,MAGhB1vC,GAAQ,UAAY+uC,EAAK,IAAMhrC,EAAOqE,KAAK,KAAO,OAEpD,OAAOpI,GAKT+sC,EAAS4C,YAAc,SAAS3vC,GAC9B,MAAM2G,EAAQ3G,EAAKM,OAAON,EAAKT,QAAQ,KAAO,GAAG1H,MAAM,KACvD,MAAO,CACL+B,KAAM+M,EAAMgO,QACZi7B,UAAWjpC,EAAMyB,KAAK,OAK1B2kC,EAAS8C,YAAc,SAASf,GAC9B,IAAIgB,EAAQ,GACRf,EAAKD,EAAML,YAYf,YAXmCloC,IAA/BuoC,EAAME,uBACRD,EAAKD,EAAME,sBAETF,EAAMiB,cAAgBjB,EAAMiB,aAAap2C,QAE3Cm1C,EAAMiB,aAAahzC,SAAQizC,IACzBF,GAAS,aAAef,EAAK,IAAMiB,EAAGp2C,MACrCo2C,EAAGJ,WAAaI,EAAGJ,UAAUj2C,OAAS,IAAMq2C,EAAGJ,UAAY,IACxD,UAGDE,GAKT/C,EAASkD,eAAiB,SAASjwC,GACjC,MAAMkwC,EAAKlwC,EAAKT,QAAQ,KAClBoH,EAAQ,CACZ+B,KAAMoB,SAAS9J,EAAKM,OAAO,EAAG4vC,EAAK,GAAI,KAEnCC,EAAQnwC,EAAKT,QAAQ,IAAK2wC,GAOhC,OANIC,GAAS,GACXxpC,EAAM/C,UAAY5D,EAAKM,OAAO4vC,EAAK,EAAGC,EAAQD,EAAK,GACnDvpC,EAAM9C,MAAQ7D,EAAKM,OAAO6vC,EAAQ,IAElCxpC,EAAM/C,UAAY5D,EAAKM,OAAO4vC,EAAK,GAE9BvpC,GAKTomC,EAASqD,eAAiB,SAASpwC,GACjC,MAAM2G,EAAQ3G,EAAKM,OAAO,IAAIzI,MAAM,KACpC,MAAO,CACL+R,UAAWjD,EAAMgO,QACjB/L,MAAOjC,EAAMF,KAAIiC,GAAQoB,SAASpB,EAAM,QAM5CqkC,EAASsD,OAAS,SAASC,GACzB,MAAMh7B,EAAMy3B,EAASU,YAAY6C,EAAc,UAAU,GACzD,GAAIh7B,EACF,OAAOA,EAAIhV,OAAO,IAKtBysC,EAASwD,iBAAmB,SAASvwC,GACnC,MAAM2G,EAAQ3G,EAAKM,OAAO,IAAIzI,MAAM,KACpC,MAAO,CACL24C,UAAW7pC,EAAM,GAAGmZ,cACpBjc,MAAO8C,EAAM,GAAG0nC,gBAOpBtB,EAAS0D,kBAAoB,SAASH,EAAcI,GAIlD,MAAO,CACLC,KAAM,OACNC,aALY7D,EAASU,YAAY6C,EAAeI,EAChD,kBAIoBjqC,IAAIsmC,EAASwD,oBAKrCxD,EAAS8D,oBAAsB,SAAS9sC,EAAQ+sC,GAC9C,IAAIjrC,EAAM,WAAairC,EAAY,OAInC,OAHA/sC,EAAO6sC,aAAa7zC,SAAQg0C,IAC1BlrC,GAAO,iBAAmBkrC,EAAGP,UAAY,IAAMO,EAAGltC,MAAQ,UAErDgC,GAKTknC,EAASiE,gBAAkB,SAAShxC,GAClC,MAAM2G,EAAQ3G,EAAKM,OAAO,GAAGzI,MAAM,KACnC,MAAO,CACLgsC,IAAK/5B,SAASnD,EAAM,GAAI,IACxBsqC,YAAatqC,EAAM,GACnBuqC,UAAWvqC,EAAM,GACjBwqC,cAAexqC,EAAMhG,MAAM,KAI/BosC,EAASqE,gBAAkB,SAAS3B,GAClC,MAAO,YAAcA,EAAW5L,IAAM,IACpC4L,EAAWwB,YAAc,KACQ,iBAAzBxB,EAAWyB,UACfnE,EAASsE,qBAAqB5B,EAAWyB,WACzCzB,EAAWyB,YACdzB,EAAW0B,cAAgB,IAAM1B,EAAW0B,cAAc/oC,KAAK,KAAO,IACvE,QAKJ2kC,EAASuE,qBAAuB,SAASJ,GACvC,GAAqC,IAAjCA,EAAU3xC,QAAQ,WACpB,OAAO,KAET,MAAMoH,EAAQuqC,EAAU5wC,OAAO,GAAGzI,MAAM,KACxC,MAAO,CACL05C,UAAW,SACXC,QAAS7qC,EAAM,GACf8qC,SAAU9qC,EAAM,GAChB+qC,SAAU/qC,EAAM,GAAKA,EAAM,GAAG9O,MAAM,KAAK,QAAK0O,EAC9CorC,UAAWhrC,EAAM,GAAKA,EAAM,GAAG9O,MAAM,KAAK,QAAK0O,IAInDwmC,EAASsE,qBAAuB,SAASH,GACvC,OAAOA,EAAUK,UAAY,IACzBL,EAAUM,SACXN,EAAUO,SAAW,IAAMP,EAAUO,SAAW,KAChDP,EAAUQ,UAAYR,EAAUS,UAC7B,IAAMT,EAAUQ,SAAW,IAAMR,EAAUS,UAC3C,KAIR5E,EAAS6E,oBAAsB,SAAStB,EAAcI,GAGpD,OAFc3D,EAASU,YAAY6C,EAAeI,EAChD,aACWjqC,IAAIsmC,EAASiE,kBAM5BjE,EAAS8E,iBAAmB,SAASvB,EAAcI,GACjD,MAAMxC,EAAQnB,EAASU,YAAY6C,EAAeI,EAChD,gBAAgB,GACZoB,EAAM/E,EAASU,YAAY6C,EAAeI,EAC9C,cAAc,GAChB,OAAMxC,GAAS4D,EAGR,CACL3D,iBAAkBD,EAAM5tC,OAAO,IAC/ByxC,SAAUD,EAAIxxC,OAAO,KAJd,MASXysC,EAASiF,mBAAqB,SAASjuC,GACrC,IAAI8B,EAAM,eAAiB9B,EAAOoqC,iBAAxB,iBACSpqC,EAAOguC,SAAW,OAIrC,OAHIhuC,EAAOkuC,UACTpsC,GAAO,kBAEFA,GAITknC,EAASmF,mBAAqB,SAAS5B,GACrC,MAAM6B,EAAc,CAClBC,OAAQ,GACRC,iBAAkB,GAClBC,cAAe,GACfC,KAAM,IAGFC,EADQzF,EAASG,WAAWoD,GACd,GAAGz4C,MAAM,KAC7B,IAAK,IAAI6B,EAAI,EAAGA,EAAI84C,EAAM74C,OAAQD,IAAK,CACrC,MAAMq1C,EAAKyD,EAAM94C,GACX+4C,EAAa1F,EAASU,YAC1B6C,EAAc,YAAcvB,EAAK,KAAK,GACxC,GAAI0D,EAAY,CACd,MAAM3D,EAAQ/B,EAASwB,YAAYkE,GAC7BC,EAAQ3F,EAASU,YACrB6C,EAAc,UAAYvB,EAAK,KAQjC,OANAD,EAAMW,WAAaiD,EAAM/4C,OAASozC,EAASuC,UAAUoD,EAAM,IAAM,GACjE5D,EAAMiB,aAAehD,EAASU,YAC5B6C,EAAc,aAAevB,EAAK,KACjCtoC,IAAIsmC,EAAS4C,aAChBwC,EAAYC,OAAO9zC,KAAKwwC,GAEhBA,EAAMxsC,KAAK+rC,eACjB,IAAK,MACL,IAAK,SACH8D,EAAYG,cAAch0C,KAAKwwC,EAAMxsC,KAAK+rC,iBAWlD,OAJAtB,EAASU,YAAY6C,EAAc,aAAavzC,SAAQiD,IACtDmyC,EAAYE,iBAAiB/zC,KAAKyuC,EAASkC,YAAYjvC,OAGlDmyC,GAKTpF,EAAS4F,oBAAsB,SAASC,EAAMC,GAC5C,IAAIhtC,EAAM,GAGVA,GAAO,KAAO+sC,EAAO,IACrB/sC,GAAOgtC,EAAKT,OAAOz4C,OAAS,EAAI,IAAM,IACtCkM,GAAO,sBACPA,GAAOgtC,EAAKT,OAAO3rC,KAAIqoC,QACcvoC,IAA/BuoC,EAAME,qBACDF,EAAME,qBAERF,EAAML,cACZrmC,KAAK,KAAO,OAEfvC,GAAO,uBACPA,GAAO,8BAGPgtC,EAAKT,OAAOr1C,SAAQ+xC,IAClBjpC,GAAOknC,EAAS8B,YAAYC,GAC5BjpC,GAAOknC,EAASyC,UAAUV,GAC1BjpC,GAAOknC,EAAS8C,YAAYf,MAE9B,IAAIgE,EAAW,EAgBf,OAfAD,EAAKT,OAAOr1C,SAAQ+xC,IACdA,EAAMgE,SAAWA,IACnBA,EAAWhE,EAAMgE,aAGjBA,EAAW,IACbjtC,GAAO,cAAgBitC,EAAW,QAGhCD,EAAKR,kBACPQ,EAAKR,iBAAiBt1C,SAAQg2C,IAC5BltC,GAAOknC,EAASoC,YAAY4D,MAIzBltC,GAKTknC,EAASiG,2BAA6B,SAAS1C,GAC7C,MAAM2C,EAAqB,GACrBd,EAAcpF,EAASmF,mBAAmB5B,GAC1C4C,GAAuD,IAA9Cf,EAAYG,cAAc/yC,QAAQ,OAC3C4zC,GAA6D,IAAjDhB,EAAYG,cAAc/yC,QAAQ,UAG9CqJ,EAAQmkC,EAASU,YAAY6C,EAAc,WAC9C7pC,KAAIzG,GAAQ+sC,EAASkD,eAAejwC,KACpCgG,QAAOW,GAA6B,UAApBA,EAAM/C,YACnBiH,EAAcjC,EAAMjP,OAAS,GAAKiP,EAAM,GAAGF,KACjD,IAAI0qC,EAEJ,MAAMC,EAAQtG,EAASU,YAAY6C,EAAc,oBAC9C7pC,KAAIzG,GACWA,EAAKM,OAAO,IAAIzI,MAAM,KACvB4O,KAAI4mC,GAAQvjC,SAASujC,EAAM,QAExCgG,EAAM15C,OAAS,GAAK05C,EAAM,GAAG15C,OAAS,GAAK05C,EAAM,GAAG,KAAOxoC,IAC7DuoC,EAAgBC,EAAM,GAAG,IAG3BlB,EAAYC,OAAOr1C,SAAQ+xC,IACzB,GAAiC,QAA7BA,EAAMxsC,KAAK+rC,eAA2BS,EAAMW,WAAW6D,IAAK,CAC9D,IAAIC,EAAW,CACb7qC,KAAMmC,EACN2oC,iBAAkB1pC,SAASglC,EAAMW,WAAW6D,IAAK,KAE/CzoC,GAAeuoC,IACjBG,EAASE,IAAM,CAAC/qC,KAAM0qC,IAExBH,EAAmB30C,KAAKi1C,GACpBL,IACFK,EAAW51C,KAAK+G,MAAM/G,KAAKF,UAAU81C,IACrCA,EAASG,IAAM,CACbhrC,KAAMmC,EACN8oC,UAAWR,EAAY,aAAe,OAExCF,EAAmB30C,KAAKi1C,QAII,IAA9BN,EAAmBt5C,QAAgBkR,GACrCooC,EAAmB30C,KAAK,CACtBoK,KAAMmC,IAKV,IAAI+oC,EAAY7G,EAASU,YAAY6C,EAAc,MAenD,OAdIsD,EAAUj6C,SAEVi6C,EADsC,IAApCA,EAAU,GAAGr0C,QAAQ,WACXuK,SAAS8pC,EAAU,GAAGtzC,OAAO,GAAI,IACF,IAAlCszC,EAAU,GAAGr0C,QAAQ,SAEqB,IAAvCuK,SAAS8pC,EAAU,GAAGtzC,OAAO,GAAI,IAAa,IACnD,UAEKiG,EAEd0sC,EAAmBl2C,SAAQgH,IACzBA,EAAO8vC,WAAaD,MAGjBX,GAITlG,EAAS+G,oBAAsB,SAASxD,GACtC,MAAMyD,EAAiB,GAIjBC,EAAajH,EAASU,YAAY6C,EAAc,WACnD7pC,KAAIzG,GAAQ+sC,EAASkD,eAAejwC,KACpCgG,QAAOvN,GAAyB,UAAlBA,EAAImL,YAAuB,GACxCowC,IACFD,EAAe7nC,MAAQ8nC,EAAWnwC,MAClCkwC,EAAerrC,KAAOsrC,EAAWtrC,MAKnC,MAAMurC,EAAQlH,EAASU,YAAY6C,EAAc,gBACjDyD,EAAeG,YAAcD,EAAMt6C,OAAS,EAC5Co6C,EAAeI,SAA4B,IAAjBF,EAAMt6C,OAIhC,MAAMy6C,EAAMrH,EAASU,YAAY6C,EAAc,cAG/C,OAFAyD,EAAeK,IAAMA,EAAIz6C,OAAS,EAE3Bo6C,GAGThH,EAASsH,oBAAsB,SAASN,GACtC,IAAIluC,EAAM,GAWV,OAVIkuC,EAAeG,cACjBruC,GAAO,oBAELkuC,EAAeK,MACjBvuC,GAAO,uBAEmBU,IAAxBwtC,EAAerrC,MAAsBqrC,EAAe7nC,QACtDrG,GAAO,UAAYkuC,EAAerrC,KAChC,UAAYqrC,EAAe7nC,MAAQ,QAEhCrG,GAMTknC,EAASuH,UAAY,SAAShE,GAC5B,IAAI3pC,EACJ,MAAM4tC,EAAOxH,EAASU,YAAY6C,EAAc,WAChD,GAAoB,IAAhBiE,EAAK56C,OAEP,OADAgN,EAAQ4tC,EAAK,GAAGj0C,OAAO,GAAGzI,MAAM,KACzB,CAACoP,OAAQN,EAAM,GAAIqkB,MAAOrkB,EAAM,IAEzC,MAAM6tC,EAAQzH,EAASU,YAAY6C,EAAc,WAC9C7pC,KAAIzG,GAAQ+sC,EAASkD,eAAejwC,KACpCgG,QAAOyuC,GAAqC,SAAxBA,EAAU7wC,YACjC,OAAI4wC,EAAM76C,OAAS,GACjBgN,EAAQ6tC,EAAM,GAAG3wC,MAAMhM,MAAM,KACtB,CAACoP,OAAQN,EAAM,GAAIqkB,MAAOrkB,EAAM,UAFzC,GASFomC,EAAS2H,qBAAuB,SAASpE,GACvC,MAAMkC,EAAQzF,EAAS4H,WAAWrE,GAC5BsE,EAAc7H,EAASU,YAAY6C,EAAc,uBACvD,IAAIxsC,EACA8wC,EAAYj7C,OAAS,IACvBmK,EAAiBgG,SAAS8qC,EAAY,GAAGt0C,OAAO,IAAK,KAEnDikB,MAAMzgB,KACRA,EAAiB,OAEnB,MAAM+wC,EAAW9H,EAASU,YAAY6C,EAAc,gBACpD,GAAIuE,EAASl7C,OAAS,EACpB,MAAO,CACLmN,KAAMgD,SAAS+qC,EAAS,GAAGv0C,OAAO,IAAK,IACvCwtC,SAAU0E,EAAMsC,IAChBhxC,eAAAA,GAGJ,MAAMixC,EAAehI,EAASU,YAAY6C,EAAc,cACxD,GAAIyE,EAAap7C,OAAS,EAAG,CAC3B,MAAMgN,EAAQouC,EAAa,GACxBz0C,OAAO,IACPzI,MAAM,KACT,MAAO,CACLiP,KAAMgD,SAASnD,EAAM,GAAI,IACzBmnC,SAAUnnC,EAAM,GAChB7C,eAAAA,KAUNipC,EAASiI,qBAAuB,SAASjvC,EAAOkvC,GAC9C,IAAIz8B,EAAS,GAiBb,OAfEA,EADqB,cAAnBzS,EAAM+nC,SACC,CACP,KAAO/nC,EAAM6sC,KAAO,MAAQ7sC,EAAM+nC,SAAW,IAAMmH,EAAKnH,SAAW,OACnE,uBACA,eAAiBmH,EAAKnuC,KAAO,QAGtB,CACP,KAAOf,EAAM6sC,KAAO,MAAQ7sC,EAAM+nC,SAAW,IAAMmH,EAAKnuC,KAAO,OAC/D,uBACA,aAAemuC,EAAKnuC,KAAO,IAAMmuC,EAAKnH,SAAW,mBAGzBvnC,IAAxB0uC,EAAKnxC,gBACP0U,EAAOla,KAAK,sBAAwB22C,EAAKnxC,eAAiB,QAErD0U,EAAOpQ,KAAK,KAOrB2kC,EAASmI,kBAAoB,WAC3B,OAAO7pC,KAAKE,SAAS3S,WAAW0H,OAAO,EAAG,KAQ5CysC,EAASoI,wBAA0B,SAASC,EAAQC,EAASC,GAC3D,IAAIC,EACJ,MAAMztC,OAAsBvB,IAAZ8uC,EAAwBA,EAAU,EAQlD,OANEE,EADEH,GAGUrI,EAASmI,oBAIhB,aAFMI,GAAY,qBAGP,IAAMC,EAAY,IAAMztC,EADnC,yCAQTilC,EAASyI,aAAe,SAASlF,EAAcI,GAE7C,MAAMZ,EAAQ/C,EAASG,WAAWoD,GAClC,IAAK,IAAI52C,EAAI,EAAGA,EAAIo2C,EAAMn2C,OAAQD,IAChC,OAAQo2C,EAAMp2C,IACZ,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACH,OAAOo2C,EAAMp2C,GAAG4G,OAAO,GAK7B,OAAIowC,EACK3D,EAASyI,aAAa9E,GAExB,YAGT3D,EAAS0I,QAAU,SAASnF,GAG1B,OAFcvD,EAASG,WAAWoD,GACd,GAAGz4C,MAAM,KAChB,GAAGyI,OAAO,IAGzBysC,EAAS2I,WAAa,SAASpF,GAC7B,MAAyC,MAAlCA,EAAaz4C,MAAM,IAAK,GAAG,IAGpCk1C,EAAS4H,WAAa,SAASrE,GAC7B,MACM3pC,EADQomC,EAASG,WAAWoD,GACd,GAAGhwC,OAAO,GAAGzI,MAAM,KACvC,MAAO,CACL+6C,KAAMjsC,EAAM,GACZG,KAAMgD,SAASnD,EAAM,GAAI,IACzBmnC,SAAUnnC,EAAM,GAChBmuC,IAAKnuC,EAAMhG,MAAM,GAAGyH,KAAK,OAI7B2kC,EAAS4I,WAAa,SAASrF,GAC7B,MACM3pC,EADOomC,EAASU,YAAY6C,EAAc,MAAM,GACnChwC,OAAO,GAAGzI,MAAM,KACnC,MAAO,CACL+9C,SAAUjvC,EAAM,GAChB4uC,UAAW5uC,EAAM,GACjBkvC,eAAgB/rC,SAASnD,EAAM,GAAI,IACnCmvC,QAASnvC,EAAM,GACfovC,YAAapvC,EAAM,GACnBxD,QAASwD,EAAM,KAKnBomC,EAASiJ,WAAa,SAAS9oB,GAC7B,GAAoB,iBAATA,GAAqC,IAAhBA,EAAKvzB,OACnC,OAAO,EAET,MAAMm2C,EAAQ/C,EAASG,WAAWhgB,GAClC,IAAK,IAAIxzB,EAAI,EAAGA,EAAIo2C,EAAMn2C,OAAQD,IAChC,GAAIo2C,EAAMp2C,GAAGC,OAAS,GAA4B,MAAvBm2C,EAAMp2C,GAAGu8C,OAAO,GACzC,OAAO,EAIX,OAAO,GAKP1/C,EAAOD,QAAUy2C,wBC9wBwDx2C,EAAOD,QAG1E,WAAc,aAEV,IAAI4/C,OAA8B,IAAX7+C,EAAAA,EAAyBA,EAAAA,EACpB,oBAATX,KAAuBA,KACZ,oBAAXG,OAAyBA,OAAS,GAErD,SAASs/C,EAAQ19C,GAWf,OATE09C,EADoB,mBAAXv9B,QAAoD,iBAApBA,OAAOhL,SACtC,SAAUnV,GAClB,cAAcA,GAGN,SAAUA,GAClB,OAAOA,GAAyB,mBAAXmgB,QAAyBngB,EAAIO,cAAgB4f,QAAUngB,IAAQmgB,OAAOjgB,UAAY,gBAAkBF,GAItH09C,EAAQ19C,GAGjB,SAAS29C,EAAmBzoC,GAC1B,OAGF,SAA4BA,GAC1B,GAAIpV,MAAMC,QAAQmV,GAAM,CACtB,IAAK,IAAIjU,EAAI,EAAG28C,EAAO,IAAI99C,MAAMoV,EAAIhU,QAASD,EAAIiU,EAAIhU,OAAQD,IAAK28C,EAAK38C,GAAKiU,EAAIjU,GAEjF,OAAO28C,GAPFC,CAAmB3oC,IAW5B,SAA0B4oC,GACxB,GAAI39B,OAAOhL,YAAYlV,OAAO69C,IAAkD,uBAAzC79C,OAAOC,UAAUC,SAASC,KAAK09C,GAAgC,OAAOh+C,MAAMi+C,KAAKD,GAZtFE,CAAiB9oC,IAerD,WACE,MAAM,IAAI+X,UAAU,mDAhBuCgxB,GAoC7D,IAAIC,EAAW,SAAkBpvC,EAAGoM,GAClC,IAAIijC,GAAW,MAAJrvC,IAAmB,MAAJoM,GAE1B,OADWpM,GAAK,KAAOoM,GAAK,KAAOijC,GAAO,KAC5B,GAAW,MAANA,GAejBC,EAAW,SAAkBrzC,GAC/B,GAAmB,iBAARA,EACT,MAAM,IAAItD,MAAM,oCAKlB,IAFA,IAAI42C,EAAM,GAEDp9C,EAAI,EAAGA,EAAiB,EAAb8J,EAAI7J,OAAYD,GAAK,EACvCo9C,EAAIp9C,GAAK,KAA+B,IAAxB8J,EAAItI,WAAWxB,EAAI,KAAaA,EAAI,GAGtD,OAAOo9C,GAoCLC,EAAU,SAAiB3iC,EAAG9Y,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAC5C,OAAO41C,GAxDsBp+B,EAwDLo+B,EAASA,EAASr7C,EAAG8Y,GAAIuiC,EAASpvC,EAAGxG,OAxD3Bi2C,EAwDgCr0C,GAvD9C4V,IAAQ,GAAKy+B,EAuDqCz7C,GAxD1D,IAAiBgd,EAAKy+B,GA2DhCC,EAAS,SAAgB37C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC7C,OAAOg2C,EAAQx7C,EAAIC,GAAKD,EAAIE,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,IAGzCm2C,EAAS,SAAgB57C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC7C,OAAOg2C,EAAQx7C,EAAIE,EAAID,GAAKC,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,IAGzCo2C,EAAS,SAAgB77C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC7C,OAAOg2C,EAAQx7C,EAAIC,EAAIC,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,IAGpCq2C,EAAS,SAAgB97C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC7C,OAAOg2C,EAAQv7C,GAAKD,GAAKE,GAAIH,EAAGC,EAAGgM,EAAG5E,EAAG5B,IAOvCs2C,EAAW,SAAkB9vC,EAAGxJ,GAElCwJ,EAAExJ,GAAO,IAAM,KAAQA,EAAM,GAC7BwJ,EAA0B,IAAvBxJ,EAAM,KAAO,GAAK,IAAWA,EAOhC,IANA,IAIIu5C,EAAMC,EAAMC,EAAMC,EAJlBn8C,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UAGC/B,EAAI,EAAGA,EAAI6N,EAAE5N,OAAQD,GAAK,GACjC49C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACPH,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAIw7C,EAAOx7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,WACtC8B,EAAIy7C,EAAOz7C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,WACrC6B,EAAI07C,EAAO17C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,YACtC4B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAIw7C,EAAOx7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACrC8B,EAAIy7C,EAAOz7C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,YACtC6B,EAAI07C,EAAO17C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,UACtC4B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,YACpC+B,EAAIw7C,EAAOx7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACtC8B,EAAIy7C,EAAOz7C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,OACvC6B,EAAI07C,EAAO17C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACvC4B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,YACrC+B,EAAIw7C,EAAOx7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,UACvC8B,EAAIy7C,EAAOz7C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,YACvC6B,EAAI07C,EAAO17C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,GAAI,YACtC4B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAIy7C,EAAOz7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACrC8B,EAAI07C,EAAO17C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,WACtC6B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACtC4B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAIy7C,EAAOz7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,EAAG,UACrC8B,EAAI07C,EAAO17C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,WACvC6B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACtC4B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,WACpC+B,EAAIy7C,EAAOz7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,GAAI,YACtC8B,EAAI07C,EAAO17C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACtC6B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,GAAI,YACrC4B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,GAAI,YACtC+B,EAAIy7C,EAAOz7C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,UACrC8B,EAAI07C,EAAO17C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,YACrC6B,EAAI27C,EAAO37C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACvC4B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,QACrC+B,EAAI07C,EAAO17C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACtC8B,EAAI27C,EAAO37C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,YACtC6B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,UACvC4B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,YACrC+B,EAAI07C,EAAO17C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACrC8B,EAAI27C,EAAO37C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACtC6B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACvC4B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,WACrC+B,EAAI07C,EAAO17C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,WACtC8B,EAAI27C,EAAO37C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACtC6B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,GAAI,UACrC4B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAI07C,EAAO17C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,WACvC8B,EAAI27C,EAAO37C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,WACtC6B,EAAI47C,EAAO57C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACtC4B,EAAI87C,EAAO97C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAI27C,EAAO37C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACrC8B,EAAI47C,EAAO57C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,YACvC6B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,UACtC4B,EAAI87C,EAAO97C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,YACrC+B,EAAI27C,EAAO37C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACtC8B,EAAI47C,EAAO57C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,SACvC6B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,YACtC4B,EAAI87C,EAAO97C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,YACpC+B,EAAI27C,EAAO37C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,UACvC8B,EAAI47C,EAAO57C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,YACtC6B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,GAAI,YACtC4B,EAAI87C,EAAO97C,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACrC+B,EAAI27C,EAAO37C,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,YACvC8B,EAAI47C,EAAO57C,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,WACrC6B,EAAI67C,EAAO77C,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACtC4B,EAAIq7C,EAASr7C,EAAGg8C,GAChB/7C,EAAIo7C,EAASp7C,EAAGg8C,GAChB/7C,EAAIm7C,EAASn7C,EAAGg8C,GAChB/7C,EAAIk7C,EAASl7C,EAAGg8C,GAGlB,MAAO,CAACn8C,EAAGC,EAAGC,EAAGC,IASfi8C,EAAM,CACRC,UAAW,SAAmBh1C,GAC5B,OAvIW,SAAkBi1C,GAI/B,IAHA,IAAIC,EAAU,mBACVr0C,EAAM,GAED9J,EAAI,EAAGA,EAAsB,EAAlBk+C,EAASj+C,OAAYD,IACvC8J,GAAOq0C,EAAQ5B,OAAO2B,EAASl+C,GAAK,IAAMA,EAAI,EAAI,EAAI,EAAI,IAAOm+C,EAAQ5B,OAAO2B,EAASl+C,GAAK,IAAMA,EAAI,EAAI,EAAI,IAGlH,OAAO8J,EA+HEs0C,CAAST,EAASR,EAASl0C,GAAe,EAAXA,EAAEhJ,UAE1CyB,KAAM,SAAcuH,GAClB,OAxJW,SAAkBm0C,GAG/B,IAFA,IAAItzC,EAAM,GAED9J,EAAI,EAAGA,EAAiB,GAAbo9C,EAAIn9C,OAAaD,GAAK,EACxC8J,GAAO0B,OAAO6yC,aAAajB,EAAIp9C,GAAK,KAAOA,EAAI,GAAK,KAGtD,OAAO8J,EAiJEw0C,CAASX,EAASR,EAASl0C,GAAe,EAAXA,EAAEhJ,WAoB5C,SAASs+C,EAAU1wC,EAAGxJ,GAEpBwJ,EAAExJ,GAAO,IAAM,KAAQ,GAAKA,EAAM,GAClCwJ,EAAyB,IAAtBxJ,EAAM,IAAM,GAAK,IAAWA,EAC/B,IAMIrE,EAAGyM,EAAGpF,EAAGu2C,EAAMC,EAAMC,EAAMC,EAAMS,EANjC9xB,EAAI,IAAI7tB,MAAM,IACd+C,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UACJoH,GAAK,WAGT,IAAKnJ,EAAI,EAAGA,EAAI6N,EAAE5N,OAAQD,GAAK,GAAI,CAOjC,IANA49C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACPy8C,EAAOr1C,EAEFsD,EAAI,EAAGA,EAAI,GAAIA,IAEhBigB,EAAEjgB,GADAA,EAAI,GACCoB,EAAE7N,EAAIyM,GAENgyC,EAAI/xB,EAAEjgB,EAAI,GAAKigB,EAAEjgB,EAAI,GAAKigB,EAAEjgB,EAAI,IAAMigB,EAAEjgB,EAAI,IAAK,GAG1DpF,EAAIq3C,EAAWA,EAAWD,EAAI78C,EAAG,GAAI+8C,EAAQlyC,EAAG5K,EAAGC,EAAGC,IAAK28C,EAAWA,EAAWv1C,EAAGujB,EAAEjgB,IAAKmyC,EAAQnyC,KACnGtD,EAAIpH,EACJA,EAAID,EACJA,EAAI28C,EAAI58C,EAAG,IACXA,EAAID,EACJA,EAAIyF,EAGNzF,EAAI88C,EAAW98C,EAAGg8C,GAClB/7C,EAAI68C,EAAW78C,EAAGg8C,GAClB/7C,EAAI48C,EAAW58C,EAAGg8C,GAClB/7C,EAAI28C,EAAW38C,EAAGg8C,GAClB50C,EAAIu1C,EAAWv1C,EAAGq1C,GAGpB,MAAO,CAAC58C,EAAGC,EAAGC,EAAGC,EAAGoH,GAQtB,SAASw1C,EAAQt3C,EAAGxF,EAAGC,EAAGC,GACxB,OAAIsF,EAAI,GACCxF,EAAIC,GAAKD,EAAIE,EAGlBsF,EAAI,GACCxF,EAAIC,EAAIC,EAGbsF,EAAI,GACCxF,EAAIC,EAAID,EAAIE,EAAID,EAAIC,EAGtBF,EAAIC,EAAIC,EAOjB,SAAS68C,EAAQv3C,GACf,OAAOA,EAAI,GAAK,WAAaA,EAAI,GAAK,WAAaA,EAAI,IAAM,YAAc,UAO7E,SAASw3C,EAAej0C,EAAK2O,GAC3B,IAAIulC,EAAOC,EAASn0C,GAEhBk0C,EAAK7+C,OAAS,KAChB6+C,EAAOP,EAAUO,EAAmB,EAAbl0C,EAAI3K,SAM7B,IAHA,IAAI++C,EAAO,IAAIngD,MAAM,IACjBogD,EAAO,IAAIpgD,MAAM,IAEZmB,EAAI,EAAGA,EAAI,GAAIA,IACtBg/C,EAAKh/C,GAAe,UAAV8+C,EAAK9+C,GACfi/C,EAAKj/C,GAAe,WAAV8+C,EAAK9+C,GAGjB,IAAI0B,EAAO68C,EAAUS,EAAK53C,OAAO23C,EAASxlC,IAAQ,IAAoB,EAAdA,EAAKtZ,QAC7D,OAAOs+C,EAAUU,EAAK73C,OAAO1F,GAAO,KAQtC,SAASg9C,EAAW7wC,EAAGoM,GACrB,IAAIijC,GAAW,MAAJrvC,IAAmB,MAAJoM,GAE1B,OADWpM,GAAK,KAAOoM,GAAK,KAAOijC,GAAO,KAC5B,GAAW,MAANA,EAOrB,SAASuB,EAAI5/B,EAAKy+B,GAChB,OAAOz+B,GAAOy+B,EAAMz+B,IAAQ,GAAKy+B,EAQnC,SAASyB,EAASj1C,GAIhB,IAHA,IAAIszC,EAAM,GAGDp9C,EAAI,EAAGA,EAAiB,EAAb8J,EAAI7J,OAAYD,GAAK,EACvCo9C,EAAIp9C,GAAK,KAHA,IAGO8J,EAAItI,WAAWxB,EAAI,KAAc,GAAKA,EAAI,GAG5D,OAAOo9C,EAOT,SAAS8B,EAAShB,GAKhB,IAJA,IAEIiB,EAAS1yC,EADT3C,EAAM,GAGD9J,EAAI,EAAGA,EAAsB,EAAlBk+C,EAASj+C,OAAYD,GAAK,EAG5C,IAFAm/C,GAAWjB,EAASl+C,GAAK,IAAM,GAAK,EAAIA,EAAI,GAAK,MAAS,IAAMk+C,EAASl+C,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,MAAS,EAAIk+C,EAASl+C,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,IAExKyM,EAAI,EAAGA,EAAI,EAAGA,IACT,EAAJzM,EAAY,EAAJyM,EAA0B,GAAlByxC,EAASj+C,OAC3B6J,GAAO,IAEPA,GAXI,mEAWOyyC,OAAO4C,GAAW,GAAK,EAAI1yC,GAAK,IAKjD,OAAO3C,EAOT,SAASs1C,EAAShC,GAIhB,IAHA,IAAItzC,EAAM,GAGD9J,EAAI,EAAGA,EAAiB,GAAbo9C,EAAIn9C,OAAaD,GAAK,EACxC8J,GAAO0B,OAAO6yC,aAAajB,EAAIp9C,GAAK,KAAO,GAAKA,EAAI,GAH3C,KAMX,OAAO8J,EAQT,IAAIu1C,EAAO,CACTC,cAAe,SAAuB10C,EAAK2O,GACzC,OAAO2lC,EAASL,EAAej0C,EAAK2O,KAEtCgmC,SAAU,SAAkBt2C,GAC1B,OAAOi2C,EAASX,EAAUQ,EAAS91C,GAAe,EAAXA,EAAEhJ,UAE3Cm/C,SAAUA,EACVP,eAAgBA,EAChBW,cAAe,SAAuB50C,EAAK2O,GACzC,OAAO6lC,EAASP,EAAej0C,EAAK2O,KAEtCkmC,SAAU,SAAkBx2C,GAC1B,OAAOm2C,EAASb,EAAUQ,EAAS91C,GAAe,EAAXA,EAAEhJ,WAIzCy/C,EACQ,SAAkB51C,GAC1B,IAAI9J,EAAG8B,EACH69C,EAAM,GACNt7C,EAAMyF,EAAI7J,OAEd,IAAKD,EAAI,EAAGA,EAAIqE,EAAKrE,KACnB8B,EAAIgI,EAAItI,WAAWxB,KAEV,GAAU8B,GAAK,IACtB69C,GAAO71C,EAAIyyC,OAAOv8C,GACT8B,EAAI,MACb69C,GAAOn0C,OAAO6yC,aAAa,IAAOv8C,GAAK,GAAK,IAC5C69C,GAAOn0C,OAAO6yC,aAAa,IAAOv8C,GAAK,EAAI,IAC3C69C,GAAOn0C,OAAO6yC,aAAa,IAAOv8C,GAAK,EAAI,MAE3C69C,GAAOn0C,OAAO6yC,aAAa,IAAOv8C,GAAK,EAAI,IAC3C69C,GAAOn0C,OAAO6yC,aAAa,IAAOv8C,GAAK,EAAI,KAI/C,OAAO69C,GArBPD,EAuBU,SAAoBE,GAsB9B,IAAK,IAAIC,KAFTD,EAAUA,GAAW,GAGnB,GAAI5gD,OAAOC,UAAUsV,eAAepV,KAAKygD,EAASC,GAAa,CAC7D,IAAIC,EAAU,GACVC,EAAS,GACTC,EAAO,GACPC,EAAYL,EAAQC,GACpBK,EAA+B,WAAvBzD,EAAQwD,GAChBE,EAAcC,OAAOC,SAASH,EAAQD,EAAU91C,MAAQ81C,IAExDC,IACFJ,EAAUG,EAAUH,QAAU,YAAcG,EAAUH,QAAU,GAChEC,EAASE,EAAUF,OAAS,WAAaE,EAAUF,OAAS,GAC5DC,EAAOC,EAAUD,KAAO,SAAWC,EAAUD,KAAO,IAGtD33B,SAASi4B,OAAST,EAAa,IAAMM,EAAcL,EAAUC,EAASC,IAkB9E,SAASO,EAAO33C,EAAM43C,GACpB,OAAO,IAAIC,EAAQC,QAAQ93C,EAAM43C,GA2BnC,SAASG,EAAIH,GACX,OAAO,IAAIC,EAAQC,QAAQ,KAAMF,GAanC,SAASI,EAAMJ,GACb,OAAO,IAAIC,EAAQC,QAAQ,WAAYF,GAWzC,IAAIC,EAAU,CAEZI,QAAS,YAqBTC,GAAI,CACFC,SAAU,sCACVC,KAAM,iBACNC,OAAQ,gBACRC,KAAM,iBACNC,OAAQ,mBACRC,QAAS,oBACTC,WAAY,wCACZC,YAAa,yCACbC,IAAK,iCACLC,KAAM,mCACNC,OAAQ,mCACRC,QAAS,sCACTC,KAAM,mCACNC,QAAS,sCACTf,QAAS,oBACTgB,QAAS,sCACTC,SAAU,sCACVC,MAAO,gCASTA,MAAO,CACLC,KAAM,CAAC,IAAK,aAAc,KAAM,OAAQ,KAAM,MAAO,KAAM,KAAM,IAAK,OAAQ,SAAU,KAAM,QAC9FC,WAAY,CACV,EAAK,CAAC,QACN,WAAc,CAAC,SACf,GAAM,GACN,KAAQ,CAAC,SACT,GAAM,GACN,IAAO,CAAC,MAAO,MAAO,QAAS,SAAU,SACzC,GAAM,CAAC,SACP,GAAM,CAAC,SACP,EAAK,CAAC,SACN,KAAQ,CAAC,SACT,OAAU,GACV,GAAM,CAAC,SACP,KAAQ,IAEVC,IAAK,CAAC,mBAAoB,QAAS,cAAe,YAAa,aAAc,cAAe,cAAe,eAAgB,aAAc,mBASzIC,SAAU,SAAkBhY,GAC1B,IAAK,IAAInqC,EAAI,EAAGA,EAAIygD,EAAQsB,MAAMC,KAAK/hD,OAAQD,IAC7C,GAAImqC,IAAQsW,EAAQsB,MAAMC,KAAKhiD,GAC7B,OAAO,EAIX,OAAO,GAUToiD,eAAgB,SAAwBjY,EAAKjgC,GAC3C,QAA6C,IAAlCu2C,EAAQsB,MAAME,WAAW9X,IAAwBsW,EAAQsB,MAAME,WAAW9X,GAAKlqC,OAAS,EACjG,IAAK,IAAID,EAAI,EAAGA,EAAIygD,EAAQsB,MAAME,WAAW9X,GAAKlqC,OAAQD,IACxD,GAAIkK,IAAcu2C,EAAQsB,MAAME,WAAW9X,GAAKnqC,GAC9C,OAAO,EAKb,OAAO,GAETqiD,SAAU,SAAkBvuB,GAC1B,IAAK,IAAI9zB,EAAI,EAAGA,EAAIygD,EAAQsB,MAAMG,IAAIjiD,OAAQD,IAC5C,GAAI8zB,IAAU2sB,EAAQsB,MAAMG,IAAIliD,GAC9B,OAAO,EAIX,OAAO,IAoBXsiD,OAAQ,CACNrlD,MAAO,EACPslD,WAAY,EACZC,SAAU,EACVC,eAAgB,EAChBC,SAAU,EACVC,UAAW,EACXC,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,YAAa,GACbC,aAAc,IAEhBC,eAAgB,CACdC,WAAY,aACZC,SAAU,WACVC,iBAAkB,6BAClBC,aAAc,eACdC,eAAgB,WAYlBC,SAAU,CACRx7C,MAAO,EACPC,KAAM,EACNE,KAAM,EACNlL,MAAO,EACPwmD,MAAO,GAUTC,YAAa,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,IAiBZC,QAAS,IACTC,kBAAmB,GAcnBC,aAAc,SAAsBr7C,EAAMuB,GACxCs2C,EAAQK,GAAGl4C,GAAQuB,GAiBrB+5C,aAAc,SAAsBC,EAAMC,EAAU1d,GAClD,IAAK,IAAI1mC,EAAI,EAAGA,EAAImkD,EAAKE,WAAWpkD,OAAQD,IAAK,CAC/C,IAAIskD,EAAYH,EAAKE,WAAWrkD,GAE5BskD,EAAU1e,WAAa6a,EAAQiD,YAAYC,QAAYS,IAAY1jD,KAAK6jD,WAAWD,EAAWF,IAChG1d,EAAK4d,KAkBXC,WAAY,SAAoB91C,EAAI7F,GAClC,OAAO6F,EAAGwrB,UAAYrxB,GAOxB47C,cAAe,KAMfC,eAAgB,WACd,IAAIC,EAWJ,YAP+C73C,IAA3Cwb,SAASs8B,eAAeC,gBAAgCv8B,SAASs8B,eAAeC,gBAAkBv8B,SAASw8B,cAAgBx8B,SAASw8B,aAAe,IACrJH,EAAMhkD,KAAKokD,gBACPjxB,YAAY6wB,EAAIl8B,cAAc,YAElCk8B,EAAMr8B,SAASs8B,eAAeC,eAAe,gBAAiB,UAAW,MAGpEF,GASTK,aAAc,WAKZ,OAJKtE,EAAQ+D,gBACX/D,EAAQ+D,cAAgB/D,EAAQgE,kBAG3BhE,EAAQ+D,eAWjBM,aAAc,WAIZ,IAHA,IAAIJ,EAAM,KACNM,EAAa,CAAC,yBAA0B,yBAA0B,yBAA0B,yBAA0B,qBAAsB,oBAAqB,oBAE5JjjD,EAAI,EAAGA,EAAIijD,EAAW/kD,QACjB,OAARykD,EADiC3iD,IAEnC,IACE2iD,EAAM,IAAIO,cAAcD,EAAWjjD,IACnC,MAAOoH,GACPu7C,EAAM,KAOZ,OAAOA,GAqBTQ,WAAY,SAAoBt8C,GAC9B,IAAKA,EACH,OAAO,KAMT,IAHA,IAAIlL,EAAO+iD,EAAQsE,eAAev8B,cAAc5f,GAGvChH,EAAI,EAAGA,EAAI6B,UAAUxD,OAAQ2B,IAAK,CACzC,IAAI0C,EAAMb,UAAU7B,GAEpB,GAAK0C,EAIL,GAAmB,iBAARA,GAAmC,iBAARA,EACpC5G,EAAKm2B,YAAY4sB,EAAQ0E,YAAY7gD,SAChC,GAAqB,WAAjBm4C,EAAQn4C,IAAyC,mBAAbA,EAAImS,KACjD,IAAK,IAAIzW,EAAI,EAAGA,EAAIsE,EAAIrE,OAAQD,IAAK,CACnC,IAAIolD,EAAO9gD,EAAItE,GAEO,WAAlBy8C,EAAQ2I,IAA2C,mBAAdA,EAAK3uC,WAAmC5J,IAAZu4C,EAAK,IAAgC,OAAZA,EAAK,IACjG1nD,EAAK2nD,aAAaD,EAAK,GAAIA,EAAK,SAG/B,GAAqB,WAAjB3I,EAAQn4C,GACjB,IAAK,IAAIgQ,KAAKhQ,EACRtF,OAAOC,UAAUsV,eAAepV,KAAKmF,EAAKgQ,SAAiBzH,IAAXvI,EAAIgQ,IAA+B,OAAXhQ,EAAIgQ,IAC9E5W,EAAK2nD,aAAa/wC,EAAGhQ,EAAIgQ,IAMjC,OAAO5W,GAYT4nD,UAAW,SAAmB5gD,GAM5B,OAFAA,GADAA,GADAA,GADAA,EAAOA,EAAKkJ,QAAQ,MAAO,UACfA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,WACdA,QAAQ,KAAM,WAa5B23C,YAAa,SAAqB7gD,GAMhC,OAFAA,GADAA,GADAA,GADAA,EAAOA,EAAKkJ,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MAejCu3C,YAAa,SAAqBzgD,GAChC,OAAO+7C,EAAQsE,eAAeS,eAAe9gD,IAY/C+gD,YAAa,SAAqBC,GAChC,IAAIhoD,EAWJ,OATIioD,UAEFjoD,GADa,IAAIioD,WACHC,gBAAgBF,EAAM,cAEpChoD,EAAO,IAAIunD,cAAc,qBACpBxxC,MAAQ,QACb/V,EAAKmoD,QAAQH,IAGRhoD,GAYTooD,QAAS,SAAiB3B,GACxB,IAAKA,EACH,OAAO,KAGT,IAAIr6C,EAAM,GAEqB,IAA3Bq6C,EAAKE,WAAWpkD,QAAgBkkD,EAAKve,WAAa6a,EAAQiD,YAAYE,OACxE95C,GAAOq6C,EAAK4B,WAGd,IAAK,IAAI/lD,EAAI,EAAGA,EAAImkD,EAAKE,WAAWpkD,OAAQD,IACtCmkD,EAAKE,WAAWrkD,GAAG4lC,WAAa6a,EAAQiD,YAAYE,OACtD95C,GAAOq6C,EAAKE,WAAWrkD,GAAG+lD,WAI9B,OAAOtF,EAAQ6E,UAAUx7C,IAe3Bk8C,YAAa,SAAqB7B,GAChC,IAAI11C,EAEJ,GAAI01C,EAAKve,WAAa6a,EAAQiD,YAAYC,OAAQ,CAChDl1C,EAAKgyC,EAAQyE,WAAWf,EAAKlqB,SAE7B,IAAK,IAAIj6B,EAAI,EAAGA,EAAImkD,EAAKlC,WAAWhiD,OAAQD,IAC1CyO,EAAG42C,aAAalB,EAAKlC,WAAWjiD,GAAGimD,SAAU9B,EAAKlC,WAAWjiD,GAAGmK,OAGlE,IAAK,IAAI+7C,EAAK,EAAGA,EAAK/B,EAAKE,WAAWpkD,OAAQimD,IAC5Cz3C,EAAGolB,YAAY4sB,EAAQuF,YAAY7B,EAAKE,WAAW6B,UAE5C/B,EAAKve,WAAa6a,EAAQiD,YAAYE,OAC/Cn1C,EAAKgyC,EAAQsE,eAAeS,eAAerB,EAAK4B,YAGlD,OAAOt3C,GAeT03C,WAAY,SAAoBhC,GAC9B,IAAI11C,EAEJ,GAAI01C,EAAKve,WAAa6a,EAAQiD,YAAYC,OAAQ,CAChD,IAAIxZ,EAAMga,EAAK8B,SAAS7/B,cAExB,GAAIq6B,EAAQsB,MAAMI,SAAShY,GACzB,IACE17B,EAAKgyC,EAAQyE,WAAW/a,GAExB,IAAK,IAAInqC,EAAI,EAAGA,EAAIygD,EAAQsB,MAAME,WAAW9X,GAAKlqC,OAAQD,IAAK,CAC7D,IAAIkK,EAAYu2C,EAAQsB,MAAME,WAAW9X,GAAKnqC,GAC1CmK,EAAQg6C,EAAKiC,aAAal8C,GAE9B,GAAI,MAAOC,GAAqD,KAAVA,IAA0B,IAAVA,GAA6B,IAAVA,EASzF,GALkB,UAAdD,GAA4C,WAAnBuyC,EAAQtyC,SAAgD,IAAlBA,EAAMk8C,UACvEl8C,EAAQA,EAAMk8C,SAIE,UAAdn8C,EAAuB,CAIzB,IAHA,IAAIg4C,EAAM,GACNoE,EAAWn8C,EAAMhM,MAAM,KAElBsO,EAAI,EAAGA,EAAI65C,EAASrmD,OAAQwM,IAAK,CACxC,IAAI24C,EAAOkB,EAAS75C,GAAGtO,MAAM,KACzBooD,EAAUnB,EAAK,GAAGx3C,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAIwY,cAE9D,GAAIq6B,EAAQsB,MAAMM,SAASkE,GAAU,CACnC,IAAIC,EAAWpB,EAAK,GAAGx3C,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAC3Ds0C,EAAIt9C,KAAK2hD,EAAU,KAAOC,IAI1BtE,EAAIjiD,OAAS,IACfkK,EAAQ+3C,EAAIxzC,KAAK,MACjBD,EAAG42C,aAAan7C,EAAWC,SAG7BsE,EAAG42C,aAAan7C,EAAWC,GAI/B,IAAK,IAAIs8C,EAAM,EAAGA,EAAMtC,EAAKE,WAAWpkD,OAAQwmD,IAC9Ch4C,EAAGolB,YAAY4sB,EAAQ0F,WAAWhC,EAAKE,WAAWoC,KAEpD,MAAOt9C,GAEPsF,EAAKgyC,EAAQ0E,YAAY,QAEtB,CACL12C,EAAKgyC,EAAQsE,eAAe2B,yBAE5B,IAAK,IAAIC,EAAM,EAAGA,EAAMxC,EAAKE,WAAWpkD,OAAQ0mD,IAC9Cl4C,EAAGolB,YAAY4sB,EAAQ0F,WAAWhC,EAAKE,WAAWsC,WAGjD,GAAIxC,EAAKve,WAAa6a,EAAQiD,YAAYI,SAAU,CACzDr1C,EAAKgyC,EAAQsE,eAAe2B,yBAE5B,IAAK,IAAIE,EAAM,EAAGA,EAAMzC,EAAKE,WAAWpkD,OAAQ2mD,IAC9Cn4C,EAAGolB,YAAY4sB,EAAQ0F,WAAWhC,EAAKE,WAAWuC,UAE3CzC,EAAKve,WAAa6a,EAAQiD,YAAYE,OAC/Cn1C,EAAKgyC,EAAQ0E,YAAYhB,EAAK4B,YAGhC,OAAOt3C,GAYTo4C,WAAY,SAAoBnpD,GAC9B,MAAoB,iBAATA,EACFA,EAGFA,EAAKkQ,QAAQ,aAAc,IAAIA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,SAYjQk5C,aAAc,SAAsBppD,GAClC,MAAoB,iBAATA,EACFA,EAGFA,EAAKkQ,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,OAYrOm5C,eAAgB,SAAwBC,GACtC,OAAIA,EAAInhD,QAAQ,KAAO,EACd,KAGFmhD,EAAI7oD,MAAM,KAAK,IAYxB8oD,iBAAkB,SAA0BD,GAC1C,IAAIE,EAAOzG,EAAQ0G,kBAAkBH,GAErC,GAAIE,EAAKrhD,QAAQ,KAAO,EACtB,OAAOqhD,EAEP,IAAIj6C,EAAQi6C,EAAK/oD,MAAM,KAEvB,OADA8O,EAAMjH,OAAO,EAAG,GACTiH,EAAMyB,KAAK,MAatB04C,mBAAoB,SAA4BJ,GAC9C,IAAKA,EACH,OAAO,KAGT,IAAI/9C,EAAI+9C,EAAI7oD,MAAM,KAElB,OAAI8K,EAAEhJ,OAAS,EACN,MAGTgJ,EAAEjD,OAAO,EAAG,GACLiD,EAAEyF,KAAK,OAYhBy4C,kBAAmB,SAA2BH,GAC5C,OAAOA,EAAMA,EAAI7oD,MAAM,KAAK,GAAK,MAMnCkpD,aAAc,SAAsBl+C,QACX,IAAZA,EAAE1C,OACXg6C,EAAQ6G,MAAMn+C,EAAE1C,OAGd0C,EAAEo+C,UACJ9G,EAAQ6G,MAAM,UAAY5mD,KAAK6qB,QAAU,IAAMpiB,EAAEo+C,UAAY,IAAMp+C,EAAE7C,KAAO,MAAQ6C,EAAEP,KAAO,KAAOO,EAAE1J,SAC7F0J,EAAEq+C,SACX/G,EAAQ6G,MAAM,UAAY5mD,KAAK6qB,QAAU,IAAMpiB,EAAEq+C,SAAW,IAAMr+C,EAAEs+C,WAAa,MAAQt+C,EAAEP,KAAO,KAAOO,EAAE1J,SAE3GghD,EAAQ6G,MAAM,UAAYn+C,EAAE1J,UAiChCoH,IAAK,SAAaE,EAAO3C,GACnB2C,IAAUrG,KAAK8iD,SAASC,OAAqC,WAA5BhH,EAAQt/C,OAAOsI,UAAyD,mBAAzBtI,OAAOsI,QAAQvB,OACjG/G,OAAOsI,QAAQvB,MAAME,IAUzBsjD,MAAO,SAAetjD,GACpB1D,KAAKmG,IAAInG,KAAK8iD,SAASx7C,MAAO5D,IAShCyO,KAAM,SAAczO,GAClB1D,KAAKmG,IAAInG,KAAK8iD,SAASv7C,KAAM7D,IAS/BuoB,KAAM,SAAcvoB,GAClB1D,KAAKmG,IAAInG,KAAK8iD,SAASr7C,KAAM/D,IAS/BF,MAAO,SAAeE,GACpB1D,KAAKmG,IAAInG,KAAK8iD,SAASvmD,MAAOmH,IAShCkjD,MAAO,SAAeljD,GACpB1D,KAAKmG,IAAInG,KAAK8iD,SAASC,MAAOr/C,IAYhCujD,UAAW,SAAmBxD,GAC5B,IAAKA,EACH,OAAO,KAGgB,mBAAdA,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAI7+C,EAAQ2zC,EAAmB79C,MAAMslD,EAAKlC,WAAWhiD,QAAQkD,QAAQ4J,KAAI,SAAU/M,GACjF,OAAOmkD,EAAKlC,WAAWjiD,GAAGimD,YAG5Bl9C,EAAM0N,OACN,IAAIS,EAASnO,EAAM+D,QAAO,SAAUlL,EAAGoM,GACrC,MAAO,GAAG5G,OAAOxF,EAAG,KAAKwF,OAAO4G,EAAG,MAAO5G,OAAOq5C,EAAQ6E,UAAUnB,EAAKlC,WAAW4F,aAAa75C,GAAG7D,OAAQ,OAC1G,IAAI/C,OAAO+8C,EAAK8B,WAEnB,GAAI9B,EAAKE,WAAWpkD,OAAS,EAAG,CAC9BiX,GAAU,IAEV,IAAK,IAAIlX,EAAI,EAAGA,EAAImkD,EAAKE,WAAWpkD,OAAQD,IAAK,CAC/C,IAAI8nD,EAAQ3D,EAAKE,WAAWrkD,GAE5B,OAAQ8nD,EAAMliB,UACZ,KAAK6a,EAAQiD,YAAYC,OAEvBzsC,GAAUupC,EAAQkH,UAAUG,GAC5B,MAEF,KAAKrH,EAAQiD,YAAYE,KAEvB1sC,GAAUupC,EAAQ6E,UAAUwC,EAAM/B,WAClC,MAEF,KAAKtF,EAAQiD,YAAYG,MAEvB3sC,GAAU,YAAc4wC,EAAM/B,UAAY,OAIhD7uC,GAAU,KAAOitC,EAAK8B,SAAW,SAEjC/uC,GAAU,KAGZ,OAAOA,GAOT6wC,WAAY,EAMZC,mBAAoB,GASpBC,oBAAqB,SAA6Br/C,EAAMs/C,GACtDzH,EAAQuH,mBAAmBp/C,GAAQs/C,GA8CvCzH,QAAkB,SAAU73C,EAAM43C,GAEnB,aAAT53C,GAAgC,YAATA,GAA+B,OAATA,IAC3C43C,IAAUA,EAAM2H,MAClB3H,EAAM2H,MAAQ1H,EAAQK,GAAGG,OACfT,IACVA,EAAQ,CACN2H,MAAO1H,EAAQK,GAAGG,UAMxBvgD,KAAK0nD,SAAW3H,EAAQyE,WAAWt8C,EAAM43C,GAEzC9/C,KAAKhD,KAAOgD,KAAK0nD,WAGnB3H,EAAQC,QAAQzhD,UAAY,CAU1B2oD,KAAM,WACJ,OAAOlnD,KAAK0nD,UAadlpD,SAAU,WACR,OAAOuhD,EAAQkH,UAAUjnD,KAAK0nD,WAahCC,GAAI,WAEF,OADA3nD,KAAKhD,KAAOgD,KAAKhD,KAAK88B,WACf95B,MAaThE,KAAM,WAEJ,OADAgE,KAAKhD,KAAOgD,KAAK0nD,SACV1nD,MAeT8/C,MAAO,SAAe8H,GACpB,IAAK,IAAIh0C,KAAKg0C,EACRtpD,OAAOC,UAAUsV,eAAepV,KAAKmpD,EAAWh0C,UAC7BzH,IAAjBy7C,EAAUh0C,GACZ5T,KAAKhD,KAAK6qD,gBAAgBj0C,GAE1B5T,KAAKhD,KAAK2nD,aAAa/wC,EAAGg0C,EAAUh0C,KAK1C,OAAO5T,MAmBToB,EAAG,SAAW8G,EAAM43C,EAAO97C,GACzB,IAAIojD,EAAQrH,EAAQyE,WAAWt8C,EAAM43C,EAAO97C,GAO5C,OANAhE,KAAKhD,KAAKm2B,YAAYi0B,GAEF,iBAATpjD,GAAqC,iBAATA,IACrChE,KAAKhD,KAAOoqD,GAGPpnD,MAiBT8nD,MAAO,SAAerE,GACpB,IAAIsE,EACAC,EAASjI,EAAQsE,eAErB,IACE0D,OAAgC57C,IAAtB67C,EAAOC,WACjB,MAAOx/C,GACPs/C,GAAU,EAGZ,IAAIG,EAAUH,EAAUC,EAAOC,WAAWxE,GAAM,GAAQ1D,EAAQuF,YAAY7B,GAG5E,OAFAzjD,KAAKhD,KAAKm2B,YAAY+0B,GACtBloD,KAAKhD,KAAOkrD,EACLloD,MAeT2G,EAAG,SAAW3C,GACZ,IAAIojD,EAAQrH,EAAQ0E,YAAYzgD,GAEhC,OADAhE,KAAKhD,KAAKm2B,YAAYi0B,GACfpnD,MAcTmoD,EAAG,SAAWnD,GACZ,IAAIoD,EAAWzgC,SAASG,cAAc,QAEtCsgC,EAASC,UAAYrD,EAIrB,IAFA,IAAIsD,EAAQvI,EAAQ0F,WAAW2C,GAExBE,EAAM3E,WAAWpkD,OAAS,GAC/BS,KAAKhD,KAAKm2B,YAAYm1B,EAAM3E,WAAW,IAGzC,OAAO3jD,OAiCX+/C,EAAQwI,QAAU,SAAU19B,EAAS29B,EAAItgD,EAAM1I,EAAMwH,EAAIo1C,EAAM/5C,GAC7DrC,KAAK6qB,QAAUA,EACf7qB,KAAKwoD,GAAKA,EACVxoD,KAAKkI,KAAOA,EACZlI,KAAKR,KAAOA,EACZQ,KAAKgH,GAAKA,EACVhH,KAAKqC,QAAUA,GAAW,CACxB,kBAAoB,EACpB,yBAA2B,GAGzBrC,KAAKqC,QAAQomD,YACf1I,EAAQ9zB,KAAK,yEACbjsB,KAAKqC,QAAQqmD,iBAAmB1oD,KAAKqC,QAAQomD,iBACtCzoD,KAAKqC,QAAQomD,WAGlBzoD,KAAKqC,QAAQqmD,iBACf1oD,KAAKo8C,KAAOA,EAAO2D,EAAQ0G,kBAAkBrK,GAAQ,KAErDp8C,KAAKo8C,KAAOA,EAIdp8C,KAAK2oD,MAAO,GAGd5I,EAAQwI,QAAQhqD,UAAY,CAY1BqqD,aAAc,SAAsBnF,GAClC,IAAIoF,EAAcpF,EAAKiC,aAAa,SAMpC,OAJImD,GAAe7oD,KAAKqC,QAAQymD,0BAC9BD,EAAcA,EAAYprD,MAAM,KAAK,IAGhCorD,GAYTE,eAAgB,SAAwBtF,GACtC,IAAIuF,EAAQhpD,KAERipD,GAAU,EAEd,OAAKjpD,KAAKwoD,KAGRzI,EAAQyD,aAAaC,EAAM,MAAM,SAAUA,GACrCuF,EAAMJ,aAAanF,KAAUuF,EAAMR,KACrCS,GAAU,MAGPA,GAAWjpD,KAAK4oD,aAAanF,KAAUzjD,KAAKwoD,KAavDU,QAAS,SAAiBzF,GACxB,IAAIrH,EAAOqH,EAAKiC,aAAa,QAEzB1lD,KAAKqC,QAAQqmD,mBACftM,EAAO2D,EAAQ0G,kBAAkBrK,IAGnC,IAAI+M,EAAY1F,EAAKiC,aAAa,QAElC,SAAI1lD,KAAK+oD,eAAetF,IAAWzjD,KAAKkI,OAAQ63C,EAAQ8D,WAAWJ,EAAMzjD,KAAKkI,OAAYlI,KAAKR,OAASrB,MAAMC,QAAQ4B,KAAKR,OAA0C,IAAlCQ,KAAKR,KAAK2F,QAAQgkD,GAAoBA,IAAcnpD,KAAKR,OAAYQ,KAAKgH,IAAMy8C,EAAKiC,aAAa,QAAU1lD,KAAKgH,IAAShH,KAAKo8C,MAAQA,IAASp8C,KAAKo8C,OAiB1RgN,IAAK,SAAa3F,GAChB,IAAIjtC,EAAS,KAEb,IACEA,EAASxW,KAAK6qB,QAAQ44B,GACtB,MAAOh7C,GAGP,MAFAs3C,EAAQ4G,aAAal+C,GAEfA,EAGR,OAAO+N,GASThY,SAAU,WACR,MAAO,aAAewB,KAAK6qB,QAAU,IAAM7qB,KAAKkI,KAAO,IAAMlI,KAAKgH,GAAK,IAAMhH,KAAKwoD,GAAK,OA6B3FzI,EAAQsJ,aAAe,SAAUC,EAAQz+B,GACvC7qB,KAAKspD,OAASA,EACdtpD,KAAK6qB,QAAUA,EACf7qB,KAAKupD,YAAa,IAAIziD,MAAO0iD,UAC7BxpD,KAAK2oD,MAAO,GAGd5I,EAAQsJ,aAAa9qD,UAAY,CAQ/B6qD,IAAK,WAEH,OADAppD,KAAKupD,YAAa,IAAIziD,MAAO0iD,UACtBxpD,KAAK6qB,WAMdgL,MAAO,WACL71B,KAAKupD,YAAa,IAAIziD,MAAO0iD,WAS/BhrD,SAAU,WACR,MAAO,kBAAoBwB,KAAK6qB,QAAU,IAAM7qB,KAAKspD,OAAS,OA4JlEvJ,EAAQ0J,WAAa,SAAUC,EAASrnD,GACtC,IAAIsnD,EAAS3pD,KAGbA,KAAK0pD,QAAUA,EAEf1pD,KAAKqC,QAAUA,GAAW,GAC1B,IAAIynC,EAAQ9pC,KAAKqC,QAAQqxC,UAAY,GAsDrC,IAAK,IAAI9/B,KApDsB,IAA3B81C,EAAQvkD,QAAQ,QAA4C,IAA5BukD,EAAQvkD,QAAQ,SAAyC,IAAxB2kC,EAAM3kC,QAAQ,MACjFnF,KAAK4pD,OAAS,IAAI7J,EAAQ8J,UAAU7pD,MAEpCA,KAAK4pD,OAAS,IAAI7J,EAAQ+J,KAAK9pD,MAKjCA,KAAKsmD,IAAM,GAGXtmD,KAAKq/C,OAAS,KAGdr/C,KAAK+pD,SAAW,KAEhB/pD,KAAKgqD,WAAa,GAClBhqD,KAAKiqD,YAAa,EAClBjqD,KAAKkqD,SAAU,EAEflqD,KAAKmqD,cAAgB,GACrBnqD,KAAKg4B,SAAW,GAChBh4B,KAAKoqD,aAAe,GACpBpqD,KAAKqqD,eAAiB,GACtBrqD,KAAKsqD,UAAY,GACjBtqD,KAAKuqD,YAAc,GACnBvqD,KAAKwqD,sBAAwB,CAC3B,KAAQ,GACR,UAAa,IAEfxqD,KAAKyqD,aAAe,KACpBzqD,KAAK0qD,mBAAqB,KAC1B1qD,KAAK2qD,eAAgB,EACrB3qD,KAAK4qD,WAAY,EACjB5qD,KAAK6qD,eAAgB,EACrB7qD,KAAK8qD,mBAAoB,EACzB9qD,KAAK+M,QAAS,EACd/M,KAAK+qD,UAAW,EAChB/qD,KAAKgrD,MAAQ,GACbhrD,KAAKirD,UAAY,EACjBjrD,KAAKkrD,sBAAwB,KAC7BlrD,KAAKmrD,sBAAwB,KAC7BnrD,KAAKorD,wBAA0B,KAE/BprD,KAAKqrD,WAAa,EAElBrrD,KAAKyqD,aAAenmD,YAAW,WAC7B,OAAOqlD,EAAO2B,YACb,KACHtM,EAAiBh/C,KAAKqC,QAAQ68C,SAC9Bl/C,KAAKurD,uBAAuBvrD,KAAKqC,QAAQmpD,YAE3BzL,EAAQuH,mBACpB,GAAIhpD,OAAOC,UAAUsV,eAAepV,KAAKshD,EAAQuH,mBAAoB1zC,GAAI,CACvE,IAAI63C,EAAI,aAERA,EAAEltD,UAAYwhD,EAAQuH,mBAAmB1zC,GACzC5T,KAAK4T,GAAK,IAAI63C,EACdzrD,KAAK4T,GAAGyW,KAAKrqB,QAKnB+/C,EAAQ0J,WAAWlrD,UAAY,CAO7Bs3B,MAAO,WACL71B,KAAK4pD,OAAO8B,SAGZ1rD,KAAKiqD,YAAa,EAClBjqD,KAAKkqD,SAAU,EAEflqD,KAAKmqD,cAAgB,GACrBnqD,KAAKg4B,SAAW,GAChBh4B,KAAKoqD,aAAe,GACpBpqD,KAAKqqD,eAAiB,GACtBrqD,KAAKsqD,UAAY,GACjBtqD,KAAKuqD,YAAc,GACnBvqD,KAAK2qD,eAAgB,EACrB3qD,KAAK4qD,WAAY,EACjB5qD,KAAK6qD,eAAgB,EACrB7qD,KAAK+qD,UAAW,EAChB/qD,KAAKgrD,MAAQ,GACbhrD,KAAK2rD,UAAY,GACjB3rD,KAAKirD,UAAY,GAYnBxwC,MAAO,WACLza,KAAK+M,QAAS,GAQhB2N,OAAQ,WACN1a,KAAK+M,QAAS,GAyBhB6+C,YAAa,SAAqBC,GAChC,IAAIC,EAAO,uCAAuC5+C,QAAQ,SAAS,SAAU9L,GAC3E,IAAIwH,EAAoB,GAAhBqI,KAAKE,SAAgB,EAE7B,OADc,MAAN/P,EAAYwH,EAAQ,EAAJA,EAAU,GACzBpK,SAAS,OAGpB,MAAsB,iBAAXqtD,GAAyC,iBAAXA,EAChCC,EAAO,IAAMD,EAEbC,EAAO,IA0BlBC,wBAAyB,SAAiCrY,EAAUsY,EAAa/3C,GAC/EjU,KAAKwqD,sBAAsB9W,GAAUsY,GAAe/3C,GA2CtDg4C,QAAS,SAAiB3F,EAAK4F,EAAMj4C,EAAU25B,EAAMue,EAAMC,EAAOC,GAChErsD,KAAKsmD,IAAMA,EAKXtmD,KAAKssD,QAAUvM,EAAQ0G,kBAAkBzmD,KAAKsmD,KAK9CtmD,KAAKqsD,QAAUA,GAAWtM,EAAQsG,eAAermD,KAAKsmD,KAKtDtmD,KAAKksD,KAAOA,EAKZlsD,KAAKusD,SAAW,OAChBvsD,KAAKwsD,iBAAmBv4C,EACxBjU,KAAK6qD,eAAgB,EACrB7qD,KAAK4qD,WAAY,EACjB5qD,KAAK2qD,eAAgB,EACrB3qD,KAAK+qD,UAAW,EAEhB/qD,KAAKq/C,OAASU,EAAQwG,iBAAiBvmD,KAAKsmD,KAE5CtmD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOC,WAAY,MAErD7hD,KAAK4pD,OAAO8C,SAAS9e,EAAMue,EAAMC,IA2BnCO,OAAQ,SAAgBrG,EAAKsG,EAAKC,EAAK54C,EAAU25B,EAAMue,EAAMW,GAC3D,KAAI9sD,KAAK4pD,kBAAkB7J,EAAQ+J,MAE5B,CACL,IAAItmD,EAAQ,IAAIsC,MAAM,gEAEtB,MADAtC,EAAM0E,KAAO,sBACP1E,EAJNxD,KAAK4pD,OAAOmD,QAAQzG,EAAKsG,EAAKC,EAAK54C,EAAU25B,EAAMue,EAAMW,IAmC7DE,QAAS,SAAiB1G,EAAKryC,EAAU25B,EAAMue,EAAMW,GACnD,IAAI9sD,KAAKitD,2BAEF,CACL,IAAIzpD,EAAQ,IAAIsC,MAAM,iEAEtB,MADAtC,EAAM0E,KAAO,sBACP1E,EAJNxD,KAAK4pD,OAAOsD,SAAS5G,EAAKryC,EAAU25B,EAAMue,EAAMW,IAYpDG,yBAA0B,WACxB,GAAIjtD,KAAK4pD,kBAAkB7J,EAAQ+J,KAAM,CACvC,IAAKvmD,KACH,OAAO,EAGT,IACE4pD,eAAeC,QAAQ,YAAa,aACpCD,eAAeE,WAAW,aAC1B,MAAO5kD,GACP,OAAO,EAGT,OAAO,EAGT,OAAO,GAqBT6kD,SAAU,SAAkB7J,KAsB5B8J,UAAW,SAAmB9J,KAgB9B+J,SAAU,SAAkB30C,KAgB5B40C,UAAW,SAAmB50C,KAe9B60C,aAAc,SAAsBb,KAgBpC53B,KAAM,SAAcwuB,GAClB,GAAa,OAATA,EAAJ,CAIA,GAAyB,mBAAdA,EAAK1tC,KACd,IAAK,IAAIzW,EAAI,EAAGA,EAAImkD,EAAKlkD,OAAQD,IAC/BU,KAAK2tD,WAAWlK,EAAKnkD,QAEO,mBAAdmkD,EAAKyD,KACrBlnD,KAAK2tD,WAAWlK,EAAKyD,QAErBlnD,KAAK2tD,WAAWlK,GAGlBzjD,KAAK4pD,OAAOgE,UAWdrpD,MAAO,WAGLF,aAAarE,KAAKyqD,cAElBzqD,KAAKsrD,WAmBPuC,aAAc,SAAsBpK,EAAMxvC,EAAU65C,EAASC,GAC3D,IAAIC,EAAShuD,KAETiuD,EAAiB,KAEI,mBAAdxK,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAIlgD,EAAKy8C,EAAKiC,aAAa,MAQ3B,GANK1+C,IAEHA,EAAKhH,KAAK4rD,YAAY,gBACtBnI,EAAKkB,aAAa,KAAM39C,IAGF,mBAAbiN,GAA8C,mBAAZ65C,EAAwB,CACnE,IAAIjjC,EAAU7qB,KAAKw4B,YAAW,SAAU01B,GAElCD,GACFD,EAAOG,mBAAmBF,GAGQ,UAAhCC,EAAOxI,aAAa,QAClBoI,GACFA,EAAQI,GAEDj6C,GACTA,EAASi6C,KAEV,KAAM,WAAY,KAAMlnD,GAEvB+mD,IACFE,EAAiBjuD,KAAKouD,gBAAgBL,GAAS,WAS7C,OAPAC,EAAOK,cAAcxjC,GAGjBijC,GACFA,EAAQ,OAGH,MAMb,OADA9tD,KAAKi1B,KAAKwuB,GACHz8C,GAiBTsnD,OAAQ,SAAgB7K,EAAMxvC,EAAU65C,EAASC,GAC/C,IAAIQ,EAASvuD,KAETiuD,EAAiB,KAEI,mBAAdxK,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAIlgD,EAAKy8C,EAAKiC,aAAa,MAQ3B,GANK1+C,IAEHA,EAAKhH,KAAK4rD,YAAY,UACtBnI,EAAKkB,aAAa,KAAM39C,IAGF,mBAAbiN,GAA8C,mBAAZ65C,EAAwB,CACnE,IAAIjjC,EAAU7qB,KAAKw4B,YAAW,SAAU01B,GAElCD,GACFM,EAAOJ,mBAAmBF,GAG5B,IAAIO,EAASN,EAAOxI,aAAa,QAEjC,GAAe,WAAX8I,EACEv6C,GACFA,EAASi6C,OAEN,IAAe,UAAXM,EAIJ,CACL,IAAIhrD,EAAQ,IAAIsC,MAAM,sBAAsBY,OAAO8nD,IAEnD,MADAhrD,EAAM0E,KAAO,eACP1E,EANFsqD,GACFA,EAAQI,MAOX,KAAM,KAAM,CAAC,QAAS,UAAWlnD,GAEhC+mD,IACFE,EAAiBjuD,KAAKouD,gBAAgBL,GAAS,WAS7C,OAPAQ,EAAOF,cAAcxjC,GAGjBijC,GACFA,EAAQ,OAGH,MAMb,OADA9tD,KAAKi1B,KAAKwuB,GACHz8C,GAOT2mD,WAAY,SAAoBc,GAC9B,GAAgB,OAAZA,IAAqBA,EAAQl1B,UAAYk1B,EAAQ9K,WAAY,CAC/D,IAAIngD,EAAQ,IAAIsC,MAAM,gCAEtB,MADAtC,EAAM0E,KAAO,eACP1E,EAGRxD,KAAKgrD,MAAM9mD,KAAKuqD,IAMlBC,aAAc,WACZ,IAAIC,EAAS3uD,KAEbA,KAAKgrD,MAAM9mD,KAAK,WAEhBlE,KAAK4pD,OAAO8E,eAEZ1uD,KAAKyqD,aAAenmD,YAAW,WAC7B,OAAOqqD,EAAOrD,YACb,MAyBL8C,gBAAiB,SAAyB9E,EAAQz+B,GAChD,IAAI+jC,EAAQ,IAAI7O,EAAQsJ,aAAaC,EAAQz+B,GAE7C,OADA7qB,KAAKsqD,UAAUpmD,KAAK0qD,GACbA,GAaTT,mBAAoB,SAA4BU,GAG9C7uD,KAAKoqD,aAAalmD,KAAK2qD,IAmEzBr2B,WAAY,SAAoB3N,EAAS29B,EAAItgD,EAAM1I,EAAMwH,EAAIo1C,EAAM/5C,GACjE,IAAIysD,EAAO,IAAI/O,EAAQwI,QAAQ19B,EAAS29B,EAAItgD,EAAM1I,EAAMwH,EAAIo1C,EAAM/5C,GAElE,OADArC,KAAKuqD,YAAYrmD,KAAK4qD,GACfA,GAaTT,cAAe,SAAuBQ,GAGpC7uD,KAAKqqD,eAAenmD,KAAK2qD,GAGzB,IAAIvvD,EAAIU,KAAKuqD,YAAYplD,QAAQ0pD,GAE7BvvD,GAAK,GACPU,KAAKuqD,YAAYjlD,OAAOhG,EAAG,IAa/BisD,uBAAwB,SAAgCC,GACtDxrD,KAAKwrD,WAAa,IAClBA,EAAaA,GAAc,CAACzL,EAAQgP,cAAehP,EAAQiP,aAAcjP,EAAQkP,QAASlP,EAAQmP,gBAAiBnP,EAAQoP,YAAapP,EAAQqP,UAAWrP,EAAQsP,WACxJ1sD,QAAQ3C,KAAKsvD,sBAAsBtsD,KAAKhD,QAWrDsvD,sBAAuB,SAA+B/V,GACpDv5C,KAAKwrD,WAAWjS,EAAUh7C,UAAU2J,MAAQqxC,GAmB9CgW,WAAY,SAAoBj3B,GAK9B,GAJAt4B,KAAKysD,qBAAqB1M,EAAQ6B,OAAOO,cAAe7pB,GAExDynB,EAAQ9zB,KAAK,kCAAoCqM,GAE7Ct4B,KAAK4qD,UAAW,CAClB,IAAI4E,GAAO,EACXxvD,KAAK6qD,eAAgB,EAEjB7qD,KAAK2qD,gBACP6E,EAAOtP,EAAM,CACX,MAASH,EAAQK,GAAGG,OACpB,KAAQ,iBAKZvgD,KAAK0qD,mBAAqB1qD,KAAKyvD,oBAAoB,IAAMzvD,KAAK0vD,qBAAqB1sD,KAAKhD,OAExFA,KAAK4pD,OAAO+F,YAAYH,QAExBzP,EAAQ9zB,KAAK,gEAEbjsB,KAAK4pD,OAAOgG,oBAEZ5vD,KAAK6vD,iBAcTpD,qBAAsB,SAA8B31B,EAAQg5B,EAAWrM,GAErE,IAAK,IAAI7vC,KAAKmsC,EAAQuH,mBACpB,GAAIhpD,OAAOC,UAAUsV,eAAepV,KAAKshD,EAAQuH,mBAAoB1zC,GAAI,CACvE,IAAIm8C,EAAS/vD,KAAK4T,GAElB,GAAIm8C,EAAOC,cACT,IACED,EAAOC,cAAcl5B,EAAQg5B,GAC7B,MAAO17C,GACP2rC,EAAQv8C,MAAM,GAAGkD,OAAOkN,EAAG,iDAAiDlN,OAAO0N,KAO3F,GAAIpU,KAAKwsD,iBACP,IACExsD,KAAKwsD,iBAAiB11B,EAAQg5B,EAAWrM,GACzC,MAAOh7C,GACPs3C,EAAQ4G,aAAal+C,GAErBs3C,EAAQv8C,MAAM,iDAAiDkD,OAAO+B,MAW5EonD,cAAe,SAAuBC,GACH,iBAAtB9vD,KAAKyqD,cACdpmD,aAAarE,KAAKyqD,cAIY,OAA5BzqD,KAAK0qD,qBACP1qD,KAAKmuD,mBAAmBnuD,KAAK0qD,oBAC7B1qD,KAAK0qD,mBAAqB,MAG5B3K,EAAQiH,MAAM,4BAEdhnD,KAAK4pD,OAAOiG,gBAEZ7vD,KAAK2qD,eAAgB,EACrB3qD,KAAK6qD,eAAgB,EACrB7qD,KAAK+qD,UAAW,EAEhB/qD,KAAKg4B,SAAW,GAChBh4B,KAAKmqD,cAAgB,GACrBnqD,KAAKoqD,aAAe,GACpBpqD,KAAKqqD,eAAiB,GACtBrqD,KAAKsqD,UAAY,GACjBtqD,KAAKuqD,YAAc,GAEnBvqD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOM,aAAc4N,GAEvD9vD,KAAK4qD,WAAY,GAenBqF,UAAW,SAAmBC,EAAKC,GACjC,IAAIC,EAASpwD,KAEb+/C,EAAQiH,MAAM,oBAEd,IAAIvD,EAAOzjD,KAAK4pD,OAAOyG,WAAWH,GAElC,GAAa,OAATzM,EAAJ,CAqBA,IAjBIzjD,KAAKstD,WAAavN,EAAQ0J,WAAWlrD,UAAU+uD,WAC7C7J,EAAK8B,WAAavlD,KAAK4pD,OAAO0G,OAAS7M,EAAKE,WAAWpkD,OACzDS,KAAKstD,SAAS7J,EAAKE,WAAW,IAE9B3jD,KAAKstD,SAAS7J,IAIdzjD,KAAKwtD,WAAazN,EAAQ0J,WAAWlrD,UAAUivD,WAC7C2C,EACFnwD,KAAKwtD,SAAS2C,GAEdnwD,KAAKwtD,SAASzN,EAAQkH,UAAUxD,KAK7BzjD,KAAKqqD,eAAe9qD,OAAS,GAAG,CACrC,IAAIuvD,EAAO9uD,KAAKqqD,eAAeruC,MAC3B1c,EAAIU,KAAKg4B,SAAS7yB,QAAQ2pD,GAE1BxvD,GAAK,GACPU,KAAKg4B,SAAS1yB,OAAOhG,EAAG,GAK5B,KAAOU,KAAKuqD,YAAYhrD,OAAS,GAC/BS,KAAKg4B,SAAS9zB,KAAKlE,KAAKuqD,YAAYvuC,OAItC,GAAIhc,KAAK6qD,eAAiB7qD,KAAK4pD,OAAO2G,cACpCvwD,KAAK6vD,oBADP,CAMA,IAAIrwD,EAAOikD,EAAKiC,aAAa,QAE7B,GAAa,OAATlmD,GAA0B,cAATA,EAAsB,CAEzC,GAAIQ,KAAK6qD,cACP,OAIF,IAAI2F,EAAO/M,EAAKiC,aAAa,aACzB+K,EAAWhN,EAAK77B,qBAAqB,YAczC,OAZa,OAAT4oC,GACW,wBAATA,GAAkCC,EAASlxD,OAAS,IACtDixD,EAAO,YAGTxwD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOE,SAAU0O,IAEnDxwD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAekO,oBAG5E1wD,KAAK6vD,cAAcW,GAMrBzQ,EAAQyD,aAAaC,EAAM,MAAM,SAAU2D,GAEzC,IAAIuJ,EAAUP,EAAOp4B,SACrBo4B,EAAOp4B,SAAW,GAElB,IAAK,IAAI44B,EAAM,EAAGA,EAAMD,EAAQpxD,OAAQqxD,IAAO,CAC7C,IAAIC,EAAQF,EAAQC,GAGpB,MACMC,EAAM3H,QAAQ9B,KAAWgJ,EAAOzF,eAAkBkG,EAAMlI,MACtDkI,EAAMzH,IAAIhC,KAIdgJ,EAAOp4B,SAAS9zB,KAAK2sD,GAEvB,MAAOpoD,GAEPs3C,EAAQ9zB,KAAK,wDAA0DxjB,EAAE1J,iBASjFysD,WAAY,GAkBZsF,YAAa,SAAqBZ,EAAKa,EAAWZ,GAGhD,IAAIa,EAFJjR,EAAQiH,MAAM,0BACdhnD,KAAK4qD,WAAY,EAGjB,IACEoG,EAAWhxD,KAAK4pD,OAAOyG,WAAWH,GAClC,MAAOznD,GACP,GAAIA,EAAEP,OAAS63C,EAAQyC,eAAeC,WACpC,MAAMh6C,EAGRzI,KAAKysD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAeC,YAE1EziD,KAAK6vD,cAAc9P,EAAQyC,eAAeC,YAG5C,GAAKuO,IAIDhxD,KAAKstD,WAAavN,EAAQ0J,WAAWlrD,UAAU+uD,WAC7C0D,EAASzL,WAAavlD,KAAK4pD,OAAO0G,OAASU,EAASrN,WAAWpkD,OACjES,KAAKstD,SAAS0D,EAASrN,WAAW,IAElC3jD,KAAKstD,SAAS0D,IAIdhxD,KAAKwtD,WAAazN,EAAQ0J,WAAWlrD,UAAUivD,WAC7C2C,EACFnwD,KAAKwtD,SAAS2C,GAEdnwD,KAAKwtD,SAASzN,EAAQkH,UAAU+J,KAIpBhxD,KAAK4pD,OAAOkH,YAAYE,KAEtBjR,EAAQ6B,OAAOE,UAajC,GANIkP,EAASC,uBACGD,EAASC,uBAAuBlR,EAAQK,GAAGW,OAAQ,YAAYxhD,OAAS,EAExEyxD,EAASppC,qBAAqB,mBAAmBroB,OAAS,GAAKyxD,EAASppC,qBAAqB,YAAYroB,OAAS,EAGlI,CAMA,IAAI2xD,EAAU,GACV1F,EAAawF,EAASppC,qBAAqB,aAE/C,GAAI4jC,EAAWjsD,OAAS,EACtB,IAAK,IAAID,EAAI,EAAGA,EAAIksD,EAAWjsD,OAAQD,IAAK,CAC1C,IAAI6xD,EAAOpR,EAAQqF,QAAQoG,EAAWlsD,IAClCU,KAAKwrD,WAAW2F,IAAOD,EAAQhtD,KAAKlE,KAAKwrD,WAAW2F,IAIrC,IAAnBD,EAAQ3xD,QAC2C,IAAjDyxD,EAASppC,qBAAqB,QAAQroB,QASb,IAA3BS,KAAK8qD,mBACP9qD,KAAKoxD,aAAaF,GAPhBlxD,KAAK4pD,OAAOyH,kBAAkBN,QAnBhC/wD,KAAK4pD,OAAOyH,kBAAkBN,IAuClCO,yBAA0B,SAAkC9F,GAE1D,IAAK,IAAIlsD,EAAI,EAAGA,EAAIksD,EAAWjsD,OAAS,IAAKD,EAAG,CAG9C,IAFA,IAAIiyD,EAASjyD,EAEJyM,EAAIzM,EAAI,EAAGyM,EAAIy/C,EAAWjsD,SAAUwM,EACvCy/C,EAAWz/C,GAAGxN,UAAUsc,SAAW2wC,EAAW+F,GAAQhzD,UAAUsc,WAClE02C,EAASxlD,GAIb,GAAIwlD,IAAWjyD,EAAG,CAChB,IAAIkyD,EAAOhG,EAAWlsD,GACtBksD,EAAWlsD,GAAKksD,EAAW+F,GAC3B/F,EAAW+F,GAAUC,GAIzB,OAAOhG,GAgBT4F,aAAc,SAAsBF,GAC7BlxD,KAAKyxD,iBAAiBP,IACzBlxD,KAAK0xD,sBAiBTD,iBAAkB,SAA0BjG,GAC1CA,EAAaxrD,KAAKsxD,yBAAyB9F,GAAc,IAGzD,IAFA,IAAImG,GAAkB,EAEbryD,EAAI,EAAGA,EAAIksD,EAAWjsD,SAAUD,EACvC,GAAKksD,EAAWlsD,GAAGf,UAAUiN,KAAKxL,MAAlC,CAIAA,KAAKkrD,sBAAwBlrD,KAAK4xD,eAAe5xD,KAAK6xD,iBAAiB7uD,KAAKhD,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKmrD,sBAAwBnrD,KAAK4xD,eAAe5xD,KAAK8xD,iBAAiB9uD,KAAKhD,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAKorD,wBAA0BprD,KAAK4xD,eAAe5xD,KAAK+xD,mBAAmB/uD,KAAKhD,MAAO,KAAM,YAAa,KAAM,MAChHA,KAAKgyD,gBAAkB,IAAIxG,EAAWlsD,GAEtCU,KAAKgyD,gBAAgBC,QAAQjyD,MAE7B,IAAIkyD,EAAwBrS,EAAO,OAAQ,CACzC,MAASE,EAAQK,GAAGU,KACpB,UAAa9gD,KAAKgyD,gBAAgB9pD,OAGpC,GAAIlI,KAAKgyD,gBAAgBG,cAAe,CACtC,IAAIn8B,EAAWh2B,KAAKgyD,gBAAgBI,YAAYpyD,KAAM,MAEtDkyD,EAAsBvrD,EAAE0rD,KAAKr8B,IAG/Bh2B,KAAKi1B,KAAKi9B,EAAsBhL,QAChCyK,GAAkB,EAClB,MAGF,OAAOA,GAOTI,mBAAoB,SAA4BtO,GAC9C,IAAI6O,EAAYC,KAAKxS,EAAQqF,QAAQ3B,IAEjCztB,EAAWh2B,KAAKgyD,gBAAgBI,YAAYpyD,KAAMsyD,GAElDpE,EAASrO,EAAO,WAAY,CAC9B,MAASE,EAAQK,GAAGU,OAQtB,MALiB,KAAb9qB,GACFk4B,EAAOvnD,EAAE0rD,KAAKr8B,IAGhBh2B,KAAKi1B,KAAKi5B,EAAOhH,SACV,GAOTwK,mBAAoB,WACuB,OAArC3R,EAAQsG,eAAermD,KAAKsmD,MAG9BtmD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAeG,kBAE1E3iD,KAAKuvD,WAAWxP,EAAQyC,eAAeG,oBAGvC3iD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOG,eAAgB,MAEzD/hD,KAAK4xD,eAAe5xD,KAAKwyD,sBAAsBxvD,KAAKhD,MAAO,KAAM,KAAM,KAAM,WAE7EA,KAAKi1B,KAAKgrB,EAAI,CACZ,KAAQ,MACR,GAAMjgD,KAAKq/C,OACX,GAAM,YACLj+C,EAAE,QAAS,CACZqmD,MAAO1H,EAAQK,GAAGI,OACjBp/C,EAAE,WAAY,IAAIuF,EAAEo5C,EAAQsG,eAAermD,KAAKsmD,MAAMY,UAkB7DsL,sBAAuB,SAA+B/O,GAEpD,IAAIgP,EAAKxS,EAAI,CACXzgD,KAAM,MACNwH,GAAI,YACH5F,EAAE,QAAS,CACZqmD,MAAO1H,EAAQK,GAAGI,OACjBp/C,EAAE,WAAY,IAAIuF,EAAEo5C,EAAQsG,eAAermD,KAAKsmD,MAAMqB,KAAKvmD,EAAE,YAAYuF,EAAE3G,KAAKksD,MAcnF,OAZKnM,EAAQ2G,mBAAmB1mD,KAAKsmD,OAInCtmD,KAAKsmD,IAAMvG,EAAQ0G,kBAAkBzmD,KAAKsmD,KAAO,YAGnDmM,EAAG9K,KAAKvmD,EAAE,WAAY,IAAIuF,EAAEo5C,EAAQ2G,mBAAmB1mD,KAAKsmD,MAE5DtmD,KAAK4xD,eAAe5xD,KAAK0yD,UAAU1vD,KAAKhD,MAAO,KAAM,KAAM,KAAM,WAEjEA,KAAKi1B,KAAKw9B,EAAGvL,SACN,GAYT2K,iBAAkB,SAA0BpO,GAC1C,IAAIkP,EAAS3yD,KAEb,GAAIA,KAAKgqD,WAAW,oBAAqB,CACvC,IAAI4I,EAGArqC,EAFUgqC,KAAKxS,EAAQqF,QAAQ3B,IAEbx9C,MADJ,yBAOlB,GAJmB,MAAfsiB,EAAQ,KACVqqC,EAAkBrqC,EAAQ,IAGxBqqC,IAAoB5yD,KAAKgqD,WAAW,oBAWtC,OATAhqD,KAAKquD,cAAcruD,KAAKmrD,uBACxBnrD,KAAKmrD,sBAAwB,KAEzBnrD,KAAKorD,0BACPprD,KAAKquD,cAAcruD,KAAKorD,yBACxBprD,KAAKorD,wBAA0B,MAGjCprD,KAAKgqD,WAAa,GACXhqD,KAAK8xD,iBAAiB,MAIjC/R,EAAQ5tC,KAAK,kCAETnS,KAAKgyD,iBACPhyD,KAAKgyD,gBAAgBa,YAIvB7yD,KAAKquD,cAAcruD,KAAKmrD,uBACxBnrD,KAAKmrD,sBAAwB,KAEzBnrD,KAAKorD,0BACPprD,KAAKquD,cAAcruD,KAAKorD,yBACxBprD,KAAKorD,wBAA0B,MAGjC,IAAI0H,EAAyB,GAEzBC,EAAU,SAAiB/6B,EAAUyrB,GACvC,KAAOzrB,EAASz4B,QACdozD,EAAOtE,cAAcr2B,EAAShc,OAKhC,OAFA22C,EAAOK,2BAA2BvP,IAE3B,GAYT,OATAqP,EAAuB5uD,KAAKlE,KAAK4xD,gBAAe,SAAUnO,GACxD,OAAOsP,EAAQD,EAAwBrP,KACtC,KAAM,kBAAmB,KAAM,OAClCqP,EAAuB5uD,KAAKlE,KAAK4xD,gBAAe,SAAUnO,GACxD,OAAOsP,EAAQD,EAAwBrP,KACtC1D,EAAQK,GAAGW,OAAQ,WAAY,KAAM,OAExC/gD,KAAK0uD,gBAEE,GAUTsE,2BAA4B,SAAoCvP,GAE9DzjD,KAAK+pD,SAAWtG,EAEhB,IAAK,IAAInkD,EAAI,EAAGA,EAAImkD,EAAKE,WAAWpkD,OAAQD,IAAK,CAC/C,IAAI8nD,EAAQ3D,EAAKE,WAAWrkD,GAEL,SAAnB8nD,EAAM7B,WACRvlD,KAAKkqD,SAAU,GAGM,YAAnB9C,EAAM7B,WACRvlD,KAAKiqD,YAAa,GAItB,OAAKjqD,KAAKkqD,SAIElqD,KAAKqC,QAAQ4wD,wBAGvBjzD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOW,aAAc,MAFvDviD,KAAKgD,QAKA,IATLhD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,OAE5C,IAuBXh/C,KAAM,WACJ,GAAKhD,KAAKkqD,QAAV,CAKAlqD,KAAK4xD,eAAe5xD,KAAKkzD,wBAAwBlwD,KAAKhD,MAAO,KAAM,KAAM,KAAM,gBAE/E,IAAImzD,EAAWpT,EAAQ2G,mBAAmB1mD,KAAKsmD,KAE3C6M,EACFnzD,KAAKi1B,KAAKgrB,EAAI,CACZzgD,KAAM,MACNwH,GAAI,iBACH5F,EAAE,OAAQ,CACXqmD,MAAO1H,EAAQK,GAAGa,OACjB7/C,EAAE,WAAY,IAAIuF,EAAEwsD,GAAUjM,QAEjClnD,KAAKi1B,KAAKgrB,EAAI,CACZzgD,KAAM,MACNwH,GAAI,iBACH5F,EAAE,OAAQ,CACXqmD,MAAO1H,EAAQK,GAAGa,OACjBiG,aArBHnH,EAAQ55C,IAAI45C,EAAQ+C,SAASv7C,KAAM,oEAkCvC2rD,wBAAyB,SAAiCzP,GAGtD,IACIqM,EAHN,GAAkC,UAA9BrM,EAAKiC,aAAa,QAWpB,OAVA3F,EAAQ9zB,KAAK,4BACEw3B,EAAK77B,qBAAqB,YAG5BroB,OAAS,IACpBuwD,EAAY/P,EAAQyC,eAAeE,UAGrC1iD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU8N,EAAWrM,IAEvD,EAIT,IAAIzgD,EAAOygD,EAAK77B,qBAAqB,QAErC,KAAI5kB,EAAKzD,OAAS,GAmBhB,OAJAwgD,EAAQ9zB,KAAK,4BAEbjsB,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,EAlBP,IAAI2P,EAAUpwD,EAAK,GAAG4kB,qBAAqB,OAEvCwrC,EAAQ7zD,OAAS,IACnBS,KAAKsmD,IAAMvG,EAAQqF,QAAQgO,EAAQ,IAE/BpzD,KAAKiqD,WACPjqD,KAAKqzD,qBAELrzD,KAAK2qD,eAAgB,EAErB3qD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,SAoB5DoR,kBAAmB,WACjB,IAAKrzD,KAAKiqD,WACR,MAAM,IAAInkD,MAAM,kDAAoD,yBAAyBY,OAAOq5C,EAAQK,GAAGc,QAAS,qCAG1HlhD,KAAK4xD,eAAe5xD,KAAKszD,mBAAmBtwD,KAAKhD,MAAO,KAAM,KAAM,KAAM,mBAE1EA,KAAKi1B,KAAKgrB,EAAI,CACZzgD,KAAM,MACNwH,GAAI,oBACH5F,EAAE,UAAW,CACdqmD,MAAO1H,EAAQK,GAAGc,UACjBgG,SAqBLoM,mBAAoB,SAA4B7P,GAC9C,GAAkC,WAA9BA,EAAKiC,aAAa,QACpB1lD,KAAK2qD,eAAgB,EAErB3qD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,WAC/C,GAAkC,UAA9BwB,EAAKiC,aAAa,QAK3B,OAJA3F,EAAQ9zB,KAAK,4BAEbjsB,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,EAGT,OAAO,GAYTqO,iBAAkB,SAA0BrO,GAgB1C,OAdIzjD,KAAKkrD,wBACPlrD,KAAKquD,cAAcruD,KAAKkrD,uBACxBlrD,KAAKkrD,sBAAwB,MAG3BlrD,KAAKorD,0BACPprD,KAAKquD,cAAcruD,KAAKorD,yBACxBprD,KAAKorD,wBAA0B,MAG7BprD,KAAKgyD,iBAAiBhyD,KAAKgyD,gBAAgBuB,YAE/CvzD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,GAeTiP,UAAW,SAAmBjP,GAW5B,MAVkC,WAA9BA,EAAKiC,aAAa,SACpB1lD,KAAK2qD,eAAgB,EAErB3qD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,OACb,UAA9BwB,EAAKiC,aAAa,UAC3B1lD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,GAEzDzjD,KAAKuvD,WAAW,2BAGX,GAcTE,oBAAqB,SAA6BnG,EAAQz+B,GACxD,IAAI+jC,EAAQ,IAAI7O,EAAQsJ,aAAaC,EAAQz+B,GAG7C,OAFA+jC,EAAMjG,MAAO,EACb3oD,KAAKsqD,UAAUpmD,KAAK0qD,GACbA,GAiBTgD,eAAgB,SAAwB/mC,EAAS29B,EAAItgD,EAAM1I,EAAMwH,GAC/D,IAAI8nD,EAAO,IAAI/O,EAAQwI,QAAQ19B,EAAS29B,EAAItgD,EAAM1I,EAAMwH,GAGxD,OAFA8nD,EAAKnG,MAAO,EACZ3oD,KAAKuqD,YAAYrmD,KAAK4qD,GACfA,GAYTY,qBAAsB,WAUpB,OATA3P,EAAQiH,MAAM,mCAEdhnD,KAAKysD,qBAAqB1M,EAAQ6B,OAAOU,YAAa,MAEtDtiD,KAAK4pD,OAAO8F,uBAGZ1vD,KAAK6vD,iBAEE,GASTvE,QAAS,WAMP,IALA,IAAIkI,EAASxzD,KAKNA,KAAKsqD,UAAU/qD,OAAS,GAC7BS,KAAKmqD,cAAcjmD,KAAKlE,KAAKsqD,UAAUtuC,OAIzC,KAAOhc,KAAKoqD,aAAa7qD,OAAS,GAAG,CACnC,IAAIqvD,EAAQ5uD,KAAKoqD,aAAapuC,MAC1B1c,EAAIU,KAAKmqD,cAAchlD,QAAQypD,GAE/BtvD,GAAK,GACPU,KAAKmqD,cAAc7kD,OAAOhG,EAAG,GAQjC,IAHA,IAAIswB,GAAM,IAAI9oB,MAAO0iD,UACjBmH,EAAU,GAEL8C,EAAM,EAAGA,EAAMzzD,KAAKmqD,cAAc5qD,OAAQk0D,IAAO,CACxD,IAAIC,EAAS1zD,KAAKmqD,cAAcsJ,IAE5BzzD,KAAK2qD,eAAkB+I,EAAO/K,OACpB+K,EAAOnK,WAAamK,EAAOpK,OAE3B15B,GAAO,EACb8jC,EAAOtK,OACTuH,EAAQzsD,KAAKwvD,GAGf/C,EAAQzsD,KAAKwvD,IAKnB1zD,KAAKmqD,cAAgBwG,EACrBtsD,aAAarE,KAAKyqD,cAElBzqD,KAAK4pD,OAAO0B,UAGRtrD,KAAK4qD,YACP5qD,KAAKyqD,aAAenmD,YAAW,WAC7B,OAAOkvD,EAAOlI,YACb,QAqCTvL,EAAQ4T,cAAgB,SAAUzrD,EAAMiqD,EAAet3C,GAIrD7a,KAAKkI,KAAOA,EAKZlI,KAAKmyD,cAAgBA,EAmBrBnyD,KAAK6a,SAAWA,GAGlBklC,EAAQ4T,cAAcp1D,UAAY,CAmBhCiN,KAAM,SAAcooD,GAClB,OAAO,GAST3B,QAAS,SAAiB2B,GACxB5zD,KAAK6zD,YAAcD,GAcrBxB,YAAa,SAAqBwB,EAAYtB,GAC5C,MAAM,IAAIxsD,MAAM,6CAMlBytD,UAAW,WACTvzD,KAAK6zD,YAAc,MAMrBhB,UAAW,WACT7yD,KAAK6zD,YAAc,OAoBvB9T,EAAQgP,cAAgB,aAExBhP,EAAQgP,cAAcxwD,UAAY,IAAIwhD,EAAQ4T,cAAc,aAAa,EAAO,IAEhF5T,EAAQgP,cAAcxwD,UAAUiN,KAAO,SAAUooD,GAC/C,OAA8B,OAAvBA,EAAWvH,SAOpBtM,EAAQqP,UAAY,aAEpBrP,EAAQqP,UAAU7wD,UAAY,IAAIwhD,EAAQ4T,cAAc,SAAS,EAAM,IAEvE5T,EAAQqP,UAAU7wD,UAAUiN,KAAO,SAAUooD,GAC3C,OAA8B,OAAvBA,EAAWvH,SAGpBtM,EAAQqP,UAAU7wD,UAAU6zD,YAAc,SAAUwB,GAClD,IAAIE,EAAWF,EAAWtH,QAK1B,OAJAwH,GAAsB,KACtBA,GAAsBF,EAAWvH,QACjCyH,GAAsB,KACtBA,GAAsBF,EAAW1H,KAC1BlN,EAAe8U,IAOxB/T,EAAQsP,SAAW,aAEnBtP,EAAQsP,SAAS9wD,UAAY,IAAIwhD,EAAQ4T,cAAc,eAAe,EAAM,IAE5E5T,EAAQsP,SAAS9wD,UAAUiN,KAAO,SAAUooD,GAC1C,OAA8B,OAAvBA,EAAWvH,SAGpBtM,EAAQsP,SAAS9wD,UAAU6zD,YAAc,SAAUwB,EAAYtB,EAAWyB,GACxE,IAAIC,EAASD,GAAezW,EAAIC,UAAU,GAAqB,WAAhBtsC,KAAKE,UAChD2iD,EAAW,KAAO9U,EAAe4U,EAAWvH,SAqEhD,OApEAyH,GAAY,MACZA,GAAYE,EACZJ,EAAW5J,WAAWgK,OAASA,EAC/BJ,EAAW5J,WAAW,6BAA+B8J,EACrDA,EAAW,MAAQA,EAEnB9zD,KAAKoyD,YAAc,SAAUwB,EAAYtB,GAOvC,IANA,IAAI2B,EAAOC,EAAM/X,EAAMgY,EAAIC,EAAGC,EAAO/0D,EAAGsU,EACpCmjB,EAAe,UACfu9B,EAAc,GAAG5tD,OAAOktD,EAAW5J,WAAW,6BAA8B,KAAKtjD,OAAO4rD,EAAW,KACnG0B,EAASJ,EAAW5J,WAAWgK,OAC/BO,EAAc,wBAEXjC,EAAUrsD,MAAMsuD,IAAc,CACnC,IAAIhsC,EAAU+pC,EAAUrsD,MAAMsuD,GAG9B,OAFAjC,EAAYA,EAAUplD,QAAQqb,EAAQ,GAAI,IAElCA,EAAQ,IACd,IAAK,IACH0rC,EAAQ1rC,EAAQ,GAChB,MAEF,IAAK,IACH2rC,EAAO3rC,EAAQ,GACf,MAEF,IAAK,IACH4zB,EAAO5zB,EAAQ,IAKrB,GAAI0rC,EAAM/tD,OAAO,EAAG8tD,EAAOz0D,UAAYy0D,EAErC,OADAJ,EAAW5J,WAAa,GACjB4J,EAAW9B,mBAIpBwC,GADAv9B,GAAgB,KAAOk9B,EAEvBC,EAAO3B,KAAK2B,GACZA,GAAQ,UACR,IAAIhI,EAAOlN,EAAe4U,EAAW1H,MAGrC,IAFAiI,EAAKE,EAAQ1V,EAAKR,eAAe+N,EAAMgI,GAElC50D,EAAI,EAAGA,EAAI68C,EAAM78C,IAAK,CAGzB,IAFA80D,EAAIzV,EAAKR,eAAe+N,EAAMvN,EAAKD,SAAS2V,IAEvCzgD,EAAI,EAAGA,EAAI,EAAGA,IACjBugD,EAAGvgD,IAAMwgD,EAAExgD,GAGbygD,EAAQD,EAGVD,EAAKxV,EAAKD,SAASyV,GACnB,IAAIK,EAAY7V,EAAKR,eAAegW,EAAI,cACpCM,EAAY9V,EAAKG,cAAcqV,EAAI,cACnCO,EAAkB/V,EAAKR,eAAeQ,EAAKI,SAASJ,EAAKD,SAAS8V,IAAaF,GAGnF,IAFAV,EAAW5J,WAAW,oBAAsBrL,EAAKC,cAAc6V,EAAWH,GAErE1gD,EAAI,EAAGA,EAAI,EAAGA,IACjB4gD,EAAU5gD,IAAM8gD,EAAgB9gD,GAIlC,OADAmjB,EAAgB,MAAQs7B,KAAK1T,EAAKD,SAAS8V,KAItCV,GAOT/T,EAAQkP,QAAU,aAElBlP,EAAQkP,QAAQ1wD,UAAY,IAAIwhD,EAAQ4T,cAAc,cAAc,EAAO,IAE3E5T,EAAQkP,QAAQ1wD,UAAUiN,KAAO,SAAUooD,GACzC,OAA8B,OAAvBA,EAAWvH,SAapBtM,EAAQkP,QAAQ1wD,UAAUo2D,OAAS,SAAUvrD,GAC3C,MAAO,IAAMA,EAAI8D,QAAQ,MAAO,QAAQA,QAAQ,KAAM,OAAS,KAGjE6yC,EAAQkP,QAAQ1wD,UAAU6zD,YAAc,SAAUwB,EAAYtB,EAAWyB,GAQvE,IAPA,IAAIQ,EAAc,mCACdP,EAASD,GAAezW,EAAIC,UAAU,GAAqB,WAAhBtsC,KAAKE,UAChDyjD,EAAQ,GACRC,EAAO,KACPZ,EAAQ,GAGL3B,EAAUrsD,MAAMsuD,IAAc,CACnC,IAAIhsC,EAAU+pC,EAAUrsD,MAAMsuD,GAI9B,OAHAjC,EAAYA,EAAUplD,QAAQqb,EAAQ,GAAI,IAC1CA,EAAQ,GAAKA,EAAQ,GAAGrb,QAAQ,WAAY,MAEpCqb,EAAQ,IACd,IAAK,QACHqsC,EAAQrsC,EAAQ,GAChB,MAEF,IAAK,QACH0rC,EAAQ1rC,EAAQ,GAChB,MAEF,IAAK,MACGA,EAAQ,GACd,MAEF,IAAK,OACHssC,EAAOtsC,EAAQ,IAKrB,IAAIusC,EAAalB,EAAWrH,SAAW,IAAMqH,EAAWvU,OAE3C,OAATwV,IACFC,EAAaA,EAAa,IAAMD,GAGlC,IAAIE,EAAO/V,EAAe4U,EAAWvH,QAAU,IAAMuI,EAAQ,IAAM50D,KAAK6zD,YAAY3H,MAChF8I,EAAK1X,EAAIt8C,KAAK+zD,GAAQ,IAAMd,EAAQ,IAAMD,EAC1CiB,EAAK,gBAAkBH,EACvB/9B,EAAe,GAenB,OAdAA,GAAgB,iBAChBA,GAAgB,YAAc/2B,KAAK20D,OAAO3V,EAAe4U,EAAWvH,UAAY,IAChFt1B,GAAgB,SAAW/2B,KAAK20D,OAAOC,GAAS,IAChD79B,GAAgB,SAAW/2B,KAAK20D,OAAOV,GAAS,IAChDl9B,GAAgB,eAChBA,GAAgB,UAAY/2B,KAAK20D,OAAOX,GAAU,IAClDj9B,GAAgB,cAAgB/2B,KAAK20D,OAAOG,GAAc,IAC1D/9B,GAAgB,YAAcumB,EAAIC,UAAUD,EAAIC,UAAUyX,GAAM,IAAMf,EAAQ,aAAeD,EAAS,SAAW1W,EAAIC,UAAU0X,IAAO,IACtIl+B,GAAgB,WAEhB/2B,KAAKoyD,YAAc,WACjB,MAAO,IAGFr7B,GAOTgpB,EAAQmP,gBAAkB,aAE1BnP,EAAQmP,gBAAgB3wD,UAAY,IAAIwhD,EAAQ4T,cAAc,eAAe,EAAM,IAEnF5T,EAAQmP,gBAAgB3wD,UAAUiN,KAAO,SAAUooD,GACjD,OAA2B,OAApBA,EAAW1H,MAGpBnM,EAAQmP,gBAAgB3wD,UAAU6zD,YAAc,SAAUwB,GACxD,IAAIE,EAAW,KAYf,OAV2B,OAAvBF,EAAWvH,UACbyH,EAAWA,EAAW,KAAOF,EAAWtH,SAG1CwH,GAAsB,IACtBA,GAAsB,IACtBA,GAAsB,eACtBA,GAAsBF,EAAW1H,KACjC4H,GAAsB,IAEf9U,EADP8U,GAAsB,MAaxB/T,EAAQiP,aAAe,aAEvBjP,EAAQiP,aAAazwD,UAAY,IAAIwhD,EAAQ4T,cAAc,YAAY,EAAM,IAE7E5T,EAAQiP,aAAazwD,UAAU6zD,YAAc,SAAUwB,GAQrD,OAAOA,EAAWvH,UAAYuH,EAAWtH,QAAU,GAAKsH,EAAWtH,SAOrEvM,EAAQoP,YAAc,aAEtBpP,EAAQoP,YAAY5wD,UAAY,IAAIwhD,EAAQ4T,cAAc,YAAY,EAAM,IAE5E5T,EAAQoP,YAAY5wD,UAAUiN,KAAO,SAAUooD,GAC7C,OAA2B,OAApBA,EAAW1H,MAGpBnM,EAAQoP,YAAY5wD,UAAU6zD,YAAc,SAAUwB,GACpD,IAAIE,EAAW,KAQf,OAN2B,OAAvBF,EAAWvH,UACbyH,GAAsBF,EAAWtH,SAGnCwH,GAAsB,KACtBA,GAAsBF,EAAW1H,KAC1BlN,EAAe8U,IAExB,IAAIoB,EAAO,CACT,QAAWnV,EACX,OAAUF,EACV,IAAOI,EACP,KA/qHF,SAAcH,GACZ,OAAO,IAAIC,EAAQC,QAAQ,UAAWF,IA+qHtC,MAASI,EACT,KAAQvB,EACR,IAAOrB,EACP,cAAiBqB,EAAKC,cACtB,SAAYD,EAAKE,SACjB,cAAiBF,EAAKG,cACtB,SAAYH,EAAKI,UASfoW,EAAYD,EAAKnV,QACjBqV,EAAWF,EAAKrV,OAoBpBsV,EAAUE,QAAU,SAAU5R,EAAMzd,EAAM6mB,EAAKyI,GAC7Ct1D,KAAKgH,KAAOmuD,EAAU9N,WACtBrnD,KAAKu1D,QAAU9R,EACfzjD,KAAK6Y,KAAOs8C,EAAUlO,UAAUxD,GAGhCzjD,KAAKw1D,SAAWxvB,EAChBhmC,KAAKgmC,KAAOA,EACZhmC,KAAK6sD,IAAMA,EACX7sD,KAAKy1D,KAAOC,IACZ11D,KAAKs1D,MAAQA,GAAS,EACtBt1D,KAAK21D,OAAQ,EACb31D,KAAK41D,KAAO,KAEZ51D,KAAK61D,IAAM,WACT,OAAK71D,KAAKy1D,MAIA,IAAI3uD,KACA9G,KAAKy1D,MAAQ,IAJlB,GAOXz1D,KAAK81D,SAAW,WACd,OAAK91D,KAAK41D,MAIA,IAAI9uD,KACA9G,KAAK41D,MAAQ,IAJlB,GAOX51D,KAAK+1D,IAAM/1D,KAAKg2D,WAGlBb,EAAUE,QAAQ92D,UAAY,CAc5B03D,YAAa,WACX,IAAIj5D,EAAO,KAEX,GAAIgD,KAAK+1D,IAAIG,aAAel2D,KAAK+1D,IAAIG,YAAYC,iBAG/C,GAAqB,iBAFrBn5D,EAAOgD,KAAK+1D,IAAIG,YAAYC,iBAEnB58B,QAIP,MAHA47B,EAAU3xD,MAAM,6BAChB2xD,EAAU3xD,MAAM,iBAAmBxD,KAAK+1D,IAAIh/B,cAC5Co+B,EAAU3xD,MAAM,gBAAkB2xD,EAAUlO,UAAUjnD,KAAK+1D,IAAIG,cACzD,IAAIpwD,MAAM,oBAEb,GAAI9F,KAAK+1D,IAAIh/B,aAAc,CAKhC,GAHAo+B,EAAUnO,MAAM,mFAChBhqD,GAAO,IAAIioD,WAAYC,gBAAgBllD,KAAK+1D,IAAIh/B,aAAc,mBAAmBo/B,iBAG/E,MAAM,IAAIrwD,MAAM,8BACX,GAAI9I,EAAKo5D,cAAc,eAAgB,CAC5CjB,EAAU3xD,MAAM,8BAAgCxG,EAAKo5D,cAAc,eAAeC,aAClFlB,EAAU3xD,MAAM,iBAAmBxD,KAAK+1D,IAAIh/B,cAC5C,IAAIvzB,EAAQ,IAAIsC,MAEhB,MADAtC,EAAM0E,KAAOitD,EAAU3S,eAAeC,WAChCj/C,GAIV,OAAOxG,GAWTg5D,QAAS,WACP,IAAID,EAAM,KAcV,OAZIt5D,OAAOk6B,gBACTo/B,EAAM,IAAIp/B,gBAEF2/B,kBACNP,EAAIO,iBAAiB,2BAEd75D,OAAO8nD,gBAChBwR,EAAM,IAAIxR,cAAc,sBAI1BwR,EAAIn/B,mBAAqB52B,KAAKgmC,KAAKhjC,KAAK,KAAMhD,MACvC+1D,IA4BXZ,EAAUrL,KAAO,SAAU8J,GACzB5zD,KAAKu2D,MAAQ3C,EAGb5zD,KAAK6sD,IAAM57C,KAAKC,MAAsB,WAAhBD,KAAKE,UAG3BnR,KAAK4sD,IAAM,KAEX5sD,KAAKmsD,KAAO,EACZnsD,KAAK4tC,KAAO,GACZ5tC,KAAKvD,OAAS,EACduD,KAAKw2D,OAAS,EACdx2D,KAAKy2D,WAAa,KAClBz2D,KAAK02D,oBAAsB,KAC3B12D,KAAK2rD,UAAY,IAGnBwJ,EAAUrL,KAAKvrD,UAAY,CAYzB+xD,MAAO,KAQPqG,WAAY,WACV,IAAI3F,EAAWoE,EAAS,OAAQ,CAC9B,IAAOp1D,KAAK6sD,MACZ,MAASsI,EAAU/U,GAAGC,WAaxB,OAViB,OAAbrgD,KAAK4sD,KACPoE,EAASlR,MAAM,CACb,IAAO9/C,KAAK4sD,MAIZ5sD,KAAKu2D,MAAMl0D,QAAQu0D,WAAa52D,KAAKu2D,MAAMtJ,4BAC7CjtD,KAAK62D,gBAGA7F,GAQTtF,OAAQ,WACN1rD,KAAK6sD,IAAM57C,KAAKC,MAAsB,WAAhBD,KAAKE,UAC3BnR,KAAK4sD,IAAM,KACX5sD,KAAKw2D,OAAS,EAEVx2D,KAAKu2D,MAAMtJ,4BACbxwD,OAAO0wD,eAAeE,WAAW,wBAGnCrtD,KAAKu2D,MAAM7I,aAAa1tD,KAAK6sD,MAQ/BH,SAAU,SAAkB9e,EAAMue,EAAMC,GACtCpsD,KAAK4tC,KAAOA,GAAQ5tC,KAAK4tC,KACzB5tC,KAAKmsD,KAAOA,GAAQnsD,KAAKmsD,KACzBnsD,KAAKw2D,OAAS,EAEd,IAAItjC,EAAOlzB,KAAK22D,aAAa7W,MAAM,CACjC,GAAM9/C,KAAKu2D,MAAMlX,OACjB,WAAY,KACZ,KAAQr/C,KAAK4tC,KACb,KAAQ5tC,KAAKmsD,KACb,QAAW,0BACX,IAAO,MACP,eAAgB,MAChB,aAAcgJ,EAAU/U,GAAGE,OAGzB8L,GACFl5B,EAAK4sB,MAAM,CACT,MAASsM,IAIb,IAAI0E,EAAc9wD,KAAKu2D,MAAMzF,YAE7B9wD,KAAK2rD,UAAUznD,KAAK,IAAIixD,EAAUE,QAAQniC,EAAKg0B,OAAQlnD,KAAK82D,sBAAsB9zD,KAAKhD,KAAM8wD,EAAY9tD,KAAKhD,KAAKu2D,QAASrjC,EAAKg0B,OAAOxB,aAAa,SAErJ1lD,KAAK+2D,4BA2BPhK,QAAS,SAAiBzG,EAAKsG,EAAKC,EAAK54C,EAAU25B,EAAMue,EAAMW,GAC7D9sD,KAAKu2D,MAAMjQ,IAAMA,EACjBtmD,KAAK4sD,IAAMA,EACX5sD,KAAK6sD,IAAMA,EACX7sD,KAAKu2D,MAAM/J,iBAAmBv4C,EAC9BjU,KAAKu2D,MAAMlX,OAAS8V,EAAU5O,iBAAiBvmD,KAAKu2D,MAAMjQ,KAC1DtmD,KAAKu2D,MAAM5L,eAAgB,EAC3B3qD,KAAKu2D,MAAM3L,WAAY,EACvB5qD,KAAK4tC,KAAOA,GAAQ5tC,KAAK4tC,KACzB5tC,KAAKmsD,KAAOA,GAAQnsD,KAAKmsD,KACzBnsD,KAAKvD,OAASqwD,GAAQ9sD,KAAKvD,OAE3BuD,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOQ,SAAU,OAsB7D8K,SAAU,SAAkB5G,EAAKryC,EAAU25B,EAAMue,EAAMW,GACrD,IAAIphD,EAAUnI,KAAK+G,MAAM7N,OAAO0wD,eAAe6J,QAAQ,yBAEvD,KAAI,MAAOtrD,GAA+CA,EAAQmhD,KAAOnhD,EAAQkhD,KAAOlhD,EAAQ46C,MAAQ,MAAOA,GAAuC6O,EAAU1O,kBAAkB/6C,EAAQ46C,OAAS6O,EAAU1O,kBAAkBH,IAE7L,OAAlC6O,EAAU9O,eAAeC,IAAiB6O,EAAU5O,iBAAiB76C,EAAQ46C,OAASA,IAI/E,CACL,IAAI9iD,EAAQ,IAAIsC,MAAM,qCAEtB,MADAtC,EAAM0E,KAAO,sBACP1E,EANNxD,KAAKu2D,MAAMxL,UAAW,EAEtB/qD,KAAK+sD,QAAQrhD,EAAQ46C,IAAK56C,EAAQkhD,IAAKlhD,EAAQmhD,IAAK54C,EAAU25B,EAAMue,EAAMW,IAe9E+J,cAAe,WACT72D,KAAKu2D,MAAM5L,cACT3qD,KAAKu2D,MAAMjQ,KAAOtmD,KAAK6sD,KAAO7sD,KAAK4sD,KACrCnwD,OAAO0wD,eAAeC,QAAQ,uBAAwB7pD,KAAKF,UAAU,CACnE,IAAOrD,KAAKu2D,MAAMjQ,IAClB,IAAOtmD,KAAK6sD,IACZ,IAAO7sD,KAAK4sD,OAIhBnwD,OAAO0wD,eAAeE,WAAW,yBAWrCyD,YAAa,SAAqBE,GAChC,IAAIiG,EAAMjG,EAAStL,aAAa,QAEhC,GAAY,OAARuR,GAAwB,cAARA,EAAqB,CAEvC,IAAIzG,EAAOQ,EAAStL,aAAa,aACjCyP,EAAU3xD,MAAM,2BAA6BgtD,GAC7C,IAAIC,EAAWO,EAASppC,qBAAqB,YAc7C,OAZa,OAAT4oC,GACW,wBAATA,GAAkCC,EAASlxD,OAAS,IACtDixD,EAAO,YAGTxwD,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU0O,IAE3DxwD,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,WAG7D9hD,KAAKu2D,MAAM1G,cAAcW,GAElB2E,EAAUvT,OAAOE,SAKrB9hD,KAAK4sD,MACR5sD,KAAK4sD,IAAMoE,EAAStL,aAAa,QAGnC,IAAIoH,EAAOkE,EAAStL,aAAa,YAE7BoH,IACF9sD,KAAKvD,OAASiT,SAASo9C,EAAM,KAG/B,IAAIX,EAAO6E,EAAStL,aAAa,QAE7ByG,IACFnsD,KAAKmsD,KAAOz8C,SAASy8C,EAAM,KAG7B,IAAIve,EAAOojB,EAAStL,aAAa,QAE7B9X,IACF5tC,KAAK4tC,KAAOl+B,SAASk+B,EAAM,KAG7B,IAAI6oB,EAAazF,EAAStL,aAAa,cAEnC+Q,IACFz2D,KAAKy2D,WAAa/mD,SAAS+mD,EAAY,MAU3C9G,YAAa,SAAqBH,GAChCxvD,KAAKk3D,eAAe1H,IAQtBK,cAAe,WACb7vD,KAAK4sD,IAAM,KACX5sD,KAAK6sD,IAAM57C,KAAKC,MAAsB,WAAhBD,KAAKE,UAEvBnR,KAAKu2D,MAAMtJ,4BACbxwD,OAAO0wD,eAAeE,WAAW,wBAGnCrtD,KAAKu2D,MAAM7I,aAAa1tD,KAAK6sD,MAS/B0D,YAAa,WACX,OAAiC,IAA1BvwD,KAAK2rD,UAAUpsD,QASxB43D,2BAA4B,SAAoCjH,GAC9D,IAAIkH,EAAYp3D,KAAKq3D,kBAAkBnH,GAEnCoH,EAAet3D,KAAKu2D,MAAM/L,sBAAsB+M,KAAKH,GAErDE,GACFA,EAAa74D,KAAKuB,KAAMo3D,IAc5BI,UAAW,SAAmBJ,GAC5Bp3D,KAAKw2D,SACLrB,EAAUlpC,KAAK,4BAA8BmrC,EAAY,uBAAyBp3D,KAAKw2D,QAEnFx2D,KAAKw2D,OAAS,GAChBx2D,KAAKu2D,MAAM7G,wBASf2B,kBAAmB,SAA2Bp9C,GAC5CkhD,EAAUlpC,KAAK,gGAGbhY,EADEA,EACSA,EAASjR,KAAKhD,KAAKu2D,OAEnBv2D,KAAKu2D,MAAMzF,YAAY9tD,KAAKhD,KAAKu2D,OAG9C,IAAIrjC,EAAOlzB,KAAK22D,aAEhB32D,KAAK2rD,UAAUznD,KAAK,IAAIixD,EAAUE,QAAQniC,EAAKg0B,OAAQlnD,KAAK82D,sBAAsB9zD,KAAKhD,KAAMiU,GAAWif,EAAKg0B,OAAOxB,aAAa,SAEjI1lD,KAAK+2D,4BAQPrH,qBAAsB,WACpB1vD,KAAK4vD,qBAMPA,kBAAmB,WACjB,KAAO5vD,KAAK2rD,UAAUpsD,OAAS,GAAG,CAChC,IAAI2wD,EAAMlwD,KAAK2rD,UAAU3vC,MAEzBk0C,EAAIyF,OAAQ,EACZzF,EAAI6F,IAAIJ,QAERzF,EAAI6F,IAAIn/B,mBAAqB,eASjC00B,QAAS,WACP,IAAIzyC,EAAO7Y,KAAKu2D,MAAMvL,MAOtB,GALIhrD,KAAKu2D,MAAM5L,eAA2C,IAA1B3qD,KAAK2rD,UAAUpsD,QAAgC,IAAhBsZ,EAAKtZ,SAAiBS,KAAKu2D,MAAM1L,gBAC9FsK,EAAUnO,MAAM,wDAChBnuC,EAAK3U,KAAK,QAGRlE,KAAKu2D,MAAMxpD,OAAf,CAIA,GAAI/M,KAAK2rD,UAAUpsD,OAAS,GAAKsZ,EAAKtZ,OAAS,EAAG,CAGhD,IAFA,IAAI2zB,EAAOlzB,KAAK22D,aAEPr3D,EAAI,EAAGA,EAAIuZ,EAAKtZ,OAAQD,IACf,OAAZuZ,EAAKvZ,KACS,YAAZuZ,EAAKvZ,GACP4zB,EAAK4sB,MAAM,CACT,GAAM9/C,KAAKu2D,MAAMlX,OACjB,WAAY,KACZ,eAAgB,OAChB,aAAc8V,EAAU/U,GAAGE,OAG7BptB,EAAK40B,MAAMjvC,EAAKvZ,IAAIqoD,aAKnB3nD,KAAKu2D,MAAMvL,MAClBhrD,KAAKu2D,MAAMvL,MAAQ,GAEnBhrD,KAAK2rD,UAAUznD,KAAK,IAAIixD,EAAUE,QAAQniC,EAAKg0B,OAAQlnD,KAAK82D,sBAAsB9zD,KAAKhD,KAAMA,KAAKu2D,MAAMtG,UAAUjtD,KAAKhD,KAAKu2D,QAASrjC,EAAKg0B,OAAOxB,aAAa,SAE9J1lD,KAAK+2D,2BAGP,GAAI/2D,KAAK2rD,UAAUpsD,OAAS,EAAG,CAC7B,IAAIk4D,EAAez3D,KAAK2rD,UAAU,GAAGkK,MAEN,OAA3B71D,KAAK2rD,UAAU,GAAGiK,MAChB51D,KAAK2rD,UAAU,GAAGmK,WAAa7kD,KAAKC,MAAMikD,EAAU7R,kBAAoBtjD,KAAK4tC,OAC/E5tC,KAAK+2D,2BAILU,EAAexmD,KAAKC,MAAMikD,EAAU9R,QAAUrjD,KAAK4tC,QACrDunB,EAAUlpC,KAAK,WAAajsB,KAAK2rD,UAAU,GAAG3kD,GAAK,oBAAsBiK,KAAKC,MAAMikD,EAAU9R,QAAUrjD,KAAK4tC,MAAQ,gCAErH5tC,KAAK+2D,+BAcXM,kBAAmB,SAA2BnH,EAAKwH,GACjD,IAAIN,EAEJ,GAA2B,IAAvBlH,EAAI6F,IAAIjtC,WACV,IACEsuC,EAAYlH,EAAI6F,IAAIj/B,OACpB,MAAOruB,GAGP0sD,EAAU3xD,MAAM,mEAA0E4zD,GAQ9F,YAJyB,IAAdA,IACTA,EAA2B,iBAARM,EAAmBA,EAAM,GAGvCN,GAeTN,sBAAuB,SAA+B9wB,EAAMkqB,GAG1D,GAFAiF,EAAUnO,MAAM,cAAgBkJ,EAAIlpD,GAAK,IAAMkpD,EAAIoF,MAAQ,qBAAuBpF,EAAI6F,IAAIjtC,YAEtFonC,EAAIyF,MACNzF,EAAIyF,OAAQ,OAId,GAA2B,IAAvBzF,EAAI6F,IAAIjtC,WAAZ,CAKA,IAAIsuC,EAAYp3D,KAAKq3D,kBAAkBnH,GAIvC,GAFAlwD,KAAK02D,oBAAsBxG,EAAI6F,IAAI4B,wBAE/B33D,KAAK6qD,eAAiBuM,GAAa,IAKrC,OAJAp3D,KAAKw3D,UAAUJ,QAEfp3D,KAAKm3D,2BAA2BjH,GAKlC,IAAI0H,EAAgBR,EAAY,GAAKA,EAAY,IAC7CS,EAAmB3H,EAAIoF,MAAQt1D,KAAKu2D,MAAMlL,WAS9C,IAPIuM,GAAiBC,KAEnB73D,KAAK83D,eAAe5H,GAEpBiF,EAAUnO,MAAM,cAAgBkJ,EAAIlpD,GAAK,2BAGzB,MAAdowD,EAAmB,CAErB,IAAIW,EAAS/3D,KAAK2rD,UAAU,KAAOuE,GACtBlwD,KAAK2rD,UAAU,KAAOuE,GAKrB6H,GAAU/3D,KAAK2rD,UAAUpsD,OAAS,GAAKS,KAAK2rD,UAAU,GAAGkK,MAAQ5kD,KAAKC,MAAMikD,EAAU7R,kBAAoBtjD,KAAK4tC,QAC3H5tC,KAAKg4D,gBAAgB,GAGvBh4D,KAAKu2D,MAAM7I,aAAa3iD,OAAOmlD,EAAIrD,KAAO,GAE1CsI,EAAUnO,MAAM,cAAgBkJ,EAAIlpD,GAAK,IAAMkpD,EAAIoF,MAAQ,YAC3DtvB,EAAKkqB,GAELlwD,KAAKw2D,OAAS,OACS,IAAdY,GAAmBA,GAAa,KAAOA,EAAY,KAAOA,GAAa,MAEhFjC,EAAU3xD,MAAM,cAAgB0sD,EAAIlpD,GAAK,IAAMkpD,EAAIoF,MAAQ,UAAY8B,EAAY,aAEnFp3D,KAAKw3D,UAAUJ,GAEfp3D,KAAKm3D,2BAA2BjH,GAE5BkH,GAAa,KAAOA,EAAY,MAClCp3D,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOO,cAAe,MAEhEniD,KAAKu2D,MAAM1G,kBAGbsF,EAAU3xD,MAAM,cAAgB0sD,EAAIlpD,GAAK,IAAMkpD,EAAIoF,MAAQ,UAAY8B,EAAY,aAGhFQ,GAAkBC,EAEZA,IAAqB73D,KAAKu2D,MAAM3L,WACzC5qD,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,aAF3D9hD,KAAK+2D,6BAeTkB,gBAAiB,SAAyB34D,GACxC,IAAI0pD,EAAQhpD,KAERkwD,EAAMlwD,KAAK2rD,UAAUrsD,GAErB83D,EAAYp3D,KAAKq3D,kBAAkBnH,GAAM,GAG7C,GAAIA,EAAIoF,MAAQt1D,KAAKu2D,MAAMlL,WACzBrrD,KAAKu2D,MAAM7G,2BADb,CAMA,IAAI+H,EAAevH,EAAI2F,MACnBqC,GAAmB/tC,MAAMstC,IAAiBA,EAAexmD,KAAKC,MAAMikD,EAAU9R,QAAUrjD,KAAK4tC,MAC7FuqB,EAAiC,OAAbjI,EAAI0F,MAAiB1F,EAAI4F,WAAa7kD,KAAKC,MAAMikD,EAAU7R,kBAAoBtjD,KAAK4tC,MACxGwqB,EAAsC,IAAvBlI,EAAI6F,IAAIjtC,aAAqBsuC,EAAY,GAAKA,GAAa,KAgB9E,IAdIc,GAAmBC,GAAqBC,KACtCD,GACFhD,EAAU3xD,MAAM,WAAWkD,OAAO1G,KAAK2rD,UAAUrsD,GAAG0H,GAAI,uCAG1DkpD,EAAIyF,OAAQ,EACZzF,EAAI6F,IAAIJ,QAERzF,EAAI6F,IAAIn/B,mBAAqB,aAE7B52B,KAAK2rD,UAAUrsD,GAAK,IAAI61D,EAAUE,QAAQnF,EAAIqF,QAASrF,EAAIsF,SAAUtF,EAAIrD,IAAKqD,EAAIoF,OAClFpF,EAAMlwD,KAAK2rD,UAAUrsD,IAGI,IAAvB4wD,EAAI6F,IAAIjtC,WAAkB,CAC5BqsC,EAAUnO,MAAM,cAAgBkJ,EAAIlpD,GAAK,IAAMkpD,EAAIoF,MAAQ,YAE3D,IACE,IAAI+C,EAAer4D,KAAKu2D,MAAMl0D,QAAQi2D,aAAe,0BACrDpI,EAAI6F,IAAI/+B,KAAK,OAAQh3B,KAAKu2D,MAAM7M,SAAS1pD,KAAKu2D,MAAMl0D,QAAQk2D,WAEpB,IAA7BrI,EAAI6F,IAAI9+B,kBAEjBi5B,EAAI6F,IAAI9+B,iBAAiB,eAAgBohC,GAGvCr4D,KAAKu2D,MAAMl0D,QAAQm2D,kBACrBtI,EAAI6F,IAAIyC,iBAAkB,GAE5B,MAAOC,GASP,OARAtD,EAAU3xD,MAAM,oBAAsBi1D,EAAGj6D,YAEpCwB,KAAKu2D,MAAM3L,WACd5qD,KAAKu2D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,oBAG7D9hD,KAAKu2D,MAAMhH,aAOb,IAAImJ,EAAW,WAGb,GAFAxI,EAAIuF,KAAO,IAAI3uD,KAEXkiD,EAAMuN,MAAMl0D,QAAQs2D,cAAe,CACrC,IAAIC,EAAU5P,EAAMuN,MAAMl0D,QAAQs2D,cAElC,IAAK,IAAIE,KAAUD,EACbt6D,OAAOC,UAAUsV,eAAepV,KAAKm6D,EAASC,IAChD3I,EAAI6F,IAAI9+B,iBAAiB4hC,EAAQD,EAAQC,IAK/C3I,EAAI6F,IAAI9gC,KAAKi7B,EAAIr3C,OAKnB,GAAIq3C,EAAIoF,MAAQ,EAAG,CAGjB,IAAIwD,EAAwF,IAA9E7nD,KAAKoO,IAAIpO,KAAKC,MAAMikD,EAAU9R,QAAUrjD,KAAK4tC,MAAO38B,KAAKkpB,IAAI+1B,EAAIoF,MAAO,IACtFhxD,YAAW,WAETo0D,MACCI,QAEHJ,IAGFxI,EAAIoF,QAEAt1D,KAAKu2D,MAAMhJ,YAAc4H,EAAU1L,WAAWlrD,UAAUgvD,YACtD2C,EAAIqF,QAAQhQ,WAAavlD,KAAKswD,OAASJ,EAAIqF,QAAQ5R,WAAWpkD,OAChES,KAAKu2D,MAAMhJ,UAAU2C,EAAIqF,QAAQ5R,WAAW,IAE5C3jD,KAAKu2D,MAAMhJ,UAAU2C,EAAIqF,UAIzBv1D,KAAKu2D,MAAM9I,YAAc0H,EAAU1L,WAAWlrD,UAAUkvD,WAC1DztD,KAAKu2D,MAAM9I,UAAUyC,EAAIr3C,WAG3Bs8C,EAAUnO,MAAM,qBAA6B,IAAN1nD,EAAU,QAAU,UAAY,8BAAgC4wD,EAAI6F,IAAIjtC,cAUnHgvC,eAAgB,SAAwB5H,GACtCiF,EAAUnO,MAAM,oBAEhB,IAAK,IAAI1nD,EAAIU,KAAK2rD,UAAUpsD,OAAS,EAAGD,GAAK,EAAGA,IAC1C4wD,IAAQlwD,KAAK2rD,UAAUrsD,IACzBU,KAAK2rD,UAAUrmD,OAAOhG,EAAG,GAK7B4wD,EAAI6F,IAAIn/B,mBAAqB,aAE7B52B,KAAK+2D,4BASPiB,gBAAiB,SAAyB14D,GACxC,IAAI4wD,EAAMlwD,KAAK2rD,UAAUrsD,GAER,OAAb4wD,EAAI0F,OACN1F,EAAI0F,KAAO,IAAI9uD,MAGjB9G,KAAKi4D,gBAAgB34D,IAevB+wD,WAAY,SAAoBH,GAC9B,IACE,OAAOA,EAAI+F,cACX,MAAOxtD,GACP,GAAkB,gBAAdA,EAAE1J,QACJ,MAAM0J,EAGRzI,KAAKu2D,MAAMhH,WAAW,yBAW1B2H,eAAgB,SAAwB1H,GACtC2F,EAAUnO,MAAM,6BAEhB,IAAI9zB,EAAOlzB,KAAK22D,aAAa7W,MAAM,CACjCtgD,KAAM,cAGJgwD,GACFt8B,EAAK40B,MAAM0H,EAAKtI,QAGlB,IAAIgJ,EAAM,IAAIiF,EAAUE,QAAQniC,EAAKg0B,OAAQlnD,KAAK82D,sBAAsB9zD,KAAKhD,KAAMA,KAAKu2D,MAAMtG,UAAUjtD,KAAKhD,KAAKu2D,QAASrjC,EAAKg0B,OAAOxB,aAAa,QAEpJ1lD,KAAK2rD,UAAUznD,KAAKgsD,GAEpBlwD,KAAK+2D,4BAQPnJ,MAAO,WACL,IAAIjE,EAAS3pD,KAEbqE,aAAarE,KAAKu2D,MAAM9L,cAExBzqD,KAAK+2D,2BAEL/2D,KAAKu2D,MAAM9L,aAAenmD,YAAW,WACnC,OAAOqlD,EAAO4M,MAAMjL,YACnB,MAOLoD,aAAc,WACZ1uD,KAAK+2D,2BAEL1yD,aAAarE,KAAKu2D,MAAM9L,eAU1BsM,yBAA0B,WACnB/2D,KAAK2rD,UAGRwJ,EAAUnO,MAAM,wCAA0ChnD,KAAK2rD,UAAUpsD,OAAS,aAFlF41D,EAAUnO,MAAM,2DAKbhnD,KAAK2rD,WAAuC,IAA1B3rD,KAAK2rD,UAAUpsD,SAIlCS,KAAK2rD,UAAUpsD,OAAS,GAC1BS,KAAKi4D,gBAAgB,GAGnBj4D,KAAK2rD,UAAUpsD,OAAS,GAAK0R,KAAK8G,IAAI/X,KAAK2rD,UAAU,GAAGkB,IAAM7sD,KAAK2rD,UAAU,GAAGkB,KAAO7sD,KAAKvD,QAC9FuD,KAAKi4D,gBAAgB,MAW3B,IAAIc,EAAY7D,EAAKnV,QACjBiZ,EAAW9D,EAAKrV,OAilBpB,OAljBAkZ,EAAUlP,UAAY,SAAU+J,GAC9B5zD,KAAKu2D,MAAQ3C,EACb5zD,KAAKswD,MAAQ,UACb,IAAI5G,EAAUkK,EAAWlK,QAEzB,GAA+B,IAA3BA,EAAQvkD,QAAQ,QAA4C,IAA5BukD,EAAQvkD,QAAQ,QAAe,CAGjE,IAAI8zD,EAAc,GAEkB,OAAhCrF,EAAWvxD,QAAQqxC,UAAkD,WAA7Bj3C,OAAOwO,SAASyoC,SAC1DulB,GAAe,KAEfA,GAAe,MAGjBA,GAAe,MAAQx8D,OAAOwO,SAAS4pD,KAEV,IAAzBnL,EAAQvkD,QAAQ,KAClB8zD,GAAex8D,OAAOwO,SAASiuD,SAAWxP,EAE1CuP,GAAevP,EAGjBkK,EAAWlK,QAAUuP,IAIzBF,EAAUlP,UAAUtrD,UAAY,CAO9B46D,aAAc,WACZ,OAAOH,EAAS,OAAQ,CACtB,MAASD,EAAU3Y,GAAGY,QACtB,GAAMhhD,KAAKu2D,MAAMlX,OACjB,QAAW,SAaf+Z,mBAAoB,SAA4BpI,EAAUqI,GACxD,IAAI7C,EAQJ,GAAsB,KALpBA,EADExF,EAASC,uBACFD,EAASC,uBAAuB8H,EAAU3Y,GAAGW,OAAQ,SAErDiQ,EAASppC,qBAAqB,iBAG9BroB,OACT,OAAO,EAQT,IALA,IAAIiE,EAAQgzD,EAAO,GACf1G,EAAY,GACZ9rD,EAAO,GAGF1E,EAAI,EAAGA,EAAIkE,EAAMmgD,WAAWpkD,OAAQD,IAAK,CAChD,IAAImJ,EAAIjF,EAAMmgD,WAAWrkD,GAEzB,GALO,wCAKHmJ,EAAEi9C,aAAa,SACjB,MAGiB,SAAfj9C,EAAE88C,SACJvhD,EAAOyE,EAAE4tD,YAETvG,EAAYrnD,EAAE88C,SAIlB,IAAI+T,EAAc,2BAkBlB,OAfEA,GADExJ,GAGa,UAGb9rD,IACFs1D,GAAe,MAAQt1D,GAGzB+0D,EAAUv1D,MAAM81D,GAEhBt5D,KAAKu2D,MAAM9J,qBAAqB4M,EAAevJ,GAE/C9vD,KAAKu2D,MAAM1G,iBAEJ,GASTnE,OAAQ,aAURgB,SAAU,WAER1sD,KAAKu5D,eAGLv5D,KAAKw5D,OAAS,IAAIC,UAAUz5D,KAAKu2D,MAAM7M,QAAS,QAChD1pD,KAAKw5D,OAAOE,OAAS15D,KAAK25D,QAAQ32D,KAAKhD,MACvCA,KAAKw5D,OAAOthC,QAAUl4B,KAAK45D,SAAS52D,KAAKhD,MACzCA,KAAKw5D,OAAOK,QAAU75D,KAAK85D,SAAS92D,KAAKhD,MACzCA,KAAKw5D,OAAOO,UAAY/5D,KAAKg6D,oBAAoBh3D,KAAKhD,OAWxD8wD,YAAa,SAAqBE,GAGhC,GAFYhxD,KAAKo5D,mBAAmBpI,EAAU+H,EAAUnX,OAAOE,UAG7D,OAAOiX,EAAUnX,OAAOE,UAY5BmY,mBAAoB,SAA4Bl7D,GAC9C,IAAIyE,GAAQ,EAERglD,EAAKzpD,EAAQ2mD,aAAa,SAEZ,iBAAP8C,EACThlD,EAAQ,4BACCglD,IAAOuQ,EAAU3Y,GAAGY,UAC7Bx9C,EAAQ,4BAA8BglD,GAGxC,IAAI0R,EAAMn7D,EAAQ2mD,aAAa,WAQ/B,MANmB,iBAARwU,EACT12D,EAAQ,8BACS,QAAR02D,IACT12D,EAAQ,8BAAgC02D,IAGtC12D,IACFxD,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAUt+C,GAE3DxD,KAAKu2D,MAAM1G,iBAEJ,IAYXmK,oBAAqB,SAA6Bj7D,GAChD,GAAuC,IAAnCA,EAAQ8Z,KAAK1T,QAAQ,WAAqD,IAAlCpG,EAAQ8Z,KAAK1T,QAAQ,SAAgB,CAE/E,IAAI0T,EAAO9Z,EAAQ8Z,KAAK3L,QAAQ,mBAAoB,IACpD,GAAa,KAAT2L,EAAa,OACjB,IAAIshD,GAAc,IAAIlV,WAAYC,gBAAgBrsC,EAAM,YAAYs9C,gBAEpEn2D,KAAKu2D,MAAMjJ,SAAS6M,GAEpBn6D,KAAKu2D,MAAM/I,SAASzuD,EAAQ8Z,MAGxB7Y,KAAKi6D,mBAAmBE,IAE1Bn6D,KAAK8wD,YAAYqJ,QAEd,GAAwC,IAApCp7D,EAAQ8Z,KAAK1T,QAAQ,WAAkB,CAGhD,IAAIi1D,GAAgB,IAAInV,WAAYC,gBAAgBnmD,EAAQ8Z,KAAM,YAAYs9C,gBAE9En2D,KAAKu2D,MAAMjJ,SAAS8M,GAEpBp6D,KAAKu2D,MAAM/I,SAASzuD,EAAQ8Z,MAE5B,IAAIwhD,EAAUD,EAAc1U,aAAa,iBAEzC,GAAI2U,EAAS,CACX,IAAI3Q,EAAU1pD,KAAKu2D,MAAM7M,SAEFA,EAAQvkD,QAAQ,SAAW,GAAKk1D,EAAQl1D,QAAQ,SAAW,GAAKukD,EAAQvkD,QAAQ,QAAU,KAG/GnF,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOS,SAAU,gDAE3DriD,KAAKu2D,MAAM1gC,QAEX71B,KAAKu2D,MAAM7M,QAAU2Q,EAErBr6D,KAAK0sD,iBAGP1sD,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,2BAE3D9hD,KAAKu2D,MAAM1G,oBAER,CACL,IAAI51B,EAASj6B,KAAKs6D,YAAYv7D,EAAQ8Z,MAElC4qC,GAAO,IAAIwB,WAAYC,gBAAgBjrB,EAAQ,YAAYk8B,gBAC/Dn2D,KAAKw5D,OAAOO,UAAY/5D,KAAKu6D,WAAWv3D,KAAKhD,MAE7CA,KAAKu2D,MAAMzF,YAAYrN,EAAM,KAAM1kD,EAAQ8Z,QAY/C82C,YAAa,SAAqBH,GAChC,GAAIxvD,KAAKw5D,QAAUx5D,KAAKw5D,OAAO1wC,aAAe2wC,UAAUe,OAAQ,CAC1DhL,GACFxvD,KAAKu2D,MAAMthC,KAAKu6B,GAGlB,IAAIiL,EAAQzB,EAAS,QAAS,CAC5B,MAASD,EAAU3Y,GAAGY,UAGxBhhD,KAAKu2D,MAAMhJ,UAAUkN,EAAMvT,QAE3B,IAAIwT,EAAc3B,EAAU9R,UAAUwT,GAEtCz6D,KAAKu2D,MAAM9I,UAAUiN,GAErB,IACE16D,KAAKw5D,OAAOvkC,KAAKylC,GACjB,MAAOjyD,GACPswD,EAAU9sC,KAAK,iCAInBjsB,KAAKu2D,MAAM1G,iBAQbA,cAAe,WACbkJ,EAAU/R,MAAM,uCAEhBhnD,KAAKu5D,gBAOPe,YAAa,SAAqBpM,GAChC,MAAO,YAAcA,EAAS,cAQhCqL,aAAc,WACZ,GAAIv5D,KAAKw5D,OACP,IACEx5D,KAAKw5D,OAAOK,QAAU,KACtB75D,KAAKw5D,OAAOthC,QAAU,KACtBl4B,KAAKw5D,OAAOO,UAAY,KACxB/5D,KAAKw5D,OAAOiB,QACZ,MAAOhyD,GACPswD,EAAU/R,MAAMv+C,EAAE1J,SAItBiB,KAAKw5D,OAAS,MAShBjJ,YAAa,WACX,OAAO,GAQTuJ,SAAU,SAAkBrxD,GACtBzI,KAAKu2D,MAAM3L,YAAc5qD,KAAKu2D,MAAM1L,eACtCkO,EAAUv1D,MAAM,iCAEhBxD,KAAKu2D,MAAM1G,iBACFpnD,GAAgB,OAAXA,EAAE7H,OAAkBZ,KAAKu2D,MAAM3L,WAAa5qD,KAAKw5D,QAK/DT,EAAUv1D,MAAM,iCAEhBxD,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,0EAE3D9hD,KAAKu2D,MAAM1G,iBAEXkJ,EAAU/R,MAAM,qBASpBqK,kBAAmB,SAA2Bp9C,GAC5C8kD,EAAUv1D,MAAM,6DAEhBxD,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAUiX,EAAUvW,eAAeI,cAEhF3uC,GACFA,EAASxV,KAAKuB,KAAKu2D,OAGrBv2D,KAAKu2D,MAAM1G,iBAQbH,qBAAsB,aAKtBE,kBAAmB,aAQnBgK,SAAU,SAAkBp2D,GAC1Bu1D,EAAUv1D,MAAM,mBAAqBA,GAErCxD,KAAKu2D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,0EAE3D9hD,KAAK2vD,eAQPrE,QAAS,WACP,IAAIzyC,EAAO7Y,KAAKu2D,MAAMvL,MAEtB,GAAInyC,EAAKtZ,OAAS,IAAMS,KAAKu2D,MAAMxpD,OAAQ,CACzC,IAAK,IAAIzN,EAAI,EAAGA,EAAIuZ,EAAKtZ,OAAQD,IAC/B,GAAgB,OAAZuZ,EAAKvZ,GAAa,CACpB,IAAI4uD,EAGFA,EADc,YAAZr1C,EAAKvZ,GACEU,KAAKm5D,eAAejS,OAEpBruC,EAAKvZ,GAGhB,IAAIq7D,EAAY5B,EAAU9R,UAAUiH,GAEpCluD,KAAKu2D,MAAMhJ,UAAUW,GAErBluD,KAAKu2D,MAAM9I,UAAUkN,GAErB36D,KAAKw5D,OAAOvkC,KAAK0lC,GAIrB36D,KAAKu2D,MAAMvL,MAAQ,KA2BvBuP,WAAY,SAAoBx7D,GAC9B,IAAI0kD,EAEAgX,EAAQ,wDAEZ,GAAI17D,EAAQ8Z,OAAS4hD,EASnB,OARAz6D,KAAKu2D,MAAM/I,SAASiN,GAEpBz6D,KAAKu2D,MAAMjJ,SAASvuD,QAEfiB,KAAKu2D,MAAM1L,eACd7qD,KAAKu2D,MAAM1G,iBAIR,GAAsC,IAAlC9wD,EAAQ8Z,KAAKqO,OAAO,WAI7B,GAFAu8B,GAAO,IAAIwB,WAAYC,gBAAgBnmD,EAAQ8Z,KAAM,YAAYs9C,iBAE5Dn2D,KAAKi6D,mBAAmBxW,GAC3B,WAEG,CACL,IAAI5qC,EAAO7Y,KAAKs6D,YAAYv7D,EAAQ8Z,MAEpC4qC,GAAO,IAAIwB,WAAYC,gBAAgBrsC,EAAM,YAAYs9C,gBAG3D,OAAIn2D,KAAKo5D,mBAAmB3V,EAAMsV,EAAUnX,OAAOrlD,YAAnD,EAKIyD,KAAKu2D,MAAM1L,eAA8C,aAA7BpH,EAAKmX,WAAWrV,UAAoE,gBAAzC9B,EAAKmX,WAAWlV,aAAa,SACtG1lD,KAAKu2D,MAAMjJ,SAAS7J,QAEpBzjD,KAAKu2D,MAAM/I,SAASuL,EAAU9R,UAAUxD,UAO1CzjD,KAAKu2D,MAAMtG,UAAUxM,EAAM1kD,EAAQ8Z,OAQrC8gD,QAAS,WACPZ,EAAU/R,MAAM,kBAEhB,IAAI3mD,EAAQL,KAAKm5D,eAEjBn5D,KAAKu2D,MAAMhJ,UAAUltD,EAAM6mD,QAE3B,IAAI2T,EAAc9B,EAAU9R,UAAU5mD,GAEtCL,KAAKu2D,MAAM9I,UAAUoN,GAErB76D,KAAKw5D,OAAOvkC,KAAK4lC,IAcnBxK,WAAY,SAAoBnC,GAC9B,OAAOA,GAQTN,MAAO,WACL5tD,KAAKu2D,MAAMhyD,SAObmqD,aAAc,WACZrqD,aAAarE,KAAKu2D,MAAM9L,cAExBzqD,KAAKu2D,MAAMjL,QAAQtoD,KAAKhD,KAAKu2D,MAA7Bv2D,KAIJ87C,EAASiE,QAAUmV,EAAKnV,QACxBjE,EAAS+D,OAASqV,EAAKrV,OACvB/D,EAASmE,IAAMiV,EAAKjV,IACpBnE,EAASgf,KAAO5F,EAAK4F,KACrBhf,EAASoE,MAAQgV,EAAKhV,MAEfgV,EAzwLyEj5D,mDCC5F8jD,EAAAA,QAAQwH,oBAAoB,QAC5B,CACIsM,YAAa,KACbkH,YAAc,GACdC,UAAY,GACZC,OAAS,GAOT5wC,KAAM,SAAS6wC,GAEfl7D,KAAK6zD,YAAcqH,EACfl7D,KAAK+6D,YAAc,GACnB/6D,KAAKg7D,UAAc,GACnBh7D,KAAKi7D,OAAc,GAEnBC,EAAK1iC,WAAWx4B,KAAKm7D,aAAan4D,KAAKhD,MAAO+/C,EAAAA,QAAQK,GAAGO,WAAY,KAAM,MAAO,KAAM,MAExFua,EAAK1iC,WAAWx4B,KAAKo7D,cAAcp4D,KAAKhD,MAAO+/C,EAAAA,QAAQK,GAAGQ,YAAa,KAAM,MAAO,KAAM,OAa9Fya,YAAa,SAASC,EAAU97D,EAAM0I,EAAMqzD,GAExC,IAAK,IAAIj8D,EAAE,EAAGA,EAAEU,KAAK+6D,YAAYx7D,OAAQD,IAErC,GAAIU,KAAK+6D,YAAYz7D,GAAGg8D,UAAYA,GAChCt7D,KAAK+6D,YAAYz7D,GAAGE,MAAQA,GAC5BQ,KAAK+6D,YAAYz7D,GAAG4I,MAAQA,GAC5BlI,KAAK+6D,YAAYz7D,GAAGi8D,MAAQA,EAE5B,OAAO,EAIf,OADAv7D,KAAK+6D,YAAY72D,KAAK,CAACo3D,SAAUA,EAAU97D,KAAMA,EAAM0I,KAAMA,EAAMqzD,KAAMA,KAClE,GAUXC,WAAY,SAASC,GAEjB,IAAK,IAAIn8D,EAAE,EAAGA,EAAEU,KAAKg7D,UAAUz7D,OAAQD,IAElC,GAAIU,KAAKg7D,UAAU17D,IAAMm8D,EACrB,OAAO,EAGhB,OADAz7D,KAAKg7D,UAAU92D,KAAKu3D,IACb,GAUXC,cAAe,SAASD,GAEpB,IAAK,IAAIn8D,EAAE,EAAGA,EAAEU,KAAKg7D,UAAUz7D,OAAQD,IAElC,GAAIU,KAAKg7D,UAAU17D,KAAOm8D,EAEtB,OADAz7D,KAAKg7D,UAAU11D,OAAOhG,EAAE,IACjB,EAGhB,OAAO,GAaXq8D,QAAS,SAASrV,EAAKp+C,EAAMlL,EAAM4+D,GAE/B,QAAI5+D,IAAS4+D,IAEb57D,KAAKi7D,OAAO/2D,KAAK,CAACoiD,IAAKA,EAAKp+C,KAAMA,EAAMlL,KAAMA,EAAM4+D,UAAWA,IACxD,KAUXzpD,KAAM,SAASm0C,EAAKtpD,EAAM6+D,EAASr4D,EAAOuqD,GAEtC,IAAIjO,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGO,YAC3B3jD,IACA8iD,EAAM9iD,KAAOA,GAEjB,IAAImV,EAAO8tC,EAAAA,IAAI,CAAC7D,KAAKp8C,KAAK6zD,YAAYvN,IACrBwV,GAAGxV,EAAK9mD,KAAK,QAAQ4B,EAAE,QAAS0+C,GACjD9/C,KAAK6zD,YAAYvF,OAAOn8C,EAAM0pD,EAASr4D,EAAOuqD,IAUlDgO,MAAO,SAASzV,EAAKtpD,EAAM6+D,EAASr4D,EAAOuqD,GAEvC,IAAIjO,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGQ,aAC3B5jD,IACA8iD,EAAM9iD,KAAOA,GAEjB,IAAI++D,EAAQ9b,EAAAA,IAAI,CAAC7D,KAAKp8C,KAAK6zD,YAAYvN,IACtBwV,GAAGxV,EAAK9mD,KAAK,QAAQ4B,EAAE,QAAS0+C,GACjD9/C,KAAK6zD,YAAYvF,OAAOyN,EAAOF,EAASr4D,EAAOuqD,IAKnDiO,eAAgB,SAAS9N,EAAQ+N,GAE7B,IAAIj1D,EAAQknD,EAAOxI,aAAa,MAC5BtJ,EAAO8R,EAAOxI,aAAa,QAC3BwW,EAAWjc,EAAAA,IAAI,CAACzgD,KAAM,SAAUwH,GAAIA,IAMxC,OAJa,OAATo1C,GACA8f,EAASpc,MAAM,CAACgc,GAAI1f,IAGjB8f,EAAS96D,EAAE,QAAS66D,IAM/Bd,aAAc,SAASjN,GAEnB,IAEI5uD,EAFAtC,EAAOkxD,EAAOtmC,qBAAqB,SAAS,GAAG89B,aAAa,QAC5D5F,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGO,YAE3B3jD,IAEA8iD,EAAM9iD,KAAOA,GAEjB,IAAIk/D,EAAWl8D,KAAKg8D,eAAe9N,EAAQpO,GAC3C,IAAKxgD,EAAE,EAAGA,EAAEU,KAAK+6D,YAAYx7D,OAAQD,IAEjCwgD,EAAQ,CAACwb,SAAUt7D,KAAK+6D,YAAYz7D,GAAGg8D,SAC1B97D,KAAUQ,KAAK+6D,YAAYz7D,GAAGE,MACvCQ,KAAK+6D,YAAYz7D,GAAG4I,OACpB43C,EAAM53C,KAAOlI,KAAK+6D,YAAYz7D,GAAG4I,MACjClI,KAAK+6D,YAAYz7D,GAAGi8D,OACpBzb,EAAM,YAAc9/C,KAAK+6D,YAAYz7D,GAAGi8D,MAC5CW,EAAS96D,EAAE,WAAY0+C,GAAO6H,KAElC,IAAKroD,EAAE,EAAGA,EAAEU,KAAKg7D,UAAUz7D,OAAQD,IAE/B48D,EAAS96D,EAAE,UAAW,CAAC,IAAMpB,KAAKg7D,UAAU17D,KAAKqoD,KAGrD,OADA3nD,KAAK6zD,YAAY5+B,KAAKinC,EAAShV,SACxB,GAKXkU,cAAe,SAASlN,GAEpB,IAEI6N,EAAOz8D,EAFP28D,EAAc,CAACxU,MAAO1H,EAAAA,QAAQK,GAAGQ,aACjC5jD,EAAOkxD,EAAOtmC,qBAAqB,SAAS,GAAG89B,aAAa,QAEhE,GAAI1oD,GAIA,IAFAi/D,EAAYj/D,KAAOA,EACnB++D,EAAQ,GACHz8D,EAAI,EAAGA,EAAIU,KAAKi7D,OAAO17D,OAAQD,IAEhC,GAAIU,KAAKi7D,OAAO37D,GAAGtC,MAAQA,EAC3B,CACI++D,EAAQ/7D,KAAKi7D,OAAO37D,GAAGs8D,UAAU1N,GACjC,YAMR6N,EAAQ/7D,KAAKi7D,OAEjB,IAAIiB,EAAWl8D,KAAKg8D,eAAe9N,EAAQ+N,GAC3C,IAAK38D,EAAI,EAAGA,EAAIy8D,EAAMx8D,OAAQD,IAC9B,CACI,IAAIwgD,EAAQ,CAACwG,IAAMyV,EAAMz8D,GAAGgnD,KACxByV,EAAMz8D,GAAG4I,OACT43C,EAAM53C,KAAO6zD,EAAMz8D,GAAG4I,MACtB6zD,EAAMz8D,GAAGtC,OACT8iD,EAAM9iD,KAAO++D,EAAMz8D,GAAGtC,MAC1Bk/D,EAAS96D,EAAE,OAAQ0+C,GAAO6H,KAG9B,OADA3nD,KAAK6zD,YAAY5+B,KAAKinC,EAAShV,SACxB,+DCpNfnH,EAAAA,QAAQwH,oBAAoB,mBAAoB,CAK/C4U,SAAS,EAOTC,oCAAoC,EAQpCC,wBAAyB,EAMzBC,GAAI,KAMJC,IAAK,gBAMLC,4BAA4B,EAQ5BC,gCAAiC,KAQjCC,+BAAgC,KAMhCC,0BAA2B,KAQ3BC,mBAAoB,KAMpBC,gBAAiB,KAMjBC,iBAAkB,KAKlBC,8BAA+B,EAM/BC,cAAc,EAKdC,uBAAwB,GAOxBC,6BAA8B,GAE9BC,8BAA+B,SAASllD,GACvCjY,KAAKk9D,6BAA6Bh5D,KAAK+T,IAGxCmlD,OAAQ,SAAS1iD,GAChB,IAAK1a,KAAKg9D,aACT,MAAM,IAAIl3D,MAAM,sDACV,GAAI9F,KAAKq9D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,UACpD,MAAM,IAAIn8C,MAAM,sDAEjB9F,KAAKs8D,GAAGrnC,KAAK4qB,EAAAA,OAAO,SAAU,CAAE4H,MAAOznD,KAAKu8D,IAAK7hD,OAAAA,KACjD1a,KAAKs8D,GAAG/3D,QACRvE,KAAKs8D,GAAG7hD,SAGT6iD,eAAgB,WACf,OAAOt9D,KAAKu9D,cAGbC,cACC,OAAOx9D,KAAKg9D,cAGbtiD,OAAQ,WACP,IAAK1a,KAAKs9D,iBACT,MAAM,IAAIx3D,MAAM,mBAEjB,GAAI9F,KAAKq9D,oBAAsBtd,EAAAA,QAAQ6B,OAAOM,aAC7C,MAAM,IAAIp8C,MAAM,yDAGjB9F,KAAKs8D,GAAGj6D,QAAQ4wD,yBAA0B,EAC1CjzD,KAAKy9D,WAAY,EAEjBz9D,KAAK09D,iBAAiB56D,MAAM9C,KAAKs8D,GAAIt8D,KAAK29D,eAG3CC,uBAAwB,WACvB,GAAI59D,KAAKq9D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,UAC7C,MAAM,IAAIn8C,MAAM,sEAEjB9F,KAAK+8D,8BAAgC,EACrC/8D,KAAKs8D,GAAGrnC,KAAK4qB,EAAAA,OAAO,IAAK,CAAE4H,MAAOznD,KAAKu8D,QAGxCsB,mBAAoB,WACnB,OAAO79D,KAAK28D,2BAGbmB,mBAAoB,WACnB,OAAO99D,KAAK08D,gCAGbryC,KAAM,SAAS6wC,GACdl7D,KAAKs8D,GAAKpB,EACVnb,EAAAA,QAAQwD,aAAa,KAAMvjD,KAAKu8D,KAGhCv8D,KAAK48D,mBAAqB58D,KAAKs8D,GAAG/O,UAClCvtD,KAAKs8D,GAAG/O,UAAYvtD,KAAKutD,UAAUvqD,KAAKhD,MAExCA,KAAK09D,iBAAmB19D,KAAKs8D,GAAGrQ,QAChCjsD,KAAKs8D,GAAGrQ,QAAUjsD,KAAK+9D,sBAAsB/6D,KAAKhD,MAElDA,KAAKg+D,mCAAqCh+D,KAAKs8D,GAAGtJ,2BAClDhzD,KAAKs8D,GAAGtJ,2BAA6BhzD,KAAKgzD,2BAA2BhwD,KAAKhD,MAE1EA,KAAKi+D,sBAAwBj+D,KAAKs8D,GAAGzM,cACrC7vD,KAAKs8D,GAAGzM,cAAgB7vD,KAAKk+D,uBAAuBl7D,KAAKhD,MAEzDA,KAAKm+D,oBAAsBn+D,KAAKs8D,GAAG/M,WACnCvvD,KAAKs8D,GAAG/M,WAAavvD,KAAKo+D,qBAAqBp7D,KAAKhD,OAGrDo+D,qBAAsB,WACrBp+D,KAAKu9D,kBAAepxD,EACpBnM,KAAKm+D,oBAAoBr7D,MAAM9C,KAAKs8D,GAAIv5D,YAGzCm7D,uBAAwB,WACnBl+D,KAAKs9D,mBACHt9D,KAAKy9D,WACNz9D,KAAKs8D,GAAG1R,YAAc5qD,KAAKs8D,GAAGzR,gBAClC7qD,KAAKq+D,aAAe,CACnBrmC,SAAUh4B,KAAKs8D,GAAGtkC,SAClBmyB,cAAenqD,KAAKs8D,GAAGnS,cACvBC,aAAcpqD,KAAKs8D,GAAGlS,aACtBC,eAAgBrqD,KAAKs8D,GAAGjS,eACxBC,UAAWtqD,KAAKs8D,GAAGhS,UACnBC,YAAavqD,KAAKs8D,GAAG/R,aAEtBvqD,KAAKs+D,WAAat+D,KAAKs8D,GAAGhW,IAE1BtmD,KAAKm8D,SAAWpc,EAAAA,QAAQiH,MAAM,0CAA4ChnD,KAAKq+D,aAAarmC,SAASz4B,SAKtGS,KAAKs8D,GAAGtR,MAAQ,GAEhBhrD,KAAKi+D,sBAAsBn7D,MAAM9C,KAAKs8D,GAAIv5D,YAG3Cg7D,sBAAuB,WACtB/9D,KAAK29D,aAAe56D,UAEpB/C,KAAK09D,iBAAiB56D,MAAM9C,KAAKs8D,GAAIv5D,YAGtCiwD,2BAA4B,SAASvP,GAGpC,OAFAzjD,KAAKg9D,aAAevZ,EAAKwN,uBAAuBjxD,KAAKu8D,IAAK,MAAMh9D,OAAS,EAElES,KAAKg+D,mCAAmCl7D,MAAM9C,KAAKs8D,GAAIv5D,YAG/DitD,cAAe,SAAUl5B,GAExB,GADA92B,KAAKq9D,kBAAoBvmC,EACpB92B,KAAKs9D,kBACLxmC,IAAWipB,EAAAA,QAAQ6B,OAAOK,WAAanrB,IAAWipB,EAAAA,QAAQ6B,OAAOM,aAqC/D,GAAIprB,IAAWipB,EAAAA,QAAQ6B,OAAOW,aAAe,CACnDviD,KAAKs8D,GAAGhW,IAAMtmD,KAAKs+D,WAGnB,IAAK,MAAMC,KAAYv+D,KAAKq+D,aAC3Br+D,KAAKs8D,GAAGiC,GAAYv+D,KAAKq+D,aAAaE,GAIvCv+D,KAAKs8D,GAAGrnC,KAAK4qB,EAAAA,OAAO,SAAU,CAC7B4H,MAAOznD,KAAKu8D,IACZpU,EAAGnoD,KAAK08D,+BACR8B,OAAQx+D,KAAKu9D,gBAEdv9D,KAAKs8D,GAAG/3D,aACEuyB,IAAWipB,EAAAA,QAAQ6B,OAAOrlD,QACpCyD,KAAKm8D,SAAWpc,EAAAA,QAAQiH,MAAM,oCAC9BhnD,KAAKu9D,kBAAepxD,QArDpBnM,KAAKm8D,SAAWpc,EAAAA,QAAQiH,MAAM,kBAE9BhnD,KAAKy8D,gCAAkC,EACvCz8D,KAAK08D,+BAAiC,EAEtC18D,KAAK28D,0BAA4B,EAEjC38D,KAAKw8D,4BAA6B,EAClCx8D,KAAK+8D,8BAAgC,EAGrC/8D,KAAKy9D,WAAY,EAEb3mC,IAAWipB,EAAAA,QAAQ6B,OAAOM,eAC7BliD,KAAKg9D,cAAe,GAGrBh9D,KAAKi9D,uBAAyB,GAE1Bj9D,KAAK68D,iBACR78D,KAAKs8D,GAAGjO,cAAcruD,KAAK68D,iBAGxB78D,KAAK88D,kBACR98D,KAAKs8D,GAAGjO,cAAcruD,KAAK88D,kBAG5B98D,KAAK68D,gBAAkB78D,KAAKs8D,GAAG9jC,WAAWx4B,KAAKy+D,4BAA4Bz7D,KAAKhD,MAAOA,KAAKu8D,IAAK,KACjGv8D,KAAK0+D,YAAc1+D,KAAKs8D,GAAG9jC,WAAWx4B,KAAK2+D,iBAAiB37D,KAAKhD,MAAOA,KAAKu8D,IAAK,KAClFv8D,KAAK88D,iBAAmB98D,KAAKs8D,GAAG9jC,WAAWx4B,KAAK4+D,uBAAuB57D,KAAKhD,OAG5EA,KAAK6+D,gBAAkB7+D,KAAKs8D,GAAG1K,eAAe5xD,KAAK8+D,eAAe97D,KAAKhD,MAAOA,KAAKu8D,IAAK,WACxFv8D,KAAK++D,qBAAuB/+D,KAAKs8D,GAAG1K,eAAe5xD,KAAKg/D,oBAAoBh8D,KAAKhD,MAAOA,KAAKu8D,IAAK,UAClGv8D,KAAKi/D,gBAAmBj/D,KAAKs8D,GAAG1K,eAAe5xD,KAAKk/D,eAAel8D,KAAKhD,MAAOA,KAAKu8D,IAAI,YA8B1FhP,UAAW,SAAS9J,GAOnB,OANI1D,EAAAA,QAAQ8D,WAAWJ,EAAM,OAC5B1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aACzB1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aACzBzjD,KAAKm/D,4BAA4B1b,GAG3BzjD,KAAK48D,mBAAmBn+D,KAAKuB,KAAKs8D,GAAI7Y,IAG9Cqb,eAAgB,SAASrb,GAOxB,OANAzjD,KAAKw8D,4BAA6B,EAElCx8D,KAAKu9D,aAA+C,SAAhC9Z,EAAKiC,aAAa,WAAwBjC,EAAKiC,aAAa,MAEhF1lD,KAAKs8D,GAAG5hD,UAED,GAGRskD,oBAAqB,SAASvb,GAC7B,MAAMjgD,EAAQigD,GAAQA,EAAK2b,mBAAqB3b,EAAK2b,kBAAkB7lC,QAKvE,OAHAv5B,KAAKs8D,GAAG7P,qBAAqB1M,EAAAA,QAAQ6B,OAAOrlD,MAAOiH,EAAOigD,GAC1DzjD,KAAKs8D,GAAGzM,iBAED,GAGRqP,eAAgB,SAASzb,GAExB,IAAI4b,EAAe3vD,SAAS+zC,EAAKiC,aAAa,MAQ9C,GAPA1lD,KAAKs/D,2BAA2BD,EAAcr/D,KAAKy8D,iCAEnDz8D,KAAKy9D,WAAY,EACjBz9D,KAAKs8D,GAAGpS,SAAU,EAClBlqD,KAAKs8D,GAAG3R,eAAgB,EACxB3qD,KAAKs8D,GAAGvR,UAAW,EAEf/qD,KAAKi9D,uBAAuB19D,OAAS,EAAG,CAC3CS,KAAKm8D,SAAWpc,EAAAA,QAAQiH,MAAM,oCAAqChnD,KAAKi9D,wBACxE,IAAI,MAAM/O,KAAUluD,KAAKi9D,uBACxBj9D,KAAKs8D,GAAGrnC,KAAKi5B,QAGdluD,KAAKm8D,SAAWpc,EAAAA,QAAQiH,MAAM,+BAAgChnD,KAAKi9D,wBAKpE,OAFAj9D,KAAKs8D,GAAG7P,qBAAqB1M,EAAAA,QAAQ6B,OAAOK,UAAW,OAEhD,GAGR2c,uBAAwB,SAASnb,GAShC,OARI1D,EAAAA,QAAQ8D,WAAWJ,EAAM,OAAS1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aAAe1D,EAAAA,QAAQ8D,WAAWJ,EAAM,cACtGzjD,KAAKu/D,kCAEDv/D,KAAKo8D,oCACRp8D,KAAKw/D,4BAIA,GAGRF,2BAA4B,SAASG,EAAsBC,GAC1D,IAAIC,EAAQF,EAAuBC,EAE/BC,EAAQ,GACX3/D,KAAK4/D,YAAY,uDAAyDH,EAAuB,gBAAkBC,GAGhHC,EAAQ3/D,KAAKi9D,uBAAuB19D,QACvCS,KAAK4/D,YAAY,8FAAgGD,EAAQ,kCAAoC3/D,KAAKi9D,uBAAuB19D,OAAS,WAAakgE,EAAuB,gBAAkBC,GAGzP,IAAI,IAAIpgE,EAAI,EAAGA,EAAIqgE,EAAOrgE,IAEzB,IADA,IAAI4uD,EAASluD,KAAKi9D,uBAAuB1iD,QAChCxO,EAAI,EAAGA,EAAI/L,KAAKk9D,6BAA6B39D,OAAQwM,IAC7D/L,KAAKk9D,6BAA6BnxD,GAAGmiD,GAInCluD,KAAKm8D,SAAWn8D,KAAKi9D,uBAAuB19D,OAAS,GACxDwgD,EAAAA,QAAQ9zB,KAAK,4BAA6BjsB,KAAKi9D,wBAGhDj9D,KAAKy8D,gCAAkCgD,EAEnCz/D,KAAKq8D,wBAA0B,IAClCr8D,KAAK+8D,8BAAgC,IAIvC0B,4BAA6B,WAG5B,OAFAz+D,KAAKw/D,2BAEE,GAGRb,iBAAkB,SAASlb,GAC1B,IAAI4b,EAAe3vD,SAAS+zC,EAAKiC,aAAa,MAG9C,OAFA1lD,KAAKs/D,2BAA2BD,EAAcr/D,KAAKy8D,kCAE5C,GAGR+C,wBAAyB,WACpBx/D,KAAKw8D,4BACRx8D,KAAKs8D,GAAGrnC,KAAK4qB,EAAAA,OAAO,IAAK,CAAE4H,MAAOznD,KAAKu8D,IAAKpU,EAAGnoD,KAAK08D,mCAItDyC,4BAA6B,SAAS1b,GACrC,GAAIzjD,KAAKw8D,2BAA4B,CACpC,IAAmD,IAA/Cx8D,KAAKi9D,uBAAuB93D,QAAQs+C,GAEvC,OAGDzjD,KAAKi9D,uBAAuB/4D,KAAKu/C,GACjCzjD,KAAK28D,4BAED38D,KAAKq8D,wBAA0B,IAClCr8D,KAAK+8D,gCAED/8D,KAAK+8D,gCAAkC/8D,KAAKq8D,yBAE/C/3D,YAAW,KACNtE,KAAKq9D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,WAC7CjiD,KAAK49D,2BAEJ,MAMP2B,gCAAiC,WAC5Bv/D,KAAKw8D,4BACRx8D,KAAK08D,kCAIPkD,YAAa,SAASl8D,GAErB,MADAq8C,EAAAA,QAAQv8C,MAAME,GACR,IAAIoC,MAAMpC,0oCCpblB,IAAIm8D,GAAe,EACfC,GAAuB,EAUpB,SAASC,EAAeC,EAAU9zD,EAAM+N,GAC7C,MAAMhU,EAAQ+5D,EAAS/5D,MAAMiG,GAC7B,OAAOjG,GAASA,EAAM1G,QAAU0a,GAAOvK,SAASzJ,EAAMgU,GAAM,IAMvD,SAASgmD,EAAwBxjE,EAAQyjE,EAAiBnN,GAC/D,IAAKt2D,EAAO0jE,kBACV,OAEF,MAAMr2B,EAAQrtC,EAAO0jE,kBAAkB5hE,UACjC6hE,EAAyBt2B,EAAM9c,iBACrC8c,EAAM9c,iBAAmB,SAASqzC,EAAiB/mD,GACjD,GAAI+mD,IAAoBH,EACtB,OAAOE,EAAuBt9D,MAAM9C,KAAM+C,WAE5C,MAAMwV,EAAmB9P,IACvB,MAAM63D,EAAgBvN,EAAQtqD,GAC1B63D,IACEhnD,EAAGinD,YACLjnD,EAAGinD,YAAYD,GAEfhnD,EAAGgnD,KAST,OALAtgE,KAAKwgE,UAAYxgE,KAAKwgE,WAAa,GAC9BxgE,KAAKwgE,UAAUN,KAClBlgE,KAAKwgE,UAAUN,GAAmB,IAAI54B,KAExCtnC,KAAKwgE,UAAUN,GAAiB/yC,IAAI7T,EAAIf,GACjC6nD,EAAuBt9D,MAAM9C,KAAM,CAACqgE,EACzC9nD,KAGJ,MAAMkoD,EAA4B32B,EAAM5c,oBACxC4c,EAAM5c,oBAAsB,SAASmzC,EAAiB/mD,GACpD,GAAI+mD,IAAoBH,IAAoBlgE,KAAKwgE,YACzCxgE,KAAKwgE,UAAUN,GACrB,OAAOO,EAA0B39D,MAAM9C,KAAM+C,WAE/C,IAAK/C,KAAKwgE,UAAUN,GAAiBj0B,IAAI3yB,GACvC,OAAOmnD,EAA0B39D,MAAM9C,KAAM+C,WAE/C,MAAM29D,EAAc1gE,KAAKwgE,UAAUN,GAAiB3hD,IAAIjF,GAQxD,OAPAtZ,KAAKwgE,UAAUN,GAAiBS,OAAOrnD,GACM,IAAzCtZ,KAAKwgE,UAAUN,GAAiB7tC,aAC3BryB,KAAKwgE,UAAUN,GAEmB,IAAvC5hE,OAAOmE,KAAKzC,KAAKwgE,WAAWjhE,eACvBS,KAAKwgE,UAEPC,EAA0B39D,MAAM9C,KAAM,CAACqgE,EAC5CK,KAGJpiE,OAAO+f,eAAeyrB,EAAO,KAAOo2B,EAAiB,CACnD3hD,MACE,OAAOve,KAAK,MAAQkgE,IAEtB/yC,IAAI7T,GACEtZ,KAAK,MAAQkgE,KACflgE,KAAKktB,oBAAoBgzC,EACrBlgE,KAAK,MAAQkgE,WACVlgE,KAAK,MAAQkgE,IAElB5mD,GACFtZ,KAAKgtB,iBAAiBkzC,EAClBlgE,KAAK,MAAQkgE,GAAmB5mD,IAGxCgF,YAAY,EACZwG,cAAc,IAIX,SAAS87C,EAAWC,GACzB,MAAoB,kBAATA,EACF,IAAI/6D,MAAM,yBAA2B+6D,EACxC,4BAENhB,EAAegB,EACPA,EAAQ,8BACZ,8BAOC,SAASC,EAAgBD,GAC9B,MAAoB,kBAATA,EACF,IAAI/6D,MAAM,yBAA2B+6D,EACxC,4BAENf,GAAwBe,EACjB,oCAAsCA,EAAO,WAAa,YAG5D,SAAS16D,IACd,GAAsB,iBAAX1J,OAAqB,CAC9B,GAAIojE,EACF,OAEqB,oBAAZ96D,SAAkD,mBAAhBA,QAAQoB,KACnDpB,QAAQoB,IAAIrD,MAAMiC,QAAShC,YAQ1B,SAASg+D,EAAWC,EAAWC,GAC/BnB,GAGL/6D,QAAQknB,KAAK+0C,EAAY,8BAAgCC,EACrD,aASC,SAASC,EAAczkE,GAE5B,MAAM+Z,EAAS,CAAC8O,QAAS,KAAM5X,QAAS,MAGxC,QAAsB,IAAXjR,IAA2BA,EAAO0kE,UAE3C,OADA3qD,EAAO8O,QAAU,iBACV9O,EAGT,MAAM,UAAC2qD,GAAa1kE,EAEpB,GAAI0kE,EAAUC,gBACZ5qD,EAAO8O,QAAU,UACjB9O,EAAO9I,QAAUqyD,EAAeoB,EAAUE,UACtC,mBAAoB,QACnB,GAAIF,EAAUG,qBACW,IAA3B7kE,EAAO8kE,iBAA6B9kE,EAAO+kE,0BAC1C/kE,EAAOglE,eAKXjrD,EAAO8O,QAAU,SACjB9O,EAAO9I,QAAUqyD,EAAeoB,EAAUE,UACtC,wBAAyB,OACxB,KAAI5kE,EAAO0jE,oBACdgB,EAAUE,UAAUp7D,MAAM,wBAQ5B,OADAuQ,EAAO8O,QAAU,2BACV9O,EAPPA,EAAO8O,QAAU,SACjB9O,EAAO9I,QAAUqyD,EAAeoB,EAAUE,UACtC,uBAAwB,GAC5B7qD,EAAOkrD,oBAAsBjlE,EAAOklE,mBAChC,qBAAsBllE,EAAOklE,kBAAkBpjE,UAMrD,OAAOiY,EAST,SAAS4yB,EAASw4B,GAChB,MAA+C,oBAAxCtjE,OAAOC,UAAUC,SAASC,KAAKmjE,GAQjC,SAASC,EAAchpD,GAC5B,OAAKuwB,EAASvwB,GAIPva,OAAOmE,KAAKoW,GAAMzM,QAAO,SAASu5B,EAAaz7B,GACpD,MAAMs1C,EAAQpW,EAASvwB,EAAK3O,IACtBT,EAAQ+1C,EAAQqiB,EAAchpD,EAAK3O,IAAQ2O,EAAK3O,GAChD43D,EAAgBtiB,IAAUlhD,OAAOmE,KAAKgH,GAAOlK,OACnD,YAAc4M,IAAV1C,GAAuBq4D,EAClBn8B,EAEFrnC,OAAOmoB,OAAOkf,EAAa,CAAC,CAACz7B,GAAMT,MACzC,IAXMoP,EAeJ,SAASkpD,EAAUC,EAAOC,EAAMC,GAChCD,IAAQC,EAAUj2B,IAAIg2B,EAAKj7D,MAGhCk7D,EAAU/0C,IAAI80C,EAAKj7D,GAAIi7D,GACvB3jE,OAAOmE,KAAKw/D,GAAMt/D,SAAQuF,IACpBA,EAAKi6D,SAAS,MAChBJ,EAAUC,EAAOA,EAAMzjD,IAAI0jD,EAAK/5D,IAAQg6D,GAC/Bh6D,EAAKi6D,SAAS,QACvBF,EAAK/5D,GAAMvF,SAAQqE,IACjB+6D,EAAUC,EAAOA,EAAMzjD,IAAIvX,GAAKk7D,UAOjC,SAASE,EAAY5rD,EAAQoa,EAAOyxC,GACzC,MAAMC,EAAkBD,EAAW,eAAiB,cAC9CE,EAAiB,IAAIj7B,IAC3B,GAAc,OAAV1W,EACF,OAAO2xC,EAET,MAAMC,EAAa,GAcnB,OAbAhsD,EAAO7T,SAAQ8G,IACM,UAAfA,EAAMjK,MACNiK,EAAMg5D,kBAAoB7xC,EAAM5pB,IAClCw7D,EAAWt+D,KAAKuF,MAGpB+4D,EAAW7/D,SAAQ+/D,IACjBlsD,EAAO7T,SAAQq/D,IACTA,EAAMxiE,OAAS8iE,GAAmBN,EAAMW,UAAYD,EAAU17D,IAChE+6D,EAAUvrD,EAAQwrD,EAAOO,SAIxBA,EC1PT,MAAMpG,EAAUnd,EAET,SAAS4jB,EAAiBnmE,EAAQomE,GACvC,MAAM1B,EAAY1kE,GAAUA,EAAO0kE,UAEnC,IAAKA,EAAU2B,aACb,OAGF,MAAMC,EAAuB,SAAS3hE,GACpC,GAAiB,iBAANA,GAAkBA,EAAE4hE,WAAa5hE,EAAE6hE,SAC5C,OAAO7hE,EAET,MAAM8hE,EAAK,GA4CX,OA3CA5kE,OAAOmE,KAAKrB,GAAGuB,SAAQuH,IACrB,GAAY,YAARA,GAA6B,aAARA,GAA8B,gBAARA,EAC7C,OAEF,MAAMtB,EAAuB,iBAAXxH,EAAE8I,GAAqB9I,EAAE8I,GAAO,CAACi5D,MAAO/hE,EAAE8I,SAC5CiC,IAAZvD,EAAEw6D,OAA0C,iBAAZx6D,EAAEw6D,QACpCx6D,EAAEyW,IAAMzW,EAAEwW,IAAMxW,EAAEw6D,OAEpB,MAAMC,EAAW,SAAS/vB,EAAQprC,GAChC,OAAIorC,EACKA,EAASprC,EAAK2zC,OAAO,GAAG5H,cAAgB/rC,EAAK3B,MAAM,GAE3C,aAAT2B,EAAuB,WAAaA,GAE9C,QAAgBiE,IAAZvD,EAAEu6D,MAAqB,CACzBD,EAAGD,SAAWC,EAAGD,UAAY,GAC7B,IAAIK,EAAK,GACc,iBAAZ16D,EAAEu6D,OACXG,EAAGD,EAAS,MAAOn5D,IAAQtB,EAAEu6D,MAC7BD,EAAGD,SAAS/+D,KAAKo/D,GACjBA,EAAK,GACLA,EAAGD,EAAS,MAAOn5D,IAAQtB,EAAEu6D,MAC7BD,EAAGD,SAAS/+D,KAAKo/D,KAEjBA,EAAGD,EAAS,GAAIn5D,IAAQtB,EAAEu6D,MAC1BD,EAAGD,SAAS/+D,KAAKo/D,SAGLn3D,IAAZvD,EAAEw6D,OAA0C,iBAAZx6D,EAAEw6D,OACpCF,EAAGF,UAAYE,EAAGF,WAAa,GAC/BE,EAAGF,UAAUK,EAAS,GAAIn5D,IAAQtB,EAAEw6D,OAEpC,CAAC,MAAO,OAAOzgE,SAAQ4gE,SACNp3D,IAAXvD,EAAE26D,KACJL,EAAGF,UAAYE,EAAGF,WAAa,GAC/BE,EAAGF,UAAUK,EAASE,EAAKr5D,IAAQtB,EAAE26D,UAKzCniE,EAAEoiE,WACJN,EAAGD,UAAYC,EAAGD,UAAY,IAAIv8D,OAAOtF,EAAEoiE,WAEtCN,GAGHO,EAAmB,SAASC,EAAa19B,GAC7C,GAAI68B,EAAen1D,SAAW,GAC5B,OAAOs4B,EAAK09B,GAGd,IADAA,EAAcngE,KAAK+G,MAAM/G,KAAKF,UAAUqgE,MACQ,iBAAtBA,EAAYC,MAAoB,CACxD,MAAMC,EAAQ,SAASvlE,EAAK6C,EAAGC,GACzBD,KAAK7C,KAAS8C,KAAK9C,KACrBA,EAAI8C,GAAK9C,EAAI6C,UACN7C,EAAI6C,KAIf0iE,GADAF,EAAcngE,KAAK+G,MAAM/G,KAAKF,UAAUqgE,KACtBC,MAAO,kBAAmB,uBAC5CC,EAAMF,EAAYC,MAAO,mBAAoB,wBAC7CD,EAAYC,MAAQZ,EAAqBW,EAAYC,OAEvD,GAAID,GAA4C,iBAAtBA,EAAYG,MAAoB,CAExD,IAAIC,EAAOJ,EAAYG,MAAME,WAC7BD,EAAOA,IAA0B,iBAATA,EAAqBA,EAAO,CAACX,MAAOW,IAC5D,MAAME,EAA6BnB,EAAen1D,QAAU,GAE5D,GAAKo2D,IAAwB,SAAfA,EAAKV,OAAmC,gBAAfU,EAAKV,OACf,SAAfU,EAAKX,OAAmC,gBAAfW,EAAKX,UACtChC,EAAU2B,aAAamB,0BACvB9C,EAAU2B,aAAamB,0BAA0BF,YAChDC,GAA6B,CAElC,IAAIz7C,EAMJ,UAPOm7C,EAAYG,MAAME,WAEN,gBAAfD,EAAKV,OAA0C,gBAAfU,EAAKX,MACvC56C,EAAU,CAAC,OAAQ,QACK,SAAfu7C,EAAKV,OAAmC,SAAfU,EAAKX,QACvC56C,EAAU,CAAC,UAETA,EAEF,OAAO44C,EAAU2B,aAAaoB,mBAC7BC,MAAKC,IAEJ,IAAIC,GADJD,EAAUA,EAAQx4D,QAAOvK,GAAgB,eAAXA,EAAEm3C,QACdlpC,MAAKjO,GAAKknB,EAAQhW,MAAKtM,GACvC5E,EAAEijE,MAAM5+C,cAAc6Q,SAAStwB,OAUjC,OATKo+D,GAAOD,EAAQ7kE,QAAUgpB,EAAQgO,SAAS,UAC7C8tC,EAAMD,EAAQA,EAAQ7kE,OAAS,IAE7B8kE,IACFX,EAAYG,MAAMU,SAAWT,EAAKV,MAAQ,CAACA,MAAOiB,EAAIE,UACZ,CAACpB,MAAOkB,EAAIE,WAExDb,EAAYG,MAAQd,EAAqBW,EAAYG,OACrD1H,EAAQ,WAAa54D,KAAKF,UAAUqgE,IAC7B19B,EAAK09B,MAIlBA,EAAYG,MAAQd,EAAqBW,EAAYG,OAGvD,OADA1H,EAAQ,WAAa54D,KAAKF,UAAUqgE,IAC7B19B,EAAK09B,IAGRc,EAAa,SAAS/7D,GAC1B,OAAIo6D,EAAen1D,SAAW,GACrBjF,EAEF,CACLP,KAAM,CACJu8D,sBAAuB,kBACvBC,yBAA0B,kBAC1BC,kBAAmB,kBACnBC,qBAAsB,gBACtBC,4BAA6B,uBAC7BC,gBAAiB,mBACjBC,+BAAgC,kBAChCC,wBAAyB,kBACzBC,gBAAiB,aACjBC,mBAAoB,aACpBC,mBAAoB,cACpB18D,EAAEP,OAASO,EAAEP,KACfnJ,QAAS0J,EAAE1J,QACXqmE,WAAY38D,EAAE28D,YAAc38D,EAAE48D,eAC9B7mE,WACE,OAAOwB,KAAKkI,MAAQlI,KAAKjB,SAAW,MAAQiB,KAAKjB,WAmBvD,GALAoiE,EAAUmE,aATY,SAAS5B,EAAa7Q,EAAW0S,GACrD9B,EAAiBC,GAAatiE,IAC5B+/D,EAAUG,mBAAmBlgE,EAAGyxD,GAAWpqD,IACrC88D,GACFA,EAAQf,EAAW/7D,WAKYzF,KAAKm+D,GAKxCA,EAAU2B,aAAawC,aAAc,CACvC,MAAME,EAAmBrE,EAAU2B,aAAawC,aAC5CtiE,KAAKm+D,EAAU2B,cACnB3B,EAAU2B,aAAawC,aAAe,SAASG,GAC7C,OAAOhC,EAAiBgC,GAAIrkE,GAAKokE,EAAiBpkE,GAAG+iE,MAAKt3D,IACxD,GAAIzL,EAAEuiE,QAAU92D,EAAOolB,iBAAiB1yB,QACpC6B,EAAEyiE,QAAUh3D,EAAO64D,iBAAiBnmE,OAItC,MAHAsN,EAAO84D,YAAYhjE,SAAQiuB,IACzBA,EAAM/rB,UAEF,IAAI+gE,aAAa,GAAI,iBAE7B,OAAO/4D,KACNpE,GAAK+hB,QAAQpU,OAAOouD,EAAW/7D,UC/KjC,SAASo9D,EAAoBppE,EAAQqpE,GACtCrpE,EAAO0kE,UAAU2B,cACnB,oBAAqBrmE,EAAO0kE,UAAU2B,cAGlCrmE,EAAO0kE,UAAU2B,eAKI,mBAAhBgD,EAKXrpE,EAAO0kE,UAAU2B,aAAaiD,gBAC5B,SAAyBrC,GACvB,OAAOoC,EAAYpC,GAChBS,MAAK6B,IACJ,MAAMC,EAAiBvC,EAAYG,OAASH,EAAYG,MAAM/mC,MACxDopC,EAAkBxC,EAAYG,OAClCH,EAAYG,MAAM9mC,OACdopC,EAAqBzC,EAAYG,OACrCH,EAAYG,MAAMuC,UAcpB,OAbA1C,EAAYG,MAAQ,CAClBb,UAAW,CACTqD,kBAAmB,UACnBC,oBAAqBN,EACrBO,aAAcJ,GAAsB,IAGpCF,IACFvC,EAAYG,MAAMb,UAAUwD,SAAWP,GAErCC,IACFxC,EAAYG,MAAMb,UAAUyD,UAAYP,GAEnCzpE,EAAO0kE,UAAU2B,aAAawC,aAAa5B,OA1BxD3+D,QAAQvB,MAAM,gECNX,SAASkjE,EAAgBjqE,GAC9BA,EAAOu1B,YAAcv1B,EAAOu1B,aAAev1B,EAAOkqE,kBAG7C,SAASC,EAAYnqE,GAC1B,GAAsB,iBAAXA,GAAuBA,EAAO0jE,qBAAuB,YAC5D1jE,EAAO0jE,kBAAkB5hE,WAAY,CACvCD,OAAO+f,eAAe5hB,EAAO0jE,kBAAkB5hE,UAAW,UAAW,CACnEggB,MACE,OAAOve,KAAK6mE,UAEd15C,IAAItG,GACE7mB,KAAK6mE,UACP7mE,KAAKktB,oBAAoB,QAASltB,KAAK6mE,UAEzC7mE,KAAKgtB,iBAAiB,QAAShtB,KAAK6mE,SAAWhgD,IAEjDvI,YAAY,EACZwG,cAAc,IAEhB,MAAMgiD,EACFrqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACvCtqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACjC,WAuCE,OAtCK/mE,KAAKgnE,eACRhnE,KAAKgnE,aAAgBv+D,IAGnBA,EAAEoE,OAAOmgB,iBAAiB,YAAYi6C,IACpC,IAAIn9C,EAEFA,EADErtB,EAAO0jE,kBAAkB5hE,UAAU2oE,aAC1BlnE,KAAKknE,eACb53D,MAAK1G,GAAKA,EAAEgoB,OAAShoB,EAAEgoB,MAAM5pB,KAAOigE,EAAGr2C,MAAM5pB,KAErC,CAAC4pB,MAAOq2C,EAAGr2C,OAGxB,MAAMyH,EAAQ,IAAI8uC,MAAM,SACxB9uC,EAAMzH,MAAQq2C,EAAGr2C,MACjByH,EAAMvO,SAAWA,EACjBuO,EAAM+uC,YAAc,CAACt9C,SAAAA,GACrBuO,EAAMgvC,QAAU,CAAC5+D,EAAEoE,QACnB7M,KAAKsnE,cAAcjvC,MAErB5vB,EAAEoE,OAAO84D,YAAYhjE,SAAQiuB,IAC3B,IAAI9G,EAEFA,EADErtB,EAAO0jE,kBAAkB5hE,UAAU2oE,aAC1BlnE,KAAKknE,eACb53D,MAAK1G,GAAKA,EAAEgoB,OAAShoB,EAAEgoB,MAAM5pB,KAAO4pB,EAAM5pB,KAElC,CAAC4pB,MAAAA,GAEd,MAAMyH,EAAQ,IAAI8uC,MAAM,SACxB9uC,EAAMzH,MAAQA,EACdyH,EAAMvO,SAAWA,EACjBuO,EAAM+uC,YAAc,CAACt9C,SAAAA,GACrBuO,EAAMgvC,QAAU,CAAC5+D,EAAEoE,QACnB7M,KAAKsnE,cAAcjvC,OAGvBr4B,KAAKgtB,iBAAiB,YAAahtB,KAAKgnE,eAEnCF,EAAyBhkE,MAAM9C,KAAM+C,iBAMhDi8C,EAA8BviD,EAAQ,SAASgM,IACxCA,EAAE2+D,aACL9oE,OAAO+f,eAAe5V,EAAG,cACvB,CAACgB,MAAO,CAACqgB,SAAUrhB,EAAEqhB,YAElBrhB,KAKN,SAAS8+D,EAAuB9qE,GAErC,GAAsB,iBAAXA,GAAuBA,EAAO0jE,qBACnC,eAAgB1jE,EAAO0jE,kBAAkB5hE,YAC3C,qBAAsB9B,EAAO0jE,kBAAkB5hE,UAAW,CAC5D,MAAMipE,EAAqB,SAASC,EAAI72C,GACtC,MAAO,CACLA,MAAAA,EACI82C,WAQF,YAPmBv7D,IAAfnM,KAAK2nE,QACY,UAAf/2C,EAAM4nB,KACRx4C,KAAK2nE,MAAQF,EAAGG,iBAAiBh3C,GAEjC5wB,KAAK2nE,MAAQ,MAGV3nE,KAAK2nE,OAEdE,IAAKJ,IAKT,IAAKhrE,EAAO0jE,kBAAkB5hE,UAAUupE,WAAY,CAClDrrE,EAAO0jE,kBAAkB5hE,UAAUupE,WAAa,WAE9C,OADA9nE,KAAK+nE,SAAW/nE,KAAK+nE,UAAY,GAC1B/nE,KAAK+nE,SAASxhE,SAEvB,MAAMyhE,EAAevrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SACxDj1B,EAAO0jE,kBAAkB5hE,UAAUmzB,SACjC,SAAkBd,EAAO/jB,GACvB,IAAIo7D,EAASD,EAAallE,MAAM9C,KAAM+C,WAKtC,OAJKklE,IACHA,EAAST,EAAmBxnE,KAAM4wB,GAClC5wB,KAAK+nE,SAAS7jE,KAAK+jE,IAEdA,GAGX,MAAMC,EAAkBzrE,EAAO0jE,kBAAkB5hE,UAAU+zB,YAC3D71B,EAAO0jE,kBAAkB5hE,UAAU+zB,YACjC,SAAqB21C,GACnBC,EAAgBplE,MAAM9C,KAAM+C,WAC5B,MAAMolE,EAAMnoE,KAAK+nE,SAAS5iE,QAAQ8iE,IACrB,IAATE,GACFnoE,KAAK+nE,SAASziE,OAAO6iE,EAAK,IAIlC,MAAMC,EAAgB3rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UACzD5rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UAAY,SAAmBx7D,GAChE7M,KAAK+nE,SAAW/nE,KAAK+nE,UAAY,GACjCK,EAActlE,MAAM9C,KAAM,CAAC6M,IAC3BA,EAAO84D,YAAYhjE,SAAQiuB,IACzB5wB,KAAK+nE,SAAS7jE,KAAKsjE,EAAmBxnE,KAAM4wB,QAIhD,MAAM03C,EAAmB7rE,EAAO0jE,kBAAkB5hE,UAAUgqE,aAC5D9rE,EAAO0jE,kBAAkB5hE,UAAUgqE,aACjC,SAAsB17D,GACpB7M,KAAK+nE,SAAW/nE,KAAK+nE,UAAY,GACjCO,EAAiBxlE,MAAM9C,KAAM,CAAC6M,IAE9BA,EAAO84D,YAAYhjE,SAAQiuB,IACzB,MAAMq3C,EAASjoE,KAAK+nE,SAASz4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,IAC/Cq3C,GACFjoE,KAAK+nE,SAASziE,OAAOtF,KAAK+nE,SAAS5iE,QAAQ8iE,GAAS,YAIvD,GAAsB,iBAAXxrE,GAAuBA,EAAO0jE,mBACrC,eAAgB1jE,EAAO0jE,kBAAkB5hE,WACzC,qBAAsB9B,EAAO0jE,kBAAkB5hE,WAC/C9B,EAAO+rE,gBACL,SAAU/rE,EAAO+rE,aAAajqE,WAAY,CACrD,MAAMkqE,EAAiBhsE,EAAO0jE,kBAAkB5hE,UAAUupE,WAC1DrrE,EAAO0jE,kBAAkB5hE,UAAUupE,WAAa,WAC9C,MAAMY,EAAUD,EAAe3lE,MAAM9C,KAAM,IAE3C,OADA0oE,EAAQ/lE,SAAQslE,GAAUA,EAAOJ,IAAM7nE,OAChC0oE,GAGTpqE,OAAO+f,eAAe5hB,EAAO+rE,aAAajqE,UAAW,OAAQ,CAC3DggB,MAQE,YAPmBpS,IAAfnM,KAAK2nE,QACiB,UAApB3nE,KAAK4wB,MAAM4nB,KACbx4C,KAAK2nE,MAAQ3nE,KAAK6nE,IAAID,iBAAiB5nE,KAAK4wB,OAE5C5wB,KAAK2nE,MAAQ,MAGV3nE,KAAK2nE,UAMb,SAASgB,EAAalsE,GAC3B,IAAKA,EAAO0jE,kBACV,OAGF,MAAMyI,EAAensE,EAAO0jE,kBAAkB5hE,UAAUsqE,SACxDpsE,EAAO0jE,kBAAkB5hE,UAAUsqE,SAAW,WAC5C,MAAOC,EAAUC,EAAQC,GAASjmE,UAIlC,GAAIA,UAAUxD,OAAS,GAAyB,mBAAbupE,EACjC,OAAOF,EAAa9lE,MAAM9C,KAAM+C,WAKlC,GAA4B,IAAxB6lE,EAAarpE,SAAsC,IAArBwD,UAAUxD,QACpB,mBAAbupE,GACT,OAAOF,EAAa9lE,MAAM9C,KAAM,IAGlC,MAAMipE,EAAkB,SAASjzC,GAC/B,MAAMkzC,EAAiB,GAiBvB,OAhBgBlzC,EAASxf,SACjB7T,SAAQwmE,IACd,MAAMC,EAAgB,CACpBpiE,GAAImiE,EAAOniE,GACXnD,UAAWslE,EAAOtlE,UAClBrE,KAAM,CACJ6pE,eAAgB,kBAChBC,gBAAiB,oBACjBH,EAAO3pE,OAAS2pE,EAAO3pE,MAE3B2pE,EAAO9gE,QAAQ1F,SAAQuF,IACrBkhE,EAAclhE,GAAQihE,EAAOI,KAAKrhE,MAEpCghE,EAAeE,EAAcpiE,IAAMoiE,KAG9BF,GAIHM,EAAe,SAASxH,GAC5B,OAAO,IAAI16B,IAAIhpC,OAAOmE,KAAKu/D,GAAO31D,KAAInC,GAAO,CAACA,EAAK83D,EAAM93D,QAG3D,GAAInH,UAAUxD,QAAU,EAAG,CACzB,MAAMkqE,EAA0B,SAASzzC,GACvC+yC,EAAOS,EAAaP,EAAgBjzC,MAGtC,OAAO4yC,EAAa9lE,MAAM9C,KAAM,CAACypE,EAC/BX,IAIJ,OAAO,IAAIt+C,SAAQ,CAACC,EAASrU,KAC3BwyD,EAAa9lE,MAAM9C,KAAM,CACvB,SAASg2B,GACPvL,EAAQ++C,EAAaP,EAAgBjzC,MACpC5f,OACJ+tD,KAAK4E,EAAQC,IAIb,SAASU,EAA2BjtE,GACzC,KAAwB,iBAAXA,GAAuBA,EAAO0jE,mBACvC1jE,EAAO+rE,cAAgB/rE,EAAOktE,gBAChC,OAIF,KAAM,aAAcltE,EAAO+rE,aAAajqE,WAAY,CAClD,MAAMkqE,EAAiBhsE,EAAO0jE,kBAAkB5hE,UAAUupE,WACtDW,IACFhsE,EAAO0jE,kBAAkB5hE,UAAUupE,WAAa,WAC9C,MAAMY,EAAUD,EAAe3lE,MAAM9C,KAAM,IAE3C,OADA0oE,EAAQ/lE,SAAQslE,GAAUA,EAAOJ,IAAM7nE,OAChC0oE,IAIX,MAAMV,EAAevrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SACpDs2C,IACFvrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SAAW,WAC5C,MAAMu2C,EAASD,EAAallE,MAAM9C,KAAM+C,WAExC,OADAklE,EAAOJ,IAAM7nE,KACNioE,IAGXxrE,EAAO+rE,aAAajqE,UAAUsqE,SAAW,WACvC,MAAMZ,EAASjoE,KACf,OAAOA,KAAK6nE,IAAIgB,WAAW1E,MAAK3tD,GAK9BwoC,EAAkBxoC,EAAQyxD,EAAOr3C,OAAO,MAK9C,KAAM,aAAcn0B,EAAOktE,eAAeprE,WAAY,CACpD,MAAMqrE,EAAmBntE,EAAO0jE,kBAAkB5hE,UAAU2oE,aACxD0C,IACFntE,EAAO0jE,kBAAkB5hE,UAAU2oE,aACjC,WACE,MAAM2C,EAAYD,EAAiB9mE,MAAM9C,KAAM,IAE/C,OADA6pE,EAAUlnE,SAAQmnB,GAAYA,EAAS+9C,IAAM7nE,OACtC6pE,IAGb7qB,EAA8BviD,EAAQ,SAASgM,IAC7CA,EAAEqhB,SAAS+9C,IAAMp/D,EAAEqhE,WACZrhE,KAEThM,EAAOktE,eAAeprE,UAAUsqE,SAAW,WACzC,MAAM/+C,EAAW9pB,KACjB,OAAOA,KAAK6nE,IAAIgB,WAAW1E,MAAK3tD,GAC9BwoC,EAAkBxoC,EAAQsT,EAAS8G,OAAO,MAIhD,KAAM,aAAcn0B,EAAO+rE,aAAajqE,cACpC,aAAc9B,EAAOktE,eAAeprE,WACtC,OAIF,MAAMqqE,EAAensE,EAAO0jE,kBAAkB5hE,UAAUsqE,SACxDpsE,EAAO0jE,kBAAkB5hE,UAAUsqE,SAAW,WAC5C,GAAI9lE,UAAUxD,OAAS,GACnBwD,UAAU,aAActG,EAAOstE,iBAAkB,CACnD,MAAMn5C,EAAQ7tB,UAAU,GACxB,IAAIklE,EACAn+C,EACA1V,EAoBJ,OAnBApU,KAAK8nE,aAAanlE,SAAQ4F,IACpBA,EAAEqoB,QAAUA,IACVq3C,EACF7zD,GAAM,EAEN6zD,EAAS1/D,MAIfvI,KAAKknE,eAAevkE,SAAQiG,IACtBA,EAAEgoB,QAAUA,IACV9G,EACF1V,GAAM,EAEN0V,EAAWlhB,GAGRA,EAAEgoB,QAAUA,KAEjBxc,GAAQ6zD,GAAUn+C,EACbU,QAAQpU,OAAO,IAAIwvD,aACxB,4DACA,uBACOqC,EACFA,EAAOY,WACL/+C,EACFA,EAAS++C,WAEXr+C,QAAQpU,OAAO,IAAIwvD,aACxB,gDACA,uBAEJ,OAAOgD,EAAa9lE,MAAM9C,KAAM+C,YAI7B,SAASinE,EAAkCvtE,GAIhDA,EAAO0jE,kBAAkB5hE,UAAU0rE,gBACjC,WAEE,OADAjqE,KAAKkqE,qBAAuBlqE,KAAKkqE,sBAAwB,GAClD5rE,OAAOmE,KAAKzC,KAAKkqE,sBACrB79D,KAAI89D,GAAYnqE,KAAKkqE,qBAAqBC,GAAU,MAG3D,MAAMnC,EAAevrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SACxDj1B,EAAO0jE,kBAAkB5hE,UAAUmzB,SACjC,SAAkBd,EAAO/jB,GACvB,IAAKA,EACH,OAAOm7D,EAAallE,MAAM9C,KAAM+C,WAElC/C,KAAKkqE,qBAAuBlqE,KAAKkqE,sBAAwB,GAEzD,MAAMjC,EAASD,EAAallE,MAAM9C,KAAM+C,WAMxC,OALK/C,KAAKkqE,qBAAqBr9D,EAAO7F,KAE+B,IAA1DhH,KAAKkqE,qBAAqBr9D,EAAO7F,IAAI7B,QAAQ8iE,IACtDjoE,KAAKkqE,qBAAqBr9D,EAAO7F,IAAI9C,KAAK+jE,GAF1CjoE,KAAKkqE,qBAAqBr9D,EAAO7F,IAAM,CAAC6F,EAAQo7D,GAI3CA,GAGX,MAAMG,EAAgB3rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UACzD5rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UAAY,SAAmBx7D,GAChE7M,KAAKkqE,qBAAuBlqE,KAAKkqE,sBAAwB,GAEzDr9D,EAAO84D,YAAYhjE,SAAQiuB,IAEzB,GADsB5wB,KAAK8nE,aAAax4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,IAE5D,MAAM,IAAIg1C,aAAa,wBACnB,yBAGR,MAAMwE,EAAkBpqE,KAAK8nE,aAC7BM,EAActlE,MAAM9C,KAAM+C,WAC1B,MAAMsnE,EAAarqE,KAAK8nE,aACrBl8D,QAAO0+D,IAAqD,IAAxCF,EAAgBjlE,QAAQmlE,KAC/CtqE,KAAKkqE,qBAAqBr9D,EAAO7F,IAAM,CAAC6F,GAAQnG,OAAO2jE,IAGzD,MAAM/B,EAAmB7rE,EAAO0jE,kBAAkB5hE,UAAUgqE,aAC5D9rE,EAAO0jE,kBAAkB5hE,UAAUgqE,aACjC,SAAsB17D,GAGpB,OAFA7M,KAAKkqE,qBAAuBlqE,KAAKkqE,sBAAwB,UAClDlqE,KAAKkqE,qBAAqBr9D,EAAO7F,IACjCshE,EAAiBxlE,MAAM9C,KAAM+C,YAGxC,MAAMmlE,EAAkBzrE,EAAO0jE,kBAAkB5hE,UAAU+zB,YAC3D71B,EAAO0jE,kBAAkB5hE,UAAU+zB,YACjC,SAAqB21C,GAanB,OAZAjoE,KAAKkqE,qBAAuBlqE,KAAKkqE,sBAAwB,GACrDjC,GACF3pE,OAAOmE,KAAKzC,KAAKkqE,sBAAsBvnE,SAAQwnE,IAC7C,MAAMhC,EAAMnoE,KAAKkqE,qBAAqBC,GAAUhlE,QAAQ8iE,IAC3C,IAATE,GACFnoE,KAAKkqE,qBAAqBC,GAAU7kE,OAAO6iE,EAAK,GAEC,IAA/CnoE,KAAKkqE,qBAAqBC,GAAU5qE,eAC/BS,KAAKkqE,qBAAqBC,MAIhCjC,EAAgBplE,MAAM9C,KAAM+C,YAIlC,SAASwnE,EAAwB9tE,EAAQomE,GAC9C,IAAKpmE,EAAO0jE,kBACV,OAGF,GAAI1jE,EAAO0jE,kBAAkB5hE,UAAUmzB,UACnCmxC,EAAen1D,SAAW,GAC5B,OAAOs8D,EAAkCvtE,GAK3C,MAAM+tE,EAAsB/tE,EAAO0jE,kBAAkB5hE,UAChD0rE,gBACLxtE,EAAO0jE,kBAAkB5hE,UAAU0rE,gBACjC,WACE,MAAMQ,EAAgBD,EAAoB1nE,MAAM9C,MAEhD,OADAA,KAAK0qE,gBAAkB1qE,KAAK0qE,iBAAmB,GACxCD,EAAcp+D,KAAIQ,GAAU7M,KAAK0qE,gBAAgB79D,EAAO7F,OAGnE,MAAMohE,EAAgB3rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UACzD5rE,EAAO0jE,kBAAkB5hE,UAAU8pE,UAAY,SAAmBx7D,GAahE,GAZA7M,KAAK2qE,SAAW3qE,KAAK2qE,UAAY,GACjC3qE,KAAK0qE,gBAAkB1qE,KAAK0qE,iBAAmB,GAE/C79D,EAAO84D,YAAYhjE,SAAQiuB,IAEzB,GADsB5wB,KAAK8nE,aAAax4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,IAE5D,MAAM,IAAIg1C,aAAa,wBACnB,0BAKH5lE,KAAK0qE,gBAAgB79D,EAAO7F,IAAK,CACpC,MAAM4jE,EAAY,IAAInuE,EAAOu1B,YAAYnlB,EAAO84D,aAChD3lE,KAAK2qE,SAAS99D,EAAO7F,IAAM4jE,EAC3B5qE,KAAK0qE,gBAAgBE,EAAU5jE,IAAM6F,EACrCA,EAAS+9D,EAEXxC,EAActlE,MAAM9C,KAAM,CAAC6M,KAG7B,MAAMy7D,EAAmB7rE,EAAO0jE,kBAAkB5hE,UAAUgqE,aA6D5D,SAASsC,EAAwBpD,EAAI1vB,GACnC,IAAItsC,EAAMssC,EAAYtsC,IAOtB,OANAnN,OAAOmE,KAAKglE,EAAGiD,iBAAmB,IAAI/nE,SAAQmoE,IAC5C,MAAMC,EAAiBtD,EAAGiD,gBAAgBI,GACpCE,EAAiBvD,EAAGkD,SAASI,EAAe/jE,IAClDyE,EAAMA,EAAIyB,QAAQ,IAAItD,OAAOohE,EAAehkE,GAAI,KAC5C+jE,EAAe/jE,OAEd,IAAI2L,sBAAsB,CAC/BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAAA,IAGJ,SAASw/D,EAAwBxD,EAAI1vB,GACnC,IAAItsC,EAAMssC,EAAYtsC,IAOtB,OANAnN,OAAOmE,KAAKglE,EAAGiD,iBAAmB,IAAI/nE,SAAQmoE,IAC5C,MAAMC,EAAiBtD,EAAGiD,gBAAgBI,GACpCE,EAAiBvD,EAAGkD,SAASI,EAAe/jE,IAClDyE,EAAMA,EAAIyB,QAAQ,IAAItD,OAAOmhE,EAAe/jE,GAAI,KAC5CgkE,EAAehkE,OAEd,IAAI2L,sBAAsB,CAC/BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAAA,IAnFJhP,EAAO0jE,kBAAkB5hE,UAAUgqE,aACjC,SAAsB17D,GACpB7M,KAAK2qE,SAAW3qE,KAAK2qE,UAAY,GACjC3qE,KAAK0qE,gBAAkB1qE,KAAK0qE,iBAAmB,GAE/CpC,EAAiBxlE,MAAM9C,KAAM,CAAEA,KAAK2qE,SAAS99D,EAAO7F,KAAO6F,WACpD7M,KAAK0qE,gBAAiB1qE,KAAK2qE,SAAS99D,EAAO7F,IAC9ChH,KAAK2qE,SAAS99D,EAAO7F,IAAIA,GAAK6F,EAAO7F,WAClChH,KAAK2qE,SAAS99D,EAAO7F,KAGhCvK,EAAO0jE,kBAAkB5hE,UAAUmzB,SACjC,SAAkBd,EAAO/jB,GACvB,GAA4B,WAAxB7M,KAAKkrE,eACP,MAAM,IAAItF,aACR,sDACA,qBAEJ,MAAMyB,EAAU,GAAG9gE,MAAM9H,KAAKsE,UAAW,GACzC,GAAuB,IAAnBskE,EAAQ9nE,SACP8nE,EAAQ,GAAG1B,YAAYr2D,MAAK3I,GAAKA,IAAMiqB,IAG1C,MAAM,IAAIg1C,aACR,gHAEA,qBAGJ,MAAMuF,EAAgBnrE,KAAK8nE,aAAax4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,IAC9D,GAAIu6C,EACF,MAAM,IAAIvF,aAAa,wBACnB,sBAGN5lE,KAAK2qE,SAAW3qE,KAAK2qE,UAAY,GACjC3qE,KAAK0qE,gBAAkB1qE,KAAK0qE,iBAAmB,GAC/C,MAAMU,EAAYprE,KAAK2qE,SAAS99D,EAAO7F,IACvC,GAAIokE,EAKFA,EAAU15C,SAASd,GAGnBpG,QAAQC,UAAU05C,MAAK,KACrBnkE,KAAKsnE,cAAc,IAAIH,MAAM,6BAE1B,CACL,MAAMyD,EAAY,IAAInuE,EAAOu1B,YAAY,CAACpB,IAC1C5wB,KAAK2qE,SAAS99D,EAAO7F,IAAM4jE,EAC3B5qE,KAAK0qE,gBAAgBE,EAAU5jE,IAAM6F,EACrC7M,KAAKqoE,UAAUuC,GAEjB,OAAO5qE,KAAK8nE,aAAax4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,KA+BnD,CAAC,cAAe,gBAAgBjuB,SAAQ,SAASxD,GAC/C,MAAMksE,EAAe5uE,EAAO0jE,kBAAkB5hE,UAAUY,GAClDmsE,EAAY,CAAC,CAACnsE,KAClB,MAAMmH,EAAOvD,UAGb,OAFqBA,UAAUxD,QACH,mBAAjBwD,UAAU,GAEZsoE,EAAavoE,MAAM9C,KAAM,CAC7B+3C,IACC,MAAM/oC,EAAO67D,EAAwB7qE,KAAM+3C,GAC3CzxC,EAAK,GAAGxD,MAAM,KAAM,CAACkM,KAEtBoF,IACK9N,EAAK,IACPA,EAAK,GAAGxD,MAAM,KAAMsR,IAErBrR,UAAU,KAGVsoE,EAAavoE,MAAM9C,KAAM+C,WAC/BohE,MAAKpsB,GAAe8yB,EAAwB7qE,KAAM+3C,OAErDt7C,EAAO0jE,kBAAkB5hE,UAAUY,GAAUmsE,EAAUnsE,MAGzD,MAAMosE,EACF9uE,EAAO0jE,kBAAkB5hE,UAAUitE,oBACvC/uE,EAAO0jE,kBAAkB5hE,UAAUitE,oBACjC,WACE,OAAKzoE,UAAUxD,QAAWwD,UAAU,GAAGvD,MAGvCuD,UAAU,GAAKkoE,EAAwBjrE,KAAM+C,UAAU,IAChDwoE,EAAwBzoE,MAAM9C,KAAM+C,YAHlCwoE,EAAwBzoE,MAAM9C,KAAM+C,YAQjD,MAAM0oE,EAAuBntE,OAAOotE,yBAChCjvE,EAAO0jE,kBAAkB5hE,UAAW,oBACxCD,OAAO+f,eAAe5hB,EAAO0jE,kBAAkB5hE,UAC3C,mBAAoB,CAClBggB,MACE,MAAMw5B,EAAc0zB,EAAqBltD,IAAIzb,MAAM9C,MACnD,MAAyB,KAArB+3C,EAAYv4C,KACPu4C,EAEF8yB,EAAwB7qE,KAAM+3C,MAI7Ct7C,EAAO0jE,kBAAkB5hE,UAAU+zB,YACjC,SAAqB21C,GACnB,GAA4B,WAAxBjoE,KAAKkrE,eACP,MAAM,IAAItF,aACR,sDACA,qBAIJ,IAAKqC,EAAOJ,IACV,MAAM,IAAIjC,aAAa,yFAC2B,aAGpD,GADgBqC,EAAOJ,MAAQ7nE,KAE7B,MAAM,IAAI4lE,aAAa,6CACnB,sBAKN,IAAI/4D,EADJ7M,KAAK2qE,SAAW3qE,KAAK2qE,UAAY,GAEjCrsE,OAAOmE,KAAKzC,KAAK2qE,UAAUhoE,SAAQgpE,IAChB3rE,KAAK2qE,SAASgB,GAAUhG,YACtCr2D,MAAKshB,GAASq3C,EAAOr3C,QAAUA,MAEhC/jB,EAAS7M,KAAK2qE,SAASgB,OAIvB9+D,IACgC,IAA9BA,EAAO84D,YAAYpmE,OAGrBS,KAAKuoE,aAAavoE,KAAK0qE,gBAAgB79D,EAAO7F,KAG9C6F,EAAOylB,YAAY21C,EAAOr3C,OAE5B5wB,KAAKsnE,cAAc,IAAIH,MAAM,wBAK9B,SAASyE,EAAmBnvE,EAAQomE,IACpCpmE,EAAO0jE,mBAAqB1jE,EAAO+kE,0BAEtC/kE,EAAO0jE,kBAAoB1jE,EAAO+kE,yBAE/B/kE,EAAO0jE,mBAKR0C,EAAen1D,QAAU,IAC3B,CAAC,sBAAuB,uBAAwB,mBAC3C/K,SAAQ,SAASxD,GAChB,MAAMksE,EAAe5uE,EAAO0jE,kBAAkB5hE,UAAUY,GAClDmsE,EAAY,CAAC,CAACnsE,KAIlB,OAHA4D,UAAU,GAAK,IAAiB,oBAAX5D,EACjB1C,EAAOovE,gBACPpvE,EAAOkW,uBAAuB5P,UAAU,IACrCsoE,EAAavoE,MAAM9C,KAAM+C,aAElCtG,EAAO0jE,kBAAkB5hE,UAAUY,GAAUmsE,EAAUnsE,MAM1D,SAAS2sE,EAAqBrvE,EAAQomE,GAC3C7jB,EAA8BviD,EAAQ,qBAAqBgM,IACzD,MAAMg/D,EAAKh/D,EAAEohB,OACb,KAAIg5C,EAAen1D,QAAU,IAAO+5D,EAAGsE,kBACI,WAAvCtE,EAAGsE,mBAAmBC,eACE,WAAtBvE,EAAGyD,eAIT,OAAOziE,KC/qBJ,SAASm6D,EAAiBnmE,EAAQomE,GACvC,MAAM1B,EAAY1kE,GAAUA,EAAO0kE,UAC7B4I,EAAmBttE,GAAUA,EAAOstE,iBAS1C,GAPA5I,EAAUmE,aAAe,SAAS5B,EAAa7Q,EAAW0S,GAExDvmB,EAAiB,yBACb,uCACJmiB,EAAU2B,aAAawC,aAAa5B,GAAaS,KAAKtR,EAAW0S,MAG7D1C,EAAen1D,QAAU,IAC3B,oBAAqByzD,EAAU2B,aAAamB,2BAA4B,CAC1E,MAAML,EAAQ,SAASvlE,EAAK6C,EAAGC,GACzBD,KAAK7C,KAAS8C,KAAK9C,KACrBA,EAAI8C,GAAK9C,EAAI6C,UACN7C,EAAI6C,KAIT+qE,EAAqB9K,EAAU2B,aAAawC,aAC9CtiE,KAAKm+D,EAAU2B,cAUnB,GATA3B,EAAU2B,aAAawC,aAAe,SAASlkE,GAM7C,MALiB,iBAANA,GAAqC,iBAAZA,EAAEuiE,QACpCviE,EAAImC,KAAK+G,MAAM/G,KAAKF,UAAUjC,IAC9BwiE,EAAMxiE,EAAEuiE,MAAO,kBAAmB,sBAClCC,EAAMxiE,EAAEuiE,MAAO,mBAAoB,wBAE9BsI,EAAmB7qE,IAGxB2oE,GAAoBA,EAAiBxrE,UAAU2tE,YAAa,CAC9D,MAAMC,EAAoBpC,EAAiBxrE,UAAU2tE,YACrDnC,EAAiBxrE,UAAU2tE,YAAc,WACvC,MAAM7tE,EAAM8tE,EAAkBrpE,MAAM9C,KAAM+C,WAG1C,OAFA6gE,EAAMvlE,EAAK,qBAAsB,mBACjCulE,EAAMvlE,EAAK,sBAAuB,oBAC3BA,GAIX,GAAI0rE,GAAoBA,EAAiBxrE,UAAU6tE,iBAAkB,CACnE,MAAMC,EACJtC,EAAiBxrE,UAAU6tE,iBAC7BrC,EAAiBxrE,UAAU6tE,iBAAmB,SAAShrE,GAMrD,MALkB,UAAdpB,KAAKw4C,MAAiC,iBAANp3C,IAClCA,EAAImC,KAAK+G,MAAM/G,KAAKF,UAAUjC,IAC9BwiE,EAAMxiE,EAAG,kBAAmB,sBAC5BwiE,EAAMxiE,EAAG,mBAAoB,wBAExBirE,EAAuBvpE,MAAM9C,KAAM,CAACoB,OCpD5C,SAASykE,EAAoBppE,EAAQ6vE,GACtC7vE,EAAO0kE,UAAU2B,cACnB,oBAAqBrmE,EAAO0kE,UAAU2B,cAGlCrmE,EAAO0kE,UAAU2B,eAGvBrmE,EAAO0kE,UAAU2B,aAAaiD,gBAC5B,SAAyBrC,GACvB,IAAMA,IAAeA,EAAYG,MAAQ,CACvC,MAAMzvD,EAAM,IAAIwxD,aAAa,0DAK7B,OAHAxxD,EAAIlM,KAAO,gBAEXkM,EAAIxT,KAAO,EACJ4pB,QAAQpU,OAAOhC,GAOxB,OAL0B,IAAtBsvD,EAAYG,MACdH,EAAYG,MAAQ,CAAC0I,YAAaD,GAElC5I,EAAYG,MAAM0I,YAAcD,EAE3B7vE,EAAO0kE,UAAU2B,aAAawC,aAAa5B,KCnBjD,SAASkD,EAAYnqE,GACJ,iBAAXA,GAAuBA,EAAO+vE,eACpC,aAAc/vE,EAAO+vE,cAAcjuE,aAClC,gBAAiB9B,EAAO+vE,cAAcjuE,YAC1CD,OAAO+f,eAAe5hB,EAAO+vE,cAAcjuE,UAAW,cAAe,CACnEggB,MACE,MAAO,CAACuL,SAAU9pB,KAAK8pB,aAMxB,SAAS8hD,EAAmBnvE,EAAQomE,GACzC,GAAsB,iBAAXpmE,IACLA,EAAO0jE,oBAAqB1jE,EAAOgwE,qBACvC,QAEGhwE,EAAO0jE,mBAAqB1jE,EAAOgwE,uBAEtChwE,EAAO0jE,kBAAoB1jE,EAAOgwE,sBAGhC5J,EAAen1D,QAAU,IAE3B,CAAC,sBAAuB,uBAAwB,mBAC3C/K,SAAQ,SAASxD,GAChB,MAAMksE,EAAe5uE,EAAO0jE,kBAAkB5hE,UAAUY,GAClDmsE,EAAY,CAAC,CAACnsE,KAIlB,OAHA4D,UAAU,GAAK,IAAiB,oBAAX5D,EACjB1C,EAAOovE,gBACPpvE,EAAOkW,uBAAuB5P,UAAU,IACrCsoE,EAAavoE,MAAM9C,KAAM+C,aAElCtG,EAAO0jE,kBAAkB5hE,UAAUY,GAAUmsE,EAAUnsE,MAI/D,MAAMutE,EAAmB,CACvBC,WAAY,cACZC,YAAa,eACbC,cAAe,iBACfxD,eAAgB,kBAChBC,gBAAiB,oBAGbwD,EAAiBrwE,EAAO0jE,kBAAkB5hE,UAAUsqE,SAC1DpsE,EAAO0jE,kBAAkB5hE,UAAUsqE,SAAW,WAC5C,MAAOC,EAAUC,EAAQC,GAASjmE,UAClC,OAAO+pE,EAAehqE,MAAM9C,KAAM,CAAC8oE,GAAY,OAC5C3E,MAAKnC,IACJ,GAAIa,EAAen1D,QAAU,KAAOq7D,EAGlC,IACE/G,EAAMr/D,SAAQ4mE,IACZA,EAAK/pE,KAAOktE,EAAiBnD,EAAK/pE,OAAS+pE,EAAK/pE,QAElD,MAAOiJ,GACP,GAAe,cAAXA,EAAEP,KACJ,MAAMO,EAGRu5D,EAAMr/D,SAAQ,CAAC4mE,EAAMjqE,KACnB0iE,EAAM70C,IAAI7tB,EAAGhB,OAAOmoB,OAAO,GAAI8iD,EAAM,CACnC/pE,KAAMktE,EAAiBnD,EAAK/pE,OAAS+pE,EAAK/pE,WAKlD,OAAOwiE,KAERmC,KAAK4E,EAAQC,IAIb,SAAS+D,EAAmBtwE,GACjC,GAAwB,iBAAXA,IAAuBA,EAAO0jE,oBACvC1jE,EAAO+rE,aACT,OAEF,GAAI/rE,EAAO+rE,cAAgB,aAAc/rE,EAAO+rE,aAAajqE,UAC3D,OAEF,MAAMkqE,EAAiBhsE,EAAO0jE,kBAAkB5hE,UAAUupE,WACtDW,IACFhsE,EAAO0jE,kBAAkB5hE,UAAUupE,WAAa,WAC9C,MAAMY,EAAUD,EAAe3lE,MAAM9C,KAAM,IAE3C,OADA0oE,EAAQ/lE,SAAQslE,GAAUA,EAAOJ,IAAM7nE,OAChC0oE,IAIX,MAAMV,EAAevrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SACpDs2C,IACFvrE,EAAO0jE,kBAAkB5hE,UAAUmzB,SAAW,WAC5C,MAAMu2C,EAASD,EAAallE,MAAM9C,KAAM+C,WAExC,OADAklE,EAAOJ,IAAM7nE,KACNioE,IAGXxrE,EAAO+rE,aAAajqE,UAAUsqE,SAAW,WACvC,OAAO7oE,KAAK4wB,MAAQ5wB,KAAK6nE,IAAIgB,SAAS7oE,KAAK4wB,OACvCpG,QAAQC,QAAQ,IAAI6c,MAIrB,SAAS0lC,EAAqBvwE,GACnC,GAAwB,iBAAXA,IAAuBA,EAAO0jE,oBACvC1jE,EAAO+rE,aACT,OAEF,GAAI/rE,EAAO+rE,cAAgB,aAAc/rE,EAAOktE,eAAeprE,UAC7D,OAEF,MAAMqrE,EAAmBntE,EAAO0jE,kBAAkB5hE,UAAU2oE,aACxD0C,IACFntE,EAAO0jE,kBAAkB5hE,UAAU2oE,aAAe,WAChD,MAAM2C,EAAYD,EAAiB9mE,MAAM9C,KAAM,IAE/C,OADA6pE,EAAUlnE,SAAQmnB,GAAYA,EAAS+9C,IAAM7nE,OACtC6pE,IAGX7qB,EAA8BviD,EAAQ,SAASgM,IAC7CA,EAAEqhB,SAAS+9C,IAAMp/D,EAAEqhE,WACZrhE,KAEThM,EAAOktE,eAAeprE,UAAUsqE,SAAW,WACzC,OAAO7oE,KAAK6nE,IAAIgB,SAAS7oE,KAAK4wB,QAI3B,SAASq8C,EAAiBxwE,GAC1BA,EAAO0jE,qBACR,iBAAkB1jE,EAAO0jE,kBAAkB5hE,aAG/C9B,EAAO0jE,kBAAkB5hE,UAAUgqE,aACjC,SAAsB17D,GACpBmyC,EAAiB,eAAgB,eACjCh/C,KAAK8nE,aAAanlE,SAAQslE,IACpBA,EAAOr3C,OAAS/jB,EAAO84D,YAAYpvC,SAAS0xC,EAAOr3C,QACrD5wB,KAAKsyB,YAAY21C,QAMpB,SAASiF,EAAmBzwE,GAG7BA,EAAO0wE,cAAgB1wE,EAAO2wE,iBAChC3wE,EAAO2wE,eAAiB3wE,EAAO0wE,aAI5B,SAASE,EAAmB5wE,GAIjC,GAAwB,iBAAXA,IAAuBA,EAAO0jE,kBACzC,OAEF,MAAMmN,EAAqB7wE,EAAO0jE,kBAAkB5hE,UAAUgvE,eAC1DD,IACF7wE,EAAO0jE,kBAAkB5hE,UAAUgvE,eACjC,WACEvtE,KAAKwtE,sBAAwB,GAC7B,MAAMC,EAAiB1qE,UAAU,GAC3B2qE,EAAqBD,GACD,kBAAmBA,EACzCC,GAEFD,EAAeE,cAAchrE,SAASirE,IACpC,GAAI,QAASA,IACM,oBACHpiE,KAAKoiE,EAAc/gB,KAC/B,MAAM,IAAIvhC,UAAU,+BAGxB,GAAI,0BAA2BsiD,KACvBC,WAAWD,EAAcE,wBAA0B,GACvD,MAAM,IAAI1gD,WAAW,2CAGzB,GAAI,iBAAkBwgD,KACdC,WAAWD,EAAcG,eAAiB,GAC9C,MAAM,IAAI3gD,WAAW,mCAK7B,MAAMg6C,EAAckG,EAAmBxqE,MAAM9C,KAAM+C,WACnD,GAAI2qE,EAAoB,CAQtB,MAAM,OAACzF,GAAUb,EACXz9D,EAASs+D,EAAO+F,mBAChB,cAAerkE,IAEY,IAA5BA,EAAOskE,UAAU1uE,QAC2B,IAA5CjB,OAAOmE,KAAKkH,EAAOskE,UAAU,IAAI1uE,UACpCoK,EAAOskE,UAAYR,EAAeE,cAClC1F,EAAO0F,cAAgBF,EAAeE,cACtC3tE,KAAKwtE,sBAAsBtpE,KAAK+jE,EAAOiG,cAAcvkE,GAClDw6D,MAAK,YACG8D,EAAO0F,iBACbQ,OAAM,YACAlG,EAAO0F,mBAKtB,OAAOvG,IAKR,SAASgH,EAAkB3xE,GAChC,GAAwB,iBAAXA,IAAuBA,EAAO+rE,aACzC,OAEF,MAAM6F,EAAoB5xE,EAAO+rE,aAAajqE,UAAUyvE,cACpDK,IACF5xE,EAAO+rE,aAAajqE,UAAUyvE,cAC5B,WACE,MAAMrkE,EAAS0kE,EAAkBvrE,MAAM9C,KAAM+C,WAI7C,MAHM,cAAe4G,IACnBA,EAAOskE,UAAY,GAAGvnE,OAAO1G,KAAK2tE,eAAiB,CAAC,MAE/ChkE,IAKR,SAAS2kE,EAAgB7xE,GAI9B,GAAwB,iBAAXA,IAAuBA,EAAO0jE,kBACzC,OAEF,MAAMoO,EAAkB9xE,EAAO0jE,kBAAkB5hE,UAAUiwE,YAC3D/xE,EAAO0jE,kBAAkB5hE,UAAUiwE,YAAc,WAC/C,OAAIxuE,KAAKwtE,uBAAyBxtE,KAAKwtE,sBAAsBjuE,OACpDirB,QAAQ3T,IAAI7W,KAAKwtE,uBACvBrJ,MAAK,IACGoK,EAAgBzrE,MAAM9C,KAAM+C,aAEpC0rE,SAAQ,KACPzuE,KAAKwtE,sBAAwB,MAG1Be,EAAgBzrE,MAAM9C,KAAM+C,YAIhC,SAAS2rE,EAAiBjyE,GAI/B,GAAwB,iBAAXA,IAAuBA,EAAO0jE,kBACzC,OAEF,MAAMwO,EAAmBlyE,EAAO0jE,kBAAkB5hE,UAAUqwE,aAC5DnyE,EAAO0jE,kBAAkB5hE,UAAUqwE,aAAe,WAChD,OAAI5uE,KAAKwtE,uBAAyBxtE,KAAKwtE,sBAAsBjuE,OACpDirB,QAAQ3T,IAAI7W,KAAKwtE,uBACvBrJ,MAAK,IACGwK,EAAiB7rE,MAAM9C,KAAM+C,aAErC0rE,SAAQ,KACPzuE,KAAKwtE,sBAAwB,MAG1BmB,EAAiB7rE,MAAM9C,KAAM+C,YC3RjC,SAAS8rE,EAAoBpyE,GAClC,GAAsB,iBAAXA,GAAwBA,EAAO0jE,kBAA1C,CAYA,GATM,oBAAqB1jE,EAAO0jE,kBAAkB5hE,YAClD9B,EAAO0jE,kBAAkB5hE,UAAU0rE,gBACjC,WAIE,OAHKjqE,KAAK8uE,gBACR9uE,KAAK8uE,cAAgB,IAEhB9uE,KAAK8uE,kBAGZ,cAAeryE,EAAO0jE,kBAAkB5hE,WAAY,CACxD,MAAMwwE,EAAYtyE,EAAO0jE,kBAAkB5hE,UAAUmzB,SACrDj1B,EAAO0jE,kBAAkB5hE,UAAU8pE,UAAY,SAAmBx7D,GAC3D7M,KAAK8uE,gBACR9uE,KAAK8uE,cAAgB,IAElB9uE,KAAK8uE,cAAcv4C,SAAS1pB,IAC/B7M,KAAK8uE,cAAc5qE,KAAK2I,GAI1BA,EAAOolB,iBAAiBtvB,SAAQiuB,GAASm+C,EAAUtwE,KAAKuB,KAAM4wB,EAC5D/jB,KACFA,EAAO64D,iBAAiB/iE,SAAQiuB,GAASm+C,EAAUtwE,KAAKuB,KAAM4wB,EAC5D/jB,MAGJpQ,EAAO0jE,kBAAkB5hE,UAAUmzB,SACjC,SAAkBd,GAAmB,2BAATy2C,EAAS,iCAATA,EAAS,kBAUnC,OATIA,GACFA,EAAQ1kE,SAASkK,IACV7M,KAAK8uE,cAEE9uE,KAAK8uE,cAAcv4C,SAAS1pB,IACtC7M,KAAK8uE,cAAc5qE,KAAK2I,GAFxB7M,KAAK8uE,cAAgB,CAACjiE,MAMrBkiE,EAAUjsE,MAAM9C,KAAM+C,YAG7B,iBAAkBtG,EAAO0jE,kBAAkB5hE,YAC/C9B,EAAO0jE,kBAAkB5hE,UAAUgqE,aACjC,SAAsB17D,GACf7M,KAAK8uE,gBACR9uE,KAAK8uE,cAAgB,IAEvB,MAAMjuE,EAAQb,KAAK8uE,cAAc3pE,QAAQ0H,GACzC,IAAe,IAAXhM,EACF,OAEFb,KAAK8uE,cAAcxpE,OAAOzE,EAAO,GACjC,MAAMmuE,EAASniE,EAAO84D,YACtB3lE,KAAK8nE,aAAanlE,SAAQslE,IACpB+G,EAAOz4C,SAAS0xC,EAAOr3C,QACzB5wB,KAAKsyB,YAAY21C,SAOtB,SAASgH,EAAqBxyE,GACnC,GAAsB,iBAAXA,GAAwBA,EAAO0jE,oBAGpC,qBAAsB1jE,EAAO0jE,kBAAkB5hE,YACnD9B,EAAO0jE,kBAAkB5hE,UAAU2wE,iBACjC,WACE,OAAOlvE,KAAKmvE,eAAiBnvE,KAAKmvE,eAAiB,OAGnD,gBAAiB1yE,EAAO0jE,kBAAkB5hE,YAAY,CAC1DD,OAAO+f,eAAe5hB,EAAO0jE,kBAAkB5hE,UAAW,cAAe,CACvEggB,MACE,OAAOve,KAAKovE,cAEdjiD,IAAItG,GACE7mB,KAAKovE,eACPpvE,KAAKktB,oBAAoB,YAAaltB,KAAKovE,cAC3CpvE,KAAKktB,oBAAoB,QAASltB,KAAKqvE,mBAEzCrvE,KAAKgtB,iBAAiB,YAAahtB,KAAKovE,aAAevoD,GACvD7mB,KAAKgtB,iBAAiB,QAAShtB,KAAKqvE,iBAAoB5mE,IACtDA,EAAE4+D,QAAQ1kE,SAAQkK,IAIhB,GAHK7M,KAAKmvE,iBACRnvE,KAAKmvE,eAAiB,IAEpBnvE,KAAKmvE,eAAe54C,SAAS1pB,GAC/B,OAEF7M,KAAKmvE,eAAejrE,KAAK2I,GACzB,MAAMwrB,EAAQ,IAAI8uC,MAAM,aACxB9uC,EAAMxrB,OAASA,EACf7M,KAAKsnE,cAAcjvC,WAK3B,MAAMyuC,EACJrqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACrCtqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACjC,WACE,MAAMU,EAAKznE,KAiBX,OAhBKA,KAAKqvE,kBACRrvE,KAAKgtB,iBAAiB,QAAShtB,KAAKqvE,iBAAmB,SAAS5mE,GAC9DA,EAAE4+D,QAAQ1kE,SAAQkK,IAIhB,GAHK46D,EAAG0H,iBACN1H,EAAG0H,eAAiB,IAElB1H,EAAG0H,eAAehqE,QAAQ0H,IAAW,EACvC,OAEF46D,EAAG0H,eAAejrE,KAAK2I,GACvB,MAAMwrB,EAAQ,IAAI8uC,MAAM,aACxB9uC,EAAMxrB,OAASA,EACf46D,EAAGH,cAAcjvC,QAIhByuC,EAAyBhkE,MAAM2kE,EAAI1kE,aAK3C,SAASusE,EAAiB7yE,GAC/B,GAAsB,iBAAXA,IAAwBA,EAAO0jE,kBACxC,OAEF,MAAM5hE,EAAY9B,EAAO0jE,kBAAkB5hE,UACrCgwE,EAAkBhwE,EAAUiwE,YAC5BG,EAAmBpwE,EAAUqwE,aAC7BpD,EAAsBjtE,EAAUitE,oBAChCzE,EAAuBxoE,EAAUwoE,qBACjCwI,EAAkBhxE,EAAUgxE,gBAElChxE,EAAUiwE,YACR,SAAqBgB,EAAiBC,GACpC,MAAMptE,EAAWU,UAAUxD,QAAU,EAAKwD,UAAU,GAAKA,UAAU,GAC7D2sE,EAAUnB,EAAgBzrE,MAAM9C,KAAM,CAACqC,IAC7C,OAAKotE,GAGLC,EAAQvL,KAAKqL,EAAiBC,GACvBjlD,QAAQC,WAHNilD,GAMbnxE,EAAUqwE,aACR,SAAsBY,EAAiBC,GACrC,MAAMptE,EAAWU,UAAUxD,QAAU,EAAKwD,UAAU,GAAKA,UAAU,GAC7D2sE,EAAUf,EAAiB7rE,MAAM9C,KAAM,CAACqC,IAC9C,OAAKotE,GAGLC,EAAQvL,KAAKqL,EAAiBC,GACvBjlD,QAAQC,WAHNilD,GAMb,IAAIC,EAAe,SAAS53B,EAAay3B,EAAiBC,GACxD,MAAMC,EAAUlE,EAAoB1oE,MAAM9C,KAAM,CAAC+3C,IACjD,OAAK03B,GAGLC,EAAQvL,KAAKqL,EAAiBC,GACvBjlD,QAAQC,WAHNilD,GAKXnxE,EAAUitE,oBAAsBmE,EAEhCA,EAAe,SAAS53B,EAAay3B,EAAiBC,GACpD,MAAMC,EAAU3I,EAAqBjkE,MAAM9C,KAAM,CAAC+3C,IAClD,OAAK03B,GAGLC,EAAQvL,KAAKqL,EAAiBC,GACvBjlD,QAAQC,WAHNilD,GAKXnxE,EAAUwoE,qBAAuB4I,EAEjCA,EAAe,SAASn8B,EAAWg8B,EAAiBC,GAClD,MAAMC,EAAUH,EAAgBzsE,MAAM9C,KAAM,CAACwzC,IAC7C,OAAKi8B,GAGLC,EAAQvL,KAAKqL,EAAiBC,GACvBjlD,QAAQC,WAHNilD,GAKXnxE,EAAUgxE,gBAAkBI,EAGvB,SAAS/M,EAAiBnmE,GAC/B,MAAM0kE,EAAY1kE,GAAUA,EAAO0kE,UAEnC,GAAIA,EAAU2B,cAAgB3B,EAAU2B,aAAawC,aAAc,CAEjE,MAAMxC,EAAe3B,EAAU2B,aACzB8M,EAAgB9M,EAAawC,aAAatiE,KAAK8/D,GACrD3B,EAAU2B,aAAawC,aAAgB5B,GAC9BkM,EAAcC,EAAgBnM,KAIpCvC,EAAUmE,cAAgBnE,EAAU2B,cACvC3B,EAAU2B,aAAawC,eACvBnE,EAAUmE,aAAe,SAAsB5B,EAAapqD,EAAIw2D,GAC9D3O,EAAU2B,aAAawC,aAAa5B,GACnCS,KAAK7qD,EAAIw2D,IACV9sE,KAAKm+D,IAIJ,SAAS0O,EAAgBnM,GAC9B,OAAIA,QAAqCv3D,IAAtBu3D,EAAYG,MACtBvlE,OAAOmoB,OAAO,GACnBi9C,EACA,CAACG,MAAO7kB,EAAoB0kB,EAAYG,SAIrCH,EAGF,SAASqM,EAAqBtzE,GACnC,IAAKA,EAAO0jE,kBACV,OAGF,MAAM6P,EAAqBvzE,EAAO0jE,kBAClC1jE,EAAO0jE,kBACL,SAA2B8P,EAAUC,GACnC,GAAID,GAAYA,EAASE,WAAY,CACnC,MAAMC,EAAgB,GACtB,IAAK,IAAI9wE,EAAI,EAAGA,EAAI2wE,EAASE,WAAW5wE,OAAQD,IAAK,CACnD,IAAI+wE,EAASJ,EAASE,WAAW7wE,IAC5B+wE,EAAOx8D,eAAe,SACvBw8D,EAAOx8D,eAAe,QACxBmrC,EAAiB,mBAAoB,qBACrCqxB,EAAS9sE,KAAK+G,MAAM/G,KAAKF,UAAUgtE,IACnCA,EAAOC,KAAOD,EAAO7nD,WACd6nD,EAAO7nD,IACd4nD,EAAclsE,KAAKmsE,IAEnBD,EAAclsE,KAAK+rE,EAASE,WAAW7wE,IAG3C2wE,EAASE,WAAaC,EAExB,OAAO,IAAIJ,EAAmBC,EAAUC,IAE5CzzE,EAAO0jE,kBAAkB5hE,UAAYyxE,EAAmBzxE,UAEpD,wBAAyByxE,GAC3B1xE,OAAO+f,eAAe5hB,EAAO0jE,kBAAmB,sBAAuB,CACrE5hD,IAAG,IACMyxD,EAAmBO,sBAM3B,SAASC,EAA0B/zE,GAElB,iBAAXA,GAAuBA,EAAO+vE,eACrC,aAAc/vE,EAAO+vE,cAAcjuE,aACjC,gBAAiB9B,EAAO+vE,cAAcjuE,YAC1CD,OAAO+f,eAAe5hB,EAAO+vE,cAAcjuE,UAAW,cAAe,CACnEggB,MACE,MAAO,CAACuL,SAAU9pB,KAAK8pB,aAMxB,SAAS2mD,EAAsBh0E,GACpC,MAAM8xE,EAAkB9xE,EAAO0jE,kBAAkB5hE,UAAUiwE,YAC3D/xE,EAAO0jE,kBAAkB5hE,UAAUiwE,YACjC,SAAqBkC,GACnB,GAAIA,EAAc,MACgC,IAArCA,EAAaC,sBAEtBD,EAAaC,sBACTD,EAAaC,qBAEnB,MAAMC,EAAmB5wE,KAAK6wE,kBAAkBvhE,MAAK83D,GACf,UAApCA,EAAYt9C,SAAS8G,MAAM4nB,QACY,IAArCk4B,EAAaC,qBAAiCC,EACb,aAA/BA,EAAiB3nE,UACf2nE,EAAiBE,aACnBF,EAAiBE,aAAa,YAE9BF,EAAiB3nE,UAAY,WAES,aAA/B2nE,EAAiB3nE,YACtB2nE,EAAiBE,aACnBF,EAAiBE,aAAa,YAE9BF,EAAiB3nE,UAAY,aAGa,IAArCynE,EAAaC,qBACnBC,GACH5wE,KAAKutE,eAAe,cAG0B,IAArCmD,EAAaK,sBAEtBL,EAAaK,sBACTL,EAAaK,qBAEnB,MAAMC,EAAmBhxE,KAAK6wE,kBAAkBvhE,MAAK83D,GACf,UAApCA,EAAYt9C,SAAS8G,MAAM4nB,QACY,IAArCk4B,EAAaK,qBAAiCC,EACb,aAA/BA,EAAiB/nE,UACf+nE,EAAiBF,aACnBE,EAAiBF,aAAa,YAE9BE,EAAiB/nE,UAAY,WAES,aAA/B+nE,EAAiB/nE,YACtB+nE,EAAiBF,aACnBE,EAAiBF,aAAa,YAE9BE,EAAiB/nE,UAAY,aAGa,IAArCynE,EAAaK,qBACnBC,GACHhxE,KAAKutE,eAAe,SAGxB,OAAOgB,EAAgBzrE,MAAM9C,KAAM+C,YAIlC,SAASkuE,EAAiBx0E,GACT,iBAAXA,GAAuBA,EAAOy0E,eAGzCz0E,EAAOy0E,aAAez0E,EAAO00E,4CCjVxB,SAASC,GAAoB30E,GAGlC,IAAKA,EAAOovE,iBAAoBpvE,EAAOovE,iBAAmB,eACtDpvE,EAAOovE,gBAAgBttE,UACzB,OAGF,MAAM8yE,EAAwB50E,EAAOovE,gBACrCpvE,EAAOovE,gBAAkB,SAAyBvlE,GAQhD,GANoB,iBAATA,GAAqBA,EAAKktC,WACA,IAAjCltC,EAAKktC,UAAUruC,QAAQ,SACzBmB,EAAO/C,KAAK+G,MAAM/G,KAAKF,UAAUiD,KAC5BktC,UAAYltC,EAAKktC,UAAUttC,OAAO,IAGrCI,EAAKktC,WAAaltC,EAAKktC,UAAUj0C,OAAQ,CAE3C,MAAM+xE,EAAkB,IAAID,EAAsB/qE,GAC5CirE,EAAkB5+B,KAAAA,eAAwBrsC,EAAKktC,WAC/Cg+B,EAAqBlzE,OAAOmoB,OAAO6qD,EACrCC,GAWJ,OARAC,EAAmBC,OAAS,WAC1B,MAAO,CACLj+B,UAAWg+B,EAAmBh+B,UAC9Bk+B,OAAQF,EAAmBE,OAC3BC,cAAeH,EAAmBG,cAClC59B,iBAAkBy9B,EAAmBz9B,mBAGlCy9B,EAET,OAAO,IAAIH,EAAsB/qE,IAEnC7J,EAAOovE,gBAAgBttE,UAAY8yE,EAAsB9yE,UAIzDygD,EAA8BviD,EAAQ,gBAAgBgM,IAChDA,EAAE+qC,WACJl1C,OAAO+f,eAAe5V,EAAG,YAAa,CACpCgB,MAAO,IAAIhN,EAAOovE,gBAAgBpjE,EAAE+qC,WACpCzuB,SAAU,UAGPtc,KAIJ,SAASmpE,GAAmBn1E,EAAQomE,GACzC,IAAKpmE,EAAO0jE,kBACV,OAGI,SAAU1jE,EAAO0jE,kBAAkB5hE,WACvCD,OAAO+f,eAAe5hB,EAAO0jE,kBAAkB5hE,UAAW,OAAQ,CAChEggB,MACE,YAA6B,IAAfve,KAAK6xE,MAAwB,KAAO7xE,KAAK6xE,SAK7D,MAAMC,EAAoB,SAAS/5B,GACjC,IAAKA,IAAgBA,EAAYtsC,IAC/B,OAAO,EAET,MAAM0nC,EAAWR,KAAAA,cAAuBoF,EAAYtsC,KAEpD,OADA0nC,EAAS54B,QACF44B,EAAS5gC,MAAK2jC,IACnB,MAAMvoC,EAAQglC,KAAAA,WAAoBuD,GAClC,OAAOvoC,GAAwB,gBAAfA,EAAM6qC,OACqB,IAApC7qC,EAAM+lC,SAASvuC,QAAQ,YAI5B4sE,EAA0B,SAASh6B,GAEvC,MAAM9xC,EAAQ8xC,EAAYtsC,IAAIxF,MAAM,mCACpC,GAAc,OAAVA,GAAkBA,EAAM1G,OAAS,EACnC,OAAQ,EAEV,MAAMmO,EAAUgC,SAASzJ,EAAM,GAAI,IAEnC,OAAOyH,GAAYA,GAAW,EAAIA,GAG9BskE,EAA2B,SAASC,GAKxC,IAAIC,EAAwB,MAwB5B,MAvB+B,YAA3BrP,EAAev9C,UAKb4sD,EAJArP,EAAen1D,QAAU,IACF,IAArBukE,EAGsB,MAIA,WAEjBpP,EAAen1D,QAAU,GAML,KAA3Bm1D,EAAen1D,QAAiB,MAAQ,MAGlB,YAGrBwkE,GAGHC,EAAoB,SAASp6B,EAAak6B,GAG9C,IAAIvoE,EAAiB,MAKU,YAA3Bm5D,EAAev9C,SACgB,KAA3Bu9C,EAAen1D,UACrBhE,EAAiB,OAGnB,MAAMzD,EAAQ0sC,KAAAA,YAAqBoF,EAAYtsC,IAC7C,uBAUF,OATIxF,EAAM1G,OAAS,EACjBmK,EAAiBgG,SAASzJ,EAAM,GAAGC,OAAO,IAAK,IACX,YAA3B28D,EAAev9C,UACO,IAArB2sD,IAIVvoE,EAAiB,YAEZA,GAGHo9D,EACFrqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACvCtqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACjC,WAKE,GAJA/mE,KAAK6xE,MAAQ,KAIkB,WAA3BhP,EAAev9C,SAAwBu9C,EAAen1D,SAAW,GAAI,CACvE,MAAM,aAACs+D,GAAgBhsE,KAAK+rE,mBACP,WAAjBC,GACF1tE,OAAO+f,eAAere,KAAM,OAAQ,CAClCue,MACE,YAA6B,IAAfve,KAAK6xE,MAAwB,KAAO7xE,KAAK6xE,OAEzDvzD,YAAY,EACZwG,cAAc,IAKpB,GAAIgtD,EAAkB/uE,UAAU,IAAK,CAEnC,MAAMqvE,EAAYL,EAAwBhvE,UAAU,IAG9CsvE,EAAaL,EAAyBI,GAGtCE,EAAYH,EAAkBpvE,UAAU,GAAIqvE,GAGlD,IAAI1oE,EAEFA,EADiB,IAAf2oE,GAAkC,IAAdC,EACLvnE,OAAOwnE,kBACA,IAAfF,GAAkC,IAAdC,EACZrhE,KAAKmO,IAAIizD,EAAYC,GAErBrhE,KAAKoO,IAAIgzD,EAAYC,GAKxC,MAAMz3B,EAAO,GACbv8C,OAAO+f,eAAew8B,EAAM,iBAAkB,CAC5Ct8B,IAAG,IACM7U,IAGX1J,KAAK6xE,MAAQh3B,EAGf,OAAOisB,EAAyBhkE,MAAM9C,KAAM+C,YAI3C,SAASyvE,GAAuB/1E,GACrC,IAAMA,EAAO0jE,qBACT,sBAAuB1jE,EAAO0jE,kBAAkB5hE,WAClD,OAOF,SAASk0E,EAAWC,EAAIjL,GACtB,MAAMkL,EAAsBD,EAAGz9C,KAC/By9C,EAAGz9C,KAAO,WACR,MAAMpc,EAAO9V,UAAU,GACjBxD,EAASsZ,EAAKtZ,QAAUsZ,EAAKwZ,MAAQxZ,EAAKmE,WAChD,GAAsB,SAAlB01D,EAAG5pD,YACH2+C,EAAG5sB,MAAQt7C,EAASkoE,EAAG5sB,KAAKnxC,eAC9B,MAAM,IAAI4hB,UAAU,4CAClBm8C,EAAG5sB,KAAKnxC,eAAiB,WAE7B,OAAOipE,EAAoB7vE,MAAM4vE,EAAI3vE,YAGzC,MAAM6vE,EACJn2E,EAAO0jE,kBAAkB5hE,UAAUs0E,kBACrCp2E,EAAO0jE,kBAAkB5hE,UAAUs0E,kBACjC,WACE,MAAMC,EAAcF,EAAsB9vE,MAAM9C,KAAM+C,WAEtD,OADA0vE,EAAWK,EAAa9yE,MACjB8yE,GAEX9zB,EAA8BviD,EAAQ,eAAegM,IACnDgqE,EAAWhqE,EAAEsqE,QAAStqE,EAAEohB,QACjBphB,KAYJ,SAASuqE,GAAoBv2E,GAClC,IAAKA,EAAO0jE,mBACR,oBAAqB1jE,EAAO0jE,kBAAkB5hE,UAChD,OAEF,MAAMurC,EAAQrtC,EAAO0jE,kBAAkB5hE,UACvCD,OAAO+f,eAAeyrB,EAAO,kBAAmB,CAC9CvrB,MACE,MAAO,CACLrK,UAAW,YACX++D,SAAU,cACVjzE,KAAKkzE,qBAAuBlzE,KAAKkzE,oBAErC50D,YAAY,EACZwG,cAAc,IAEhBxmB,OAAO+f,eAAeyrB,EAAO,0BAA2B,CACtDvrB,MACE,OAAOve,KAAKmzE,0BAA4B,MAE1ChmD,IAAI7T,GACEtZ,KAAKmzE,2BACPnzE,KAAKktB,oBAAoB,wBACrBltB,KAAKmzE,iCACFnzE,KAAKmzE,0BAEV75D,GACFtZ,KAAKgtB,iBAAiB,wBAClBhtB,KAAKmzE,yBAA2B75D,IAGxCgF,YAAY,EACZwG,cAAc,IAGhB,CAAC,sBAAuB,wBAAwBniB,SAASxD,IACvD,MAAMi0E,EAAatpC,EAAM3qC,GACzB2qC,EAAM3qC,GAAU,WAcd,OAbKa,KAAKqzE,6BACRrzE,KAAKqzE,2BAA6B5qE,IAChC,MAAMg/D,EAAKh/D,EAAEohB,OACb,GAAI49C,EAAG6L,uBAAyB7L,EAAG8L,gBAAiB,CAClD9L,EAAG6L,qBAAuB7L,EAAG8L,gBAC7B,MAAMC,EAAW,IAAIrM,MAAM,wBAAyB1+D,GACpDg/D,EAAGH,cAAckM,GAEnB,OAAO/qE,GAETzI,KAAKgtB,iBAAiB,2BACpBhtB,KAAKqzE,6BAEFD,EAAWtwE,MAAM9C,KAAM+C,eAK7B,SAAS0wE,GAAuBh3E,EAAQomE,GAE7C,IAAKpmE,EAAO0jE,kBACV,OAEF,GAA+B,WAA3B0C,EAAev9C,SAAwBu9C,EAAen1D,SAAW,GACnE,OAEF,GAA+B,WAA3Bm1D,EAAev9C,SAAwBu9C,EAAen1D,SAAW,IACnE,OAEF,MAAMgmE,EAAYj3E,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACrDtqE,EAAO0jE,kBAAkB5hE,UAAUwoE,qBACnC,SAA8B/3D,GAC5B,GAAIA,GAAQA,EAAKvD,MAAuD,IAAhDuD,EAAKvD,IAAItG,QAAQ,0BAAkC,CACzE,MAAMsG,EAAMuD,EAAKvD,IAAIhO,MAAM,MAAMmO,QAAQhG,GAChB,yBAAhBA,EAAKmtC,SACX/kC,KAAK,MAEJvR,EAAOkW,uBACP3D,aAAgBvS,EAAOkW,sBACzB5P,UAAU,GAAK,IAAItG,EAAOkW,sBAAsB,CAC9CnT,KAAMwP,EAAKxP,KACXiM,IAAAA,IAGFuD,EAAKvD,IAAMA,EAGf,OAAOioE,EAAU5wE,MAAM9C,KAAM+C,YAI1B,SAAS4wE,GAA+Bl3E,EAAQomE,GAKrD,IAAMpmE,EAAO0jE,oBAAqB1jE,EAAO0jE,kBAAkB5hE,UACzD,OAEF,MAAMq1E,EACFn3E,EAAO0jE,kBAAkB5hE,UAAUgxE,gBAClCqE,GAA0D,IAAjCA,EAAsBr0E,SAGpD9C,EAAO0jE,kBAAkB5hE,UAAUgxE,gBACjC,WACE,OAAKxsE,UAAU,IAWkB,WAA3B8/D,EAAev9C,SAAwBu9C,EAAen1D,QAAU,IAClC,YAA3Bm1D,EAAev9C,SACZu9C,EAAen1D,QAAU,IACD,WAA3Bm1D,EAAev9C,UACjBviB,UAAU,IAAiC,KAA3BA,UAAU,GAAGywC,UAC3BhpB,QAAQC,UAEVmpD,EAAsB9wE,MAAM9C,KAAM+C,YAjBnCA,UAAU,IACZA,UAAU,GAAGD,MAAM,MAEd0nB,QAAQC,aCrWvB,MAAMopD,GCIC,WAIJ,IAJ4B,OAACp3E,GAI7B,uDAJuC,GAAI4F,EAI3C,uDAJqD,CACtDyxE,YAAY,EACZC,aAAa,EACbC,YAAY,GAGZ,MAAM7X,EAAUnd,EACV6jB,EAAiB7jB,EAAoBviD,GAErCo3E,EAAU,CACdhR,eAAAA,EACAoR,WAFc,EAGdlU,eAAgB/gB,EAChB4hB,WAAY5hB,EACZ8hB,gBAAiB9hB,EAEjBvzC,IAAGA,GAIL,OAAQo3D,EAAev9C,SACrB,IAAK,SACH,IAAK4uD,IAAeA,IACf7xE,EAAQyxE,WAEX,OADA3X,EAAQ,wDACD0X,EAET,GAA+B,OAA3BhR,EAAen1D,QAEjB,OADAyuD,EAAQ,wDACD0X,EAET1X,EAAQ,+BAER0X,EAAQM,YAAcD,EAGtBD,GAA0Cx3E,EAAQomE,GAElDqR,EAA4Bz3E,EAAQomE,GACpCqR,EAA2Bz3E,GAC3By3E,EAA8Bz3E,EAAQomE,GACtCqR,EAAuBz3E,GACvBy3E,EAAmCz3E,EAAQomE,GAC3CqR,EAAkCz3E,GAClCy3E,EAAwBz3E,GACxBy3E,EAAsCz3E,GACtCy3E,EAAgCz3E,EAAQomE,GAExCoR,GAA+Bx3E,GAC/Bw3E,GAA+Bx3E,GAC/Bw3E,GAA8Bx3E,EAAQomE,GACtCoR,GAAkCx3E,GAClCw3E,GAAkCx3E,EAAQomE,GAC1C,MACF,IAAK,UACH,IAAKuR,IAAgBA,IAChB/xE,EAAQ0xE,YAEX,OADA5X,EAAQ,yDACD0X,EAET1X,EAAQ,gCAER0X,EAAQM,YAAcC,EAGtBH,GAA0Cx3E,EAAQomE,GAElDuR,EAA6B33E,EAAQomE,GACrCuR,EAA+B33E,EAAQomE,GACvCuR,EAAwB33E,GACxB23E,EAA6B33E,GAC7B23E,EAA+B33E,GAC/B23E,EAAiC33E,GACjC23E,EAA+B33E,GAC/B23E,EAA+B33E,GAC/B23E,EAA8B33E,GAC9B23E,EAA4B33E,GAC5B23E,EAA6B33E,GAE7Bw3E,GAA+Bx3E,GAC/Bw3E,GAA+Bx3E,GAC/Bw3E,GAA8Bx3E,EAAQomE,GACtCoR,GAAkCx3E,GAClC,MACF,IAAK,SACH,IAAK43E,IAAehyE,EAAQ2xE,WAE1B,OADA7X,EAAQ,wDACD0X,EAET1X,EAAQ,+BAER0X,EAAQM,YAAcE,EAGtBJ,GAA0Cx3E,EAAQomE,GAElDwR,EAAgC53E,GAChC43E,EAAiC53E,GACjC43E,EAA4B53E,GAC5B43E,EAA+B53E,GAC/B43E,EAAgC53E,GAChC43E,EAAqC53E,GACrC43E,EAA4B53E,GAC5B43E,EAA4B53E,GAE5Bw3E,GAA+Bx3E,GAC/Bw3E,GAA8Bx3E,EAAQomE,GACtCoR,GAAkCx3E,GAClCw3E,GAAkCx3E,EAAQomE,GAC1C,MACF,QACE1G,EAAQ,wBAIZ,OAAO0X,EDtHPS,CAAe,CAAC73E,OAA0B,oBAAXA,YAAyB0P,EAAY1P,SACtE,gCEbA6B,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAMlB,MAAMq4E,EAAY,GAElB,IAAK,IAAIj1E,EAAI,EAAGA,EAAI,MAAOA,EACzBi1E,EAAUrwE,MAAM5E,EAAI,KAAOd,SAAS,IAAI0H,OAAO,IAYjDhK,EAAA,QATA,SAAqBs4E,EAAKjgD,GACxB,MAAMj1B,EAAIi1B,GAAU,EACdkgD,EAAMF,EAGZ,OAAQE,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAM,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAM,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAM,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAMm1E,EAAID,EAAIl1E,EAAI,IAAM,IAAMm1E,EAAID,EAAIl1E,EAAI,KAAOm1E,EAAID,EAAIl1E,EAAI,KAAOm1E,EAAID,EAAIl1E,EAAI,KAAOm1E,EAAID,EAAIl1E,EAAI,KAAOm1E,EAAID,EAAIl1E,EAAI,KAAOm1E,EAAID,EAAIl1E,EAAI,MAAMomB,4CCjBvUpnB,OAAO+f,eAAeniB,EAAS,KAAM,CACnCoiB,YAAY,EACZC,IAAK,WACH,OAAOm2D,EAAG/1D,WAGdrgB,OAAO+f,eAAeniB,EAAS,KAAM,CACnCoiB,YAAY,EACZC,IAAK,WACH,OAAOo2D,EAAIh2D,WAGfrgB,OAAO+f,eAAeniB,EAAS,KAAM,CACnCoiB,YAAY,EACZC,IAAK,WACH,OAAOq2D,EAAIj2D,WAGfrgB,OAAO+f,eAAeniB,EAAS,KAAM,CACnCoiB,YAAY,EACZC,IAAK,WACH,OAAOs2D,EAAIl2D,WAIf,IAAI+1D,EAAKI,EAAuB,EAAQ,OAEpCH,EAAMG,EAAuB,EAAQ,OAErCF,EAAME,EAAuB,EAAQ,OAErCD,EAAMC,EAAuB,EAAQ,OAEzC,SAASA,EAAuBz2E,GAAO,OAAOA,GAAOA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,8BCyBvF,SAAS02E,EAAgBC,GACvB,OAAwC,IAAhCA,EAAe,KAAO,GAAK,GAAU,EAuH/C,SAASC,EAAQ9nE,EAAGoM,GAClB,MAAMijC,GAAW,MAAJrvC,IAAmB,MAAJoM,GAE5B,OADapM,GAAK,KAAOoM,GAAK,KAAOijC,GAAO,KAC9B,GAAW,MAANA,EAerB,SAAS04B,EAAOl7D,EAAG9Y,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAC7B,OAAOsuE,GATc92D,EASQ82D,EAAQA,EAAQ/zE,EAAG8Y,GAAIi7D,EAAQ9nE,EAAGxG,OATrCi2C,EAS0Cr0C,GARhD4V,IAAQ,GAAKy+B,EAQuCz7C,GAT1E,IAAuBgd,EAAKy+B,EAY5B,SAASu4B,EAAMj0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC/B,OAAOuuE,EAAO/zE,EAAIC,GAAKD,EAAIE,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAG5C,SAASyuE,EAAMl0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC/B,OAAOuuE,EAAO/zE,EAAIE,EAAID,GAAKC,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAG5C,SAAS0uE,EAAMn0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC/B,OAAOuuE,EAAO/zE,EAAIC,EAAIC,EAAGH,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAGvC,SAAS2uE,EAAMp0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAG5E,EAAG5B,GAC/B,OAAOuuE,EAAO9zE,GAAKD,GAAKE,GAAIH,EAAGC,EAAGgM,EAAG5E,EAAG5B,GAxN1CrI,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAyNlBA,EAAA,QAnMA,SAAaoE,GACX,GAAqB,iBAAVA,EAAoB,CAC7B,MAAMoD,EAAMi8C,SAAS41B,mBAAmBj1E,IAExCA,EAAQ,IAAIrC,WAAWyF,EAAInE,QAE3B,IAAK,IAAID,EAAI,EAAGA,EAAIoE,EAAInE,SAAUD,EAChCgB,EAAMhB,GAAKoE,EAAI5C,WAAWxB,GAI9B,OAOF,SAA8BgqC,GAC5B,MAAMlrB,EAAS,GACTo3D,EAA0B,GAAflsC,EAAM/pC,OACjBk2E,EAAS,mBAEf,IAAK,IAAIn2E,EAAI,EAAGA,EAAIk2E,EAAUl2E,GAAK,EAAG,CACpC,MAAM6N,EAAIm8B,EAAMhqC,GAAK,KAAOA,EAAI,GAAK,IAC/BkC,EAAMkO,SAAS+lE,EAAO55B,OAAO1uC,IAAM,EAAI,IAAQsoE,EAAO55B,OAAW,GAAJ1uC,GAAW,IAC9EiR,EAAOla,KAAK1C,GAGd,OAAO4c,EAlBAs3D,CAiCT,SAAoBvoE,EAAGxJ,GAErBwJ,EAAExJ,GAAO,IAAM,KAAQA,EAAM,GAC7BwJ,EAAE4nE,EAAgBpxE,GAAO,GAAKA,EAC9B,IAAIzC,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UAER,IAAK,IAAI/B,EAAI,EAAGA,EAAI6N,EAAE5N,OAAQD,GAAK,GAAI,CACrC,MAAM49C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACPi8C,EAAOh8C,EACbH,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,GAAI,GAAI,WAChC+B,EAAI8zE,EAAM9zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,WACrC8B,EAAI+zE,EAAM/zE,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,WACpC6B,EAAIg0E,EAAMh0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,YACrC4B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACpC+B,EAAI8zE,EAAM9zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACpC8B,EAAI+zE,EAAM/zE,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,YACrC6B,EAAIg0E,EAAMh0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,UACrC4B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,YACnC+B,EAAI8zE,EAAM9zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACrC8B,EAAI+zE,EAAM/zE,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,OACtC6B,EAAIg0E,EAAMh0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACtC4B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,YACpC+B,EAAI8zE,EAAM9zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,UACtC8B,EAAI+zE,EAAM/zE,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,YACtC6B,EAAIg0E,EAAMh0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,GAAI,YACrC4B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACpC+B,EAAI+zE,EAAM/zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACpC8B,EAAIg0E,EAAMh0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,WACrC6B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,GAAI,IAAK,WACjC4B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACpC+B,EAAI+zE,EAAM/zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,EAAG,UACpC8B,EAAIg0E,EAAMh0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,WACtC6B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACrC4B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,WACnC+B,EAAI+zE,EAAM/zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,GAAI,YACrC8B,EAAIg0E,EAAMh0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACrC6B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,GAAI,YACpC4B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,GAAI,YACrC+B,EAAI+zE,EAAM/zE,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,UACpC8B,EAAIg0E,EAAMh0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,YACpC6B,EAAIi0E,EAAMj0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACtC4B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,QACpC+B,EAAIg0E,EAAMh0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACrC8B,EAAIi0E,EAAMj0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,YACrC6B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,UACtC4B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,YACpC+B,EAAIg0E,EAAMh0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACpC8B,EAAIi0E,EAAMj0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACrC6B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,IAAK,YACtC4B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,WACpC+B,EAAIg0E,EAAMh0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,GAAI,IAAK,WACjC8B,EAAIi0E,EAAMj0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,WACrC6B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,GAAI,UACpC4B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACpC+B,EAAIg0E,EAAMh0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,WACtC8B,EAAIi0E,EAAMj0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,GAAI,WACrC6B,EAAIk0E,EAAMl0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACrC4B,EAAIo0E,EAAMp0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,GAAI,GAAI,WAChC+B,EAAIi0E,EAAMj0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,GAAI,YACpC8B,EAAIk0E,EAAMl0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,YACtC6B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,UACrC4B,EAAIo0E,EAAMp0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,IAAK,EAAG,YACpC+B,EAAIi0E,EAAMj0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,GAAI,IAAK,YACrC8B,EAAIk0E,EAAMl0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,IAAK,IAAK,SACtC6B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,YACrC4B,EAAIo0E,EAAMp0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,EAAG,YACnC+B,EAAIi0E,EAAMj0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,UACtC8B,EAAIk0E,EAAMl0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,IAAK,YACrC6B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,IAAK,GAAI,YACrC4B,EAAIo0E,EAAMp0E,EAAGC,EAAGC,EAAGC,EAAG8L,EAAE7N,EAAI,GAAI,GAAI,WACpC+B,EAAIi0E,EAAMj0E,EAAGH,EAAGC,EAAGC,EAAG+L,EAAE7N,EAAI,IAAK,IAAK,YACtC8B,EAAIk0E,EAAMl0E,EAAGC,EAAGH,EAAGC,EAAGgM,EAAE7N,EAAI,GAAI,GAAI,WACpC6B,EAAIm0E,EAAMn0E,EAAGC,EAAGC,EAAGH,EAAGiM,EAAE7N,EAAI,GAAI,IAAK,WACrC4B,EAAI+zE,EAAQ/zE,EAAGg8C,GACf/7C,EAAI8zE,EAAQ9zE,EAAGg8C,GACf/7C,EAAI6zE,EAAQ7zE,EAAGg8C,GACf/7C,EAAI4zE,EAAQ5zE,EAAGg8C,GAGjB,MAAO,CAACn8C,EAAGC,EAAGC,EAAGC,GArHWs0E,CA6H9B,SAAsBrsC,GACpB,GAAqB,IAAjBA,EAAM/pC,OACR,MAAO,GAGT,MAAMq2E,EAAyB,EAAftsC,EAAM/pC,OAChB6e,EAAS,IAAIlgB,YAAY62E,EAAgBa,IAE/C,IAAK,IAAIt2E,EAAI,EAAGA,EAAIs2E,EAASt2E,GAAK,EAChC8e,EAAO9e,GAAK,KAAsB,IAAfgqC,EAAMhqC,EAAI,KAAcA,EAAI,GAGjD,OAAO8e,EAzIgCy3D,CAAav1E,GAAuB,EAAfA,EAAMf,qCCpCpEjB,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,QASA,WACE,IAAK45E,EACH,MAAM,IAAIhwE,MAAM,4GAGlB,OAAOgwE,EAAgBC,IARzB,MAAMD,EAAoC,oBAAXr2E,QAA0BA,OAAOq2E,iBAAmBr2E,OAAOq2E,gBAAgB9yE,KAAKvD,SAA+B,oBAAbu2E,UAAgE,mBAA7BA,SAASF,iBAAkCE,SAASF,gBAAgB9yE,KAAKgzE,UACvOD,EAAQ,IAAI93E,WAAW,+BCH7B,SAAS4oB,EAAEte,EAAG4E,EAAGoM,EAAG5Q,GAClB,OAAQJ,GACN,KAAK,EACH,OAAO4E,EAAIoM,GAAKpM,EAAIxE,EAEtB,KAAK,EAML,KAAK,EACH,OAAOwE,EAAIoM,EAAI5Q,EAJjB,KAAK,EACH,OAAOwE,EAAIoM,EAAIpM,EAAIxE,EAAI4Q,EAAI5Q,GAOjC,SAASstE,EAAK9oE,EAAGG,GACf,OAAOH,GAAKG,EAAIH,IAAM,GAAKG,EAxB7BhP,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EA+FlBA,EAAA,QAvEA,SAAcoE,GACZ,MAAM41E,EAAI,CAAC,WAAY,WAAY,WAAY,YACzCC,EAAI,CAAC,WAAY,WAAY,WAAY,UAAY,YAE3D,GAAqB,iBAAV71E,EAAoB,CAC7B,MAAMoD,EAAMi8C,SAAS41B,mBAAmBj1E,IAExCA,EAAQ,GAER,IAAK,IAAIhB,EAAI,EAAGA,EAAIoE,EAAInE,SAAUD,EAChCgB,EAAM4D,KAAKR,EAAI5C,WAAWxB,IAI9BgB,EAAM4D,KAAK,KACX,MAAM0C,EAAItG,EAAMf,OAAS,EAAI,EACvB62E,EAAInlE,KAAKolE,KAAKzvE,EAAI,IAClB0vE,EAAI,IAAIn4E,MAAMi4E,GAEpB,IAAK,IAAI92E,EAAI,EAAGA,EAAI82E,IAAK92E,EAAG,CAC1B,MAAMiU,EAAM,IAAIrV,YAAY,IAE5B,IAAK,IAAI6N,EAAI,EAAGA,EAAI,KAAMA,EACxBwH,EAAIxH,GAAKzL,EAAU,GAAJhB,EAAa,EAAJyM,IAAU,GAAKzL,EAAU,GAAJhB,EAAa,EAAJyM,EAAQ,IAAM,GAAKzL,EAAU,GAAJhB,EAAa,EAAJyM,EAAQ,IAAM,EAAIzL,EAAU,GAAJhB,EAAa,EAAJyM,EAAQ,GAGnIuqE,EAAEh3E,GAAKiU,EAGT+iE,EAAEF,EAAI,GAAG,IAA2B,GAApB91E,EAAMf,OAAS,GAAS0R,KAAKkpB,IAAI,EAAG,IACpDm8C,EAAEF,EAAI,GAAG,IAAMnlE,KAAKC,MAAMolE,EAAEF,EAAI,GAAG,KACnCE,EAAEF,EAAI,GAAG,IAA2B,GAApB91E,EAAMf,OAAS,GAAS,WAExC,IAAK,IAAID,EAAI,EAAGA,EAAI82E,IAAK92E,EAAG,CAC1B,MAAMi3E,EAAI,IAAIr4E,YAAY,IAE1B,IAAK,IAAIyI,EAAI,EAAGA,EAAI,KAAMA,EACxB4vE,EAAE5vE,GAAK2vE,EAAEh3E,GAAGqH,GAGd,IAAK,IAAIA,EAAI,GAAIA,EAAI,KAAMA,EACzB4vE,EAAE5vE,GAAKsvE,EAAKM,EAAE5vE,EAAI,GAAK4vE,EAAE5vE,EAAI,GAAK4vE,EAAE5vE,EAAI,IAAM4vE,EAAE5vE,EAAI,IAAK,GAG3D,IAAIzF,EAAIi1E,EAAE,GACNh1E,EAAIg1E,EAAE,GACN/0E,EAAI+0E,EAAE,GACN90E,EAAI80E,EAAE,GACN1tE,EAAI0tE,EAAE,GAEV,IAAK,IAAIxvE,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAM4B,EAAI0I,KAAKC,MAAMvK,EAAI,IACnB6vE,EAAIP,EAAK/0E,EAAG,GAAK2lB,EAAEte,EAAGpH,EAAGC,EAAGC,GAAKoH,EAAIytE,EAAE3tE,GAAKguE,EAAE5vE,KAAO,EAC3D8B,EAAIpH,EACJA,EAAID,EACJA,EAAI60E,EAAK90E,EAAG,MAAQ,EACpBA,EAAID,EACJA,EAAIs1E,EAGNL,EAAE,GAAKA,EAAE,GAAKj1E,IAAM,EACpBi1E,EAAE,GAAKA,EAAE,GAAKh1E,IAAM,EACpBg1E,EAAE,GAAKA,EAAE,GAAK/0E,IAAM,EACpB+0E,EAAE,GAAKA,EAAE,GAAK90E,IAAM,EACpB80E,EAAE,GAAKA,EAAE,GAAK1tE,IAAM,EAGtB,MAAO,CAAC0tE,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,kCC9FxV73E,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAElB,IAAIu6E,EAAO3B,EAAuB,EAAQ,OAEtC4B,EAAe5B,EAAuB,EAAQ,MAElD,SAASA,EAAuBz2E,GAAO,OAAOA,GAAOA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,GAMvF,IAAIs4E,EAEAC,EAGAC,EAAa,EACbC,EAAa,EAmFjB56E,EAAA,QAjFA,SAAYmG,EAASmyE,EAAKjgD,GACxB,IAAIj1B,EAAIk1E,GAAOjgD,GAAU,EACzB,MAAMpzB,EAAIqzE,GAAO,GAEjB,IAAIx3E,GADJqF,EAAUA,GAAW,IACFrF,MAAQ25E,EACvBI,OAAgC5qE,IAArB9J,EAAQ00E,SAAyB10E,EAAQ00E,SAAWH,EAInE,GAAY,MAAR55E,GAA4B,MAAZ+5E,EAAkB,CACpC,MAAMC,EAAY30E,EAAQ8O,SAAW9O,EAAQ40E,KAAOR,EAAK93D,WAE7C,MAAR3hB,IAEFA,EAAO25E,EAAU,CAAgB,EAAfK,EAAU,GAAWA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAG3F,MAAZD,IAEFA,EAAWH,EAAiD,OAApCI,EAAU,IAAM,EAAIA,EAAU,KAQ1D,IAAIE,OAA0B/qE,IAAlB9J,EAAQ60E,MAAsB70E,EAAQ60E,MAAQpwE,KAAK8oB,MAG3DunD,OAA0BhrE,IAAlB9J,EAAQ80E,MAAsB90E,EAAQ80E,MAAQL,EAAa,EAEvE,MAAMM,EAAKF,EAAQL,GAAcM,EAAQL,GAAc,IAavD,GAXIM,EAAK,QAA0BjrE,IAArB9J,EAAQ00E,WACpBA,EAAWA,EAAW,EAAI,QAKvBK,EAAK,GAAKF,EAAQL,SAAiC1qE,IAAlB9J,EAAQ80E,QAC5CA,EAAQ,GAINA,GAAS,IACX,MAAM,IAAIrxE,MAAM,mDAGlB+wE,EAAaK,EACbJ,EAAaK,EACbP,EAAYG,EAEZG,GAAS,YAET,MAAMG,GAA4B,KAAb,UAARH,GAA6BC,GAAS,WACnDh2E,EAAE7B,KAAO+3E,IAAO,GAAK,IACrBl2E,EAAE7B,KAAO+3E,IAAO,GAAK,IACrBl2E,EAAE7B,KAAO+3E,IAAO,EAAI,IACpBl2E,EAAE7B,KAAY,IAAL+3E,EAET,MAAMC,EAAMJ,EAAQ,WAAc,IAAQ,UAC1C/1E,EAAE7B,KAAOg4E,IAAQ,EAAI,IACrBn2E,EAAE7B,KAAa,IAANg4E,EAETn2E,EAAE7B,KAAOg4E,IAAQ,GAAK,GAAM,GAE5Bn2E,EAAE7B,KAAOg4E,IAAQ,GAAK,IAEtBn2E,EAAE7B,KAAOy3E,IAAa,EAAI,IAE1B51E,EAAE7B,KAAkB,IAAXy3E,EAET,IAAK,IAAIzpE,EAAI,EAAGA,EAAI,IAAKA,EACvBnM,EAAE7B,EAAIgO,GAAKtQ,EAAKsQ,GAGlB,OAAOknE,IAAO,EAAIkC,EAAa/3D,SAASxd,iCCpG1C7C,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAElB,IAAIw4E,EAAKI,EAAuB,EAAQ,OAEpCyC,EAAMzC,EAAuB,EAAQ,MAEzC,SAASA,EAAuBz2E,GAAO,OAAOA,GAAOA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,GAGvF,IAAIm5E,GADO,EAAI9C,EAAG/1D,SAAS,KAAM,GAAM44D,EAAI54D,SAE3CziB,EAAA,QAAkBs7E,+BCblBl5E,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,QAiCA,SAAkBgM,EAAMwF,EAAS+pE,GAC/B,SAASC,EAAajuE,EAAOkuE,EAAWnD,EAAKjgD,GAC3C,MAAMtG,EAAMumD,GAAOjgD,GAAU,EAI7B,GAHqB,iBAAV9qB,IAAoBA,EApBnC,SAAuBL,GACrBA,EAAMu2C,SAAS41B,mBAAmBnsE,IAElC,MAAM9I,EAAQ,GAEd,IAAK,IAAIhB,EAAI,EAAGA,EAAI8J,EAAI7J,SAAUD,EAChCgB,EAAM4D,KAAKkF,EAAItI,WAAWxB,IAG5B,OAAOgB,EAWkCs3E,CAAcnuE,IAC5B,iBAAdkuE,IAAwBA,EA9BvC,SAAqB7rB,GAEnB,MAAMxrD,EAAQ,GAId,OAHAwrD,EAAK5+C,QAAQ,mBAAmB,SAAU1L,GACxClB,EAAM4D,KAAKwL,SAASlO,EAAK,QAEpBlB,EAwB0Cu3E,CAAYF,KAEtDx5E,MAAMC,QAAQqL,GACjB,MAAM6hB,UAAU,mCAGlB,IAAKntB,MAAMC,QAAQu5E,IAAmC,KAArBA,EAAUp4E,OACzC,MAAM+rB,UAAU,+DAIlB,MAAMhrB,EAAQm3E,EAASE,EAAUjxE,OAAO+C,IAIxC,GAHAnJ,EAAM,GAAgB,GAAXA,EAAM,GAAYoN,EAC7BpN,EAAM,GAAgB,GAAXA,EAAM,GAAY,IAEzBk0E,EACF,IAAK,IAAIrM,EAAM,EAAGA,EAAM,KAAMA,EAC5BqM,EAAIvmD,EAAMk6C,GAAO7nE,EAAM6nE,GAI3B,OAAOqM,IAAO,EAAIkC,EAAa/3D,SAASre,GAI1C,IACEo3E,EAAaxvE,KAAOA,EACpB,MAAOkM,IAKT,OAFAsjE,EAAaI,IAAMA,EACnBJ,EAAa1kD,IAAMA,EACZ0kD,GApETx7E,EAAQ82B,IAAM92B,EAAQ47E,SAAM,EAE5B,IAEgCz5E,EAF5Bq4E,GAE4Br4E,EAFU,EAAQ,OAEGA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,GAuBvF,MAAMy5E,EAAM,uCACZ57E,EAAQ47E,IAAMA,EACd,MAAM9kD,EAAM,uCACZ92B,EAAQ82B,IAAMA,+BClCd10B,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAElB,IAAIu6E,EAAO3B,EAAuB,EAAQ,OAEtC4B,EAAe5B,EAAuB,EAAQ,MAElD,SAASA,EAAuBz2E,GAAO,OAAOA,GAAOA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,GA8BvFnC,EAAA,QA5BA,SAAYmG,EAASmyE,EAAKjgD,GACD,iBAAZlyB,IACTmyE,EAAkB,WAAZnyE,EAAuB,IAAIpE,WAAW,IAAM,KAClDoE,EAAU,MAKZ,MAAM01E,GAFN11E,EAAUA,GAAW,IAEA8O,SAAW9O,EAAQ40E,KAAOR,EAAK93D,WAMpD,GAHAo5D,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBvD,EAAK,CACP,MAAMn0E,EAAQk0B,GAAU,EAExB,IAAK,IAAIj1B,EAAI,EAAGA,EAAI,KAAMA,EACxBk1E,EAAIn0E,EAAQf,GAAKy4E,EAAKz4E,GAGxB,OAAOk1E,EAGT,OAAO,EAAIkC,EAAa/3D,SAASo5D,iCCnCnCz5E,OAAO+f,eAAeniB,EAAS,aAAc,CAC3CuN,OAAO,IAETvN,EAAA,aAAkB,EAElB,IAAIw4E,EAAKI,EAAuB,EAAQ,OAEpCkD,EAAOlD,EAAuB,EAAQ,OAE1C,SAASA,EAAuBz2E,GAAO,OAAOA,GAAOA,EAAIqgB,WAAargB,EAAM,CAAEsgB,QAAStgB,GAGvF,IAAIm5E,GADO,EAAI9C,EAAG/1D,SAAS,KAAM,GAAMq5D,EAAKr5D,SAE5CziB,EAAA,QAAkBs7E,gwICRX,MAAMn6C,EAA0B,oCAK1B46C,EAAa,uBAKbC,EAAuB,uBAKvBC,EAAuB,uBAKvBC,EAAmB,6BAMnBC,EAAuB,uBAMvBC,EAAoB,wCAMpBC,EAAqB,yCAMrBC,EAA2B,0CAK3Bj6C,EAAqB,+BAKrBC,EAAa,uBAKbC,EAAoB,8BAKpBg6C,EAAa,uBAMbC,EACP,0CAKOC,EAAsB,+BAKtBC,EAAyB,kCAKzBx4C,EAAoB,8BAKpBS,EAAoB,8BAKpBg4C,EAA4B,qCC/F5BC,EAA2B,uCAM3BC,EAAmC,8CAKnCC,EAAsB,iCAOtBC,EAA6B,sCAK7BC,EAAmB,mBAKnBC,EAAoB,oBAKpBC,EAA8B,8BAM9BC,EAAoB,oBAKpBC,EAAkB,kBAKlBC,EAA2B,2BAO3B37C,EAAyB,mCAOzBE,EAAyB,mCAMzBC,EAAsB,gCAKtBy7C,EAAsB,+BAKtBr7C,EAAuB,gCAKvB3C,EAA2B,6BAK3Bi+C,GAA+B,8BAK/BC,GAAuB,gCAMvBh9C,GAA4B,uCAK5BC,GAA0B,qCAgB1Bg9C,GAAgB,0BAMhB/6C,GAAS,oBAOTg7C,GAAqB,gCAUrBC,GAA2B,mCAK3BC,GAAqB,gCAOrBC,GAAwB,mCAOxBC,GAAyB,mCAOzBC,GAAgC,0CAQhCC,GAAuB,gCAKvBn7C,GAAmB,6BAKnBo7C,GAAiB,4BAKjBC,GAAY,uBAMZC,GAAmC,8CAKnCp7C,GAA2B,oCAgB3Bq7C,GACP,6CAKOC,GACP,yCAMOC,GACP,0CAOOC,GAAa,uBAKbp6C,GAAuB,gCAMvBq6C,GAAqB,+BAKrBh6C,GAAyB,kCAMzBkC,GACP,2CAWOC,GACP,2CAKO83C,GACP,wCAKOC,GAAgB,2BAKhBp4C,GAAkB,4BAKlBC,GAAmB,6BAKnBo4C,GAAmB,8BAQnBC,GAAc,wBAKdC,GAA4B,gCAO5BC,GAAqB,8BAQrBC,GAAgB,0BAMhBC,GAAwB,iCAQxBx4C,GACP,wCAMOy4C,GAAc,wBAKdC,GAAY,sBAKZC,GAAoB,yBAKpBC,GAAsB,2BAMtBC,GAAmC,8CAKnCC,GAAmB,8BAKnBC,GAAoB,8BAKpBC,GAAqB,+BAKrBC,GAAkB,4BAQlB75C,GAAyB,oCAQzBC,GAAyB,oCAYzBE,GAAwB,mCASxBC,GAAqC,gDASrCC,GAAqC,gDAKrCy5C,GAA0B,qCAK1Bx5C,GAA8B,yCAK9BE,GAAyB,+FC7c/B,MAAMu5C,GAAuB,sDCQvBC,GAAoB,wBAMpBC,GACP,oCAMOC,GACP,wCAKOC,GAAU,cAKVC,GAAY,gBAMZC,GAAoB,wBAKpBC,GACP,kCAMOC,GACP,kCAMOh5B,GAAU,cAMVi5B,GAAoB,0BAKpBC,GAAwB,wBAMxBC,GAAyB,6BCxEhCC,GAA6B,GA6CnC,SAASC,GAAgBl5E,EAAOnB,EAAS+hE,GACrC,GAAqB,iBAAV5gE,QAA4C,IAAfA,EAAM0E,KAkB1C,OARAlI,KAAK28E,IAAM,CACPn5E,MAAAA,EACAkgE,YAAarhE,EACb+hE,QAASA,GAAWjmE,MAAMC,QAAQgmE,GAC5BA,EAAQ79D,MAAM,QACd4F,GAGF3I,EAAM0E,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACDlI,KAAKkI,KAAO00E,GACZ58E,KAAKjB,QACC09E,GAA2Bz8E,KAAKkI,OAC3BlI,KAAK28E,IAAIvY,SAAW,IAAIp2D,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDhO,KAAKkI,KAAO00E,GACZ58E,KAAKjB,QACC09E,GAA2Bz8E,KAAKkI,OAC3BlI,KAAK28E,IAAIvY,SAAW,IAAIp2D,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBAAwB,CACzB,MAAMq3D,EAAiB7hE,EAAM6hE,gBAAkB7hE,EAAM4hE,WAKjD/iE,GACOA,EAAQwhE,SACNO,GAAWA,EAAQj/D,QAAQ,UAAY,KACrB,aAAnBkgE,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXrlE,KAAKkI,KAAO00E,GACZ58E,KAAKjB,QACC09E,GAA2Bz8E,KAAKkI,MA6CtD,SAA2C20E,EAAsBnZ,GAC7D,GAAIA,GAAeA,EAAYG,OAASH,EAAYG,MAAMb,UACtD,OAAQ6Z,GACR,IAAK,QACD,OAAOnZ,EAAYG,MAAMb,UAAU8Z,SACvC,IAAK,SACD,OAAOpZ,EAAYG,MAAMb,UAAU+Z,UACvC,QACI,OAAOrZ,EAAYG,MAAMb,UAAU6Z,IAAyB,GAIpE,MAAO,GAxDeG,CACE3X,EACAhjE,KAEZrC,KAAKkI,KAAO00E,GACZ58E,KAAKjB,QACC09E,GAA2Bz8E,KAAKkI,MAC5B1E,EAAM6hE,gBAEpB,MAGJ,QACIrlE,KAAKkI,KAAO00E,GACZ58E,KAAKjB,QACCyE,EAAMzE,SAAW09E,GAA2Bz8E,KAAKkI,UAGxD,IAAqB,iBAAV1E,EAWd,MAAM,IAAIsC,MAAM,qBAVZ22E,GAA2Bj5E,IAC3BxD,KAAKkI,KAAO1E,EACZxD,KAAKjB,QAAUsD,GAAWo6E,GAA2Bj5E,IAKrDxD,KAAKjB,QAAUyE,EAMvBxD,KAAK+F,MAAQvC,EAAMuC,QAAS,IAAID,OAAQC,MAlI5C02E,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,mCACNH,GAA2BG,IACrB,mCACNH,GAA2BG,IACrB,kCACNH,GAA2BG,IACrB,6BACNH,GAA2BG,IACrB,4CACNH,GAA2BG,IACrB,2CACNH,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,iDACNH,GAA2BG,IACrB,kCACNH,GAA2BG,IACrB,iDA8GNF,GAAgBn+E,UAAYD,OAAOe,OAAOyG,MAAMvH,WAChDm+E,GAAgBn+E,UAAUK,YAAc89E,GAuBxC,YCrIaO,GAAmB,cAMnBC,GAAY,OAMZC,GAAa,QAwHbC,GAA0B,0BAyB1BC,GAAe,eAwFrB,SAASC,GAAsBxuE,EAAQyyC,GAC1C,MAAO,CACHzyC,OAAAA,EACAyyC,WAAAA,EACA1uC,OAAQ,aACRrT,KAAMy9E,IAeP,MAAMM,GAAoC,SAASC,EAAOj8B,GAC7D,MAAMzyC,EAAS,2BAEf,MAAO,CACHA,OAAAA,EACA2uE,cAAeD,EACfj8B,WAAAA,EACA1uC,OAAQ/D,EACRtP,KAAMy9E,KA8CDS,GAA0B,SAAS5uE,GAAyB,IAAjByyC,EAAiB,uDAAJ,GACjE,MAAO,CACH/hD,KAAMy9E,GACNpqE,OAAQ,iBACR/D,OAAAA,EACAyyC,WAAAA,IA0BKo8B,GAAoB,SAAS7uE,GAAyB,IAAjByyC,EAAiB,uDAAJ,GAC3D,MAAO,CACH/hD,KAAMy9E,GACNnuE,OAAAA,EACA+D,OAAQ,SACR0uC,WAAAA,IA2BKq8B,GAAiB,SAAS9uE,GAAyB,IAAjByyC,EAAiB,uDAAJ,GACxD,MAAO,CACH/hD,KAAMy9E,GACNnuE,OAAAA,EACA+D,OAAQ,MACR0uC,WAAAA,IAOKs8B,GAA2B,SAASC,GAC7C,MAAO,CACHt+E,KAAMy9E,GACNnuE,OAAQ,iBACRgvE,UAAAA,IA+CKC,GAAsB,SAASx8B,GACxC,MAAO,CACH/hD,KAAMy9E,GACNnuE,OAAQ,YACRyyC,WAAAA,ICndKy8B,GAAc,wBAOdC,GAAkB,6BAKlBC,GAAkB,6BASlBC,GAAmB,6BAKnBC,GAAmB,qDChCzB,MAAMC,GAAS,SAETC,GAAQ,QAERC,GAAU,UAEVC,GAAoB,YAEpBC,GAAS,SAETC,GAAO,OAEPC,GAAW,WAEXC,GAAe,eAEfC,GAAU,UCFjBC,GAAwB,CAC1B,OAAUT,GACV,SAAYA,GACZ,MAASC,GACT,QAAWC,GACX,oBAAqBC,GACrB,OAAUC,IA2Cd,SAASM,KACL,MAAM1d,EAAYF,UAAUE,UAE5B,GAAIA,EAAUp7D,MAAM,YAAa,CAC7B,MAAMyH,EAAU2zD,EAAUp7D,MAAM,6BAA6B,GAE7D,MAAO,CACHiC,KAAMy2E,GACNjxE,QAAAA,GAED,QAAwC,IAA7BjR,OAAOuiF,kBACrB,MAAO,CACH92E,KAAMy2E,GACNjxE,aAASvB,GAUrB,SAAS8yE,KACL,MAAM5d,EAAYF,UAAUE,UAE5B,GAAIA,EAAUp7D,MAAM,eAAgB,CAChC,MAAMyH,EAAU2zD,EAAUp7D,MAAM,yBAAyB,GAEzD,MAAO,CACHiC,KAAMw2E,GACNhxE,QAAAA,IASZ,SAASwxE,KACL,MAAMj5E,EACAk7D,UAAUE,UAAUp7D,MAAM,wCAChC,IAAIyH,EAMJ,GAAIzH,GAA+B,gBAAtBk7D,UAAUge,QAA2B,CAC9C,IAAIj3E,EASJ,OAPIjC,GAASA,EAAM1G,OAAS,IACxB2I,EAAOjC,EAAM,GACbyH,EAAUzH,EAAM,IAEpBiC,IAASA,EAAO,gBAChBwF,IAAYA,EAAU,WAEf,CACHxF,KAAM02E,GACNlxE,QAAAA,IC3HZ,MAAM0xE,WAA0Bh1D,GAAa,4CAK9B,MAL8B,+GAYzCie,QACIroC,KAAKq/E,SAAW,GAQhB9/E,aACA,OAAOjB,OAAOmE,KAAKzC,KAAKq/E,UAAU9/E,OAStCy3D,QAAQsoB,GACJ,OAAOt/E,KAAKq/E,SAASC,GAWzBlyB,QAAQkyB,EAASC,GACbv/E,KAAKq/E,SAASC,GAAWC,EAS7BlyB,WAAWiyB,UACAt/E,KAAKq/E,SAASC,GASzBp1E,IAAIoD,GACA,MAAM7K,EAAOnE,OAAOmE,KAAKzC,KAAKq/E,UAE9B,KAAI58E,EAAKlD,QAAU+N,GAInB,OAAO7K,EAAK6K,GAQhB25C,YACI,OAAO1jD,KAAKF,UAAUrD,KAAKq/E,WA8H5B,MAAMG,GAAoB,IAvHjC,cAAgCp1D,GAK5BxrB,cACI6gF,QAEA,IACIz/E,KAAKq/E,SAAW5iF,OAAOijF,aACvB1/E,KAAK2/E,uBAAwB,EAC/B,MAAOC,IAIJ5/E,KAAKq/E,WACNt6E,QAAQknB,KAAK,8BACbjsB,KAAKq/E,SAAW,IAAID,GACpBp/E,KAAK2/E,uBAAwB,GASrCE,yBACI,OAAO7/E,KAAK2/E,sBAQhBt3C,QACIroC,KAAKq/E,SAASh3C,QACdroC,KAAK8rB,KAAK,WAQVvsB,aACA,OAAOS,KAAKq/E,SAAS9/E,OAUzBy3D,QAAQsoB,GACJ,OAAOt/E,KAAKq/E,SAASroB,QAAQsoB,GAUjClyB,QAAQkyB,EAASC,GAAwC,IAA9BO,EAA8B,wDACrD9/E,KAAKq/E,SAASjyB,QAAQkyB,EAASC,GAE1BO,GACD9/E,KAAK8rB,KAAK,WAQlBuhC,WAAWiyB,GACPt/E,KAAKq/E,SAAShyB,WAAWiyB,GACzBt/E,KAAK8rB,KAAK,WAUd5hB,IAAI5K,GACA,OAAOU,KAAKq/E,SAASn1E,IAAI5K,GAQ7B2nD,YACI,GAAIjnD,KAAK6/E,yBACL,OAAO7/E,KAAKq/E,SAASp4B,YAGzB,MAAM1nD,EAASS,KAAKq/E,SAAS9/E,OACvBwgF,EAAsB,GAE5B,IAAK,IAAIzgF,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,MAAM4K,EAAMlK,KAAKq/E,SAASn1E,IAAI5K,GAE9BygF,EAAoB71E,GAAOlK,KAAKq/E,SAASroB,QAAQ9sD,GAGrD,OAAO3G,KAAKF,UAAU08E,KC3MxB35E,IAASyB,EAAAA,EAAAA,qDCDf,ODiBe,cF+JA,MAQXjJ,YAAYohF,GACR,IAAI93E,EAAMwF,EAGV,GADA1N,KAAKigF,QAAUC,GAAAA,UAAiB/e,UAAUE,gBACf,IAAhB2e,EAA6B,CACpC,MAAMG,EArDlB,SAAiBC,GACb,IAAIJ,EACJ,MAAMK,EAAY,CACdnB,GACAH,GACAE,IAIJ,IAAK,IAAI3/E,EAAI,EAAGA,EAAI+gF,EAAU9gF,OAAQD,IAElC,GADA0gF,EAAcK,EAAU/gF,KACpB0gF,EACA,OAAOA,EAIf,MAAM93E,EAAOk4E,EAAO36D,iBAEpB,OAAIvd,KAAQ42E,GACD,CACH52E,KAAM42E,GAAsB52E,GAC5BwF,QAAS0yE,EAAOz6D,sBAKxBq6D,EAhIJ,WACI,MAAM3e,EAAYF,UAAUE,UACtB2e,EAAc,CAChB93E,KAAM22E,GACNnxE,aAASvB,GAGb,GAAIk1D,EAAUp7D,MAAM,YAAco7D,EAAUp7D,MAAM,QAE9C,GAAIo7D,EAAUp7D,MAAM,WAAY,CAE5B,MAAMyH,EAAU2zD,EAAUp7D,MAAM,oBAAoB,GAEhD8E,OAAO2E,SAAShC,EAAS,IAAM,KAC/BsyE,EAAY93E,KAAOm2E,GACnB2B,EAAYtyE,QAAUA,QAG1BsyE,EAAY93E,KAAOm2E,GACnB2B,EAAYtyE,QAAU2zD,EAAUp7D,MAAM,oBAAoB,GAIlE,OAAO+5E,EAyGOM,GACVN,GAIG,CACH93E,KAAM22E,GACNnxE,aAASvB,IAoBuBmK,CAAQtW,KAAKigF,SAEzC/3E,EAAOi4E,EAAoBj4E,KAC3BwF,EAAUyyE,EAAoBzyE,aACvBsyE,EAAY93E,QAAQ42E,IAC3B52E,EAAO42E,GAAsBkB,EAAY93E,MACzCwF,EAAUsyE,EAAYtyE,UAEtBxF,EAAO22E,GACPnxE,OAAUvB,GAGdnM,KAAKugF,MAAQr4E,EACblI,KAAKwgF,SAAW9yE,EAOpB+yE,UACI,OAAOzgF,KAAKugF,MAOhBG,WACI,OAAO1gF,KAAKugF,QAAUlC,GAO1BsC,UACI,OAAO3gF,KAAKugF,QAAUjC,GAO1BlM,YACI,OAAOpyE,KAAKugF,QAAUhC,GAO1BqC,cACI,OAAO5gF,KAAKugF,QAAU/B,GAO1BqC,WACI,OAAO7gF,KAAKugF,QAAU9B,GAO1BqC,SACI,OAAO9gF,KAAKugF,QAAU7B,GAO1BqC,aACI,OAAO/gF,KAAKugF,QAAU5B,GAO1BqC,gBACI,OAAOhhF,KAAKugF,QAAU3B,GAO1BqC,aACI,OAAOjhF,KAAKwgF,SAgBhBU,gBAAgBC,GACZ,GAAInhF,KAAKwgF,SACL,OAAOxgF,KAAKigF,QAAQv5D,UAAUy6D,GAatCC,qBAAqB1zE,GACjB,OAAO1N,KAAKkhF,gBAAgB,CAAE,CAAClhF,KAAKugF,OAAS,IAAG7yE,MAYpD2zE,kBAAkB3zE,GACd,OAAO1N,KAAKkhF,gBAAgB,CAAE,CAAClhF,KAAKugF,OAAS,IAAG7yE,MAapD4zE,iBAAiB5zE,GACb,OAAO1N,KAAKkhF,gBAAgB,CAAE,CAAClhF,KAAKugF,OAAS,IAAG7yE,QEhUpD9O,cACI6gF,QACAr5E,GAAO+L,KACF,sBAAqBnS,KAAKygF,mBAAmBzgF,KAAKihF,gBAU3DM,8BACI,OAAOvhF,KAAKwhF,mBAAqBxhF,KAAKyhF,iBAAmBzhF,KAAKoyE,YAelEoP,kBACI,OAAQxhF,KAAK0gF,YACN1gF,KAAK+gF,cACL/gF,KAAK8gF,UACL9gF,KAAK2gF,aACJ3gF,KAAKyhF,gBAQjBC,eACI,MAAM,UAAErgB,EAAF,eAAasgB,EAAb,SAA6Bz7D,GAAai7C,UAEhD,OAAOygB,QAAQvgB,EAAUp7D,MAAM,qBACvB07E,GAAkBA,EAAiB,GAAK,WAAWn2E,KAAK0a,GAWpEu7D,gBAEI,OAAOzhF,KAAKigF,QAAQj5D,SAAS,gBACY,IAA3Bm6C,UAAU2B,mBAC8B,IAAxC3B,UAAU2B,aAAawC,mBACM,IAA7B7oE,OAAOklE,mBAEdrjE,OAAOmE,KAAKk/D,kBAAkBpjE,WAAW4G,QAAQ,qBAAuB,EAQnF08E,QACI,MAAO,eAAgBplF,QAAUA,OAAOqlF,WAAW,6BAA6Bv5D,QAQpFi1C,cACI,QAAIx9D,KAAK6gF,YAAc7gF,KAAK+hF,oBAlGA,MAsGpB/hF,KAAKwhF,mBAAqBxhF,KAAKgiF,4BAvGX,IAwGrBhiF,KAAKoyE,aACLpyE,KAAKghF,iBACLhhF,KAAKyhF,iBAOhBQ,4BACI,OAAOjiF,KAAKwhF,mBAAqBxhF,KAAKoyE,YAO1C8P,wBACI,OAAOliF,KAAKmiF,kBAxHa,GAiI7BC,qCACI,OAAOpiF,KAAKoyE,aAAepyE,KAAKqhF,kBAAkB,MAStDgB,qCACI,OAAOriF,KAAKwhF,mBAAqBxhF,KAAKghF,gBAQ1CsB,8BAGI,OAAQtiF,KAAKoyE,cAAgBpyE,KAAKyhF,gBAOtCc,2BACI,OAAOX,QAAQnlF,OAAOklE,mBACf,wBAAyBllE,OAAOklE,kBAAkBpjE,WAClD9B,OAAOktE,qBAC0C,IAA1CltE,OAAOktE,eAAe6Y,mBAI5BxiF,KAAKyhF,gBAOjBgB,4BACI,OAAOthB,UAAU2B,mBACuC,IAA1C3B,UAAU2B,aAAa4f,qBACqB,IAA5CvhB,UAAU2B,aAAa91C,iBAOzC21D,sCACI,OAAO3iF,KAAKwhF,mBAAqBxhF,KAAKghF,iBAAmBhhF,KAAKyhF,gBAQlEmB,8BACI,YAA6C,IAA/BnmF,OAAOomF,qBACdA,oBAAoBC,oBAAoB39E,QAAQ,aAAe,EAM1E49E,wBACI,YAAwC,IAA1BtmF,OAAOktE,gBACdrrE,OAAOmE,KAAKknE,eAAeprE,WAAW4G,QAAQ,8BAAgC,IAI7EnF,KAAKyhF,gBAQjBuB,wBASI,OAAQhjF,KAAKoyE,YAQjB6Q,cACI,OAAOjjF,KAAKwhF,mBAAqBxhF,KAAKghF,gBAQ1CkC,6BACI,OAAOljF,KAAKwhF,mBAAqBxhF,KAAKghF,iBAAmBhhF,KAAKyhF,gBAQlE0B,cACI,OAAQnjF,KAAKghF,gBAOjBoC,uBACI,OAAO,EAOXC,0BACI,YAA4C,IAA9BliB,UAAU4E,sBACkB,IAA3B5E,UAAU2B,mBAET,IADE3B,UAAU2B,aAAaiD,gBAa7Cud,2BACI,OAAO1B,QAAQnlF,OAAO8mF,uBAO1BC,4BACI,QAAqC,IAAxB/mF,OAAO+rE,eACb/rE,OAAO+rE,aAAajqE,UAAUklF,qBACjC,OAAO,EAKX,MAAM52E,EAAS,IAAI62E,eAEnB,IAGI,OAFAjnF,OAAOknF,YAAY92E,EAAQ,IAAK,CAAEA,KAE3B,EACT,MACE,OAAO,GAOf+2E,mBACI,OAAOhC,QAAQnlF,OAAO+rE,cACf/rE,OAAO+rE,aAAaga,iBACpB/lF,OAAO+rE,aAAaga,gBAAgB,SAASxqC,OAAOzlC,MAAKmiC,GAA4B,cAAnBA,EAAMxiB,YACxEz1B,OAAOktE,gBACPltE,OAAOktE,eAAe6Y,iBACtB/lF,OAAOktE,eAAe6Y,gBAAgB,SAASxqC,OAAOzlC,MAAKmiC,GAA4B,cAAnBA,EAAMxiB,YAQrFwvC,sBACI,OAAQ1hE,KAAKghF,gBAQjB6C,uBACI,OAAO7jF,KAAKwhF,kBAQhBsC,cAGI,QAAS9jF,KAAKoyE,aAAepyE,KAAKqhF,kBAAkB,OAQxDW,2BACI,GAAIhiF,KAAKwhF,kBAAmB,CAExB,GAAIxhF,KAAK8gF,SAEL,OAAO/1E,OAAO2E,SAAS5S,QAAQC,SAAS4kB,SAAU,IAQtD,MAAMoiE,EAAK5iB,UAAUE,UAErB,GAAI0iB,EAAG99E,MAAM,UAIT,OAFM8E,OAAO2E,SAASq0E,EAAG99E,MAAM,oBAAoB,GAAI,IAM/D,OAAQ,EAQZ87E,oBACI,OAAI/hF,KAAK6gF,WACE91E,OAAO2E,SAAS1P,KAAKihF,aAAc,KAGtC,EAQZkB,iBACI,OAAIniF,KAAKyhF,gBACE12E,OAAO2E,SAAS1P,KAAKihF,aAAc,KAGtC,8BEjZhB,MAGM76E,IAASyB,EAAAA,EAAAA,qDAoVf,OAxSA,MAIIjJ,cACIoB,KAAK61B,QAQTA,QAOI71B,KAAKgkF,UAAW,EAMhBhkF,KAAKikF,kBAAoB,IAAI18C,IAO7BvnC,KAAKksC,MAAQ,GAMblsC,KAAKkkF,oBAAsB,GAO3BlkF,KAAKmkF,eAAiB,GAEtBnkF,KAAKokF,uBAAuB,CACxB,WAAcjjB,UAAUE,UACxB,aAAgB/7C,GAAQm7D,YAOhC4D,UACIj+E,GAAO6lB,KAAK,mCAERjsB,KAAKikF,mBAAqBjkF,KAAKikF,kBAAkB5xD,KAAO,GACxDryB,KAAKikF,kBAAkBthF,SAAQkoB,IACI,mBAApBA,EAAQw5D,SACfx5D,EAAQw5D,aAKpBrkF,KAAKskF,qBAAqB,IAC1BtkF,KAAKgkF,UAAW,EAQpBM,qBAAqBtsD,GACjB,GAAIh4B,KAAKgkF,SACL,OAGJhkF,KAAKikF,kBAAoB,IAAI18C,IAAIvP,GAEjCh4B,KAAKukF,qBAGL,MAAMr4C,EAAQlsC,KAAKksC,MAEnBlsC,KAAKksC,MAAQ,KACTA,GACAA,EAAMvpC,SAAQ01B,GAASr4B,KAAKwkF,WAAWnsD,KAS/CksD,qBACIvkF,KAAKikF,kBAAkBthF,SAAQkoB,IAC3B,IACIA,EAAQ45D,kBAAkBzkF,KAAKkkF,qBACjC,MAAO1gF,GACL4C,GAAO6lB,KACA,uEAAsBzoB,SAezC4gF,uBAAuBM,GACnB1kF,KAAKkkF,oBAAsB,IACpBlkF,KAAKkkF,uBACLQ,GAGP1kF,KAAKukF,qBAQTI,kBAAkBz8E,GACdlI,KAAKmkF,eAAiBj8E,EACtBlI,KAAKokF,uBAAuB,CAAE,gBAAmBl8E,IAgBrD08E,UAAUC,GAA4B,IAAjBH,EAAiB,uDAAJ,GAC9B,GAAI1kF,KAAKgkF,SACL,OAGJ,IAAI3rD,EAAQ,KAEa,iBAAdwsD,EACPxsD,EAAQ,CACJ74B,KAAMy9E,GACNnuE,OAAQ+1E,EACRpH,cAAeoH,EACfhyE,OAAQgyE,EACRtjC,WAAYmjC,GAEY,iBAAdG,IACdxsD,EAAQwsD,GAGP7kF,KAAK8kF,sBAAsBzsD,GAOhCr4B,KAAKwkF,WAAWnsD,GANZjyB,GAAO5C,MACF,mCAAkCD,KAAKF,UAAUg1B,MAoB9DysD,sBAAsBzsD,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAM74B,OACP64B,EAAM74B,KAAOy9E,IAGjB,MAAMz9E,EAAO64B,EAAM74B,KAEnB,OAAIA,IAASy9E,IAAoBz9E,IAAS09E,IPxN3B,OOyNR19E,GAAoBA,IAAS29E,IAChC/2E,GAAO5C,MAAO,uBAAsBhE,MAE7B,GAGPA,IAAS09E,GACF0E,QAAQvpD,EAAMnwB,OAKzBmwB,EAAMvpB,OAASupB,EAAMvpB,QAAUupB,EAAMnwB,MAAQmwB,EAAMolD,cACnDplD,EAAMolD,cAAgBplD,EAAMolD,eAAiBplD,EAAMnwB,MAAQmwB,EAAMvpB,OACjEupB,EAAMxlB,OAASwlB,EAAMxlB,QAAUwlB,EAAMnwB,MAAQmwB,EAAMvpB,QAC5CupB,EAAMolD,cAERplD,EAAMvpB,QAAWupB,EAAMolD,eAAkBplD,EAAMxlB,UAQhDrT,IAAS29E,KACT9kD,EAAM0sD,WAAa1sD,EAAM0sD,YAAc,sBACvC1sD,EAAM2sD,cAAgB3sD,EAAM2sD,eAAiB,aACjB,eAAxB3sD,EAAM2sD,eAAmC3sD,EAAM4sD,cAC/C5sD,EAAM4sD,YAAcjlF,KAAKmkF,gBAIxB9rD,EAAM0sD,YAAe1sD,EAAM6sD,UACxB7sD,EAAM2sD,eAAkB3sD,EAAM4sD,gBAClC7+E,GAAO5C,MACH,gFAGG,IArBX4C,GAAO5C,MACH,6DAEG,IAgCf2hF,iBAAiB9sD,GACb,QAAIr4B,KAAKksC,QACLlsC,KAAKksC,MAAMhoC,KAAKm0B,GAIZr4B,KAAKksC,MAAM3sC,OAxTJ,KAyTPS,KAAKksC,MAAM5mC,OAAO,EAAG,IAGlB,GAYfk/E,WAAWnsD,GACHr4B,KAAKmlF,iBAAiB9sD,IAGtBr4B,KAAKikF,kBAAkBthF,SAAQkoB,IAC3B,IACIA,EAAQ+5D,UAAUvsD,GACpB,MAAO5vB,GACLrC,GAAO6lB,KAAM,kCAAiCxjB,qCCrVlE,MAAMrC,GAASlE,EAAAA,MAAAA,6CAQTkjF,GASc,iBAmCdC,GACK,QADLA,GAEK,QAFLA,GAGe,gBAOrB,IAAIC,GAcW,MAAMC,GAOW,6BAAC/hF,EAAOE,GAC5B6hF,GAAUC,SAAqB,YAAVhiF,GACrB4C,GAAO5C,MAAO,sBAAqBA,UAAcE,KAUrC,qBAACF,EAAOE,GAIxB,GAHA0C,GAAOD,IAAK,yBAAwB3C,SAAaE,KAGnC,YAAVF,EACA,OAGJ+hF,GAAUE,oBAAqB,EAG/B,IAAIC,GAAmB,EACnBC,EAAkB,KAEtB,IAAK,MAAMC,KAAqBL,GAAUM,QAAQt1E,SACzCq1E,EAAkBE,YACnB1/E,GAAO4gD,MAAM,+BACT4+B,EAAkBG,kBAClBL,GAAmB,EACdC,IACDA,EAAkBC,KAM7BF,GAILH,GAAUS,kBAAkBL,GASR,yBAACM,GAIrB,MAAMC,EAAgBD,EAAWE,OAC3BC,EAAYH,EAAWI,eAG7B,IAAK,MAAMld,KAAUoc,GAAUe,aAC3B,GAAInd,EAAO3pE,OAAS6lF,GAAkB,CAClC,MAAMkB,EAAYpd,EAAOtwD,KAEzB0sE,GAAUiB,aACNP,EACAM,EAAU/mF,KACV+mF,EAAU/iF,MACV+iF,EAAU9e,IAAM2e,QACjB,GAAIjd,EAAO3pE,OAAS6lF,GAAkB,CAIzC,MAAMoB,EAAYtd,EAAOtwD,KAEzB0sE,GAAUC,QAAQkB,gBACdvd,EAAO1B,IAAM2e,EACbK,EAAUpuD,MACV6tD,EACAO,EAAUA,gBACX,GAAItd,EAAO3pE,OAAS6lF,GAA4B,CACnD,MAAMxsE,EAAOswD,EAAOtwD,KAEpB0sE,GAAUC,QAAQmB,uBACdxd,EAAO1B,IAAM2e,EACbvtE,EAAK+tE,YACLV,EACArtE,EAAKvK,KACLuK,EAAKguE,WACLhuE,EAAKosE,aAIjBM,GAAUe,aAAa/mF,OAAS,EAajB,oBAACkmE,EAAIjmE,EAAMgE,EAAOikE,GACjC,IAAIqf,EAAStjF,EAERsjF,IACD1gF,GAAO6lB,KAAK,uBACZ66D,EAAS,IAAIhhF,MAAM,kBAEnBy/E,GAAUE,oBAAsBhgB,EAChC8f,GAAUC,QAAQuB,YAAYtf,EAAIhC,EAAG0gB,OAAQ3mF,EAAMsnF,GAEnDvB,GAAUe,aAAapiF,KAAK,CACxB1E,KAAM6lF,GACNxsE,KAAM,CACFrV,MAAOsjF,EACPrf,GAAAA,EACAjoE,KAAAA,KAkBG,oBAACimE,EAAIptC,EAAOouD,GAC3B,MAAMhf,EAAKhC,GAAMA,EAAG4gB,eACdF,EAAS1gB,GAAMA,EAAG0gB,OAEpBZ,GAAUE,oBAAsBhgB,EAChC8f,GAAUC,QAAQkB,gBAAgBjf,EAAIpvC,EAAO8tD,EAAQM,GAErDlB,GAAUe,aAAapiF,KAAK,CACxBiiF,OAAAA,EACA1e,GAAAA,EACAjoE,KAAM6lF,GACNxsE,KAAM,CAAEwf,MAAAA,EACJouD,UAAAA,KAaiB,kCAACO,GAC9B,MAAMC,EAAkB,CACpB,yBACA,kBACA,oBAKJ,IAAK,MAAMvhF,KAAcuhF,EAAiB,CACtC,MAAMC,EAAiBF,EAAWthF,GAElCshF,EAAWthF,GAAc,WACrB,IAAI,2BAD6ByhF,EAC7B,yBAD6BA,EAC7B,gBACA,OAAOD,EAAepkF,MAAMkkF,EAAYG,GAC1C,MAAO1+E,GACL8vB,KAAAA,iBAAsC9vB,KAIlD,MAAM2+E,EAAe,CACjB,yBACA,kBACA,oBAKJ,IAAK,MAAM1hF,KAAc0hF,EAAc,CACnC,MAAMF,EAAiBF,EAAWthF,GAElCshF,EAAWthF,GAAc,WAA0B,2BAAdyhF,EAAc,yBAAdA,EAAc,gBAC/C/gF,GAAO4gD,MAAMthD,EAAYyhF,GACzBD,EAAepkF,MAAMkkF,EAAYG,IAGzC,MAAME,EAAsBL,EAAWD,YAGvCC,EAAWD,YAAc,SAAStf,EAAIhC,EAAIjmE,GAAe,2BAAN8G,EAAM,iCAANA,EAAM,kBAIjD9G,IAAS4lF,GAQJ9/D,GAAQ07D,iBACTj8E,SAAWA,QAAQiiD,MAAM,cAAeygB,EAAIhC,EAAIjmE,GAGpD4G,GAAO4gD,MAAM,cAAeygB,EAAIhC,EAAIjmE,KAAS8G,GAEjD,IACI+gF,EAAoB5oF,KAAKuoF,EAAYvf,EAAIhC,EAAIjmE,KAAS8G,GACxD,MAAOghF,GACD9nF,IAAS4lF,GACTrgF,SAAWA,QAAQvB,MAAM,cAAe8jF,GAExC/uD,KAAAA,iBAAsC+uD,KAa3CzB,qBAKP,OAJKP,KACDA,GAAW,IAAI/9C,KAGZ+9C,GAiBO,mBAACjjF,GACf,GAAIkjF,GAAUC,QACV,MAAM,IAAI1/E,MAAM,mDAEpB,IACI,MAAMyhF,EAAmBC,UAEzBjC,GAAUC,QAAU,IAAI+B,EACxBhC,GAAUkC,2BAA2BlC,GAAUC,SAC/CD,GAAUmC,OAAS,CACfC,UAAWtlF,EAAQslF,UACnBC,SAAUvlF,EAAQulF,UAEtBrC,GAAUsC,YAAcxlF,EAAQwlF,YAChCtC,GAAUuC,gBAAkBzlF,EAAQylF,gBAEpC,MAAMC,EAAe,IAAK1lF,EAAQ0lF,cAMlC,GAJI1lF,EAAQ2lF,kBACRD,EAAaE,mBAAsB,GAAE5lF,EAAQ2lF,oBAAoB1iE,GAAQm7D,cAGzEp+E,EAAQ8jF,OAAQ,CAEhB,MAAMlgF,EAAQ5D,EAAQ8jF,OAAOlgF,MAAM,gBAGnC8hF,EAAaG,OAAS7lF,EAAQ6lF,QAAWjiF,GAASA,EAAM,IAAO,IAInEs/E,GAAUC,QAAQ2C,WACd5C,GAAUsC,YACVtC,GAAUuC,gBACVvC,GAAUmC,OACVnC,GAAU6C,mBACVj8E,EACA47E,GAEJ,MAAMM,EAAqBhmF,EAAQgmF,mBAcnC,OAZIA,IACA9C,GAAUC,QAAQ8C,uBAAuBD,GAEzCA,IAAqBlkB,MAAK3tD,IAClBA,GACApQ,GAAO+L,KAAK,2BACN5O,KAAK+G,MAAMkM,GAAQ+xE,cAGhCpa,OAAM,WAGJ,EACT,MAAO1lE,GAQL,OAJA8vB,KAAAA,iBAAsC9vB,GACtC88E,GAAUC,QAAU,KACpBp/E,GAAO5C,MAAMiF,IAEN,GAWY,8BACvB,OAAOm5E,QAAQ2D,GAAUC,SASG,iCAACgD,EAAa/iB,GAC1C8f,GAAUkD,aAAahjB,EArYT,mBAqY2C+iB,GASpC,0BAAC//E,EAAGg9D,GACzB,IACI8f,GAAUiB,aACN/gB,EACA2f,GACA38E,EACAg9D,GAAMA,EAAG4gB,gBACf,MAAO7iF,GAIDuB,SAAqC,mBAAlBA,QAAQvB,OAE3BuB,QAAQvB,MAAM,4BAA6BA,IAcpC,oBAACklF,EAAcC,EAASC,GACvC,OAAO,IAAIp+D,SAAQ,CAACC,EAASrU,KACzB,GAAImvE,GAAUC,QACVD,GAAUC,QAAQqD,iBACdH,EACA,CACIhB,OAAQnC,GAAUmC,OAClBiB,QAAAA,EACAC,QAAAA,IAEJ,CAAC9xD,EAAQ/3B,KACU,YAAX+3B,EACArM,EAAQ1rB,GAERqX,EAAOrX,UAGhB,CACH,MAAMu5B,EAAS,sDAEflyB,GAAO5C,MAAM80B,GACbliB,EAAOkiB,OAWU,8BAAC7vB,EAAGg9D,GAC7B8f,GAAUiB,aAAa/gB,EAneb,eAme6Ch9D,EAAG,MAS1C,qBAACqgF,EAAMtpF,EAAMimE,GAC7B,IAAIptC,EAGAA,EADS,UAAT74B,EACQspF,EA/dJ,aACC,cAgeGA,EAneL,YACE,cAqeTvD,GAAUkD,aAAahjB,EAAIptC,GAe/Bz5B,YAAYmqF,EAAK1mF,GACbrC,KAAKmmF,OAAS9jF,EAAQ8jF,OACtBnmF,KAAK+oF,IAAMA,EACX/oF,KAAKqmF,eAAiB0C,EAAI1C,eAC1BrmF,KAAKgpF,aAAe3mF,EAAQ2mF,cAxeR,QAyepBhpF,KAAK8lF,WAAY,EAEjBP,GAAUM,QAAQrgD,IAAIxlC,MAElBulF,GAAUE,qBACVzlF,KAAK+lF,gBAK0B,IAA3BR,GAAUM,QAAQxzD,MAClBkzD,GAAUS,kBAAkBhmF,OAUxC+lF,gBACI3/E,GAAO+L,KAAK,eAAgBnS,KAAKgpF,cACjC,IACI,MAAMC,EAAmB,CACrBC,mBACIlpF,KAAK+oF,IAAII,MACH5D,GAAUC,QAAQ4D,aAAaC,KAC/B9D,GAAUC,QAAQ4D,aAAa/Y,QAEvC1jD,EACA44D,GAAUC,QAAQ8D,aAChBtpF,KAAKqmF,eACLrmF,KAAKgpF,aACLzD,GAAUC,QAAQ+D,YAAYC,UAC9BxpF,KAAKmmF,OACL8C,EACA1D,GAAUkE,uBAElBzpF,KAAK8lF,WAAY,EAEjB,MAAMjqB,EAAyB,YAAflvC,EAAImK,OAMpB,OAJK+kC,GACDz1D,GAAO5C,MAAM,kCAAmCmpB,EAAI5tB,SAGjD88D,EAET,MAAOr4D,GAGL,OAFA+0B,KAAAA,iBAAsC/0B,IAE/B,GAoBfkmF,4BACQp7E,EACAqkB,EACAg3D,EACA9C,EACA5B,GACJ,IAAKM,GAAUC,QACX,OAGJ,MAAMoB,EAAcj0D,EAAU4yD,GAAUmC,OAASiC,EAE7CpE,GAAUE,mBACVF,GAAUC,QAAQmB,uBACd3mF,KAAKqmF,eACLO,EACA5mF,KAAKmmF,OACL73E,EACAu4E,EACA5B,GAEJM,GAAUe,aAAapiF,KAAK,CACxB1E,KAAM6lF,GACN5d,GAAIznE,KAAKqmF,eACTxtE,KAAM,CACF+tE,YAAAA,EACA3B,YAAAA,EACA32E,KAAAA,EACAu4E,WAAAA,KAYhB+C,2BACIrE,GAAUkD,aAAazoF,KAlmBV,mBAymBjB6pF,qBACQtE,GAAUE,oBACVF,GAAUC,QAAQkB,gBACd1mF,KAAKqmF,eACLd,GAAUC,QAAQsE,YAAYC,iBAC9B/pF,KAAKmmF,QAEbZ,GAAUM,QAAQllB,OAAO3gE,MAM7BgqF,+BACIzE,GAAUiB,aACNxmF,KA/oBc,uBAipBd,KACAA,KAAKqmF,gBAQb4D,sBAAsBxhF,GAClB88E,GAAUiB,aACNxmF,KAlqBK,cAkqB4ByI,EAAGzI,KAAKqmF,gBAQjD6D,uBAAuBzhF,GACnB88E,GAAUiB,aACNxmF,KA3qBM,eA2qB4ByI,EAAGzI,KAAKqmF,gBAQlD8D,sBAAsBC,GAClB7E,GAAUkD,aACNzoF,KACAoqF,EApqBM,eADF,cA+qBZC,uBAAuBhqF,EAAOiO,GAC1B,IAAIm4E,EAEAn4E,IACAm4E,EAAY,CAAEn4E,KAAAA,IAGlBi3E,GAAUkD,aACNzoF,KACAK,EA/qBU,mBACD,kBA+qBTomF,GAQR6D,uBAAuB7hF,GACnB88E,GAAUiB,aACNxmF,KAntBa,sBAmtB4ByI,EAAGzI,KAAKqmF,gBAQzDkE,wBAAwB9hF,GACpB88E,GAAUiB,aACNxmF,KA5tBc,uBA4tB4ByI,EAAGzI,KAAKqmF,gBAQ1DmE,0BAA0B/hF,GACtB88E,GAAUiB,aACNxmF,KAruBS,kBAquB4ByI,EAAGzI,KAAKqmF,iBAQzDd,GAAUC,QAAU,KAKpBD,GAAUe,aAAe,GAOzBf,GAAUE,oBAAqB,EAM/BF,GAAUsC,YAAc,KAMxBtC,GAAUuC,gBAAkB,KAS5BvC,GAAUmC,OAAS,KChxBnBjrF,OAAOy0E,aAAez0E,OAAOy0E,cAAgBz0E,OAAO00E,mBAEpD,IAAIzjD,GAAU,KAkEC,SAAS+8D,GAAoB59E,EAAQ69E,EAAUz2E,GAC1DjU,KAAK6M,OAASA,EACd7M,KAAK2qF,WAAa,KAClB3qF,KAAK4qF,cAAgBF,EACrB1qF,KAAK6qF,WAAa,EAClB7qF,KAAKiU,SAAWA,EChFb,SAAS62E,GAAqBC,GACjC,IAAIC,EAAYD,EAMhB,OAJIA,GAAUhgF,OAAOk4B,mBACjB+nD,EAAY,GAGTA,EAAY,EAShB,SAASC,GAAiBC,GAC7B,OAAOA,EAAW3rF,OAAS,EAAI2rF,EAAW9+E,QAAO,CAAClL,EAAGC,IAAMD,EAAIC,IAAK+pF,EAAW3rF,OAAS,EA6BrF,SAAS4rF,GAAqBD,GACjC,OAAOA,EAAWt/E,QAAOnC,GAASA,GAAS,IDpC3ChN,OAAOy0E,eACPxjD,GAAU,IAAIwjD,aAUdxjD,GAAQ09D,SAAW19D,GAAQ09D,WAgE/BX,GAAoBlsF,UAAU8B,MAAQ,WAClC,IAAKoqF,GAAoBY,wBACrB,OAEJ39D,GAAQhT,SACR,MAAM4wE,EAAW59D,GAAQ69D,iBAEzBD,EAASE,sBAxF2B,GAyFpCF,EAASG,QA/FsB,KAiGhB/9D,GAAQg+D,wBAAwB1rF,KAAK6M,QAE7Co/C,QAAQq/B,GAEftrF,KAAK2qF,WAAagB,aACd,KACI,MAAMlqF,EAAQ,IAAIxD,WAAWqtF,EAASM,mBAEtCN,EAASO,sBAAsBpqF,GAC/B,MAAMopF,EA3ElB,SAAoCiB,GAEhC,IAAIC,EAAY,EAEhB,MAAMxsF,EAASusF,EAAQvsF,OAEvB,IAAK,IAAID,EAAI,EAAGA,EAAIC,EAAQD,IACpBysF,EAAYD,EAAQxsF,KACpBysF,EAAYD,EAAQxsF,IAI5B,OAAOuuE,aAAake,EAAY,KAAO,KAAKC,QAAQ,IA+DzBC,CAA2BxqF,GAM9CzB,KAAK6qF,WA5DjB,SAAsBqB,EAAUC,GAC5B,IAAI1iF,EAAQ,EACZ,MAAM2iF,EAAOD,EAAYD,EAUzB,OAPIziF,EADA2iF,EAAO,GACCD,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLre,WAAWpkE,EAAMuiF,QAAQ,IAgDNK,CAAaxB,EAAY7qF,KAAK6qF,YAChD7qF,KAAKiU,SAASjU,KAAK6qF,cAEvB7qF,KAAK4qF,gBAObH,GAAoBlsF,UAAUsG,KAAO,WAC7B7E,KAAK2qF,aACL2B,cAActsF,KAAK2qF,YACnB3qF,KAAK2qF,WAAa,OAU1BF,GAAoBY,sBAAwB,WACxC,OAAOzJ,QAAQl0D,KCjFZ,MAAM6+D,GAIT3tF,cACIoB,KAAKwsF,QAAU,EACfxsF,KAAKsN,EAAI,EASbm/E,QAAQhjF,GACiB,iBAAVA,IAGXzJ,KAAKsN,GAAK,EACVtN,KAAKwsF,QAAUxsF,KAAKwsF,SAAY/iF,EAAQzJ,KAAKwsF,SAAWxsF,KAAKsN,GAOjEo/E,aACI,OAAO1sF,KAAKwsF,SCrFpB,MAAMpmF,IAASyB,EAAAA,EAAAA,6DAUR,MAAM8kF,GAOT/tF,YAAY2rB,EAASqiE,GACjB5sF,KAAK6sF,aAAetiE,EACpBvqB,KAAK8sF,UAAY,EACjB9sF,KAAK+sF,YAAc,EACnB/sF,KAAKgtF,yBAA2BJ,EAChC5sF,KAAKgiE,MAAQ,IAAIuqB,GAQrBU,oBACI,MAAO,CACHC,kBA9BI,GA8BeltF,KAAKgiE,MAAM0qB,cAAwBV,QAAQ,GAC9DmB,cAAentF,KAAK+sF,aAS5BK,gBAEIptF,KAAKqtF,qBAAuBx/D,IACxB,MAAMua,EAAUva,EAAKy/D,aAErB,IAAK,MAAM51E,KAAQ0wB,EACfpoC,KAAK8sF,YACL9sF,KAAK+sF,YAAc97E,KAAKmO,IAAIpf,KAAK+sF,YAAar1E,EAAK6Y,UAAUy7D,QAAQ,IAK7E5lF,GAAO+L,KAAK,6DACZnS,KAAKutF,SAAW,IAAI1K,oBAAoB7iF,KAAKqtF,sBAC7CrtF,KAAKutF,SAASC,QAAQ,CAAEhuF,KAAM,WAC1BiuF,UAAU,IACd,MAAM38D,EAAYhqB,KAAK8oB,MAGvB5vB,KAAK0tF,oBAAsB/B,aAAY,KACnC,MAAM/7D,EAAM9oB,KAAK8oB,MACX86D,EAAW1qF,KAAK2tF,gBACf/9D,EAAM5vB,KAAK2tF,gBA/DR,KAgEH/9D,EAAMkB,GAhEH,IAiEJhoB,EAAO9I,KAAK8sF,UAAYpC,EAE9B1qF,KAAKgiE,MAAMyqB,QAAQ3jF,GACnB9I,KAAK6sF,aAAa/gE,KACd8hE,GAAmC5tF,KAAKitF,qBAG5CjtF,KAAK8sF,UAAY,EACjB9sF,KAAK2tF,eAAiB7mF,KAAK8oB,QAC5B5vB,KAAKgtF,0BAOZa,eACI7tF,KAAKutF,UAAYvtF,KAAKutF,SAASh+B,aAC/BvvD,KAAKqtF,qBAAuB,KACxBrtF,KAAK0tF,sBACLpB,cAActsF,KAAK0tF,qBACnB1tF,KAAK0tF,oBAAsB,OC1FhC,MAAMI,GAAQ,QAKRC,GAAY,YAKZC,GAAQ,QCPfz1D,GAAuBr2B,EAAQ,MAE/BkE,IAASyB,EAAAA,EAAAA,sDASf,SAASomF,GAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJj9E,KAAKyX,MAAOwlE,EAAcC,EAAgB,KAOrD,SAASC,KACLpuF,KAAKquF,KAAO,GACZruF,KAAKsuF,QAAU,CACXz7D,SAAU,EACV07D,OAAQ,GAEZvuF,KAAKwuF,WAAa,GAClBxuF,KAAKyuF,UAAY,EACjBzuF,KAAK00C,MAAQ,GAqDjB,SAASg6C,KAML1uF,KAAKw5C,UAAY,GAMjBx5C,KAAKsuF,QAAU,GAMftuF,KAAK2uF,WAAa,KAMlB3uF,KAAKkF,UAAY,GAkBN,SAAS0pF,GAAevI,EAAgBwI,EAAqBjC,EAAeC,GACvF7sF,KAAKqmF,eAAiBA,EACtBrmF,KAAK8uF,0BAA4B,KACjC9uF,KAAK+uF,yBAA2B,KAChC/uF,KAAKgvF,mBAAqB,KAC1BhvF,KAAKivF,oBAAsB,KAC3BjvF,KAAKkvF,wBAA0B,GAC/BlvF,KAAKmvF,sBAAwB,KAC7BnvF,KAAK6sF,aAAeA,EACpB7sF,KAAKovF,gBAAkB,IAAIV,GAG3B1uF,KAAKqvF,yBAA2BR,EAEhC7uF,KAAKsvF,YAAc,GACnBtvF,KAAKuvF,gBAAkB,KACvBvvF,KAAKwvF,mBAAqB5C,EAM1B5sF,KAAKyvF,WAAa,IAAInoD,IA9G1B8mD,GAAU7vF,UAAUmxF,QAAU,SAASrB,GACnCruF,KAAKquF,KAAOA,GAAQ,IAOxBD,GAAU7vF,UAAUoxF,cAAgB,SAASnB,GACzCxuF,KAAKwuF,WAAaA,GAAc,IAQpCJ,GAAU7vF,UAAUqxF,WAAa,SAAStB,GACtCtuF,KAAKsuF,QAAQz7D,UAAYy7D,EAAQz7D,SACjC7yB,KAAKsuF,QAAQC,QAAUD,EAAQC,QAOnCH,GAAU7vF,UAAUsxF,aAAe,WAC/B7vF,KAAKsuF,QAAQz7D,SAAW,EACxB7yB,KAAKsuF,QAAQC,OAAS,GAO1BH,GAAU7vF,UAAUuxF,aAAe,SAASrB,GACxCzuF,KAAKyuF,UAAYA,GAAa,GAGlCL,GAAU7vF,UAAUwxF,SAAW,SAASr7C,GACpC10C,KAAK00C,MAAQA,GAAS,IA+E1Bk6C,GAAerwF,UAAUyxF,eAAiB,SAASV,GAC/CtvF,KAAKsvF,YAAcA,GAMvBV,GAAerwF,UAAUsG,KAAO,WACxB7E,KAAKmvF,wBACL7C,cAActsF,KAAKmvF,uBACnBnvF,KAAKmvF,sBAAwB,MAG7BnvF,KAAKuvF,kBACLjD,cAActsF,KAAKuvF,iBACnBvvF,KAAKuvF,gBAAkB,OAQ/BX,GAAerwF,UAAU+6B,cAAgB,SAAS91B,GAC9C+0B,GAAqBE,iBAAiBj1B,GACtC4C,GAAO5C,MAAM,kBAAmBA,GAChCxD,KAAK6E,QAMT+pF,GAAerwF,UAAU8B,MAAQ,SAAS4vF,GAClCA,IACI3qE,GAAQy9D,yBACR38E,GAAO+L,KAAK,6DAEhBnS,KAAKmvF,sBAAwBxD,aACzB,KACI,GAAIrmE,GAAQy9D,wBAAyB,CACjC,MAAMmN,EAAclwF,KAAKqmF,eAAe8J,eAAenwF,KAAKsvF,aAE5D,IAAK,MAAMhhF,KAAQ4hF,EACf,GAAIA,EAAYr8E,eAAevF,GAAO,CAGlC,MAAMu8E,EAAiC,IAApBqF,EAAY5hF,GAE/BtO,KAAK6sF,aAAa/gE,KACd8hE,GACA5tF,KAAKqmF,eACLt7E,OAAO2E,SAASpB,EAAM,IACtBu8E,GACA,SAKZ7qF,KAAKqmF,eAAexd,WACf1E,MAAKgF,IACFnpE,KAAK+uF,yBAAqD,mBAAnB5lB,MAAAA,OAAP,EAAOA,EAAQ3yD,QACzC2yD,EAAO3yD,SACP2yD,EACNnpE,KAAKowF,0BACLpwF,KAAK8uF,0BAA4B9uF,KAAK+uF,4BAEzC5gB,OAAM3qE,GAASxD,KAAKs5B,cAAc91B,OAG/CxD,KAAKqvF,2BAIb,MAAMgB,EAAe,KAEjBrwF,KAAKqmF,eAAexd,WACf1E,MAAKgF,IACFnpE,KAAKgvF,mBAA+C,mBAAnB7lB,MAAAA,OAAP,EAAOA,EAAQ3yD,QACnC2yD,EAAO3yD,SACP2yD,EAEN,IACInpE,KAAKswF,qBACP,MAAO9sF,GACL+0B,GAAqBE,iBAAiBj1B,GACtC4C,GAAO5C,MAAM,kCAAmCA,GAEpDxD,KAAKivF,oBAAsBjvF,KAAKgvF,sBAEnC7gB,OAAM3qE,GAASxD,KAAKs5B,cAAc91B,MAG3C6sF,IACArwF,KAAKuvF,gBAAkB5D,YAAY0E,EAAcrwF,KAAKwvF,qBAM1DZ,GAAerwF,UAAUgyF,sBAAwB,WAE7C,MAAMpC,EAAe,CACjBt7D,SAAU,EACV07D,OAAQ,GAENL,EAAc,CAChBr7D,SAAU,EACV07D,OAAQ,GAEZ,IAAIiC,EAAkB,EAClBC,EAAgB,EACpB,MAAMC,EAAc,GACdC,EAAa,GACb34C,EAAS,GACf,IAEI44C,EAGAC,EALAC,EAAuB,EACvBC,EAAqB,EAErBC,EAAuB,EACvBC,EAAqB,EAGzB,IAAK,MAAQ3iF,EAAM4iF,KAAelxF,KAAKyvF,WAAY,CAE/C,MAAMpB,EAAO6C,EAAU7C,KACjB7uF,EAAO6uF,EAAK8C,iBAAmB,WAAa,SAElDhD,EAAa3uF,IAAS6uF,EAAK+C,aAC3BlD,EAAY1uF,IAAS6uF,EAAKgD,YAG1Bb,GAAmBU,EAAU5C,QAAQz7D,SACrC49D,GAAiBS,EAAU5C,QAAQC,OAGnC,MAAM39D,EAAQ5wB,KAAKqmF,eAAeiL,eAAehjF,GAEjD,GAAIsiB,EAAO,CACHA,EAAMe,gBACNm/D,GAAwBI,EAAU5C,QAAQz7D,SAC1Ck+D,GAAsBG,EAAU5C,QAAQC,OACxCqC,EAAaM,EAAUx8C,QAEvBs8C,GAAwBE,EAAU5C,QAAQz7D,SAC1Co+D,GAAsBC,EAAU5C,QAAQC,OACxCsC,EAAaK,EAAUx8C,OAG3B,MAAM68C,EAAgB3gE,EAAM4B,mBAE5B,GAAI++D,EAAe,CACf,MAAM/C,EAAa0C,EAAU1C,WAE7B,GAAIA,EAAW1xD,OACJ0xD,EAAWzxD,SACW,IAAtByxD,EAAW1xD,QACY,IAAvB0xD,EAAWzxD,OAAe,CACjC,MAAMy0D,EAAkBd,EAAYa,IAAkB,GAEtDC,EAAgBljF,GAAQkgF,EACxBkC,EAAYa,GAAiBC,EAEjC,GAA4B,IAAxBN,EAAUzC,UAAiB,CAC3B,MAAMgD,EAAiBd,EAAWY,IAAkB,GAEpDE,EAAenjF,GAAQ4iF,EAAUzC,UACjCkC,EAAWY,GAAiBE,EAEhC,GAAIb,GAAcC,EAAY,CAC1B,MAAMa,EAAY,CACd,MAASd,EACT,MAASC,GAGPc,EAAa35C,EAAOu5C,IAAkB,GAE5CI,EAAWrjF,GAAQojF,EACnB15C,EAAOu5C,GAAiBI,QAG5BvrF,GAAO5C,MAAO,iCAAgCotB,KAItDsgE,EAAUrB,eAGd7vF,KAAKovF,gBAAgBd,QAAU,CAC3B,OAAUmC,EACV,SAAYD,GAGhBxwF,KAAKovF,gBAAgBd,QAAQ3qB,MAAQ,CACjC,OAAUotB,EACV,SAAYD,GAGhB9wF,KAAKovF,gBAAgBd,QAAQzqB,MAAQ,CACjC,OAAUotB,EACV,SAAYD,GAGhBhxF,KAAKovF,gBAAgBT,WAAa,CAC9B5+D,MACIk+D,GACIC,EAAYr7D,SAAWq7D,EAAYK,OACnCJ,EAAat7D,SAAWs7D,EAAaI,QAC7C17D,SACIo7D,GAAoBC,EAAYr7D,SAAUs7D,EAAat7D,UAC3D07D,OACIN,GAAoBC,EAAYK,OAAQJ,EAAaI,SAG7D,MAAMqD,EAAiB,GACvB,IAAIC,EAEJvzF,OAAOmE,KAAKzC,KAAKkvF,yBAAyBvsF,SAAQ2L,IAC9C,MAAM,KAAEuK,EAAF,QAAQ8Z,GAAY3yB,KAAKkvF,wBAAwB5gF,GACjDwjF,EAAgBj5E,EAAKzM,QAAO,CAAC2lF,EAAKC,IAAiBD,EAAMC,IAAgBn5E,EAAKtZ,OAEpF,GAAIozB,EACAk/D,EAAsBC,MACnB,CACH,MAAMlhE,EAAQ5wB,KAAKqmF,eAAeiL,eAAevmF,OAAOuD,IAExD,GAAIsiB,EAAO,CACP,MAAM2gE,EAAgB3gE,EAAM4B,mBAExB++D,IACAK,EAAeL,GAAiBO,QAKhD9xF,KAAKkvF,wBAA0B,GAE/BlvF,KAAK6sF,aAAa/gE,KACd8hE,GACA5tF,KAAKqmF,eACL,CACI,UAAarmF,KAAKovF,gBAAgB51C,UAClC,QAAWx5C,KAAKovF,gBAAgBd,QAChC,WAActuF,KAAKovF,gBAAgBT,WACnC,WAAc+B,EACd,UAAaC,EACb,MAAS34C,EACT,UAAah4C,KAAKovF,gBAAgBlqF,UAClC2sF,oBAAAA,EACAD,eAAAA,IAER5xF,KAAKovF,gBAAgBlqF,UAAY,IAUrC0pF,GAAerwF,UAAU0zF,oBAAsB,SAAShqF,GACpD,IAAIwB,EAAQxB,EAMZ,MAJqB,iBAAVwB,IACPA,EAAQsB,OAAOtB,IAGf0gB,MAAM1gB,GACC,EAGJwH,KAAKmO,IAAI,EAAG3V,IAavBmlF,GAAerwF,UAAU2zF,kBAAoB,SAAStiE,EAAKuiE,EAAQC,GAC/D,MAAMC,EAAWryF,KAAKiyF,oBAAoBriE,EAAIwiE,IACxCE,EAActyF,KAAKiyF,oBAAoBE,EAAOC,IAC9CG,EAAiBthF,KAAKmO,IAAI,EAAGizE,EAAWC,GAExCE,EAAS5iE,EAAI/rB,UAAYsuF,EAAOtuF,UACtC,IAAI4uF,EAAc,EAOlB,OALID,EAAS,IAETC,EAAcxhF,KAAKyX,MAAwB,EAAjB6pE,EAAsBC,IAG7CC,GAMX7D,GAAerwF,UAAU+xF,mBAAqB,WAC1C,IAAKtwF,KAAKivF,oBACN,OAEJ,MAAMyD,EAAgB,GAEtB1yF,KAAKgvF,mBAAmBrsF,SAAQitB,IAE5B,GAAiB,mBAAbA,EAAIpwB,MAA6BowB,EAAI+iE,WAA2B,cAAd/iE,EAAItD,MAAuB,CAC7E,MAAMsmE,EAA2BhjE,EAAIgjE,yBAC/BC,EAA2BjjE,EAAIijE,0BAEjCD,GAA4BC,KAC5B7yF,KAAKovF,gBAAgB51C,UAAY,CAC7B,SAAYvoC,KAAKyX,MAAMkqE,EAA2B,KAClD,OAAU3hF,KAAKyX,MAAMmqE,EAA2B,OAIxD,MAAMC,EAAsB9yF,KAAKgvF,mBAAmBzwE,IAAIqR,EAAImjE,mBACtDC,EAAqBhzF,KAAKgvF,mBAAmBzwE,IAAIqR,EAAIqjE,kBAI3D,GAAIH,GAAuBE,EAAoB,CAC3C,MAIMvmF,EAAM,GAJY6Y,GAAQk8D,kBAC1BsR,EAAoBrmF,GACpBqmF,EAAoB/pF,WACP+pF,EAAoBpmF,OAOjCwmF,EAAW,GAJM5tE,GAAQk8D,kBACzBwR,EAAmBvmF,GACnBumF,EAAmBjqF,WACPiqF,EAAmBtmF,OAE/BlN,EAAOszF,EAAoBp/C,SAG3By/C,EAA2BnzF,KAAKovF,gBAAgBlqF,UAEjDiuF,EAAyB5gF,MAAK5L,GAC/BA,EAAE8F,KAAOA,GACN9F,EAAEnH,OAASA,GACXmH,EAAEusF,UAAYA,KACjBC,EAAyBjvF,KAAK,CAC1BuI,GAAAA,EACAjN,KAAAA,EACA0zF,QAAAA,EACAE,IAAKpzF,KAAKqmF,eAAe8C,MACzBkK,mBAAoBL,EAAmBM,cACvCC,oBAAqBT,EAAoBQ,cACzCE,YAAaR,EAAmBQ,YAChCC,IAAgC,IAA3B7jE,EAAI8jE,6BASlB,GAAiB,gBAAb9jE,EAAIpwB,MAAuC,iBAAbowB,EAAIpwB,KAAyB,CAClE,MAAM2yF,EAASnyF,KAAKivF,oBAAoB1wE,IAAIqR,EAAI5oB,IAC1CsH,EAAOtO,KAAKiyF,oBAAoBriE,EAAIthB,MAE1C,IAAK6jF,IAAW7jF,EACZ,OAGJ,IAAI4iF,EAAYlxF,KAAKyvF,WAAWlxE,IAAIjQ,GAE/B4iF,IACDA,EAAY,IAAI9C,GAChBpuF,KAAKyvF,WAAWtiE,IAAI7e,EAAM4iF,IAG9B,IAAIC,GAAmB,EACnBjnF,EAAM,kBAEO,iBAAb0lB,EAAIpwB,OACJ2xF,GAAmB,EACnBjnF,EAAM,eAGV,IAAIypF,EAAa/jE,EAAI1lB,KAEhBypF,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,MAAMC,EAAgB5zF,KAAKiyF,oBAAoBE,EAAOjoF,IAChD2pF,EAAc5iF,KAAKmO,IAAI,EAAGu0E,EAAaC,GAEvCE,EAAiB9zF,KAAKiyF,oBAAoBriE,EAAIyhE,aAC9C0C,EAAoB/zF,KAAKiyF,oBAAoBE,EAAOd,aACpD2C,EAAkB/iF,KAAKmO,IAAI,EAAG00E,EAAiBC,GAarD,GAXA7C,EAAUxB,QAAQ,CACd0B,aAAcyC,EAAcG,EAC5B3C,YAAa2C,EACb7C,iBAAAA,IAQa,gBAAbvhE,EAAIpwB,KAAwB,CAC5B,MAAMgvF,EAAa,CACfzxD,OAAQnN,EAAIqkE,YACZn3D,MAAOlN,EAAIskE,YAET9tB,EAAYx2C,EAAIukE,gBAElB3F,EAAWzxD,QAAUyxD,EAAW1xD,OAChCo0D,EAAUvB,cAAcnB,GAE5B0C,EAAUpB,aAAa7+E,KAAKyX,MAAM09C,GAAa,IAE/C8qB,EAAUtB,WAAW,CACjB,SAAY5vF,KAAKkyF,kBAAkBtiE,EAAKuiE,EAAQ,iBAChD,OAAU,SAGdO,EAAcpkF,GAAQtO,KAAKiyF,oBAAoBriE,EAAIwkE,WACnDlD,EAAUtB,WAAW,CACjB,SAAY,EACZ,OAAU5vF,KAAKkyF,kBAAkBtiE,EAAKuiE,EAAQ,eAItD,MAAMz9C,EAAQ10C,KAAKgvF,mBAAmBzwE,IAAIqR,EAAIykE,SAE9C,GAAI3/C,EAAO,CAMP,MAAM4/C,EAAiB5/C,EAAMxiB,SAASz0B,MAAM,KAAK,GAEjD62F,GAAkBpD,EAAUnB,SAASuE,SAMtC,GAAiB,UAAb1kE,EAAIpwB,MAAoBowB,EAAI4oB,OAAS+7C,KAAoB3kE,EAAI4kE,aAAc,CAClF,MAAMhG,EAAa,CACfzxD,OAAQnN,EAAIqkE,YACZn3D,MAAOlN,EAAIskE,YAETO,EAAmBz0F,KAAKqmF,eAAeqO,eAAeH,IAE5D,GAAKE,MAAAA,IAAAA,EAAkBl1F,OACnB,OAGJ,MAAM+O,EAAOtO,KAAKqmF,eAAesO,aAAaF,EAAiB,IAE/D,IAAKnmF,EACD,OAEJ,IAAI4iF,EAAYlxF,KAAKyvF,WAAWlxE,IAAIjQ,GAE/B4iF,IACDA,EAAY,IAAI9C,GAChBpuF,KAAKyvF,WAAWtiE,IAAI7e,EAAM4iF,IAE1B1C,EAAWzxD,QAAUyxD,EAAW1xD,OAChCo0D,EAAUvB,cAAcnB,GAK5B,IAAIpoB,EAAYx2C,EAAIukE,gBAEpB,IAAK/tB,EAAW,CACZ,MAAM+rB,EAASnyF,KAAKivF,oBAAoB1wE,IAAIqR,EAAI5oB,IAEhD,GAAImrF,EAAQ,CACR,MAAMK,EAAS5iE,EAAI/rB,UAAYsuF,EAAOtuF,UAElC2uF,EAAS,GAAK5iE,EAAIglE,aAGlBxuB,GAFkCx2C,EAAIglE,WAAazC,EAAOyC,YAEjBpC,EAAU,KAI3D,IAAKpsB,EACD,OAKR,MAAMyuB,EAAwB70F,KAAKqmF,eAAeyO,4BAGlD1uB,EAAYyuB,EAAwB5jF,KAAKyX,MAAM09C,EAAYyuB,GAAyB,EACpF3D,EAAUpB,aAAa1pB,OAI/BpmE,KAAK6sF,aAAa/gE,KAAK8hE,GAAkC5tF,KAAKqmF,eAAgBqM,GAC9E1yF,KAAKuwF,yBAMT3B,GAAerwF,UAAU6xF,wBAA0B,WAC1CpwF,KAAK8uF,2BAIV9uF,KAAK+uF,yBAAyBpsF,SAAQitB,IAClC,GAAiB,UAAbA,EAAIpwB,KACJ,OAIJ,MAAMqrF,EAAaj7D,EAAIi7D,WAEvB,IAAKA,EACD,OAGJ,MAAMpoB,EAAkB7yC,EAAI6yC,gBACtBn0D,EAAOtO,KAAKqmF,eAAe0O,iBAAiBtyB,GAElD,GAAIn0D,EAAM,CACN,MAAMqkB,EACArkB,IAAStO,KAAKqmF,eAAesO,aAC/B30F,KAAKqmF,eAAeqO,eAAeH,KAEvCv0F,KAAK6sF,aAAa/gE,KACd8hE,GACA5tF,KAAKqmF,eACL/3E,EACAu8E,EACAl4D,QCrrBhB,MAAMvsB,GAASlE,EAAAA,MAAAA,8CAMf,IAAI8yF,GAKAC,IAAoB,EAkCxB,SAASC,GAAsB7yF,GACvBkjF,GAAU4P,wBAIT5P,GAAU6P,YAAY,CACvBvN,YAAaxlF,EAAQwlF,YACrBC,gBAAiBzlF,EAAQylF,gBACzBF,SAAUvlF,EAAQulF,SAClBD,UAAWtlF,EAAQslF,UACnBK,gBAAiB3lF,EAAQ2lF,gBACzBK,mBAAoBhmF,EAAQgmF,mBAC5BlC,OAAQ9jF,EAAQ8jF,OAChB+B,OAAQ7lF,EAAQ6lF,OAChBH,aAAc1lF,EAAQ0lF,gBAEtB3hF,GAAO5C,MAAM,+CA4EN,SAAS6xF,GAAWC,EAAMjzF,GAMrCrC,KAAKu1F,YAAc,IAAIjuD,IACvBtnC,KAAK6sF,aAAe,IAAIziE,MACxBpqB,KAAKs1F,KAAOA,EACZt1F,KAAKqC,QAAUA,GAAW,GAE1BrC,KAAKw1F,4BACCx1F,KAAKqC,QAAQwlF,aAAe7nF,KAAKqC,QAAQylF,iBAAmB9nF,KAAKqC,QAAQozF,kBAK1B,IAAzCJ,GAAWK,0BACnB11F,KAAKw1F,8BACLx1F,KAAK21F,iCACC31F,KAAKqC,QAAQszF,iCACfrwE,GAAQ07D,gBACRkU,GAAsBl1F,KAAKqC,SAtIvC,SAA0BA,GACjB4yF,KACD/7D,KAAAA,WACI72B,EAAQuzF,iBAAmB/Z,IACf,GACE,OACI1vE,GACC,IAAM+oF,GAAsB7yF,KAEnD4yF,IAAoB,GA+HhBY,CAAiB71F,KAAKqC,SAGrBrC,KAAKqC,QAAQ8jF,QACd//E,GAAO6lB,KAAK,4BAUpBjsB,KAAK81F,oBAAsB,IAAIxuD,IAE/B+tD,GAAWU,UAAUvwD,IAAIxlC,MA/E7Bq1F,GAAWhrE,KAAO,SAAShoB,GACvBgzF,GAAWW,oBAAsB3zF,EAAQ4zF,mBACF,iBAA5B5zF,EAAQ6zF,kBACfb,GAAWa,gBAAkB7zF,EAAQ6zF,iBAGE,iBAAhC7zF,EAAQwsF,sBACfwG,GAAWxG,oBAAsBxsF,EAAQwsF,qBAGC,iBAAnCxsF,EAAQ8zF,yBACfd,GAAWc,uBAAyB9zF,EAAQ8zF,wBAGhDd,GAAWK,0BAA4BrzF,EAAQqzF,2BAmEnDL,GAAWW,oBAAqB,EAChCX,GAAWxG,oBAAsB,IACjCwG,GAAWa,gBAAkB,IAC7Bb,GAAWK,2BAA4B,EACvCL,GAAWe,UAAYA,GAEvB93F,OAAO+f,eAAeg3E,GAAY,YAAa,CAM3C92E,IAAG,KACMy2E,KACDA,GAAa,IAAIztD,KAGdytD,MAQfK,GAAW92F,UAAU83F,iBAAmB,SAAShQ,GAC7CrmF,KAAKs2F,gBAAgBjQ,GAErB,IACI,MAAMkQ,EACA,IAAIC,GACFnQ,EACAgP,GAAWxG,oBACXwG,GAAWa,gBACXl2F,KAAK6sF,cAEb0J,EAASl2F,MAAMg1F,GAAWW,oBAC1Bh2F,KAAKu1F,YAAYpoE,IAAIk5D,EAAer/E,GAAIuvF,GAC1C,MAAO9tF,GACLrC,GAAO5C,MAAO,iDAAgDiF,OAItE4sF,GAAWoB,WAAa,GAExBpB,GAAWqB,gBAAkB,SAAS7pF,EAAQoH,GAC1C,IAAKohF,GAAWW,mBACZ,OAEJ,MAAMS,EAAa,IAAIE,GAAW9pF,EAAQwoF,GAAWxG,oBACjD56E,GAEJjU,KAAKy2F,WAAWvyF,KAAKuyF,GACrBA,EAAWp2F,SAGfg1F,GAAW92F,UAAUq4F,sBAAwB,SAAS3+E,GAC7Co9E,GAAWW,oBAGhBh2F,KAAK6sF,aAAa9hE,GAAG6iE,GAA8B31E,IAGvDo9E,GAAW92F,UAAUs4F,yBAA2B,SAAS5+E,GAChDo9E,GAAWW,oBAGhBh2F,KAAK6sF,aAAa30E,eAAe01E,GAA8B31E,IAGnEo9E,GAAW92F,UAAUu4F,0BAA4B,SAAS7+E,GACtDjY,KAAK6sF,aAAa9hE,GAAG6iE,GAAkC31E,IAG3Do9E,GAAW92F,UAAUw4F,6BAA+B,SAAS9+E,GACzDjY,KAAK6sF,aAAa30E,eACd01E,GAAkC31E,IAG1Co9E,GAAW92F,UAAUy4F,2BAA6B,SAAS/+E,GACvDjY,KAAK6sF,aAAa9hE,GAAG6iE,GAAmC31E,IAG5Do9E,GAAW92F,UAAU04F,8BAAgC,SAASh/E,GAC1DjY,KAAK6sF,aAAa30E,eACd01E,GACA31E,IAGRo9E,GAAW92F,UAAU24F,yBAA2B,SAASj/E,GACrDjY,KAAK6sF,aAAa9hE,GAAG6iE,GAAkC31E,IAG3Do9E,GAAW92F,UAAU44F,4BAA8B,SAASl/E,GACxDjY,KAAK6sF,aAAa30E,eAAe01E,GAC7B31E,IASRo9E,GAAW92F,UAAU64F,0BAA4B,SAASn/E,GACtDjY,KAAK6sF,aAAa9hE,GAAG6iE,GAAmC31E,IAS5Do9E,GAAW92F,UAAU84F,qBAAuB,SAAS3kE,GAC5CpN,GAAQs9D,+BAMb5iF,KAAKs3F,yBAA2B,IAAI3K,GAChC3sF,KAAK6sF,aACLwI,GAAWc,wBAEfzjE,EAAW3H,GACPwsE,GACA,IAAMv3F,KAAKs3F,yBAAyBlK,kBACxC16D,EAAW3H,GACPwsE,GACA,IAAMv3F,KAAKs3F,yBAAyBzJ,kBAdpCznF,GAAO6lB,KAAK,kEAuBpBopE,GAAW92F,UAAU0uF,kBAAoB,WACrC,OAAOjtF,KAAKs3F,yBACNt3F,KAAKs3F,yBAAyBrK,oBAC9B,MASVoI,GAAW92F,UAAUi5F,6BAA+B,SAASv/E,GACzDjY,KAAK6sF,aAAa30E,eAAe01E,GAAmC31E,IASxEo9E,GAAW92F,UAAUyxF,eAAiB,SAASV,GAC3C,IAAK,MAAMiH,KAAYp4F,MAAMi+C,KAAKp8C,KAAKu1F,YAAYhlF,UAC1CgmF,EAASlQ,eAAe8C,OACzBoN,EAASvG,eAAeV,IAKpC+F,GAAW92F,UAAU8lF,QAAU,WAC3B,IAQSrkF,KAAK81F,oBAAoBzjE,MAC1BryB,KAAK6sF,aAAa/gE,KAAK8hE,IAE3B,IAAK,MAAM6J,KAAaz3F,KAAK81F,oBAAoBvlF,SAC7CvQ,KAAK03F,cAAcD,EAAU1O,KAEjC,IAAK,MAAM4O,KAAS33F,KAAKu1F,YAAY9yF,OACjCzC,KAAK43F,iBAAiBD,GAEtB33F,KAAK6sF,cACL7sF,KAAK6sF,aAAa3+D,qBAlB1B,QAqBImnE,GAAWU,UAAUp1B,OAAO3gE,QAIpCq1F,GAAWwC,eAAiB,SAAShrF,GACjC,GAAKwoF,GAAWW,mBAIhB,IAAK,IAAI12F,EAAI,EAAGA,EAAI+1F,GAAWoB,WAAWl3F,OAAQD,IAC9C,GAAI+1F,GAAWoB,WAAWn3F,GAAGuN,SAAWA,EAAQ,CACzBwoF,GAAWoB,WAAWnxF,OAAOhG,EAAG,GAExC,GAAGuF,OACd,QAUZwwF,GAAW92F,UAAUq5F,iBAAmB,SAASD,GAC7C,MAAMpB,EAAWv2F,KAAKu1F,YAAYh3E,IAAIo5E,GAElCpB,IACAA,EAAS1xF,OACT7E,KAAKu1F,YAAY50B,OAAOg3B,KAQhCtC,GAAW92F,UAAU+3F,gBAAkB,SAASvN,GAC5C/oF,KAAK43F,iBAAiB7O,EAAI/hF,KAW9BquF,GAAW92F,UAAUu5F,eAAiB,SAAS/O,EAAKC,GAChD,IAAKhpF,KAAKw1F,4BACN,OACG,GAAIx1F,KAAK81F,oBAAoB7pD,IAAI88C,EAAI/hF,IAGxC,YAFAZ,GAAO5C,MAAM,gDAKjB4C,GAAO+L,KAAM,0BAAyB42E,QAEtC,MAAMgP,EACA,IAAIxS,GACFwD,EACA,CACI5C,OAAQnmF,KAAKqC,QAAQ8jF,OACrB6C,aAAAA,IAGZhpF,KAAK81F,oBAAoB3oE,IAAI47D,EAAI/hF,GAAI+wF,IASzC1C,GAAW2C,0BAA4B,WACnC,MAAMC,EAAc,IAAI1wD,IAExB,IAAK,MAAM2wD,KAAc7C,GAAWU,UAChC,IAAK,MAAMtwB,KAAMyyB,EAAWpC,oBAAoBvlF,SAC5C0nF,EAAYzyD,IAAIigC,GAIxB,OAAOwyB,GAMX5C,GAAW92F,UAAUm5F,cAAgB,SAAS3O,GAC1C,MAAMnD,EAAoB5lF,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAEvD4+E,IAUsC,IAAlC5lF,KAAK81F,oBAAoBzjE,MACzBryB,KAAK6sF,aAAa/gE,KAAK8hE,IAE3B5tF,KAAK81F,oBAAoBn1B,OAAOooB,EAAI/hF,IAGpC4+E,EAAkBiE,uBAW1BwL,GAAW92F,UAAU45F,mBAAqB,WACtC,OAAOn4F,KAAKw1F,6BAShBH,GAAW92F,UAAU65F,gCAAkC,SAASrP,EAAKqB,GACjE,MAAMiO,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAASlO,sBAAsBC,IAQvCiL,GAAW92F,UAAUyrF,6BAA+B,SAASjB,GACzD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAASrO,gCAUjBqL,GAAW92F,UAAU+5F,cAAgB,SAASvP,EAAKwP,EAAO/4F,GACtD,MAAM64F,EAAWtP,GAAO/oF,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAEzDu+E,GAAU+S,cAAcC,EAAO/4F,EAAM64F,IAUzChD,GAAW92F,UAAU8rF,uBACf,SAAShqF,EAAOiO,GACd,IAAK,MAAMm3D,KAAMzlE,KAAK81F,oBAAoBvlF,SACtCk1D,EAAG4kB,uBAAuBhqF,EAAOiO,IAS7C+mF,GAAW92F,UAAUqrF,yBAA2B,SAAS4O,GACrD,IAAK,MAAM/yB,KAAMzlE,KAAK81F,oBAAoBvlF,SACtCk1D,EAAGmkB,2BAIP5pF,KAAKs1F,KAAK1L,yBAAyB4O,IAQvCnD,GAAWoD,0BAA4B,SAASjQ,GAC5C,MAAMkQ,EAAYrD,GAAW2C,4BAE7B,GAAIU,EAAUrmE,KACV,IAAK,MAAMozC,KAAMizB,EACbnT,GAAUkT,0BAA0BjQ,EAAa/iB,QAGrD8f,GAAUkT,0BAA0BjQ,EAAa,OAmBzD6M,GAAW92F,UAAUmrF,4BAA8B,SAC3CX,EACAz6E,EACAqkB,EACAtE,EACAw4D,EACA5B,GACJ,MAAMoT,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAAS3O,4BACLp7E,EACAqkB,EACAtE,EACAw4D,EACA5B,IAWZoQ,GAAWsD,uBAAyB,SAASlwF,GACzC,MAAMjF,EACAiF,aAAai0E,GAtiBvB,SAA2Cl5E,GACvC,MAAM4Q,EAAM,IAAItO,MAkBhB,OAfAsO,EAAIrO,MAAQvC,EAAMuC,MAGlBqO,EAAIlM,MAAQ1E,EAAM0E,MAAQ,kBAAoB1E,EAAMm5E,KAAOn5E,EAAMm5E,IAAIn5E,OAC9DA,EAAMm5E,IAAIn5E,MAAM0E,KAAQ,MAAK1E,EAAMm5E,IAAIn5E,MAAM0E,OAAS,IAK7DkM,EAAIixD,eAAiB7hE,EAAMm5E,KAAOn5E,EAAMm5E,IAAIjZ,YACtCngE,KAAKF,UAAUG,EAAMm5E,IAAIjZ,aAAe,GAG9CtvD,EAAIrV,QAAUyE,EAAMzE,QAEbqV,EAohBGwkF,CAAkCnwF,GAAKA,EAC3CiwF,EAAYrD,GAAW2C,4BAE7B,GAAIU,EAAUrmE,KACV,IAAK,MAAMozC,KAAMizB,EACbnT,GAAUoT,uBAAuBn1F,EAAOiiE,QAG5C8f,GAAUoT,uBAAuBn1F,EAAO,OAUhD6xF,GAAW92F,UAAU0rF,sBAAwB,SAASxhF,EAAGsgF,GACrD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAASpO,sBAAsBxhF,IAUvC4sF,GAAW92F,UAAU2rF,uBAAyB,SAASzhF,EAAGsgF,GACtD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAASnO,uBAAuBzhF,IAUxC4sF,GAAW92F,UAAU+rF,uBAAyB,SAAS7hF,EAAGsgF,GACtD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAAS/N,uBAAuB7hF,IAUxC4sF,GAAW92F,UAAUgsF,wBAA0B,SAAS9hF,EAAGsgF,GACvD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAAS9N,wBAAwB9hF,IAUzC4sF,GAAW92F,UAAUisF,0BAA4B,SAAS/hF,EAAGsgF,GACzD,MAAMsP,EAAWr4F,KAAK81F,oBAAoBv3E,IAAIwqE,EAAI/hF,IAE9CqxF,GACAA,EAAS7N,0BAA0B/hF,IAS3C4sF,GAAWwD,QAAU,SAAS7yF,GAC1B,MAAM8yF,EAAe,IAAIvxD,IAMzB,IAAK,MAAMy6B,KAASqzB,GAAWU,UAAW,CACtC,GAAI/zB,EAAM2zB,iCACN,OAGA3zB,EAAM8zB,oBAAoBzjE,MAC1BymE,EAAatzD,IAAIw8B,EAAM8zB,oBAAoBvlF,SAASyI,OAAOvP,OAInE,GAAIqvF,EAAazmE,KACb,IAAK,MAAM0mE,KAAcD,EACrBvT,GAAUyT,mBAAmBhzF,EAAG+yF,QAGpCxT,GAAUyT,mBAAmBhzF,EAAG,OAYxCqvF,GAAW92F,UAAU06F,aAAe,SAAStQ,EAASC,GAUlD,OAPAyM,GAAWe,UAAUxR,UdllBD,WcolBhB,CACIsU,OAAQvQ,EACRC,QAAAA,IAGDrD,GAAU0T,aAAaj5F,KAAKqC,QAAQ8jF,OAAQwC,EAASC,IAGhEyM,GAAWp4D,UAAY/6B,EAAAA,MAAAA,UAOvBmzF,GAAW8D,kBAAoB,SAAS31F,GAChCA,aAAiBk5E,IAAmBl5E,EAAMm5E,IAC1C0Y,GAAWsD,uBAAuBn1F,GAElC6xF,GAAWwD,QAAQr1F,IAa3B6xF,GAAW+D,oBAAsB,SAAS/gE,GAAwB,IAO1DghE,EAPyC3U,EAAiB,uDAAJ,GACrDrsD,GAUDghE,EADiB,iBAAVhhE,EACMA,EAEA,CACTnwB,KAAMmwB,EACNqsD,WAAAA,GAIRt+E,GAAOD,IAAI5C,KAAKF,UAAUg2F,IAG1Br5F,KAAKo2F,UAAUxR,UAAUvsD,EAAOqsD,IApB5Bt+E,GAAO6lB,KAAK,kCA8BpBopE,GAAWiE,cAAgB,SAASzU,GAA4B,IAAjBH,EAAiB,uDAAJ,GACxD1kF,KAAKo2F,UAAUxR,UAAUC,EAAWH,qHCvyBxC,MAAMt+E,IAASyB,EAAAA,EAAAA,6CAMA,SAAS0xF,GAA4B7mE,GAChD1yB,KAAK0yB,WAAaA,EAClB1yB,KAAKw5F,cAAgB,GAGrB9mE,EAAW3H,GAAGwsE,IACV3mE,IACI,IAAKA,EAAM+B,YAAcD,EAAWwlE,WAChC,OAEJ,MAAMxsF,EACAklB,EAAMu4D,MACFz2D,EAAW+mE,iBAAmB/mE,EAAWgnE,iBAI7C3Q,EAAOr9E,GAAWA,EAAQ26E,gBAAmB,KAEnD3zD,EAAWwlE,WAAWI,cAClBvP,EACAn4D,EAAM+oE,UACN/oE,EAAMgpE,cAOtBL,GAA4Bh7F,UAAUs7F,uBAAyB,WAC3D,MAAMnnE,EAAa1yB,KAAK0yB,WAClBonE,EAAWpnE,EAAWqnE,KAE5B/5F,KAAKg6F,kBAAoB,IAAIpiE,KAAJ,CAA0BkiE,EAC/C95F,KAAK0yB,WAAWm6D,cAEpBiN,EAASxiF,YAAY2iF,KAAAA,gBAA2BC,IACvCA,EAAc/Q,OAMfz2D,EAAWynE,IAAIC,wBAMvBN,EAASxiF,YAAY2iF,KAAAA,8BAAyC,CAAC79C,EAAM2N,KACjE,MAAMswC,EAAc3nE,EAAWE,mBAAmBmtB,GAAAA,QAAAA,mBAA2B3D,IAEzEi+C,IACAA,EAAYC,YAAYvwC,GACxBr3B,EAAWm6D,aAAa/gE,KAAKyrE,GAAmD8C,OAIxFP,EAASxiF,YACL2iF,KAAAA,qBACA,CAACC,EAAeK,MAGXL,EAAc/Q,OACRz2D,EAAW8nE,kBACVD,EAASL,EAAc7T,mBAIvCyT,EAASxiF,YAAY2iF,KAAAA,sBACjBQ,IAIIpF,GAAWiE,cAAczb,GAAyB0W,KAElD7hE,EAAWgoE,kBAAoBD,EAG/B/nE,EAAWynE,IAAIQ,cAAa,GAAMx2B,MAC9B,KACIzxC,EAAWkoE,gBAAiB,EAC5BloE,EAAWgoE,kBAAoB,QAElCvsB,OACG3qE,IACIkvB,EAAWgoE,kBAAoB,KAC/Bt0F,GAAO6lB,KACH,gDAAiDzoB,SAKzEs2F,EAASxiF,YAAY2iF,KAAAA,sBACjBQ,IAIIpF,GAAWiE,cAAczb,GAAyB0W,KAElD7hE,EAAWmoE,uBAAyBJ,EAGpC/nE,EAAWynE,IAAIW,cAAa,GAAM32B,MAC9B,KACIzxC,EAAWqoE,qBAAsB,EACjCroE,EAAWmoE,uBAAyB,QAEvC1sB,OACG3qE,IACIkvB,EAAWmoE,uBAAyB,KACpCz0F,GAAO6lB,KACH,gDAAiDzoB,SAKzExD,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,gBAC3B1C,IAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,WAC3B1C,GAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,qBAC3B1C,GAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,eAC3B1C,GAGJuC,EAASxiF,YAAY2iF,KAAAA,YACjB,KACIj6F,KAAK0yB,WAAWsoE,eAEhBh7F,KAAK0yB,WAAWuoE,4BAA6B,EAG7C38F,OAAOmE,KAAKq3F,EAASoB,iBAAiBv4F,SAAQuH,IAC1C,MAAMmuB,EACAklD,GACG,cAAarzE,IACd,CAAET,MAAOqwF,EAASoB,gBAAgBhxF,KAE1CmrF,GAAWiE,cAAcjhE,MAI7B/5B,OAAOmE,KAAKq3F,EAASxE,KAAK4F,iBAAiBv4F,SAAQuH,IAC/C,MAAMmuB,EACAklD,GACG,QAAOrzE,IACR,CAAET,MAAOqwF,EAASxE,KAAK4F,gBAAgBhxF,KAE/CmrF,GAAWiE,cAAcjhE,SAIrCyhE,EAASxiF,YAAY2iF,KAAAA,sBAAiC,CAACxxF,EAAGiD,KACjDA,EAAQy9E,OACTz2D,EAAWm6D,aAAa/gE,KAAKyrE,EACzB4D,EAA2C1yF,MAIvDzI,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,gBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,mBAC3B1C,EACA4D,GACJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,+BAC3B1C,EACA4D,GACJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,gCAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,qBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,kBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,wBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,YAC3B1C,EACA4D,GACJrB,EAASxiF,YACL2iF,KAAAA,aACA,IAAM5E,GAAWiE,cfcY,WACjC,MAAM8B,EAAa,cAEnB,MAAO,CACHtsF,OAAQssF,EACR3d,cAAe2d,EACf57F,KAAMy9E,IepByBoe,MAEnCvB,EAASxiF,YAAY2iF,KAAAA,sBACjBC,IACIxnE,EAAW4oE,uBAAuBpB,MAG1Cl6F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,kBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,kBAC3B1C,EACA4D,GAEJrB,EAASxiF,YAAY2iF,KAAAA,uBACjBC,IACIxnE,EAAW6oE,uBAAuBrB,MAG1Cl6F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,cAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,oBAC3B1C,EACA4D,GAEJn7F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,mBAC3B1C,EACA4D,GAEJrB,EAASxiF,YAAY2iF,KAAAA,YACjB,KACI5E,GAAWiE,cfwEa,WAChC,MAAMxqF,EAAS,aAEf,MAAO,CACHA,OAAAA,EACA2uE,cAAe3uE,EACftP,KAAMy9E,Ie9EuBue,IACzB9oE,EAAWm6D,aAAa/gE,KACpByrE,EACA4D,MAGZrB,EAASxiF,YAAY2iF,KAAAA,wBACjBC,IACI7E,GAAW+D,oBACPzb,Gf9MwB,yBegNpB,CAAEyV,IAAK8G,EAAc/Q,YAGrC2Q,EAASxiF,YAAY2iF,KAAAA,wBACjB,CAACvuF,EAAS46C,KAEN,GAAIA,EAAK,CACL,MAAM6M,EAAWpT,GAAAA,QAAAA,mBAA2BuG,GACtC+zC,EAAc3nE,EAAWE,mBAAmBugC,IAAaA,EAEnC,QAAxBznD,EAAQ+vF,YACR/vF,EAAQgwF,cAAcrB,GACS,OAAxB3uF,EAAQ+vF,aACf/vF,EAAQiwF,aAAatB,GAI7B3nE,EAAWm6D,aAAa/gE,KACpByrE,GACA7rF,MAGZ1L,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,6BAC3B1C,IAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,kCAC3B1C,IAEJv3F,KAAKg6F,kBAAkBliE,QACnBmiE,KAAAA,mCACA1C,IAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,qBAC3B1C,IAEJuC,EAAS8B,gCAA+B,CAAC5+F,EAAMo/C,KAC3C,MAAMi+C,EAAc3nE,EAAWE,mBAAmBwpB,GAE7Ci+C,GAILA,EAAYwB,YACR7+F,EAAKu8B,QAAQ3sB,UAAU,qBAAqBrN,QAC5CvC,EAAKyM,UAGbqwF,EAASxiF,YAAY2iF,KAAAA,OACjBvnE,EAAWopE,eAAe94F,KAAK0vB,IACnConE,EAASxiF,YAAY2iF,KAAAA,iBACjBvnE,EAAWqpE,kBAAkB/4F,KAAK0vB,IAEtC1yB,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,iBAC3B1C,IAEJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,yBAC3B1C,IAEJuC,EAASxiF,YAAY2iF,KAAAA,kBACjBvnE,EAAWspE,eAAeh5F,KAAK0vB,IACnC1yB,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,wBAC3B1C,IACJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,yBAC3B1C,IACJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,sBAC3B1C,IACJuC,EAASxiF,YAAY2iF,KAAAA,4BACjBvnE,EAAWupE,wBAAwBj5F,KAAK0vB,IAC5ConE,EAASxiF,YAAY2iF,KAAAA,gBACjBvnE,EAAWwpE,aAAal5F,KAAK0vB,IACjC1yB,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,SAC3B1C,GACJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,kBAC3B1C,EACA4D,GAEJrB,EAASxiF,YAAY2iF,KAAAA,qBACjBvnE,EAAWypE,qBAAqBn5F,KAAK0vB,IAEzConE,EAASxiF,YAAY2iF,KAAAA,oBAA+B1jD,IAChD7jB,EAAW0pE,mBAAmB7lD,GAG1B7jB,EAAWwlE,YAAcxlE,EAAW2pE,eACpC3pE,EAAW3H,GAAGwsE,IACV+E,IACI,MAAMC,EAAY,CACd/4F,MAAO84F,EAAgBE,WACvBx1F,GAAI,kBACJ8vB,OAAQwlE,EAAgBb,aAG5BpG,GAAWwD,QAAQt1F,KAAKF,UAAUk5F,UAKlDzC,EAASxiF,YAAY2iF,KAAAA,iBACjBvnE,EAAW+pE,kBAAkBz5F,KAAK0vB,IAEtConE,EAASxiF,YAAYolF,KAAAA,kBACjB,CAACC,EAAaC,KACVlqE,EAAWiqE,YAAcA,EACzBjqE,EAAWkqE,aAAeA,EAC1BlqE,EAAWm6D,aAAa/gE,KACpByrE,EAA2CoF,EAC3CC,MAGZ9C,EAASxiF,YACL2iF,KAAAA,kBAGA,CAAC3zC,EAAKu2C,EAAKC,EAAOthF,KACd,MAAMxU,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAEtC5zB,EAAWm6D,aAAa/gE,KACpByrE,GACAvwF,EAAI61F,EAAKrhF,MAGrBs+E,EAASxiF,YACL2iF,KAAAA,0BAGA,CAAC3zC,EAAKu2C,EAAKC,EAAOthF,KACd,MAAMxU,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAEtC5zB,EAAWm6D,aAAa/gE,KACpByrE,GACAvwF,EAAI61F,EAAKrhF,MAGrBs+E,EAASxiF,YAAY2iF,KAAAA,iBACjB,CAAC3zC,EAAKxvB,KACF,MAAM9vB,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAChC+zC,EAAc3nE,EAAWE,mBAAmB5rB,GAE7CqzF,GAAeA,EAAY0C,UAAYjmE,IAG5CujE,EAAY0C,QAAUjmE,EACtBpE,EAAWm6D,aAAa/gE,KACpByrE,GAA2CvwF,EAAI8vB,OAG3DgjE,EAASxiF,YAAY2iF,KAAAA,uBACjB,CAAC79C,EAAM/gC,KACH,MAAMrU,EAAK+4C,GAAAA,QAAAA,mBAA2B3D,GAChCi+C,EAAc3nE,EAAWE,mBAAmB5rB,GAE9CqzF,EACA3nE,EAAWm6D,aAAa/gE,KACpByrE,GACA8C,EAAah/E,GAEjBqX,EAAWm6D,aAAa/gE,KACpByrE,GACAvwF,EAAIqU,MAIpBy+E,EAASkD,oBAAoB,cAAc,CAACnkF,EAAMujC,KAC9C,IAAIigD,GAAc,EAElB,GAAI3pE,EAAWuqE,aAAe7gD,GAAQ1pB,EAAW2pE,cAC7CA,GAAc,MACX,CACH,MAAMhC,EAAc3nE,EAAWE,mBAAmBwpB,GAE9Ci+C,GAAeA,EAAYgC,gBAC3BA,GAAc,GAItB,IAAKA,EACD,OAGJ,MAAMa,EAA4C,SAA1BrkF,EAAK0oC,WAAWoiB,MAClCw5B,EAA4C,SAA1BtkF,EAAK0oC,WAAWsiB,MAExC,IAAIu5B,GAAU,EAEVF,IAAoBxqE,EAAW2qE,iBAAiB15B,QAChDjxC,EAAW2qE,iBAAiB15B,MAAQu5B,EACpCE,GAAU,GAGVD,IAAoBzqE,EAAW2qE,iBAAiBx5B,QAChDnxC,EAAW2qE,iBAAiBx5B,MAAQs5B,EACpCC,GAAU,GAGVA,GACA1qE,EAAWm6D,aAAa/gE,KACpByrE,GACA7kE,EAAW2qE,qBAKnB3qE,EAAWwlE,aAEX4B,EAASxiF,YAAY2iF,KAAAA,uBACjBvuF,IACIgnB,EAAWwlE,WAAWlO,6BAClBt+E,EAAQ26E,mBAIpByT,EAASxiF,YAAY2iF,KAAAA,0BACjB,CAACxxF,EAAGg/D,KACA/0C,EAAWwlE,WAAW1N,0BAA0B/hF,EAAGg/D,OAK/DznE,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,4BAC3B1C,IACJv3F,KAAKg6F,kBAAkBliE,QAAQmiE,KAAAA,uBAC3B1C,KAMRgC,GAA4Bh7F,UAAU++F,kBAAoB,WACtD,MAAM5qE,EAAa1yB,KAAK0yB,WAClBynE,EAAMznE,EAAWynE,IAEvBA,EAAI7iF,YACAimF,KAAAA,mBACA7qE,EAAW8qE,mBAAmBx6F,KAAK0vB,IAEvCynE,EAAI7iF,YACAimF,KAAAA,qBACA7qE,EAAW+qE,qBAAqBz6F,KAAK0vB,IAEzCynE,EAAI7iF,YAAYimF,KAAAA,0BACZ,CAACG,EAAUC,KACP,GAAIjrE,EAAWkrE,sBAAwBF,GAAYhrE,EAAWqnE,KAAM,CAKhE,GAJArnE,EAAWkrE,oBAAsBF,EACjChrE,EAAWm6D,aAAa/gE,KACpByrE,EAAgDmG,EAAUC,GAE1DA,GAAYA,EAASp+F,OAAQ,CAC7B,MAAM+vF,EAAcqO,EAASp3F,MAAM,GAG/BmsB,EAAWuqE,WAAaS,GACxBpO,EAAYhqF,OAAO,EAAG,EAAGo4F,GAIzBpO,EAAY/vF,OlBpgBC,GkBqgBb+vF,EAAYhqF,OlBrgBC,EkBqgB6BgqF,EAAY/vF,OlBrgBzC,GkBugBjBmzB,EAAWwlE,YAAcxlE,EAAWwlE,WAAWlI,eAAeV,GAE9D58D,EAAWwlE,YAAcxlE,EAAWuqE,aAAeS,GAEnDhrE,EAAWwlE,WAAWtO,yBAAyBl3D,EAAWqnE,KAAK8D,aAK/E1D,EAAI7iF,YAAYimF,KAAAA,mBAA6B,KACzC,MAAM3tE,EAAMnzB,OAAOqhG,YAAYluE,MACzB1lB,EAAM,sBAGZ9D,GAAOD,IAAK,UAAS+D,OAAU0lB,GAC/B8C,EAAWqnE,KAAKmB,gBAAgBhxF,GAAO0lB,EACvCylE,GAAWiE,cACP/b,GAAkCrzE,EAAK,CAAET,MAAOmmB,KAEpD8C,EAAWm6D,aAAa/gE,KAAKyrE,MAGjC4C,EAAI7iF,YAAYimF,KAAAA,2BACZ,CAACnhD,EAAM/gC,KACH,MAAMg/E,EAAc3nE,EAAWE,mBAAmBwpB,GAE9Ci+C,EACA3nE,EAAWm6D,aAAa/gE,KACpByrE,GACA8C,EAAah/E,GAEjBjV,GAAO6lB,KAEI,mEAAemwB,IACtB/gC,MAIhB8+E,EAAI7iF,YAAYimF,KAAAA,yBACZ,CAACnhD,EAAM/gC,KACH,MAAMg/E,EAAc3nE,EAAWE,mBAAmBwpB,GAE9Ci+C,EACA3nE,EAAWm6D,aAAa/gE,KAAKyrE,GAA+C8C,EAAah/E,GAEzFjV,GAAO6lB,KAAM,oEAAmEmwB,QAI5F+9C,EAAI7iF,YAAYimF,KAAAA,qBACZ,CAACxU,EAAKj1C,KACGi1C,EAAII,OACLkM,GAAWwD,QACPt1F,KAAKF,UAAU,CACX2D,GAAI,cACJyC,MAAOqqC,QAI3BqmD,EAAI7iF,YAAYimF,KAAAA,sBACZ,CAACxU,EAAKj1C,KACGi1C,EAAII,OACLkM,GAAWwD,QACPt1F,KAAKF,UAAU,CACX2D,GAAI,eACJyC,MAAOqqC,QAK3BqmD,EAAI7iF,YAAYimF,KAAAA,sBACZ,CAAC90F,EAAGsgF,KACAr2D,EAAWwlE,WAAWhO,uBAAuBzhF,EAAGsgF,GAC3CA,EAAII,OACLz2D,EAAWm6D,aAAa/gE,KAAKyrE,EACzB4D,EAA2C1yF,MAI3D0xF,EAAI7iF,YAAYimF,KAAAA,qBACZ,CAAC90F,EAAGsgF,KACAr2D,EAAWwlE,WAAWjO,sBAAsBxhF,EAAGsgF,GAC1CA,EAAII,OACLz2D,EAAWm6D,aAAa/gE,KAAKyrE,EACzB4D,EAA2C1yF,MAI3D0xF,EAAI7iF,YAAYimF,KAAAA,8BACZ,CAAC90F,EAAGsgF,KACAr2D,EAAWwlE,WAAW5N,uBAAuB7hF,EAAGsgF,GAC3CA,EAAII,OACLz2D,EAAWm6D,aAAa/gE,KAAKyrE,EACzB4D,EAA2C1yF,MAI3D0xF,EAAI7iF,YAAYimF,KAAAA,+BACZ,CAAC90F,EAAGsgF,KACAr2D,EAAWwlE,WAAW3N,wBAAwB9hF,EAAGsgF,GAC5CA,EAAII,OACLz2D,EAAWm6D,aAAa/gE,KAAKyrE,EACzB4D,EAA2C1yF,MAI3D0xF,EAAI7iF,YAAYimF,KAAAA,0BACZ,CAAC3sE,EAAOtiB,KAKAsiB,EAAM2B,gBAAkB3B,EAAMmtE,YAAcC,KAAAA,SAC5CtrE,EAAWwlE,WAAW7N,wBAAuB,EAAM/7E,OAQnEirF,GAA4Bh7F,UAAU0/F,oBAAsB,WACxD,MAAMvrE,EAAa1yB,KAAK0yB,WAExBp0B,OAAOmE,KAAKzC,KAAKw5F,eAAe72F,SAAQkiF,IACpCnyD,EAAW4iE,KAAKp9E,eACZ2sE,EACA7kF,KAAKw5F,cAAc3U,OAE3B7kF,KAAKw5F,cAAgB,IAOzBD,GAA4Bh7F,UAAU2/F,mBAAqB,WACvD,MAAMxrE,EAAa1yB,KAAK0yB,WAExB1yB,KAAKm+F,2BACDlE,KAAAA,cACAvnE,EAAW0rE,eAAep7F,KAAK0vB,IACnC1yB,KAAKm+F,2BACDlE,KAAAA,cACAvnE,EAAW2rE,eAAer7F,KAAK0vB,IACnC1yB,KAAKm+F,2BACDlE,KAAAA,eACAvnE,EAAW4rE,gBAAgBt7F,KAAK0vB,IACpC1yB,KAAKm+F,2BACDlE,KAAAA,WACAvnE,EAAW6rE,YAAYv7F,KAAK0vB,IAEhC1yB,KAAKm+F,2BAA2BlE,KAAAA,wBAC5B,CAACuE,EAAYC,KACL/rE,EAAWrwB,QAAQ6G,OAAOw1F,mBAI9BhsE,EAAWwqE,gBAAkBsB,EAC7B9rE,EAAWyqE,gBAAkBsB,EAI7B/rE,EAAWgiE,iBAAiB/xF,SAAQiuB,IAChC,OAAQA,EAAMgpE,WACd,KAAKrF,GACD7hE,EAAWwqE,iBAAmBtsE,EAAMk4D,OACpC,MACJ,KAAKyL,GACD7hE,EAAWyqE,iBAAmBvsE,EAAMk4D,WAK5Cp2D,EAAWm6D,aAAa/gE,KAAKyrE,QAGrCv3F,KAAKm+F,2BAA2BlE,KAAAA,+BAC5B0E,IACIjsE,EAAWm6D,aAAa/gE,KAAKyrE,GAAoDoH,MAGzF3+F,KAAKm+F,2BAA2BlE,KAAAA,uBAC5B,CAACxwF,EAAOq0E,EAAW8gB,KACf,MAAMC,EAAmBnsE,EAAWosE,kBAAkBxvF,MAAK5G,GAAKA,EAAEq2F,WAAaH,IAE/ElsE,EAAWm6D,aAAa/gE,KAAKyrE,GAA6C,CACtEyH,QAASv1F,EACTq0E,UAAAA,EACA2c,MAAOoE,OAGnB7+F,KAAKm+F,2BAA2BlE,KAAAA,oCAC5B,CAACnc,EAAWx3B,KACR,MAAM+zC,EAAc3nE,EAAWE,mBAAmBmtB,GAAAA,QAAAA,mBAA2BuG,IAEzE+zC,GACA3nE,EAAWm6D,aAAa/gE,KAAKyrE,GAA0D,CACnF8C,YAAAA,EACAvc,UAAAA,OAIhB99E,KAAKm+F,2BAA2BlE,KAAAA,oCAC5B,CAACnc,EAAWx3B,KACR,MAAM+zC,EAAc3nE,EAAWE,mBAAmBmtB,GAAAA,QAAAA,mBAA2BuG,IAEzE+zC,GACA3nE,EAAWm6D,aAAa/gE,KAAKyrE,GAA0D,CACnF8C,YAAAA,EACAvc,UAAAA,OAIhB99E,KAAKm+F,2BAA2BlE,KAAAA,wBAC5BxwF,GAASipB,EAAWm6D,aAAa/gE,KAAKyrE,GAA8C,CAAEzZ,UAAWr0E,MACrGzJ,KAAKm+F,2BAA2BlE,KAAAA,wBAC5BxwF,IACIipB,EAAWm6D,aAAa/gE,KAAKyrE,GAA8C,CAAEzZ,UAAWr0E,QAOpG8vF,GAA4Bh7F,UAAU4/F,2BAA6B,SAC3DtZ,EAAW5sE,GACfjY,KAAKw5F,cAAc3U,GAAa5sE,EAChCjY,KAAK0yB,WAAW4iE,KAAKh+E,YAAYutE,EAAW5sE,IAMhDshF,GAA4Bh7F,UAAU0gG,yBAA2B,WAC7D,MAAMvsE,EAAa1yB,KAAK0yB,WAEnBA,EAAWwlE,aAKhBxlE,EAAWwlE,WAAWtB,uBAAsB,CAAC7N,EAAKz6E,EAAMjI,EAAOssB,KAC3DD,EAAWynE,IAAI+E,cAAcnW,EAAKz6E,EAAMjI,EAAOssB,MAMnDD,EAAWwlE,WAAWpB,2BAA0B,KAC5CpkE,EAAWm6D,aAAa/gE,KACpByrE,MAIH7kE,EAAWrwB,QAAQ6G,OAAOi2F,aAC3BzsE,EAAWwlE,WAAWhB,0BAAyB,CAACnO,EAAK/mB,KACjDtvC,EAAWgiE,eAAeH,IAAiB5xF,SAAQiuB,IAC/C,MAAMtiB,EAAOy6E,EAAI4L,aAAa/jE,GAEzBtiB,GAAS0zD,EAAMnuD,eAAevF,IAInCsiB,EAAMwuE,yBAAyBrW,EAAK/mB,EAAM1zD,YCnxBnD,MAAM+wF,GAAsB,gBActBtkB,GAA4B,2BAK5BukB,GAA6B,2BAK7BtkB,GAAqB,yBAKrBukB,GAA0B,yBAM1BC,GAAsB,4BAMtBrlB,GAAiB,uBClCxB/zE,IAASyB,EAAAA,EAAAA,kEAyCF43F,GAA8B,CAIvCC,OAAQ,SAQR1kE,SAAU,WAKV2kE,YAAa,cAKbC,UAAW,aAOA,MAAMC,GAwBY,8BACrBC,EACAC,EACAC,EACAC,EACAC,GACJ,OAAKJ,EAKMG,EAIAR,GAA4BC,OAInCp6E,GAAQ+8D,qCACH6d,EAGMH,EACAC,EACDP,GAA4BE,YAC5BF,GAA4BG,UAG/BH,GAA4BzkE,SAPxBykE,GAA4BC,OAYpCK,EACDN,GAA4BC,OAC5BD,GAA4BzkE,SA1BvBykE,GAA4BE,YAyCd,8BAACM,EAAcC,GACxC,OAAK56E,GAAQ+8D,qCAMN4d,IAAiBC,EAClBT,GAA4BC,OAC5BD,GAA4BE,YALvBF,GAA4BC,OAsB3C9gG,YAAYu7F,EAAKznE,EAAYrwB,GACzBrC,KAAKm6F,IAAMA,EACXn6F,KAAK0yB,WAAaA,EAQlB1yB,KAAKmgG,YAAc,GAQnBngG,KAAKogG,kBAAoB,GAazBpgG,KAAKqgG,kBACsC,iBAA9Bh+F,EAAQg+F,kBACXh+F,EAAQg+F,kBArMY,IA8M9BrgG,KAAKsgG,kBAAyD,iBAA9Bj+F,EAAQi+F,kBAClCj+F,EAAQi+F,kBA1Me,KAoN7BtgG,KAAKugG,eACmC,iBAA3Bl+F,EAAQk+F,eACXl+F,EAAQk+F,eA/MO,IAsOzBvgG,KAAKwgG,kBAAoB,GACzBp6F,GAAO+L,KAAM,0BAAyBnS,KAAKugG,kBAY3CvgG,KAAKygG,sBAAwB,IAAIn5D,IASjCtnC,KAAK0gG,gBAAkB,IAAIp5D,IAQ3BtnC,KAAK2gG,oBAAsB,IAAIr5D,IAUnCs5D,uBAAuB55F,GACnB,OAAOhH,KAAKm6F,IAAI4F,UAAU/4F,GACpBhH,KAAKugG,eACLvgG,KAAK0yB,WAAWmuE,cAAgB7gG,KAAKsgG,kBAAoBtgG,KAAKqgG,kBAOxEh2E,OAEIrqB,KAAK8gG,6BACC9gG,KAAK+gG,4BAA4B/9F,KAAKhD,MAE5CA,KAAKm6F,IAAI7iF,YACLimF,KAAAA,6BACAv9F,KAAK8gG,8BAGT9gG,KAAKghG,aAAehhG,KAAKihG,8BAA8Bj+F,KAAKhD,MAC5DA,KAAK0yB,WAAW3H,GAAGwsE,GAAkCv3F,KAAKghG,cAG1DhhG,KAAKkhG,YAAclhG,KAAKmhG,WAAWn+F,KAAKhD,MACxCA,KAAK0yB,WAAW3H,GAAGwsE,GAAiCv3F,KAAKkhG,aAKrD57E,GAAQ+8D,uCAERriF,KAAKohG,iBAAmBphG,KAAKqhG,gBAAgBr+F,KAAKhD,MAClDA,KAAKm6F,IAAI7iF,YACLimF,KAAAA,kBAA6Bv9F,KAAKohG,kBAEtCphG,KAAKshG,mBAAqBthG,KAAKuhG,kBAAkBv+F,KAAKhD,MACtDA,KAAKm6F,IAAI7iF,YACLimF,KAAAA,oBAA+Bv9F,KAAKshG,oBAIxCthG,KAAKwhG,oBAAsBxhG,KAAKw9F,mBAAmBx6F,KAAKhD,MACxDA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKwhG,qBAETxhG,KAAKyhG,sBAAwBzhG,KAAKy9F,qBAAqBz6F,KAAKhD,MAC5DA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKyhG,uBAITzhG,KAAK0hG,yBACC1hG,KAAK2hG,wBAAwB3+F,KAAKhD,MAGxCA,KAAK4hG,yBACC5hG,KAAK6hG,wBAAwB7+F,KAAKhD,OAG5CA,KAAK8hG,gBAAkB9hG,KAAK8hG,gBAAgB9+F,KAAKhD,MACjDA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAK8hG,iBAET9hG,KAAK+hG,qBACC/hG,KAAKihG,8BAA8Bj+F,KAAKhD,MAC9CA,KAAKm6F,IAAIpvE,GACLwyE,KAAAA,oBAA+Bv9F,KAAK+hG,sBAO5C1d,UAEIrkF,KAAKm6F,IAAIjiF,eACLqlF,KAAAA,6BACAv9F,KAAK8gG,8BAELx7E,GAAQ+8D,uCACRriF,KAAKm6F,IAAIjiF,eACLqlF,KAAAA,kBACAv9F,KAAKohG,kBACTphG,KAAKm6F,IAAIjiF,eACLqlF,KAAAA,oBACAv9F,KAAKshG,oBAETthG,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAKwhG,qBACTxhG,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAKyhG,wBAGbzhG,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAK8hG,iBAET9hG,KAAKm6F,IAAIjiF,eACLqlF,KAAAA,oBAA+Bv9F,KAAK+hG,sBAExC/hG,KAAK0yB,WAAWzE,IACZspE,GAAkCv3F,KAAKghG,cAE3ChhG,KAAK0yB,WAAWzE,IACZspE,GAAiCv3F,KAAKkhG,aAE1C,MAAMc,EAAiB1jG,OAAOmE,KAAKzC,KAAKmgG,aAExC,IAAK,MAAM5O,KAAiByQ,EACxBhiG,KAAKqE,aAAaktF,GAClBvxF,KAAKiiG,uBAAuB1Q,GAGhC,IAAK,MAAMvqF,KAAMhH,KAAK2gG,oBACd3gG,KAAK2gG,oBAAoB9sF,eAAe7M,IACxChH,KAAKmhG,WAAWn6F,GAKxBhH,KAAKogG,kBAAoB,GAU7BW,4BAA4BmB,EAAYC,GAEpC/7F,GAAO4gD,MACF,mDAAkDlgD,KAAK8oB,WACpDsyE,MAAeC,KAGnBD,IAAeliG,KAAK0yB,WAAWuqE,aAE/Bj9F,KAAKogG,kBAAkB8B,GAAcC,EACrCniG,KAAKoiG,0BAA0BF,IASvCG,wBAAwBhI,EAAaiI,GACjC,GAAIjI,EAAYkI,wBAA0BD,EAAW,CAEjD,MAAMJ,EAAa7H,EAAYmI,QAE/BnI,EAAYoI,qBAAqBH,GAEjCl8F,GAAO4gD,MACF,6BAA4BlgD,KAAK8oB,UAAUsyE,MACxCI,KAGRjN,GAAWwD,QACPt1F,KAAKF,UAAU,CACX2D,GAAI,mBACJqzF,YAAa6H,EACbprE,OAAQwrE,KAIhBtiG,KAAK0yB,WAAWm6D,aAAa/gE,KACzByrE,GACA2K,EAAYI,IAWxBj+F,aAAaktF,GACLvxF,KAAKmgG,YAAY5O,KACjB90F,OAAO4H,aAAarE,KAAKmgG,YAAY5O,IACrCvxF,KAAKmgG,YAAY5O,GAAiB,MAU1C0Q,uBAAuB1Q,GACnBvxF,KAAKwgG,kBAAkBjP,GAAiB,KAU5CiM,mBAAmBkF,GACVA,EAAY/vE,WACN+vE,EAAY9I,YAAcrF,KAEjCnuF,GAAO4gD,MACF,uCACG07C,EAAYlwE,sBAEpBkwE,EAAY33E,GACR43E,GACA3iG,KAAK0hG,0BACTgB,EAAY33E,GACR43E,IACA5E,GAAa/9F,KAAK4hG,yBAAyBc,EAAa3E,MAWpEN,qBAAqBiF,GACjB,IAAKA,EAAY/vE,WACN+vE,EAAY9I,YAAcrF,GAAiB,CAElD,MAAM2N,EAAaQ,EAAYlwE,mBAE/BpsB,GAAO4gD,MAAO,qCAAoCk7C,KAElDQ,EAAYz0E,IACR00E,GACA3iG,KAAK0hG,0BAET1hG,KAAKqE,aAAa69F,GAClBliG,KAAKiiG,uBAAuBC,GAE5BliG,KAAKoiG,0BAA0BF,IAiBvChC,mBAAmB7F,GACf,IAAK/0E,GAAQ+8D,qCACT,OAAO,EAGX,MAAMr7E,EAAKqzF,EAAYmI,QACjBI,EAAsBvI,EAAYwI,8BAClCrC,EAAoBxgG,KAAKwgG,kBAAkBx5F,GAC3C+mD,EAAU/tD,KAAK4gG,uBAAuB55F,GAE5C,OAAO47F,GAC6B,iBAAtBpC,GACN15F,KAAK8oB,MAAQ4wE,GAAsBzyC,EAQ/CkzC,gCACI,MAAM6B,EAAe9iG,KAAK0yB,WAAWosE,kBAErC,IAAK,MAAMzE,KAAeyI,EACtB9iG,KAAKoiG,0BAA0B/H,EAAYmI,SAUnDJ,0BAA0Bp7F,GACtB,MAAMqzF,EAAcr6F,KAAK0yB,WAAWE,mBAAmB5rB,GAEvD,IAAKqzF,EAQD,YAFAj0F,GAAO4gD,MAAO,gDAA+ChgD,KAKjE,MAAM+7F,EAAY/iG,KAAK0yB,WAAWmuE,cAC5BmC,EAAsBhjG,KAAKijG,qBAAqBj8F,GAChDk8F,EAA+C,IAA/BljG,KAAK0yB,WAAWywE,WAIhClD,EAAe5F,EAAY4F,gBAAkBiD,EAC7ChD,EAAqBlgG,KAAKkgG,mBAAmB7F,GAC7C0F,EAAY//F,KAAKm6F,IAAI4F,UAAU/4F,GACrC,IAAIo8F,EAAoBpjG,KAAKogG,kBAAkBp5F,GAEd,kBAAtBo8F,IAGPA,GAAoB,GAGxB,MAAMC,EACAN,EACIlD,GAAmCyD,uBACjCrD,EACAC,GACFL,GAAmC0D,uBACjCH,EACArD,EACAiD,EACA/C,EACAC,GAIRmD,IAAa5D,GAA4BG,WACzC5/F,KAAKwjG,qBAAqBx8F,GAG9BZ,GAAO4gD,MACF,8BAA6BhgD,sBAC1Bi5F,qBACAmD,yBACAlD,eACA6C,mBACAhD,iCACA1F,EAAYkI,4BAA4Bc,KAEhD,MAAMI,EAAsBzjG,KAAK2gG,oBAAoB35F,IAAO,GAI5D,KAAM,QAASy8F,MACN,qBAAsBA,IACxBA,EAAoBrQ,MAAQ2P,GAC5BU,EAAoBC,mBAAqBL,EAAU,CAEtD,MAAMM,EAAQ78F,KAAK8oB,MAanB,GAXA5vB,KAAK4jG,0CAA0C58F,EAAI28F,GAEnD3jG,KAAK2gG,oBAAoB35F,GAAM,IACxBy8F,EACHC,iBAAkBL,EAClBjQ,IAAK2P,EACLc,UAAWF,KAKT,cAAe3jG,KAAK2gG,oBAAoB35F,IAAM,CAChD,MAAM88F,EAAczJ,EAAY0J,qBAAqBxP,IAEjDp2F,MAAMC,QAAQ0lG,IAAuC,IAAvBA,EAAYvkG,SAC1CS,KAAK2gG,oBAAoB35F,GAAI+2F,UAAY+F,EAAY,GAAG/F,YAIpE/9F,KAAKqiG,wBAAwBhI,EAAagJ,GAU9CO,0CAA0C58F,EAAI28F,GAC1C,MAAMK,EAA8BhkG,KAAK2gG,oBAAoB35F,GAEzDg9F,GACG,cAAeA,GACf,cAAeA,GACf,qBAAsBA,GACtB,QAASA,IACZA,EAA4Bv6F,MAAQk6F,EAAQK,EAA4BH,UACxExO,GAAWiE,cjB1V+B,WAGlD,MAAO,CACH95F,KAAMy9E,GACNpqE,OAAQ,mBACR/D,OALW,WAMXyyC,WAPwE,uDAAJ,IiB2V5D0iD,CAAuCD,KAYnDlC,kBAAuD,IAAvCoC,EAAuC,uDAAxB,GAAIC,EAAoB,uDAAJ,GAC/C,MAAMv0E,EAAM9oB,KAAK8oB,MAEjBxpB,GAAO4gD,MAAO,mCAAkCk9C,eAA0BC,QAAoBv0E,KAKzFtK,GAAQ+8D,sCACTriF,KAAKihG,gCAGT,IAAK,MAAMj6F,KAAMk9F,EACblkG,KAAKygG,sBAAsB9/B,OAAO35D,GAClChH,KAAKwjG,qBAAqBx8F,GAC1Bse,GAAQ+8D,sCAAwCriF,KAAKoiG,0BAA0Bp7F,GAEnF,IAAK,MAAMA,KAAMm9F,EAEbnkG,KAAKygG,sBAAsBtzE,IAAInmB,EAAI4oB,GACnCtK,GAAQ+8D,sCAAwCriF,KAAKoiG,0BAA0Bp7F,GAYvFw8F,qBAAqBjS,GACjB,MAAM6S,EAASpkG,KAAK0gG,gBAAgBniF,IAAIgzE,GAEpC6S,IACA//F,aAAa+/F,GACbpkG,KAAK0gG,gBAAgB//B,OAAO4wB,IAkBpC0R,qBAAqB1R,GACjB,MAAMkP,EACAzgG,KAAKygG,sBAAsBliF,IAAIgzE,GAErC,SAAIkP,GACI35F,KAAK8oB,MAAQ6wE,GAtuBK,OA8uBXzgG,KAAK0gG,gBAAgBniF,IAAIgzE,IAGpCvxF,KAAK0gG,gBAAgBvzE,IAAIokE,EAAejtF,YACpC,IAAMtE,KAAKoiG,0BAA0B7Q,IAlvBnB,OAsvBnB,GAQX4P,WAAWn6F,GACPhH,KAAK4jG,0CAA0C58F,EAAIF,KAAK8oB,cACjD5vB,KAAK2gG,oBAAoB35F,GASpCq6F,gBAAgBzwE,GACZ,MAAM2gE,EAAgB3gE,EAAM4B,mBACtB6nE,EAAcr6F,KAAK0yB,WAAWE,mBAAmB2+D,GAGvD,GADAnrF,GAAO4gD,MAAO,6BAA4BuqC,IAAiBzqF,KAAK8oB,OAC3DyqE,GAML,GADAr6F,KAAKwgG,kBAAkBjP,GAAiBzqF,KAAK8oB,OACxCyqE,EAAY4F,eAAgB,CAI7BjgG,KAAKqE,aAAaktF,GAGlB,MAAMxjC,EAAU/tD,KAAK4gG,uBAAuBrP,GAE5CvxF,KAAKmgG,YAAY5O,GAAiB90F,OAAO6H,YAAW,KAChD8B,GAAO4gD,MACF,6BAA4BuqC,4BACvBxjC,QACV/tD,KAAKqE,aAAaktF,GAClBvxF,KAAKoiG,0BAA0B7Q,KAChCxjC,SApBH3nD,GAAO5C,MAAO,0BAAyB+tF,KA8B/CgQ,kBAAkB3wE,GACd,MAAM2gE,EAAgB3gE,EAAM4B,mBAE5BpsB,GAAO4gD,MACF,+BAA8BuqC,IAAiBzqF,KAAK8oB,OAEzD5vB,KAAKqE,aAAaktF,GAClBvxF,KAAKiiG,uBAAuB1Q,GAE5BvxF,KAAKoiG,0BAA0B7Q,GASnCoQ,wBAAwB/wE,GACpB,MAAM2gE,EAAgB3gE,EAAM4B,mBAE5BpsB,GAAO4gD,MACF,8CAA6CuqC,IAC9C3gE,EAAM+oE,WAEV35F,KAAKoiG,0BAA0B7Q,GAUnCsQ,wBAAwBjxE,EAAOpxB,GAC3B,MAAMwH,EAAK4pB,EAAM4B,mBACXmxE,EAAQ78F,KAAK8oB,MAEnB5vB,KAAK4jG,0CAA0C58F,EAAI28F,GAEnD3jG,KAAK2gG,oBAAoB35F,GAAM,IACxBhH,KAAK2gG,oBAAoB35F,IAAO,GACnC+2F,UAAWv+F,EACXqkG,UAAWF,ICp3BR,MAAMU,GAmBjBzlG,YAAY0nD,EAAK5zB,EAAYpE,EAAag2E,EAAQC,EAASztE,EAAQ0tE,EAAUC,EAAaC,GACtF1kG,KAAK2kG,KAAOr+C,EACZtmD,KAAK4kG,IAAM7kD,GAAAA,QAAAA,mBAA2BuG,GACtCtmD,KAAK6kG,YAAcnyE,EACnB1yB,KAAK8kG,aAAex2E,EACpBtuB,KAAK+kG,eAAgB,EACrB/kG,KAAKglG,QAAU,GACfhlG,KAAKilG,MAAQ,OACbjlG,KAAK+8F,QAAUjmE,EACf92B,KAAKklG,QAAUZ,EACftkG,KAAKmlG,SAAWZ,EAChBvkG,KAAKq9D,kBAAoBoiC,GAA4BC,OACrD1/F,KAAKolG,YAAc,GACnBplG,KAAKqlG,UAAYb,EACjBxkG,KAAKslG,aAAeb,EACpBzkG,KAAKulG,YAAcb,EACnB1kG,KAAKg7D,UAAY,IAAIzzB,IASzBi+D,gBACI,OAAOxlG,KAAK6kG,YAMhBY,YAAYv9F,GACR,OAAOlI,KAAKolG,YAAYl9F,GAW5B26F,8BACI,OACI7iG,KAAK2lE,YAAYpzD,MACbmzF,GACIA,EAAW9L,YAAcrF,IAClBmR,EAAWC,uBASlClD,qBAAqB3rE,GACjB92B,KAAKq9D,kBAAoBvmC,EAU7ByrE,sBACI,OAAOviG,KAAKq9D,kBAShBw+B,YAAY3zF,EAAMuB,GACd,MAAMm8F,EAAW5lG,KAAKolG,YAAYl9F,GAE9BuB,IAAUm8F,IACV5lG,KAAKolG,YAAYl9F,GAAQuB,EACzBzJ,KAAK6kG,YAAYhY,aAAa/gE,KAC1ByrE,GACAv3F,KACAkI,EACA09F,EACAn8F,IAQZk8D,YACI,OAAO3lE,KAAKglG,QAAQz+F,QAQxBw9F,qBAAqBjmB,GACjB,OAAO99E,KAAK2lE,YAAY/5D,QAAOglB,GAASA,EAAMgpE,YAAc9b,IAMhE0kB,QACI,OAAOxiG,KAAK4kG,IAMhB7F,SACI,OAAO/+F,KAAK2kG,KAMhBn1E,iBACI,OAAOxvB,KAAK8kG,aAMhBe,aACI,OAAO7lG,KAAKmlG,SAMhB1J,YACI,OAAOz7F,KAAK+8F,QAMhBV,cACI,MAAsB,cAAfr8F,KAAKilG,MAQhBa,WACI,OAAO9lG,KAAKklG,QAOhBT,cACI,OAAOzkG,KAAKslG,aAOhBZ,aACI,OAAO1kG,KAAKulG,YAMhBQ,eACI,OAAO/lG,KAAKgmG,kBAAkBzR,IAclCyR,kBAAkBloB,GACd,OAAO99E,KAAK2lE,YAAYv5D,QACpB,CAACmsF,EAAO3nE,IACJ2nE,IAAU3nE,EAAMgpE,YAAc9b,GAAaltD,EAAM+oE,aACrD,GAMRsG,eACI,OAAOjgG,KAAKgmG,kBAAkBzR,IAMlC0R,UACI,OAAOjmG,KAAKilG,MAOhBiB,QAAQC,GACJnmG,KAAKilG,MAAQkB,EAOjBC,eAAeC,GACXrmG,KAAKslG,aAAee,EAOxBC,cAAcC,GACVvmG,KAAKulG,YAAcgB,EAMvBC,eACI,OAAOxmG,KAAK+kG,cAOhB0B,cACI,OAAOj8E,QAAQC,QAAQzqB,KAAKg7D,WAShC0rC,WAAWC,GACP,OAAO3mG,KAAKg7D,UAAU/uB,IAAI06D,GAO9BrM,YAAYsM,GACR5mG,KAAKg7D,UAAY4rC,GAAe,IAAIr/D,IAQxCs/D,aACI,OAAO7mG,KAAK8mG,SAOhBC,WAAWC,GACPhnG,KAAK8mG,SAAWE,GCnTjB,MAAM5pB,GAA0B,oCAS1Bx/C,GAAyB,mCAazBC,GAAoB,8BAMpBopE,GAAc,wBAOdC,GAAwB,2CC/B9B,MAAMC,GAA2B,0BAK3BC,GAAc,wBAKdhnE,GAAoB,8BAMpBinE,GAAe,yBCvBb,MAAMC,GAIjB1oG,cAAc,WACVoB,KAAK0vE,QAAU,IAAIllD,SAAQ,CAACC,EAASrU,KACjCpW,KAAKyqB,QAAU,WACX,EAAK88E,qBACL98E,KAAW,YAEfzqB,KAAKoW,OAAS,WACV,EAAKmxF,qBACLnxF,KAAU,eAGlBpW,KAAKmkE,KAAOnkE,KAAK0vE,QAAQvL,KAAKnhE,KAAKhD,KAAK0vE,SACxC1vE,KAAKmuE,MAAQnuE,KAAK0vE,QAAQvB,MAAMnrE,KAAKhD,KAAK0vE,SAM9C63B,qBACIljG,aAAarE,KAAKwnG,UAMtBC,iBAAiBC,GACb1nG,KAAKwnG,SAAWljG,YAAW,KACvBtE,KAAKoW,OAAO,IAAItQ,MAAM,cACvB4hG,ICjCI,MAAMC,GAMjB/oG,cAA+C,IAAnCiuF,EAAmC,uDAApB,IAAIziE,MAC3BpqB,KAAK6sF,aAAeA,EAGpB7sF,KAAKgtB,iBAAmBhtB,KAAK+qB,GAAK/qB,KAAKsX,YACvCtX,KAAKktB,oBAAsBltB,KAAKiuB,IAAMjuB,KAAKkY,eAS/CZ,YAAYutE,EAAW5sE,GAGnB,OAFAjY,KAAK6sF,aAAav1E,YAAYutE,EAAW5sE,GAElC,IAAMjY,KAAKktB,oBAAoB23D,EAAW5sE,GASrDC,eAAe2sE,EAAW5sE,GACtBjY,KAAK6sF,aAAa30E,eAAe2sE,EAAW5sE,ICpCpD,MAAM7R,IAASyB,EAAAA,EAAAA,0CAIT+/F,GAAappF,OAAO,cAcX,MAAMqpF,GAKjBjpG,cAAgC,IAApB,UAAEkpG,GAAkB,uDAAJ,GAGpBC,EAAU,GACd,MAAMC,EAAMrgF,SAASyuC,cAAc,iCAEnC,GAAI4xC,EAAK,CACL,MAAM7/B,EAAM6/B,EAAIj/E,IAAI6Q,YAAY,KAEhCmuE,EAAW,GAAEC,EAAIj/E,IAAInc,UAAU,EAAGu7D,MAGtC,IAAI8/B,EAAa,GAAEF,iCAKnB,GAAIA,GAAuB,MAAZA,EAAiB,CAG5B,MAAMG,EACA,IAAIn1E,KAAK,CAAG,kBAAiBk1E,QAAkB,CAAEzoG,KAAM,2BAE7DyoG,EAAYxrG,OAAOu2B,IAAIC,gBAAgBi1E,GAG3CloG,KAAKmoG,QAAU,IAAIC,OAAOH,EAAW,CAAE//F,KAAM,gBAE7ClI,KAAKmoG,QAAQjwE,QAAUzvB,GAAKrC,GAAO5C,MAAMiF,GAEzCzI,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,aACXP,UAAAA,IAURQ,QAAQ/W,GACJvxF,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,UACX9W,cAAAA,IAQRgX,aACIvoG,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,eAYnBG,eAAe1+E,EAAU0uB,EAAM+4C,GAC3B,IAAIznE,EAAS89E,IAKb,GAFA99E,EAAS89E,KAAc,EAEnBnrG,OAAO8mF,sBAAuB,CAC9B,MAAMlhF,EAAU,CACZgmG,UAAW,SACX9W,cAAAA,GAGJznE,EAAS7b,UAAY,IAAIs1E,sBAAsBvjF,KAAKmoG,QAAS9lG,OAC1D,CACH,MAAMomG,EAAkB3+E,EAAS25D,uBAEjCzjF,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,SACXK,eAAgBD,EAAgBE,SAChCC,eAAgBH,EAAgB1jF,SAChCwsE,cAAAA,GACD,CAAEkX,EAAgBE,SAAUF,EAAgB1jF,YAYvD8jF,aAAa5gC,EAAQzvB,EAAM+4C,GACvB,IAAItpB,EAAO2/B,IAKX,GAFA3/B,EAAO2/B,KAAc,EAEjBnrG,OAAO8mF,sBAAuB,CAC9B,MAAMlhF,EAAU,CACZgmG,UAAW,SACX9W,cAAAA,GAGJtpB,EAAOh6D,UAAY,IAAIs1E,sBAAsBvjF,KAAKmoG,QAAS9lG,OACxD,CACH,MAAMymG,EAAgB7gC,EAAOwb,uBAE7BzjF,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,SACXK,eAAgBI,EAAcH,SAC9BC,eAAgBE,EAAc/jF,SAC9BwsE,cAAAA,GACD,CAAEuX,EAAcH,SAAUG,EAAc/jF,YAWnDgkF,OAAOxX,EAAernF,EAAK8+F,GACvBhpG,KAAKmoG,QAAQxkB,YAAY,CACrB0kB,UAAW,SACXn+F,IAAAA,EACA8+F,SAAAA,EACAzX,cAAAA,KC1JZ,MAAMnrF,IAASyB,EAAAA,EAAAA,yCAKR,MAAMohG,WAAmBtB,GAM5B/oG,YAAY8zB,GAA0B,IAAdrwB,EAAc,uDAAJ,GAC9Bo9E,QAEAz/E,KAAK0yB,WAAaA,EAClB1yB,KAAKkpG,QAAU,IAAIC,GAAY9mG,GAE/BrC,KAAKg/F,SAAU,EACfh/F,KAAKopG,eAAYj9F,EAOjBnM,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKqpG,uBAAuBrmG,KAAKhD,OACrCA,KAAK0yB,WAAW3H,GACZwsE,IACA3mE,GAASA,EAAM+B,WAAa3yB,KAAKspG,mBAAmB14E,KACxD5wB,KAAK0yB,WAAWynE,IAAIpvE,GAChBwyE,KAAAA,oBACA,CAAC3sE,EAAOm4D,IAAQ/oF,KAAKupG,2BAA2BxgB,EAAKn4D,KACzD5wB,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKwpG,kBAAkBxmG,KAAKhD,OAQpCypG,YACI,OAAOzpG,KAAKg/F,QASA,iBAACA,GACTA,IAAYh/F,KAAKg/F,UAIrBh/F,KAAKopG,iBAAmBppG,KAAKopG,UAE7BppG,KAAKopG,UAAY,IAAI9B,GAErBtnG,KAAKg/F,QAAUA,EAEVA,GACDh/F,KAAKkpG,QAAQX,aAGjBvoG,KAAK0pG,mBAAqB1pG,KAAK0pG,YAAY1K,GAE3Ch/F,KAAK0yB,WAAWi3E,4BAA4B,eAAgB3K,GAE5Dh/F,KAAK0yB,WAAWk3E,wBAEhB5pG,KAAKopG,UAAU3+E,WAQnBo/E,mBACI,MAAM,IAAI/jG,MAAM,+BAQpBwjG,mBAAmB14E,GACf,IAAK,MAAMllB,KAAW1L,KAAK0yB,WAAWo3E,oBAClC9pG,KAAK+pG,yBAAyBr+F,EAASklB,GAS/Cy4E,uBAAuB39F,GACnB,MAAMs+F,EAAchqG,KAAK0yB,WAAWgiE,iBAEpC,IAAK,MAAM9jE,KAASo5E,EAChBhqG,KAAK+pG,yBAAyBr+F,EAASklB,GAS/C24E,2BAA2BxgB,EAAKn4D,GAC5B,IAAK5wB,KAAKg/F,QACN,OAGJ,MAAMl1E,EAAWi/D,EAAIkhB,qBAAqBr5E,EAAMA,OAE5C9G,EACA9pB,KAAKkpG,QAAQV,eAAe1+E,EAAU8G,EAAMgpE,UAAWhpE,EAAM4B,oBAE7DpsB,GAAO6lB,KAAM,6BAA4B2E,6BAAiCm4D,KAWlFghB,yBAAyBr+F,EAASklB,GAC9B,IAAK5wB,KAAKg/F,QACN,OAGJ,MAAMv3B,EAAK/7D,EAAQ26E,eACbpe,EAASR,GAAMA,EAAGyiC,mBAAmBt5E,EAAMA,OAE7Cq3C,EACAjoE,KAAKkpG,QAAQL,aAAa5gC,EAAQr3C,EAAMgpE,UAAWhpE,EAAM4B,oBAEzDpsB,GAAO6lB,KAAM,6BAA4B2E,0BAA8B62C,KAS/E+hC,kBAAkB54E,GACd,GAAItL,GAAQi8D,+BAAiC3wD,EAAM+B,WAAa/B,EAAM2B,iBAAmB3B,EAAM+oE,UAC3F,IAAK,MAAMjuF,KAAW1L,KAAK0yB,WAAWo3E,oBAClC9pG,KAAK+pG,yBAAyBr+F,EAASklB,ICrKhD,MAAMu5E,WAAoClB,GAK7CrqG,YAAY8zB,GACR+sD,MAAM/sD,EAAY,CAAEo1E,WAAW,IAUnCiB,OAAOqB,GACHpqG,KAAKkpG,QAAQH,YAAO58F,EAAW,CAAEk+F,cAAeD,EAAQC,eAAiBD,EAAQvpG,uDCrBvE,MACA,MADX,MAEMypG,GAAK,MACA,MCQlB,MAAMlkG,IAASyB,EAAAA,EAAAA,yCAGT0iG,GAAmB,MACnBC,GACK,QADLA,GAEQ,WAFRA,GAGY,eAHZA,GAIW,cAJXA,GAKY,eAGZC,GAAWjsF,OAAO,WAElBksF,GAAmB,CACrBC,iBAAkB,mBAClBC,+BAAgC,qCAChCC,wBAAyB,+BAuBtB,MAAMC,WAAmBnD,GAI5B/oG,YAAY8zB,GACR+sD,QAEAz/E,KAAK+qG,MAAQr4E,EACb1yB,KAAKgrG,MAAQ,IAAI1D,GACjBtnG,KAAKirG,UAAO9+F,EACZnM,KAAKkrG,WAAa,EAClBlrG,KAAKmrG,MAAQ,IAAI7jE,IACjBtnC,KAAKorG,4BAAyBj/F,EAE1B2+F,GAAWttC,eACXx9D,KAAKqrG,gBAELrrG,KAAK+qG,MAAMhgF,GAAGwsE,GAAiDv3F,KAAKsrG,2BAA2BtoG,KAAKhD,OACpGA,KAAK+qG,MAAMhgF,GAAGwsE,EAAuCv3F,KAAKurG,kBAAkBvoG,KAAKhD,OACjFA,KAAK+qG,MAAMhgF,GAAGwsE,GAAiCv3F,KAAKwrG,mBAAmBxoG,KAAKhD,OAC5EA,KAAK+qG,MAAMhgF,GAAGwsE,GACVv3F,KAAKyrG,8BAA8BzoG,KAAKhD,QAE5CA,KAAKgrG,MAAM50F,OAAO,IAAItQ,MAAM,sBAOlB,qBACd,GAAI9F,KAAKorG,uBACL,MAAM,IAAItlG,MAAM,iDACb,CACH9F,KAAKorG,uBAAyB,IAAI9D,SAE5BtnG,KAAKgrG,MAEX,MAAMU,EAAW,GACXC,EAAqB3rG,KAAK+qG,MAAM9N,WAEtC,IAAK,MAAM5C,KAAer6F,KAAK+qG,MAAMjM,kBAC7BzE,EAAYqM,WAAWkF,KAAiBD,EAAqBtR,EAAYmI,SACzEkJ,EAASxnG,KAAKlE,KAAK6rG,iBAAiBxR,UAItC7vE,QAAQshF,WAAWJ,GAIzB1rG,KAAKorG,uBAAuB3gF,UAC5BzqB,KAAKorG,4BAAyBj/F,GASpB,qBACd,YAA6B,IAAf1P,OAAOsvG,IAUV,gBAAC7hG,GAEZlK,KAAKirG,KAAO/gG,EACZlK,KAAKkrG,YAGL,MAAMQ,EAAW,GAEjB,IAAK,MAAMrR,KAAer6F,KAAK+qG,MAAMjM,kBAAmB,CACpD,MAAMkN,EAAM3R,EAAYmI,QAClByJ,EAAUjsG,KAAKksG,uBAAuB7R,GAG5C,IAAK4R,EAAQvgG,QAAS,CAClBtF,GAAO6lB,KAAM,oCAAmC+/E,4BAGhD,SAGJ,MAAMlgD,EAAOqgD,KACPtzF,EAAO,CACT,CAACuzF,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFyzF,WAAYtsG,KAAKusG,gBAAgBN,EAAQvgG,SACzCogD,KAAAA,KAINzqD,EAAI,IAAIimG,GAEdjmG,EAAEomG,iBA/IM,KAgJRpmG,EAAE8sE,OAAM,KACJnuE,KAAKmrG,MAAMxqC,OAAO7U,MAEtB9rD,KAAKmrG,MAAMh+E,IAAI2+B,EAAMzqD,GACrBqqG,EAASxnG,KAAK7C,GAEdrB,KAAKwsG,aAAa3zF,EAAMmzF,GAO5B,aAJMxhF,QAAQshF,WAAWJ,GAIlB1rG,KAAKkrG,UAQhBuB,iBAAiBviG,GAGb,OAFAlK,KAAKirG,KAAO/gG,EAELlK,KAAKkrG,UAOhBwB,wBAAwBrS,GACpB,MAAM4R,EAAUjsG,KAAKksG,uBAAuB7R,GAExC4R,EAAQvgG,UACRugG,EAAQvgG,QAAQihG,OAChBV,EAAQvgG,aAAUS,GAS1BygG,+BACI,IAAK,MAAMvS,KAAer6F,KAAK+qG,MAAMjM,kBACjC9+F,KAAK0sG,wBAAwBrS,GAUlB,sBACfj0F,GAAO4gD,MAAM,uBAEb,UACU+kD,IAAI1hF,OAEVrqB,KAAK6sG,YAAc,IAAId,IAAIe,QAC3B9sG,KAAK6sG,YAAYxtG,SAEjB,MAAM0tG,EAASxpG,KAAK+G,MAAMtK,KAAK6sG,YAAYG,iBAE3ChtG,KAAKitG,OAASF,EAAOG,WAErB9mG,GAAO4gD,MAAO,OAAM+kD,IAAIoB,sBAAsBn/F,KAAK,oBACnDhO,KAAKgrG,MAAMvgF,UACXzqB,KAAKotG,cAAcptG,KAAKitG,QAC1B,MAAOxkG,GACLrC,GAAO5C,MAAM,2BAA4BiF,GACzCzI,KAAKgrG,MAAM50F,OAAO3N,IAS1B2kG,cAAcC,GACVjnG,GAAO4gD,MAAO,qBAAoBqmD,KAGlCrtG,KAAK+qG,MAAMpB,4BAA4B,aAAc0D,GAOzDC,+BAA+BtmG,GAC3BZ,GAAO4gD,MAAO,iCAAgChgD,cAUlDulG,gBAAgB7gG,GACZ,MAAM0+F,EAAU,GAOhB,YALkBj+F,IAAdnM,KAAKirG,OACLb,EAAQlgG,MAAMlK,KAAKirG,MAAOsC,GAAAA,cAAuBvtG,KAAKirG,MACtDb,EAAQpB,SAAWhpG,KAAKkrG,WAGrBx/F,EAAQ8hG,QAAQjqG,KAAKF,UAAU+mG,IAU1C8B,uBAAuB7R,GAGnB,OAFAA,EAAYoQ,IAAYpQ,EAAYoQ,KAAa,GAE1CpQ,EAAYoQ,IAQA,0BACnBrkG,GAAO4gD,MAAM,yBAEPhnD,KAAKgrG,MAEX,IAAK,MAAM3Q,KAAer6F,KAAK+qG,MAAMjM,kBACjC9+F,KAAKwrG,mBAAmBnR,EAAYmI,QAASnI,GAG7Cr6F,KAAK6sG,cACL7sG,KAAK6sG,YAAYF,OACjB3sG,KAAK6sG,iBAAc1gG,GAUK,iCAACkuF,EAAah/E,GAC1C,GAAIA,EAAQ+wF,MAAyB7B,GACjC,OAGJ,IAAKlvF,EAAQgxF,IAGT,YAFAjmG,GAAO6lB,KAAK,uCAKVjsB,KAAKgrG,MAEX,MAAMtnG,EAAM2X,EAAQgxF,IACdL,EAAM3R,EAAYmI,QAClByJ,EAAUjsG,KAAKksG,uBAAuB7R,GAE5C,OAAQ32F,EAAIlE,MACZ,KAAKgrG,GACD,GAAIyB,EAAQvgG,QACRtF,GAAO6lB,KAAM,eAAc+/E,2BAE3BhsG,KAAKytG,WAAWpT,EAAa,mCAC1B,CAGH,MAAM3uF,EAAU,IAAIqgG,IAAI2B,QAExBhiG,EAAQiiG,gBAAgB3tG,KAAK6sG,YAAanpG,EAAImV,KAAKw0F,MAAO3pG,EAAImV,KAAK+0F,OACnE3B,EAAQvgG,QAAUA,EAGlB,MAAMmiG,EAAM,CACR,CAACzB,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFyzF,WAAYtsG,KAAKusG,gBAAgB7gG,GACjCogD,KAAMpoD,EAAImV,KAAKizC,QAK3B9rD,KAAKwsG,aAAaqB,EAAK7B,GACvBhsG,KAAKstG,+BAA+BtB,GAExC,MAEJ,KAAKxB,GACD,GAAIyB,EAAQvgG,QACRtF,GAAO6lB,KAAM,eAAc+/E,2BAE3BhsG,KAAKytG,WAAWpT,EAAa,yBAC1B,GAAI32F,EAAImV,KAAKizC,OAASmgD,EAAQ6B,mBAAoB,CACrD,MAAM,WAAExB,GAAe5oG,EAAImV,KACrBxX,EAAIrB,KAAKmrG,MAAM5sF,IAAI7a,EAAImV,KAAKizC,MAC5BpgD,EAAU,IAAIqgG,IAAI2B,QAExBhiG,EAAQqiG,eAAe/tG,KAAK6sG,YAAaP,EAAWp5E,MAGpDlzB,KAAK6sG,YAAYmB,qBAAqBtiG,GAGtC,MAAMmN,EAAOnN,EAAQuiG,QAAQ3B,EAAW9sG,KAAM8sG,EAAWp5E,MAEzD+4E,EAAQvgG,QAAUA,EAClBugG,EAAQ6B,wBAAqB3hG,EAE7BnM,KAAKstG,+BAA+BtB,GAEpChsG,KAAKmrG,MAAMxqC,OAAOj9D,EAAImV,KAAKizC,MAC3BzqD,EAAEopB,UAEF,MAAM2M,EAAO82E,GAAcr1F,GAE3B,GAAIue,EAAKltB,IAAK,CACV,MAAMA,EAAMqjG,GAAAA,YAAqBn2E,EAAKltB,KAChC8+F,EAAW5xE,EAAK4xE,SAEtBiD,EAAQkC,QAAUjkG,EAClBlK,KAAK6sF,aAAa/gE,KAAK4+E,GAAiBG,wBAAyBmB,EAAK9hG,EAAK8+F,SAG/E5iG,GAAO6lB,KAAK,oCAEZjsB,KAAKytG,WAAWpT,EAAa,gBAEjC,MAEJ,KAAKmQ,GACDpkG,GAAO5C,MAAME,EAAImV,KAAKrV,OAEtB,MAEJ,KAAKgnG,GACD,GAAIyB,EAAQvgG,QAAS,CACjB,MAAM,WAAE4gG,GAAe5oG,EAAImV,KAErBue,EAAO82E,GADAjC,EAAQvgG,QAAQuiG,QAAQ3B,EAAW9sG,KAAM8sG,EAAWp5E,OAGjE,QAAiB/mB,IAAbirB,EAAKltB,UAAuCiC,IAAlBirB,EAAK4xE,SAAwB,CACvD,MAAM9+F,IAAMktB,EAAKltB,KAAMqjG,GAAAA,YAAqBn2E,EAAKltB,KAC3C8+F,EAAW5xE,EAAK4xE,SAEjBoF,IAAAA,CAAQnC,EAAQkC,QAASjkG,KAC1B+hG,EAAQkC,QAAUjkG,EAClBlK,KAAK6sF,aAAa/gE,KAAK4+E,GAAiBG,wBAAyBmB,EAAK9hG,EAAK8+F,IAI/E,MAAM6E,EAAM,CACR,CAACzB,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFyzF,WAAYtsG,KAAKusG,gBAAgBN,EAAQvgG,SACzCogD,KAAMpoD,EAAImV,KAAKizC,QAK3B9rD,KAAKwsG,aAAaqB,EAAK7B,SAG3B5lG,GAAO4gD,MAAO,kCAAiCglD,sCAE/ChsG,KAAKytG,WAAWpT,EAAa,8CAEjC,MAEJ,KAAKmQ,GACD,GAAIyB,EAAQvgG,QAAS,CACjB,MAAM,WAAE4gG,GAAe5oG,EAAImV,KAErBue,EAAO82E,GADAjC,EAAQvgG,QAAQuiG,QAAQ3B,EAAW9sG,KAAM8sG,EAAWp5E,OAGjE,QAAiB/mB,IAAbirB,EAAKltB,UAAuCiC,IAAlBirB,EAAK4xE,SAAwB,CACvD,MAAM9+F,IAAMktB,EAAKltB,KAAMqjG,GAAAA,YAAqBn2E,EAAKltB,KAC3C8+F,EAAW5xE,EAAK4xE,SAEjBoF,IAAAA,CAAQnC,EAAQkC,QAASjkG,KAC1B+hG,EAAQkC,QAAUjkG,EAClBlK,KAAK6sF,aAAa/gE,KAAK4+E,GAAiBG,wBAAyBmB,EAAK9hG,EAAK8+F,IAInF,MAAM3nG,EAAIrB,KAAKmrG,MAAM5sF,IAAI7a,EAAImV,KAAKizC,MAElC9rD,KAAKmrG,MAAMxqC,OAAOj9D,EAAImV,KAAKizC,MAC3BzqD,EAAEopB,eAEFrkB,GAAO4gD,MAAO,sCAAqCglD,sCAEnDhsG,KAAKytG,WAAWpT,EAAa,mDAYzCmR,mBAAmBxkG,EAAIqzF,GACnBj0F,GAAO4gD,MAAO,eAAchgD,UAE5BhH,KAAK0sG,wBAAwBrS,GAYE,oCAACA,EAAanyF,EAAM09F,EAAUh6D,GAC7D,GACK,iBADG1jC,GAEA0jC,GAAY5rC,KAAK+qG,MAAMsD,gBAAiB,CACxC,MAAM1C,EAAqB3rG,KAAK+qG,MAAM9N,WAChC1L,EAAgB8I,EAAYmI,QAGlC,UAFkCnI,EAAYoM,eAEtBx6D,IAAI2/D,KAAiBD,EAAqBpa,EAAe,CACzEvxF,KAAKorG,8BACCprG,KAAKorG,6BAETprG,KAAK6rG,iBAAiBxR,GAE5B,MAAM4R,EAAUjsG,KAAKksG,uBAAuB7R,GACtCvuC,EAAOqgD,KACPtzF,EAAO,CACT,CAACuzF,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFyzF,WAAYtsG,KAAKusG,gBAAgBN,EAAQvgG,SACzCogD,KAAAA,KAKZ9rD,KAAKwsG,aAAa3zF,EAAM04E,KAcxCkc,WAAWpT,EAAa72F,GACpB,MAAMwoG,EAAM3R,EAAYmI,QAClBpuF,EAAM,CACR,CAACg4F,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFrV,MAAAA,KAKZxD,KAAKwsG,aAAap4F,EAAK43F,GAW3BQ,aAAa3zF,EAAM04E,GACfvxF,KAAK+qG,MAAMuD,YAAYz1F,EAAM04E,GAUjCsa,iBAAiBxR,GACb,MAAM2R,EAAM3R,EAAYmI,QAClByJ,EAAUjsG,KAAKksG,uBAAuB7R,GAE5C,GAAI4R,EAAQvgG,QAGR,OAFAtF,GAAO6lB,KAAM,iCAAgC+/E,mCAEtCxhF,QAAQpU,SAGnB,QAAmCjK,IAA/B8/F,EAAQ6B,mBAGR,OAFA1nG,GAAO6lB,KAAM,iCAAgC+/E,2CAEtCxhF,QAAQpU,SAInBpW,KAAK6sG,YAAY0B,uBAAuB,GAExC,MAAMC,EAASjrG,KAAK+G,MAAMtK,KAAK6sG,YAAY4B,iBACrCb,EAAQtvG,OAAOiS,OAAOi+F,EAAOtB,YAAY,GAE/C,IAAKU,EACD,OAAOpjF,QAAQpU,OAAO,IAAItQ,MAAM,+BAIpC9F,KAAK6sG,YAAY6B,yBAEjB,MAAM5iD,EAAOqgD,KACP9hF,EAAO,CACT,CAAC+hF,IAAsB7B,GACvB8B,IAAK,CACD7sG,KAAMgrG,GACN3xF,KAAM,CACFw0F,MAAOrtG,KAAKitG,OACZW,MAAAA,EACA9hD,KAAAA,KAKNzqD,EAAI,IAAIimG,GAcd,OAZAjmG,EAAEomG,iBAxlBU,KAylBZpmG,EAAE8sE,OAAM,KACJnuE,KAAKmrG,MAAMxqC,OAAO7U,GAClBmgD,EAAQ6B,wBAAqB3hG,KAEjCnM,KAAKmrG,MAAMh+E,IAAI2+B,EAAMzqD,GAErBrB,KAAKwsG,aAAaniF,EAAM2hF,GAGxBC,EAAQ6B,mBAAqBhiD,EAEtBzqD,GAUf,SAAS6sG,GAAcr1F,GACnB,IACI,OAAOtV,KAAK+G,MAAMuO,GACpB,MAAOpQ,GACL,MAAO,IAIfqiG,GAAWp/E,OAASg/E,GC3nBpB,MAAMtkG,IAASyB,EAAAA,EAAAA,gDASR,MAAM8mG,WAA0B1F,GAInCrqG,YAAY8zB,GACR+sD,MAAM/sD,GAEN1yB,KAAKirG,UAAO9+F,EACZnM,KAAK4uG,mBAAoB,EAEzB5uG,KAAK6uG,YAAc,IAAI/D,GAAWp4E,GAElC1yB,KAAK8uG,WAAaC,IAAAA,CAAS/uG,KAAKgvG,eAjBhB,KAkBhBhvG,KAAKivG,YAAcF,IAAAA,CAAS/uG,KAAKkvG,gBAlBjB,KAqBhBlvG,KAAK6uG,YAAY9jF,GACb+/E,GAAWp/E,OAAOm/E,wBAClB7qG,KAAKmvG,yBAAyBnsG,KAAKhD,OAEvCA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKyrG,8BAA8BzoG,KAAKhD,OAC5CA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKovG,qBAAqBpsG,KAAKhD,OACnCA,KAAK0yB,WAAW3H,GACZwsE,GACAv3F,KAAKwrG,mBAAmBxoG,KAAKhD,OACjCA,KAAK0yB,WAAW3H,GACRwsE,GACA,KACIv3F,KAAK4uG,mBAAoB,KAWxB,kBAAC5P,GACVA,QACMh/F,KAAK6uG,YAAYQ,eAEvBrvG,KAAK6uG,YAAYjC,+BAIrB5sG,KAAKirG,OAAOjM,GAAUh/F,KAAKsvG,eAG3B,MAAMzuG,QAAcb,KAAK6uG,YAAYU,UAAUvvG,KAAKirG,MAGpDjrG,KAAKkpG,QAAQH,OAAO/oG,KAAK0yB,WAAWuqE,WAAYj9F,KAAKirG,KAAMpqG,GAY5B,oCAACw5F,EAAanyF,EAAM09F,EAAUh6D,GAC7D,OAAQ1jC,GACR,IAAK,aACD9B,GAAO4gD,MAAO,eAAcqzC,EAAYmI,iCAAiC52D,KACzE,MACJ,IAAK,gBACIA,GAAY5rC,KAAKg/F,SAClBh/F,KAAK6uG,YAAYnC,wBAAwBrS,IAUrD+U,uBACQpvG,KAAK4uG,mBAAqB5uG,KAAKg/F,SAC/Bh/F,KAAKivG,cAQbzD,mBAAmBxkG,GACfhH,KAAKkpG,QAAQZ,QAAQthG,GAEjBhH,KAAKg/F,SACLh/F,KAAK8uG,aAUO,uBAChB1oG,GAAO4gD,MAAM,gBAEbhnD,KAAKirG,KAAOjrG,KAAKsvG,eACjB,MAAMzuG,QAAcb,KAAK6uG,YAAYU,UAAUvvG,KAAKirG,MAEpDjrG,KAAKkpG,QAAQH,OAAO/oG,KAAK0yB,WAAWuqE,WAAYj9F,KAAKirG,KAAMpqG,GAQ1C,wBACjBuF,GAAO4gD,MAAM,mBAEb,MAAMwoD,QC5FPz8F,eAAyB08F,GAE5B,OAAOhwG,OAAOiwG,OAAOC,UAAU,MAAOF,EAAU,QAAQ,EAAO,CAAE,aAAc,cD0FpDE,CAAU3vG,KAAKirG,MAChC2E,QChHP78F,eAAuBy8F,GAC1B,MAAMK,EAAc,IAAIC,YAGxB,OAAOrwG,OAAOiwG,OAAOK,WAAW,CAC5B7nG,KAAM,OACNgsD,KAAM27C,EAAYG,OAAO,oBACzBhvG,KAAM,UACNmR,KAAM,IAAI5U,aACXiyG,EAAU,KDuGYS,CAAQT,GAE7BxvG,KAAKirG,KAAO,IAAIhtG,WAAW2xG,GAE3B,MAAM/uG,EAAQb,KAAK6uG,YAAYpC,iBAAiBzsG,KAAKirG,MAErDjrG,KAAKkpG,QAAQH,OAAO/oG,KAAK0yB,WAAWuqE,WAAYj9F,KAAKirG,KAAMpqG,GAW/DsuG,yBAAyBnoG,EAAIkD,EAAKrJ,GAC9BuF,GAAO4gD,MAAO,eAAchgD,uBAE5BhH,KAAKkpG,QAAQH,OAAO/hG,EAAIkD,EAAKrJ,GASjCyuG,eACI,OAAO7yG,OAAOgD,OAAOq2E,gBAAgB,IAAI73E,WAAW,MEvKrD,MAAMiyG,GAKTtxG,YAAY8zB,GACR,MAAM,KAAEy9E,EAAO,IAAOz9E,EAAWrwB,QAAQ6G,OAEzClJ,KAAKowG,mBAAqBD,EAAKE,qBAE3BrwG,KAAKowG,mBACLpwG,KAAKswG,YAAc,IAAInG,GAA4Bz3E,GAEnD1yB,KAAKswG,YAAc,IAAI3B,GAAkBj8E,GAU/B,mBAACxpB,GACf,MAAM,KAAEinG,EAAO,IAAOjnG,EAEtB,SAAKinG,EAAKE,uBAAyBvF,GAAWttC,kBAIrCt0D,EAAOqnG,SAAWrnG,EAAOqnG,QAAQC,eAClClrF,GAAQk+D,6BACJt6E,EAAOunG,+BAAiCnrF,GAAQg+D,4BAQhEmmB,YACI,OAAOzpG,KAAKswG,YAAY7G,YASZ,iBAACzK,SACPh/F,KAAKswG,YAAYI,WAAW1R,GAUtC6K,iBAAiBO,GACbpqG,KAAKswG,YAAYvH,OAAOqB,8BC7DhC,MAAMuG,GAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,GAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,GAAkB3vG,EAAGC,GAC1B,IAAI2vG,EAAM,EAMV,OAJAF,GAAgCr+F,MAAKrI,GACiC,KAAjE4mG,EAAQ5vG,EAAEgJ,GAAO/I,EAAE+I,GAAS,EAAQhJ,EAAEgJ,GAAO/I,EAAE+I,KAAU,KAGvD4mG,EA+BJ,SAASC,GAAe/zG,GAC3B,MAAM+sD,EAAW,IAAIxiB,IACfypE,EAAa,IAAIzpE,IAWvB,OATA0pE,EAAEj0G,GAAMsS,KAAK,kBACR0E,MAAK,CAACk9F,EAAGnjG,IAAOg8C,EAASvkB,IAAIz3B,EAAG23C,aAAa,UAClDurD,EAAEj0G,GAAMsS,KAAK,mBACR0E,MAAK,CAACk9F,EAAGnjG,IAAOijG,EAAWxrE,IAAI,CAC5BhmC,KAAMuO,EAAG23C,aAAa,QACtBx9C,KAAM6F,EAAG23C,aAAa,QACtB4V,SAAUvtD,EAAG23C,aAAa,gBAG3B,CACHqE,SAAAA,EACAinD,WAAAA,GAOO,MAAMG,WAAaxJ,GAO9B/oG,cAAkE,IAAtDg1D,EAAsD,uDAAzC,GAAI52D,EAAqC,uDAA9B,6BAIhC,GAHAyiF,QACAz/E,KAAKhD,KAAOA,EACZgD,KAAKoxG,MAAQx9C,EAAWw9C,OACnBpxG,KAAKoxG,MACN,MAAM,IAAItrG,MACN,uDAIR9F,KAAK0N,QAAU,GACf1N,KAAKqxG,MAAQ,IAAI9pE,IAIjBvnC,KAAKsxG,iBAAmB,IAAI/pE,IAE5B,MAAMgqE,EAAO39C,EAAW29C,KAExBA,EAAKj6F,YAAY2iF,KAAAA,iBACbF,GAAQ/5F,KAAKwxG,aAAazX,KAC9BwX,EAAKj6F,YAAY2iF,KAAAA,mBACbF,GAAQ/5F,KAAKyxG,gBAAgB1X,KACjCz7F,OAAOmE,KAAK8uG,EAAKF,OAAO1uG,SAAQ2jD,IAC5BtmD,KAAKwxG,aAAaD,EAAKF,MAAM/qD,OAGjCvG,GAAAA,QAAAA,aAAqB,OAAQ,mCAC7B//C,KAAKoxG,MAAM51C,WAAWzb,GAAAA,QAAAA,GAAAA,MAa1Byb,WAAWmrC,GAA2C,IAAlC+K,EAAkC,wDAAlBC,EAAkB,wDAClD3xG,KAAKoxG,MAAM51C,WAAWmrC,GACtB3mG,KAAK4xG,mBAEDD,IAAa3xG,KAAKsxG,iBAAiBrlE,IAAI06D,KACvC3mG,KAAKsxG,iBAAiB9rE,IAAImhE,GAC1B3mG,KAAKqxG,MAAM1uG,SAAQo3F,GAAQ/5F,KAAK6xG,gCAAgC9X,MAGhE2X,GACA1xG,KAAK0xG,SAYbh2C,cAAcirC,GAA2C,IAAlC+K,EAAkC,wDAAlBC,EAAkB,wDACrD3xG,KAAKoxG,MAAM11C,cAAcirC,GACzB3mG,KAAK4xG,mBAEDD,GAAY3xG,KAAKsxG,iBAAiBrlE,IAAI06D,KACtC3mG,KAAKsxG,iBAAiB3wC,OAAOgmC,GAC7B3mG,KAAKqxG,MAAM1uG,SAAQo3F,GAAQ/5F,KAAK6xG,gCAAgC9X,MAGhE2X,GACA1xG,KAAK0xG,SAObA,SACI1xG,KAAKqxG,MAAM1uG,SAAQo3F,GAAQA,EAAKlsC,iBAQpCgkD,gCAAgC9X,GAC5B,GAAmC,IAA/B/5F,KAAKsxG,iBAAiBj/E,KACtB0nE,EAAK+X,mBAAmB,gBACrB,CACH,MAAMC,EAAW,GAEjB/xG,KAAKsxG,iBAAiB3uG,SAAQkkB,IAC1BkrF,EAAS7tG,KAAK,CACV,QAAW,UACXq9C,WAAY,CAAE,IAAO16B,QAI7BkzE,EAAKiY,uBAAuB,WAAY,CAAED,SAAAA,KAUlDE,yBAAyB3rD,EAAKtpD,GAAsB,IAAhB+wD,EAAgB,uDAAN,IAC1C,OAAO/tD,KAAKkyG,cAAc5rD,EAAKtpD,EAAM+wD,GAWzCmkD,cAAc5rD,EAAKtpD,EAAM+wD,GACrB,OAAO,IAAIvjC,SAAQ,CAACC,EAASrU,IACzBpW,KAAKoxG,MAAMj/F,KAAKm0C,EAAKtpD,GAAMg5B,IACvBvL,EAAQsmF,GAAe/6E,MACxB5f,EAAQ23C,KASnByjD,aAAazX,GACT/5F,KAAKqxG,MAAM7rE,IAAIu0D,GACf/5F,KAAKmyG,wBAAwBpY,GAE7B/5F,KAAK6xG,gCAAgC9X,GAQzC0X,gBAAgB1X,GACZ/5F,KAAKqxG,MAAM1wC,OAAOo5B,GAOtBoY,wBAAwBpY,GACpBA,EAAKiY,uBAAuB,IAAK,CAC7BzwD,WAAY,CACRkG,MAAO1H,GAAAA,QAAAA,GAAAA,KACP/+C,KA3OH,QA4OGhE,KAAMgD,KAAKhD,KACXk9D,IAAKl6D,KAAK0N,WAQtB0kG,wBAEIpyG,KAAKqxG,MAAM1uG,SAAQo3F,GAAQ/5F,KAAKmyG,wBAAwBpY,KAM5D6X,mBACI5xG,KAAK0N,QAtOb,SAAqBsjG,EAAYjnD,GAC7B,MAAMsoD,EAAmBrB,EAAWj7F,KAAK86F,IAAmBzkG,QACxD,CAACkmG,EAAkB9N,IAAc,GAC7BmM,GAAoBvkG,QAChB,CAACmR,EAAKrT,EAAKi+D,IACP5qD,GACe,IAAR4qD,EAAY,GAAK,MACjBq8B,EAASt6F,GAAOs6F,EAASt6F,GAAO,KAC3C,QACH,IACHqoG,EAAiBxoD,EAASh0C,OAAO3J,QACnC,CAACmR,EAAKopF,IAAa,GAAEppF,EAAMopF,MAAY,IAE3C,OAAO9nD,EAAAA,GAAAA,UAASwzD,EAAmBE,GA0NzBC,CAAYxyG,KAAKoxG,MAAMr2C,YAAa/6D,KAAKoxG,MAAMp2C,WAErDh7D,KAAKoyG,iCCzQN,MAAMK,GAAqB,uBAE5BrsG,IAASyB,EAAAA,EAAAA,kDA8Cf,GAFoB,IAnCb,cAA0B8/F,GAI7B/oG,cACI6gF,QACAz/E,KAAK0yG,SAAW,CACZC,UAAU,GAQlBC,kBAAkB,GAAc,IAAd,SAAED,GAAY,EAC5BvsG,GAAO4gD,MAAM,oBAAqB,CAAE2rD,SAAAA,IACpC3yG,KAAK0yG,SAAW,CACZC,UAAuB,IAAbA,GAEd3yG,KAAK6sF,aAAa/gE,KAAK2mF,GAAoBzyG,KAAK0yG,UAUpDC,WACI,OAAkC,IAA3B3yG,KAAK0yG,SAASC,WCtCvBvsG,IAASyB,EAAAA,EAAAA,yCAQA,MAAMgrG,GAKjBj0G,YAAYk0G,GACR9yG,KAAK+yG,aAAeD,EAOpB9yG,KAAKgzG,cAAgB,EAErBhzG,KAAKizG,iBAAc9mG,EAOnB+mG,iBACA,OAAOlzG,KAAKizG,YAQhBE,WACInzG,KAAKozG,gBAELpzG,KAAKgzG,eAAiB,EAEtBhzG,KAAKqzG,uBACCC,GAAAA,iBACEb,IACA,IAAkB,IAAjB,SAAEE,GAAe,EACVA,EACA3yG,KAAKuzG,kBAELvzG,KAAKozG,mBAIrBE,GAAAA,YAA0BtzG,KAAKuzG,kBAQnCA,kBACQvzG,KAAKwzG,iBAUTxzG,KAAKgzG,cAAgB/hG,KAAKoO,IAAI,EAAGrf,KAAKgzG,eACtChzG,KAAKizG,YCxEN,SAAwB96F,GAAiC,IAA1Bs7F,EAA0B,uDAAf,IAAKxxC,EAAU,uDAAH,EACzD,OAAOhxD,KAAKC,MAAOD,KAAKE,UAAqC,IAAxBF,KAAKkpB,IAAI8nC,EAAM9pD,GAAiBs7F,GAAaA,GDuE3DC,CACH1zG,KAAKgzG,cACmB,KAArBhzG,KAAKgzG,cACpB,GAEJ5sG,GAAO+L,KAAM,6CAA4CnS,KAAKkzG,gBAE9DlzG,KAAKwzG,eAAiBlvG,YAAW,IAAMtE,KAAK2zG,qBAAqB3zG,KAAKkzG,aAS1EE,gBACQpzG,KAAKwzG,iBACLptG,GAAO+L,KAAK,oCACZ9N,aAAarE,KAAKwzG,gBAClBxzG,KAAKwzG,oBAAiBrnG,EACtBnM,KAAKizG,iBAAc9mG,GAU3BwnG,oBACI,MAAM,iBAAEC,GAAqB5zG,KAAK+yG,aAC5Bc,EAAcD,EAAiBt2C,iBAGrC,IAAKu2C,EACD,OAGJztG,GAAO+L,KAAK,wCAEZ,MAAMqW,EAAM,IAAIwK,IAAIhzB,KAAK+yG,aAAarpD,SACtC,IAAI,OAAExiC,GAAWsB,EACjB,MAAMsrF,EAAU,oBACVC,EAAW7sF,EAAOjhB,MAAM6tG,GAG1BC,IAA+C,IAAnCA,EAAS5uG,QAAQ0uG,GAC7B3sF,EAASA,EAAOha,QAAQ4mG,EAAU,KAAID,KAG9BE,IACR7sF,IAAmC,IAAzBA,EAAO/hB,QAAQ,KAAe,WAAU0uG,IAAiB,WAAUA,KAGjFrrF,EAAItB,OAASA,EAEblnB,KAAK+yG,aAAarpD,QAAUlhC,EAAIhqB,WAEhCo1G,EAAiBl5F,SASrBu0B,SACIjvC,KAAKozG,gBACLpzG,KAAKgzG,cAAgB,EACjBhzG,KAAKqzG,yBACLrzG,KAAKqzG,yBACLrzG,KAAKqzG,uBAAyB,OE1J3B,MAAMW,GAIjBp1G,cACIoB,KAAKi0G,aAAe,KACpBj0G,KAAKk0G,mBAAqB,KAS9BC,cAAcC,EAAgBtB,GAAmB,WAC7C,MAAMuB,EAAmBvB,EAAkBtlD,SAE3CslD,EAAkBtlD,SAAW,WAAa,2BAATlnD,EAAS,yBAATA,EAAS,gBACtC,MAAMguG,EAAahuG,EAAK,GAEpBguG,EAAW/9E,SAAS,aACpB,EAAK29E,mBAAqBI,GAK1BF,EAAexpD,YACf,EAAKqpD,aAAentG,KAAK8oB,OAE7BykF,EAAiBvxG,MAAMgwG,EAAmBxsG,IASlDiuG,uBACI,OAAOv0G,KAAKk0G,mBAQhBM,0BACI,OAAOx0G,KAAKi0G,aACNntG,KAAK8oB,MAAQ5vB,KAAKi0G,aAClB,MC/Cd,SAASQ,KAA+C,IAAjBxyC,EAAiB,uDAAV,QAI1C,OAAO,cAAcA,EAIjBrjE,cACI6gF,SAAS,WACTz/E,KAAK4zD,WAAa,KAOtBvpC,KAAKupC,GACD5zD,KAAK4zD,WAAaA,IAQ9B,SAAe6gD,KAKFC,GACPD,GAA8B9M,IC/B9BvhG,IAASyB,EAAAA,EAAAA,2CAwBA,MAAM8sG,WAA6BC,GAW9Ch2G,YAAY,GAA+E,IAA/E,+BAAEi2G,EAAF,wBAAkCC,EAAlC,YAA2DC,EAAc,IAAM,EACvFt1B,QACAz/E,KAAKg1G,YAAc,EACnBh1G,KAAKi1G,yBAA2BH,EAChC90G,KAAKk1G,gCAAkCL,EAEvC70G,KAAKm1G,aAA+C,iBAAzBJ,EAAYrqB,SAAwBqqB,EAAYrqB,SApCrD,IAqCtB1qF,KAAKo1G,YAA6C,iBAAxBL,EAAYhnD,QAAuBgnD,EAAYhnD,QAhCpD,IAiCrB/tD,KAAKq1G,cAAiD,iBAA1BN,EAAYO,UAClCP,EAAYO,UA3BK,EA+BvBt1G,KAAKu1G,qBAAuBtkG,KAAKyX,MAAM,KAAS1oB,KAAKm1G,cACrDn1G,KAAKw1G,kBAAoB,IAAIr3G,MAAM6B,KAAKu1G,sBAO5ClrF,KAAKupC,GACD6rB,MAAMp1D,KAAKupC,GACX7T,GAAAA,QAAAA,aAAqB,OAAQ,iBAajC01D,KAAKnvD,EAAKuV,EAASr4D,EAAOuqD,GACtB/tD,KAAK01G,6BAEL,MAAMjjD,GAAKxS,EAAAA,GAAAA,KAAI,CACXzgD,KAAM,MACNs8D,GAAIxV,IAGRmM,EAAGrxD,EAAE,OAAQ,CAAEqmD,MAAO1H,GAAAA,QAAAA,GAAAA,OACtB//C,KAAK4zD,WAAW+hD,QAAQljD,EAAI,CAAE1E,QAAAA,IACzBoW,KAAKtI,EAASr4D,GAWvBoyG,cAAcC,GACVvpB,cAActsF,KAAK2qF,YACnB3qF,KAAK2qF,WAAaluF,OAAOkvF,aAAY,KAKjC,MAAM/7D,EAAM9oB,KAAK8oB,MAEjB,GAAI5vB,KAAKk1G,kCAAoCtlF,EAAM5vB,KAAK81G,iBAOpD,OALA91G,KAAK01G,6BAEL11G,KAAK81G,iBAAmBlmF,OACxB5vB,KAAKg1G,YAAc,GAKvBh1G,KAAKy1G,KAAKI,GAAW,KAIjB71G,KAAK81G,iBAAmB91G,KAAKk1G,kCAAoCpuG,KAAK8oB,MAEtE5vB,KAAKg1G,YAAc,KACpBxxG,IACCxD,KAAKg1G,aAAe,EACpB,MAAMe,EAAU,SAAOvyG,EAAQ,QAAU,WAErCxD,KAAKg1G,aAAeh1G,KAAKq1G,eACzB98E,KAAAA,iBAAsC,IAAIzyB,MAAMiwG,IAChD3vG,GAAO5C,MAAMuyG,EAAQvyG,GACrBxD,KAAKi1G,0BAA4Bj1G,KAAKi1G,4BAEtC7uG,GAAO6lB,KAAK8pF,EAAQvyG,KAEzBxD,KAAKo1G,eACTp1G,KAAKm1G,cACR/uG,GAAO+L,KAAM,iCAAgCnS,KAAKm1G,mBAMtDa,eACQh2G,KAAK2qF,aACLluF,OAAO6vF,cAActsF,KAAK2qF,YAC1B3qF,KAAK2qF,WAAa,KAClB3qF,KAAKg1G,YAAc,EACnB5uG,GAAO+L,KAAK,0BAQpBujG,6BACI11G,KAAKw1G,kBAAkBtxG,MAAK,IAAI4C,MAAO0iD,WAGnCxpD,KAAKw1G,kBAAkBj2G,OAASS,KAAKu1G,sBACrCv1G,KAAKw1G,kBAAkBj7F,QAY/B07F,qBACI,MAAMC,EAAgBl2G,KAAKw1G,kBAAkBjvG,QAM7C2vG,EAAchyG,MAAK,IAAI4C,MAAO0iD,WAE9B,IAAI2sD,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAcvzG,SAAQ8F,IAClB,MAAM4tG,EAAkB5tG,EAAI2tG,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAa3tG,KAMjB0tG,GAAen2G,KAAKm1G,aAGblkG,KAAKmO,IAAI+2F,EAAa,ICjMrC,MAAM/vG,IAASyB,EAAAA,EAAAA,6CAKA,MAAMyuG,WAAuB3O,GAM7B4O,oBACP,MAAO,CACHC,oBAAqB,sBACrBC,mBAAoB,sBASjB70D,oBACP,OAAO7B,GAAAA,QAAAA,OAmBXnhD,YAAY,GAAmG,IAAnG,sBAAE83G,EAAF,mBAAyBC,EAAzB,sBAA6CC,EAA7C,WAAoEC,EAApE,MAAgFC,EAAhF,SAAuFC,GAAY,EAC3Gt3B,QACAz/E,KAAKg3G,SAAW,CACZN,2BAAwD,IAA1BA,GAA+CA,EAC7E3B,YAAagC,EACbD,MAAAA,EACAH,wBAAkD,IAAvBA,EAAqC,IAAY5rG,OAAO4rG,GACnFC,sBAAAA,GAGJ52G,KAAK+yG,aAAe,IAAIhzD,GAAAA,QAAAA,WAAmB82D,GAC3C72G,KAAKi3G,eAAiBJ,EAAWK,WAAW,QAAUL,EAAWK,WAAW,QAG5El3G,KAAK+yG,aAAa1nD,WAAa,EAE/BrrD,KAAKm3G,iBAAmB,IAAIC,GAC5Bp3G,KAAKm3G,iBAAiBhD,cAAcn0G,KAAMA,KAAK+yG,cAE/C/yG,KAAKq3G,YAAc,IAAIxE,GAAW7yG,KAAK+yG,cAcvC/yG,KAAKs3G,aAAe,GAIpBt3G,KAAKunD,oBACD,OACA,IAAIotD,GAAqB,CACrBE,+BAAgC,IAAM70G,KAAKw0G,0BAC3CM,wBAAyB,IAAM90G,KAAKu3G,gCACpCxC,YAAagC,KAIrB/2G,KAAKw3G,uBAAwB,EAQ7B5sD,gBACA,MAAM6sD,EAAYz3G,KAAK+yG,cAAgB/yG,KAAK+yG,aAAanpD,QAAU5pD,KAAK+yG,aAAanpD,OAAO4P,OAE5F,OAAQx5D,KAAK+8F,UAAYh9C,GAAAA,QAAAA,OAAAA,WAA4B//C,KAAK+8F,UAAYh9C,GAAAA,QAAAA,OAAAA,aAC7D//C,KAAK03G,kBAAqBD,GAAaA,EAAU3uF,aAAe2wC,UAAUk+C,MAQnFvG,YACA,OAAOpxG,KAAK+yG,aAAa3B,MAQzBvmD,oBACA,OAA2C,IAApC7qD,KAAK+yG,aAAaloD,cAQzBxL,aACA,OAAOr/C,KAAK+yG,aAAa1zD,OAQzBq4D,uBACA,OAAO13G,KAAKi3G,eAQZ3wD,UACA,OAAOtmD,KAAK+yG,aAAazsD,IAQzBoQ,0BACA,OAAO12D,KAAK+yG,aAAanpD,QAAU5pD,KAAK+yG,aAAanpD,OAAO8M,oBAQ5DtwD,aACA,OAAOpG,KAAK+yG,aAAa3sG,OAQzB/D,cACA,OAAOrC,KAAK+yG,aAAa1wG,QAMzBu1G,iBAAa,MACb,OAAO,UAAA53G,KAAKg3G,SAASjC,mBAAd,eAA2B11D,SAAUr/C,KAAKq/C,OAQjDqK,cACA,OAAO1pD,KAAK+yG,aAAarpD,QAOzBotD,UAAMrtG,GACNzJ,KAAKg3G,SAASF,MAAQrtG,EAGlBzJ,KAAKw3G,uBACLx3G,KAAK63G,yBAST/gF,aACA,OAAO92B,KAAK+8F,QAUhBx1C,oBAAoBr/C,EAAM6nD,GACtB/vD,KAAKkI,GAAQ6nD,EACbA,EAAO1lC,KAAKrqB,MAQhBw4B,aACIx4B,KAAK+yG,aAAav6E,cAAc,WAUpCm0B,OAAOrG,EAAKsG,EAAKC,EAAK54C,GAAmB,2BAAN3N,EAAM,iCAANA,EAAM,kBACrCtG,KAAK+yG,aAAapmD,OAAOrG,EAAKsG,EAAKC,EAAK7sD,KAAK83G,qBAAqB90G,KAAKhD,KAAMiU,MAAc3N,GAS/F2lD,QAAQ3F,EAAK4F,EAAMj4C,GAAmB,2BAAN3N,EAAM,iCAANA,EAAM,kBAClCtG,KAAK+yG,aAAa9mD,QAAQ3F,EAAK4F,EAAMlsD,KAAK83G,qBAAqB90G,KAAKhD,KAAMiU,MAAc3N,GAc5FwxG,qBAAqBC,EAAgBjhF,GACjC92B,KAAK+8F,QAAUjmE,EAEf,IAAIkhF,GAAgB,EAE2D,MAwB/E,GAxBIlhF,IAAWipB,GAAAA,QAAAA,OAAAA,WAA4BjpB,IAAWipB,GAAAA,QAAAA,OAAAA,UAClD//C,KAAKi4G,2BAIDj4G,KAAKi3G,gBAAkBj3G,KAAKw3G,uBAC5Bx3G,KAAKk4G,0BAETl4G,KAAKw3G,uBAAwB,EAE7Bx3G,KAAK63G,yBACL73G,KAAKm4G,sBACLn4G,KAAKq3G,YAAYpoE,SACjBjvC,KAAKy1G,KAAKG,eAAc,UAAA51G,KAAKg3G,SAASjC,mBAAd,eAA2B11D,SAAUr/C,KAAKq/C,SAC3DvoB,IAAWipB,GAAAA,QAAAA,OAAAA,eAClB//C,KAAKy1G,KAAKO,eAGVgC,EAAgBh4G,KAAKo4G,yBAChBJ,GACD3zG,aAAarE,KAAKq4G,gBAIrBL,EAAe,4BA7BwB1xG,EA6BxB,iCA7BwBA,EA6BxB,kBAChByxG,EAAejhF,KAAWxwB,GAC1BtG,KAAK6sF,aAAa/gE,KAAKwqF,GAAeC,OAAOC,oBAAqB1/E,IAS1EwhF,oBACI,IAAK,MAAMC,KAAYv4G,KAAKs3G,aACxBiB,EAASniG,OAAO,IAAItQ,MAAM,eAE9B9F,KAAKs3G,aAAe,GAQxBkB,iBACQx4G,KAAK+yG,cAAgB/yG,KAAK+yG,aAAanpD,SACvC5pD,KAAK+yG,aAAanpD,OAAO2P,eACzBv5D,KAAK+yG,aAAanpD,OAAOkQ,SAAS,OAS1CvK,aACIvvD,KAAKq3G,YAAYpoE,SACjB5qC,aAAarE,KAAKq4G,cAClBr4G,KAAKs4G,oBACLt4G,KAAK+yG,aAAaxjD,cAAc,WAQpChrD,QACIvE,KAAK+yG,aAAaxuG,SAAS,WAQ/BiwG,0BACI,OAAOx0G,KAAKm3G,iBAAiB3C,0BAQjCD,uBACI,OAAOv0G,KAAKm3G,iBAAiB5C,uBAQjC0D,2BACI,IAAKj4G,KAAKg3G,SAASN,sBAEf,OAGJ,MAAM,iBAAE9C,GAAqB5zG,KAAK+yG,aAE7B/yG,KAAK03G,iBAEE9D,EAEAA,EAAiBp2C,cAEjBo2C,EAAiBt2C,mBACzBl3D,GAAO+L,KAAK,uCACZyhG,EAAiBx2C,QAAoB,IAHrCh3D,GAAO6lB,KAAK,sEAFZ7lB,GAAO6lB,KAAK,+EAFZ7lB,GAAO6lB,KAAK,yDAiBpB4rF,yBACI,MAAM,mBAAElB,GAAuB32G,KAAKg3G,SAEpC,GAAIh3G,KAAKi3G,gBAAkBN,EAAqB,EAAG,CAC/C32G,KAAKq4G,cAAgBjyG,GAAO+L,KAAM,kCAAiCwkG,OACnEtyG,aAAarE,KAAKq4G,cAElB,MAAMI,EAAgC9B,EAAmD,GAAhB1lG,KAAKE,SAAgB,IAE9F/K,GAAO4gD,MAAO,2CAA0CyxD,OAExDz4G,KAAKq4G,aAAe/zG,YAChB,IAAMtE,KAAKk4G,0BACN/zC,MAAK,IAAMnkE,KAAK63G,4BACrBY,IAUZP,0BACI,MAAM,MAAEpB,EAAF,sBAASF,GAA0B52G,KAAKg3G,SACxCxuF,EAAMouF,GACN52G,KAAK0pD,QAAQx8C,QAAQ,SAAU,YAAYA,QAAQ,QAAS,WAElE,OAAOwrG,MAAMlwF,GACR27C,MAAKnuC,IAGF,IAAK8gF,EACD,OAGJ,MAAM6B,EAAgB3iF,EAAS4iC,QAAQr6C,IAAI,iBAEvCo6F,IAAkB7B,IAClB1wG,GAAO5C,MACF,oCAAmCszG,QAAY6B,KACpD34G,KAAK6sF,aAAa/gE,KAAKwqF,GAAeC,OAAOE,wBAGpDtoC,OAAM3qE,IACH4C,GAAO5C,MAAO,wCAAuCglB,IAAO,CAAEhlB,MAAAA,OAU1E20G,sBACI,IAAK,MAAMI,KAAYv4G,KAAKs3G,aACxB,GAAIiB,EAAS9lD,GAAI,CACbpuD,aAAak0G,EAASxqD,SAEtB,MAAM6qD,EAAW9xG,KAAK8oB,MAAQ2oF,EAASl4G,MAEvCL,KAAKsuD,OACDiqD,EAAS9lD,IACTj8C,GAAU+hG,EAAS9tF,QAAQjU,KAC3BhT,GAAS+0G,EAASniG,OAAO5S,IACzBo1G,GAIZ54G,KAAKs3G,aAAe,GASxBriF,KAAKi5B,GACD,IAAKluD,KAAK4qD,UACN,MAAM,IAAI9kD,MAAM,iBAEpB9F,KAAK+yG,aAAa99E,KAAKi5B,GAa3BI,OAAO7K,EAAMxvC,EAAU65C,EAASC,GAC5B,GAAK/tD,KAAK4qD,UAMV,OAAO5qD,KAAK+yG,aAAazkD,OAAO7K,EAAMxvC,EAAU65C,EAASC,GALrDD,EAAQ,iBAgBhB6nD,QAAQljD,EAAD,GAAkB,IAAb,QAAE1E,GAAW,EACrB,OAAO,IAAIvjC,SAAQ,CAACC,EAASrU,KACzB,GAAIpW,KAAK4qD,UACL5qD,KAAKsuD,OACDmE,GACAj8C,GAAUiU,EAAQjU,KAClBhT,GAAS4S,EAAO5S,IAChBuqD,OACD,CACH,MAAMwqD,EAAW,CACb9lD,GAAAA,EACAhoC,QAAAA,EACArU,OAAAA,EACA/V,MAAOyG,KAAK8oB,MACZm+B,QAASzpD,YAAW,KAEhBi0G,EAAS9lD,QAAKtmD,EAGdiK,OAAOjK,KACR4hD,IAGP/tD,KAAKs3G,aAAapzG,KAAKq0G,OAUnChB,gCACQv3G,KAAK03G,mBACLtxG,GAAO6lB,KAAK,yDACZjsB,KAAKw4G,kBAeb3qD,aAAapK,EAAMxvC,EAAU65C,EAASC,GAC7B/tD,KAAK4qD,UAKV5qD,KAAK+yG,aAAallD,aAAapK,EAAMxvC,EAAU65C,EAASC,GAJpDD,EAAQ,iBAYhB+qD,wBACI,IAAK13C,UAAU23C,YAAc94G,KAAK+yG,aAAaloD,gBAAkB7qD,KAAK+yG,aAAanoD,UAC/E,OAAO,EAGX5qD,KAAK+yG,aAAatmD,qBAAqB1M,GAAAA,QAAAA,OAAAA,eACvC//C,KAAK+yG,aAAaloD,eAAgB,EAElC,MAAM33B,EAAOlzB,KAAK+yG,aAAanpD,OAAO+M,aACjC7W,MAAM,CACHtgD,KAAM,cAERgwD,GAAOtP,EAAAA,GAAAA,OAAM,CACfuH,MAAO1H,GAAAA,QAAAA,GAAAA,OACPvgD,KAAM,gBAGV0zB,EAAK40B,MAAM0H,EAAKtI,QAEhB,MAAM4pD,EAAM3vC,UAAU23C,YACoB,IAAtC94G,KAAK0pD,QAAQvkD,QAAQ,YAAsB,SAAQnF,KAAK0pD,UAAY1pD,KAAK0pD,QACzE3J,GAAAA,QAAAA,UAAkB7sB,EAAKg0B,SAO3B,OALA9gD,GAAO+L,KAAM,wCAAuC2+F,KAEpD9wG,KAAK+yG,aAAanpD,OAAOgG,oBACzB5vD,KAAK+yG,aAAaljD,iBAEX,EAWXuoD,yBACI,MAAM,iBAAExE,GAAqB5zG,KAAK+yG,aAGlC,SAFoBa,IAAoBA,EAAiBt2C,mBAGrDt9D,KAAKq3G,YAAYlE,WAEV,KCnnBZ,MAAM4F,GAAK,KAOLC,GAAM,MCNb5yG,IAASyB,EAAAA,EAAAA,2CAKA,MAAMoxG,GAOjBr6G,YAAYm7F,GACR/5F,KAAKk5G,MAAQnf,EAAKzE,KAElBt1F,KAAKm5G,UAAYpf,EAEjB/5F,KAAKo5G,yBAA2B,CAC5B,CAAC7kB,KAAkB,EACnB,CAACA,KAAkB,GAGvBv0F,KAAKq5G,gBAAkB,GACvBr5G,KAAKs5G,gBAAkB,GAEvBt5G,KAAKu6D,WAAav6D,KAAKu6D,WAAWv3D,KAAKhD,MACvCA,KAAKk5G,MAAM5hG,YAAY2iF,KAAAA,uBAAmCj6F,KAAKu6D,YAMnE8pB,UACIrkF,KAAKk5G,MAAMhhG,eAAe+hF,KAAAA,uBAAmCj6F,KAAKu6D,YAQtEiD,cACI,OAAOokB,QAAQ5hF,KAAKk5G,MAAMK,8BAM9Bn8C,OAAO9wC,EAAOwxD,GACV,IAAK99E,KAAKw9D,gBAAkBx9D,KAAKm5G,UAAU9c,cAIvC,YAHAj2F,GAAO5C,MAAO,iBAAgB8oB,6BAAiCtsB,KAAKw9D,8CACpDx9D,KAAKm5G,UAAU9c,iBAKnC,GAAI/vE,IAAUtsB,KAAKo5G,yBAAyBt7B,GAGxC,YAFA13E,GAAO6lB,KAAM,+BAA8BK,mBAAuBwxD,KAMtE,MAAMp6E,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAKk5G,MAAMK,+BAElC71G,EAAItC,EAAE,gBAAiB,CACnBg8D,OAAQ9wC,EACRwxD,UAAAA,IACDn2B,KAEH3nD,KAAKk5G,MAAMtlD,WAAW3+B,KAAKvxB,GAM/B81G,QAAQ17B,EAAWx3B,GACf,IAAKtmD,KAAKw9D,gBAAkBx9D,KAAKm5G,UAAU9c,cAIvC,YAHAj2F,GAAO5C,MAAO,6CAA4CxD,KAAKw9D,8CAC/Cx9D,KAAKm5G,UAAU9c,iBAMnC,MAAM34F,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAKk5G,MAAMK,+BAElC71G,EAAItC,EAAE,gBAAiB,CACnB08E,UAAAA,EACA27B,eAAgBnzD,IAAOqB,KAE3B3nD,KAAKk5G,MAAMtlD,WAAW3+B,KAAKvxB,GAM/B0S,OAAO0nE,EAAWx3B,GACd,IAAKtmD,KAAKw9D,gBAAkBx9D,KAAKm5G,UAAU9c,cAIvC,YAHAj2F,GAAO5C,MAAO,4CAA2CxD,KAAKw9D,6CAC9Cx9D,KAAKm5G,UAAU9c,iBAMnC,MAAM34F,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAKk5G,MAAMK,+BAElC71G,EAAItC,EAAE,gBAAiB,CACnB08E,UAAAA,EACA47B,eAAgBpzD,IACjBqB,KAEH3nD,KAAKk5G,MAAMtlD,WAAW3+B,KAAKvxB,GAQ/B62D,WAAWl8D,GACP,MAAM,QAAEs7G,EAAS77B,UAAWnyE,EAAtB,QAA6BqzF,EAA7B,SAAsC4a,EAAtC,MAAgDnf,EAAOof,WAAYC,GAAkBz7G,EAE3F,GAAIy7G,EAAe,CACf,MAAMC,EAAUpuG,IAAU4oF,GACpBv0F,KAAKq5G,gBACLr5G,KAAKs5G,gBACL3oD,EAAUxyD,MAAMC,QAAQ07G,EAAcnuG,IAAUmuG,EAAcnuG,GAAS,GAEzEguG,EACAI,EAAQnuG,QAAOuB,IAAMwjD,EAAQp6B,SAASppB,KACjCxK,SAAQ2jD,GAAOtmD,KAAKk5G,MAAMrsB,aACtB/gE,KAAKmuE,KAAAA,mCAA+CtuF,EAAO26C,KAEpEqK,EAAQ/kD,QAAOuB,IAAM4sG,EAAQxjF,SAASppB,KACjCxK,SAAQ2jD,GAAOtmD,KAAKk5G,MAAMrsB,aACtB/gE,KAAKmuE,KAAAA,mCAA+CtuF,EAAO26C,KAGpE36C,IAAU4oF,GACVv0F,KAAKq5G,gBAAkB1oD,EAEvB3wD,KAAKs5G,gBAAkB3oD,YAERxkD,IAAZ6yF,GAAyBh/F,KAAKo5G,yBAAyBztG,KAAWqzF,GACzEh/F,KAAKo5G,yBAAyBztG,GAASqzF,EAEvCh/F,KAAKk5G,MAAMrsB,aAAa/gE,KAAKmuE,KAAAA,sBAAkC+E,EAASrzF,EAAO8uF,IACxEkf,EACP35G,KAAKk5G,MAAMrsB,aAAa/gE,KAAKmuE,KAAAA,uBAAmCtuF,GACzDiuG,GACP55G,KAAKk5G,MAAMrsB,aAAa/gE,KAAKmuE,KAAAA,uBAAmCtuF,ICzJ5E,MAAMquG,GAAc,0BACdC,GAAwB,CAC1BC,IAAM,GAAEF,SACRG,OAAS,GAAEH,YACXI,aAAe,GAAEJ,mBAEfK,GACa,GAAEL,kBADfK,GAEO,GAAEL,YAGT5zG,IAASyB,EAAAA,EAAAA,4CAKA,MAAMyyG,GAOjB17G,YAAYm7F,GACR/5F,KAAK+5F,KAAOA,EAEZ/5F,KAAKu6G,gBAAkBv6G,KAAKu6G,gBAAgBv3G,KAAKhD,MACjDA,KAAK+5F,KAAKzE,KAAKh+E,YAAY2iF,KAAAA,qBAAiCj6F,KAAKu6G,iBAEjEv6G,KAAKw6G,OAAS,GAMlBn2B,UACIrkF,KAAK+5F,KAAKzE,KAAKp9E,eAAe+hF,KAAAA,qBAAiCj6F,KAAKu6G,iBAQxEE,mBAAmBC,GACf,IAAK16G,KAAKw9D,gBAAkBx9D,KAAK+5F,KAAKsC,cAIlC,YAHAj2F,GAAO5C,MAAO,2CAA0CxD,KAAKw9D,8CAC7Cx9D,KAAK+5F,KAAKsC,iBAK9B,MAAMt9F,EAAU,CACZS,KAAMy6G,GAAsBC,IAC5BQ,QAAAA,GAGJ16G,KAAKwsG,aAAaztG,GAQtB47G,mBAAmBC,GACf,IAAK56G,KAAKw9D,gBAAkBx9D,KAAK+5F,KAAKsC,cAIlC,YAHAj2F,GAAO5C,MAAO,2CAA0CxD,KAAKw9D,8CAC7Cx9D,KAAK+5F,KAAKsC,iBAK9B,MAAMt9F,EAAU,CACZS,KAAMy6G,GAAsBE,OAC5BS,gBAAAA,GAGJ56G,KAAKwsG,aAAaztG,GAStB87G,sBAAsBC,EAAgBtiB,GAClC,IAAKx4F,KAAKw9D,gBAAkBx9D,KAAK+5F,KAAKsC,cAIlC,YAHAj2F,GAAO5C,MAAO,+CAA8CxD,KAAKw9D,8CACjDx9D,KAAK+5F,KAAKsC,iBAK9B,MAAMt9F,EAAU,CACZS,KAAMy6G,GAAsBG,aAC5BU,eAAAA,EACAtiB,QAAAA,GAGJx4F,KAAKwsG,aAAaztG,GAMtBy+D,cACI,OAAOokB,QAAQ5hF,KAAK+6G,uBAQxBA,sBACI,OAAO/6G,KAAK+5F,KAAKzE,KAAK0lB,8BAQ1BC,mBAAmBC,GACfl7G,KAAKm7G,gBAAkBD,EAQ3BA,iBACI,OAAOl7G,KAAKm7G,gBAShBC,gBAAgB90D,GACZtmD,KAAKq7G,aAAe/0D,EAQxBg1D,iBACI,OAAOt7G,KAAKq7G,aAQhBd,gBAAgBl/F,GACZ,OAAQA,EAAQgd,OAChB,KAAKgiF,GACDr6G,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,4BAAwC5+E,EAAQm9E,SAC5E,MACJ,KAAK6hB,GACDr6G,KAAKw6G,OAASn/F,EAAQg2F,MACtBrxG,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,uBAAmC5+E,IAWvEmxF,aAAaztG,GACT,MAAM2E,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAK+6G,wBAE5Br3G,EAAItC,EAAE,iBAAkBrC,GAAS4oD,KAEjC3nD,KAAK+5F,KAAKzE,KAAK1hC,WAAW3+B,KAAKvxB,ICzLvC,MAAM0C,IAASyB,EAAAA,EAAAA,oCAOT0zG,GAAgB,QAMP,MAAMC,GAOjB58G,YAAYm7F,GACR/5F,KAAKs1F,KAAOyE,EAAKzE,KACjBt1F,KAAKy7G,SAAW1hB,EAEhB,MAAM2hB,EAAqB17G,KAAK27G,oBAAoB34G,KAAKhD,MAEzDA,KAAKy7G,SAASzuF,iBACVitE,KAAAA,mBACAyhB,GAEJ17G,KAAKy7G,SAASzuF,iBACVitE,KAAAA,yBACAyhB,GAEJ17G,KAAKy7G,SAASzuF,iBACVitE,KAAAA,iCACA3zC,IACItmD,KAAK47G,aAAet1D,KAShCkX,cACI,OAAOx9D,KAAKs1F,KAAKumB,eAQrBz+C,SACI,OAAKp9D,KAAKw9D,cAIH,IAAIhzC,SAAQ,CAACC,EAASrU,KACzBpW,KAAKy7G,SAASK,gBAAe,EAAMrxF,EAASrU,MAJrCoU,QAAQpU,OAAO,IAAItQ,MAAM,yBAaxCi2G,UACS/7G,KAAKw9D,eAAkBx9D,KAAKy7G,SAASpf,eAC9Br8F,KAAKg8G,WAAch8G,KAAKy7G,SAASQ,oBAI7Cj8G,KAAKy7G,SAASK,gBAAe,GAQjCI,QACI,OAAIl8G,KAAKg8G,UACEh8G,KAAKg8G,UAAUE,QACjB/3C,MAAK,KACFnkE,KAAKg8G,eAAY7vG,EACjB/F,GAAO+L,KAAK,uBAEfg8D,OAAM,SAGR3jD,QAAQpU,OACP,IAAItQ,MAAM,oCAQtBq2G,gBAAgB71D,GACZtmD,KAAK47G,aAAet1D,EAOxBq1D,sBACS37G,KAAKw9D,eAIUx9D,KAAKy7G,SAASW,QAAUp8G,KAAKy7G,SAASpf,eAEvCr8F,KAAKy7G,SAASQ,qBAAuBj8G,KAAKg8G,WAEzDh8G,KAAKgO,OACAm2D,MAAK,IAAM/9D,GAAO+L,KAAK,uBACvBg8D,OAAM1lE,GAAKrC,GAAO5C,MAAM,uBAAwBiF,KAW7DuF,KAAKsgB,EAAa+tF,GACd,MAAMhgB,EAAcr8F,KAAKy7G,SAASW,QAAUp8G,KAAKy7G,SAASpf,cAE1D,IAAKr8F,KAAK47G,aACN,OAAOpxF,QAAQpU,OAAO,IAAItQ,MAAM,kDAGpC,MAAM4xB,EAAWqoB,GAAAA,QAAAA,eAAuB//C,KAAK47G,cACvCU,EAAev8D,GAAAA,QAAAA,iBAAyB//C,KAAK47G,cAuHnD,OArHA57G,KAAKg8G,UAAYh8G,KAAKs1F,KAAKinB,WACvB7kF,EAAU,CACN4kF,aAAAA,EACAE,kBAAkB,EAClBC,cAAc,EACdC,aAAa,IAIjBpuF,GAEAtuB,KAAKg8G,UAAUhK,uBAAuB,OAAQ,CAC1CzwD,WAAY,CAAEkG,MAAO,mCACrBh+C,MAAO6kB,IAIX+tE,GACAr8F,KAAKg8G,UAAUhf,oBAAoBue,IAAe,CAACv+G,EAAMo/C,KACrDp8C,KAAKy7G,SAAS5uB,aAAa/gE,KAAKmuE,KAAAA,yBAAqC79C,EAAM,CAAEigE,MAAOr/G,EAAKyM,WAE7FzJ,KAAKg8G,UAAUhvF,iBACXitE,KAAAA,mBAEA,CAAC79C,EAAMugE,EAAMpmE,EAAMqmE,EAAgBrY,EAASztE,EAAQ0tE,EAAUqY,EAASv2D,KAEnE,IAAIhoD,OAAOiS,OAAOvQ,KAAKy7G,SAASqB,SAASxtG,MAAKtJ,GAAKA,EAAEsgD,MAAQA,IAA7D,CAKA,IAAK,MAAMyzC,KAAQz7F,OAAOiS,OAAOvQ,KAAKy7G,SAASsB,mBAAmBvC,QAC9D,GAAIl8G,OAAOiS,OAAOwpF,EAAK+I,cAAcxzF,MAAK5G,GAAKA,EAAE49C,MAAQA,IACrD,OAMRtmD,KAAKy7G,SAAS5uB,aAAa/gE,KACvBmuE,KAAAA,wBACAl6C,GAAAA,QAAAA,mBAA2B3D,GAC3BugE,EACAnY,EAAWA,EAASwY,YAAS7wG,OAGzCnM,KAAKg8G,UAAUhvF,iBACXitE,KAAAA,iBAA4B79C,IAGxBp8C,KAAKy7G,SAAS5uB,aAAa/gE,KACvBmuE,KAAAA,sBACAl6C,GAAAA,QAAAA,mBAA2B3D,OAGvCp8C,KAAKg8G,UAAUhvF,iBACXitE,KAAAA,eACA,KAEI37F,OAAOmE,KAAKzC,KAAKg8G,UAAUc,SACtBn6G,SAAQoJ,GAAK/L,KAAKy7G,SAAS5uB,aAAa/gE,KACrCmuE,KAAAA,sBAAkCl6C,GAAAA,QAAAA,mBAA2Bh0C,MAErE/L,KAAKg8G,UAAUiB,QAEfj9G,KAAKg8G,eAAY7vG,EACjB/F,GAAO+L,KAAK,oCAIpBnS,KAAKg8G,UAAUhvF,iBAAiBitE,KAAAA,QAAmBijB,IAC/C,GAAIA,EAKA,OAJAl9G,KAAKy7G,SAAS5uB,aAAa/gE,KAAKmuE,KAAAA,wBAEhCj6F,KAAKg8G,UAAUiB,WASvBj9G,KAAKy7G,SAASzuF,iBACVitE,KAAAA,yBACA,CAACzB,EAASp8C,EAAMygD,EAAKsgB,KACjB/2G,GAAO4gD,MAAO,6BAA4BwxC,KAAWp8C,KAAQygD,KACzDrE,IAAYx4F,KAAKy7G,SAAS5d,SAE1B79F,KAAKy7G,SAASztG,KAAKmvG,MAG/Bn9G,KAAKg8G,UAAUhvF,iBACXitE,KAAAA,eACA,CAAC3hE,EAAQguB,KAGDA,EACAtmD,KAAKy7G,SAASztG,QAKlBhO,KAAKg8G,UAAUiB,QAEfj9G,KAAKy7G,SAAS5uB,aAAa/gE,KAAKmuE,KAAAA,cAA0B3hE,OAKlEt4B,KAAKy7G,SAASzuF,iBACVitE,KAAAA,YACA,KACIj6F,KAAKk8G,YAIV,IAAI1xF,SAAQ,CAACC,EAASrU,KACzBpW,KAAKg8G,UAAUhvF,iBAAiBitE,KAAAA,YAAuB,KACnDxvE,IAGI4xF,IAAUhgB,GACVr8F,KAAKg8G,UAAUhK,uBAAuBuJ,GAAe,CAAE9xG,MAAO4yG,KACvDr8G,KAAKg8G,UAAUnuD,kBAG9B7tD,KAAKg8G,UAAUhvF,iBAAiBitE,KAAAA,gBAA4B7jF,GAC5DpW,KAAKg8G,UAAUhvF,iBAAiBitE,KAAAA,+BAA2C7jF,GAC3EpW,KAAKg8G,UAAUhvF,iBAAiBitE,KAAAA,mBAA+B7jF,GAE/DpW,KAAKg8G,UAAUhuG,UASvBovG,WAAWp2G,GACP,IAAKhH,KAAKw9D,gBAAkBx9D,KAAKy7G,SAASpf,cACtC,OAGJ,MAAM/1C,EAAMhoD,OAAOmE,KAAKzC,KAAKg8G,UAAUc,SAClCxtG,MAAKvD,GAAKg0C,GAAAA,QAAAA,mBAA2Bh0C,KAAO/E,IAE7Cs/C,EACAtmD,KAAKg8G,UAAUqB,KAAK/2D,GAEpBlgD,GAAO5C,MAAO,wBAAuBwD,oBAQ7Cs2G,cAAct2G,GACV,IAAKhH,KAAKw9D,gBAAkBx9D,KAAKy7G,SAASpf,cACtC,OAKJ,IAAIkhB,EAAcv9G,KAAKy7G,SAAS5d,QAE5B79F,KAAKy7G,SAASsB,mBAAmB7B,mBACjCqC,EAAcv9G,KAAKy7G,SAASsB,mBAAmBzB,kBAGnD,MAAMkC,EAAgBl/G,OAAOmE,KAAKzC,KAAKg8G,UAAUc,SAC5CxtG,MAAKvD,GAAKg0C,GAAAA,QAAAA,mBAA2Bh0C,KAAO/E,IAEjD,GAAIw2G,EAAe,CACf,MAAMl3D,EAAMtmD,KAAKg8G,UAAUc,QAAQU,GAAel3D,IAC5Cm3D,GACA3iD,EAAAA,GAAAA,MAAK,CAAEgB,GAAIyhD,IACRn8G,EAAE,IAAK,CAAEqmD,MAAO,wCAChBrmD,EAAE,SAAU,CAAE06D,GAAIxV,IAE3BtmD,KAAKs1F,KAAK1hC,WAAWtF,OAAOmvD,GACxB,SACAh1G,IACIrC,GAAO5C,MAAO,4BAA2B8iD,IAAO79C,WAGxDrC,GAAO5C,MAAO,wBAAuBg6G,+CC7UjD,MAAMp3G,IAASyB,EAAAA,EAAAA,2CAIf,IAAI61G,GAEAC,GAKJ,UAKIt+B,SAAUG,GAQVn1D,KAAKuzF,GACD59G,KAAKq/E,SAAWu+B,GAAmBp+B,IAOnCq+B,wBASA,OARKH,KACDA,GAAqB19G,KAAKq/E,SAASroB,QAAQ,qBACtC0mD,KACDA,GAwDhB,WACI,MAAMliE,EAAWsiE,KAAAA,mBAIjB,OAFA13G,GAAOD,IAAI,0BAA2Bq1C,GAE/BA,EA7D0BuiE,GACrB/9G,KAAKq/E,SAASjyB,QAAQ,oBAAqBswD,MAI5CA,IAOPM,gBACA,IAAKL,GAAY,CACb,MAAMM,EAAQj+G,KAAKq/E,SAASroB,QAAQ,aAEpC2mD,GAAaM,GAASj+G,KAAKq/E,SAASroB,QAAQ,eAExCinD,EACAj+G,KAAKq/E,SAASjyB,QAAQ,cAAe6wD,GAC7BN,KACRA,GA+ChB,WACI,MAAMO,EAWCC,KAAQA,KAAQA,KAAQA,KAP/B,OAFA/3G,GAAOD,IAAI,eAAgB+3G,GAEpBA,EApDkBE,GACbp+G,KAAKq/E,SAASjyB,QAAQ,cAAeuwD,KAI7C,OAAOA,IAOPxiE,gBAGA,OAAOn7C,KAAKq/E,SAASroB,QAAQ,cAO7B7b,cAAUA,GACNA,EACAn7C,KAAKq/E,SAASjyB,QAAQ,YAAajS,GAEnCn7C,KAAKq/E,SAAShyB,WAAW,eAuCrC,SAAS8wD,KACL,MAAQ,GAAEltG,KAAKE,SAAS3S,SAAS,eAAe0H,OAAO,EAAG,GCvH9D,MAAMw2F,GACAx6F,EAAQ,KACR+3F,GAAa/3F,EAAQ,MACrBq2B,GAAuBr2B,EAAQ,MAE/BkE,IAASyB,EAAAA,EAAAA,wCAMf,SAASw2G,GAAsBC,GAC3B,IAAIr6G,EAAQ,EAEZ,OAAO,SAAS4xB,GAEZ,GAAIA,EAGA,YAFA5xB,EAAQ,GAMZ,MAAM8pD,EAAU98C,KAAKkpB,IAAI,EAAGl2B,EAAQ,GAIpC,OAFAA,GAAS,EAEF8pD,EAAUuwD,GAaV,SAASC,GAAU7mF,EAAU49D,EAAM/qE,EAASloB,GAuBvD,SAAS4V,EAASogB,GACd,GAAIA,EAAMxf,MAAQwf,EAAMxf,KAAKsiC,UAAW,CACpC,GAAI9iB,EAAM7O,SAAW/sB,OAAOwO,SAASue,OAKjC,YAJApjB,GAAO6lB,KACF,6CACGoM,EAAM7O,UAIlBg1F,GAASrjE,UAAY9iB,EAAMxf,KAAKsiC,WA/BxCn7C,KAAK03B,SAAWA,EAChB13B,KAAKy+G,YAAcnpB,EACnBt1F,KAAK0+G,eAAiBL,GAAsB,KAC5Cr+G,KAAK2+G,oBAAsBN,GAAsB,KAGjDr+G,KAAK4+G,qBAAsB,EAC3B5+G,KAAKqC,QAAUA,EAIfrC,KAAK6+G,mBAAoB,EAEzB7+G,KAAK6sF,aAAetiE,EAEpBvqB,KAAK4zD,WAAa5zD,KAAKy+G,YAAY7qD,WAuB/Bn3D,OAAOuwB,iBACPvwB,OAAOuwB,iBAAiB,UAAW/U,GAAU,GAE7Cxb,OAAOqiH,YAAY,YAAa7mG,GAMxCsmG,GAAUhgH,UAAUwgH,sBAAwB,WACxC,OAAO/+G,KAAK4+G,qBAGhBL,GAAUhgH,UAAUygH,oBAAsB,WACtC,OAAOh/G,KAAK6+G,mBAGhBN,GAAUhgH,UAAU0gH,gBAAkB,SAAS34D,GAG1B,UAFAvG,GAAAA,QAAAA,mBAA2BuG,KAGxClgD,GAAO+L,KACH,gDACJnS,KAAK6sF,aAAa/gE,KAAKmuE,GAAWz7D,cAI1C+/E,GAAUhgH,UAAU2gH,gBAAkB,SAASC,GACtCn/G,KAAKo/G,eACNp/G,KAAKo/G,aAAeD,EACpB/4G,GAAO+L,KAAM,sBAAqBnS,KAAKo/G,kBAI/Cb,GAAUhgH,UAAU8gH,gBAAkB,WAClC,OAAOr/G,KAAKo/G,cAGhBb,GAAUhgH,UAAU+gH,kBAAoB,WAEpC,IAAIC,EAAiBv/G,KAAKqC,QAAQuxD,WAAW4rD,MAAM19F,MAQnD,OAJKy9F,IACDA,EAAkB,SAAQv/G,KAAKqC,QAAQuxD,WAAW4rD,MAAMngE,UAGrDkgE,GAGXhB,GAAUhgH,UAAUkhH,mBAAqB,WAAW,UAEhD,MAAMh8D,GAAOxD,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAKs/G,oBACxB9/G,KAAM,SAGJ,UAAE27C,GAAcqjE,GAChBkB,EAAalB,GAASR,UACtB90G,EAASlJ,KAAKqC,QAAQqwB,WAE5BtsB,GAAO+L,KAAM,eAAcgpC,kBAA0BukE,KAErDj8D,EAAKriD,EAAE,aAAc,CACjBqmD,MAAO,kCACPsyC,KAAM/5F,KAAK03B,SACX,cAAegoF,IAGfvkE,GACAsI,EAAK3D,MAAM,CAAE,aAAc3E,IAG/BsI,EAAKriD,EACD,WAAY,CACR8G,KAAM,aACNuB,MAAOm4E,QAAQ14E,EAAOy2G,cACvBh4D,UAEyBx7C,IAA5BjD,EAAO02G,kBACPn8D,EAAKriD,EACD,WAAY,CACR8G,KAAM,mBACNuB,MAAOP,EAAO02G,mBACfj4D,KAEPz+C,EAAO22G,cACPp8D,EAAKriD,EACD,WAAY,CACR8G,KAAM,eACNuB,MAAOP,EAAO22G,eACfl4D,KAEPz+C,EAAO42G,YACPr8D,EAAKriD,EACD,WAAY,CACR8G,KAAM,aACNuB,MAAOP,EAAO42G,aACfn4D,UAGqCx7C,IAA5CnM,KAAKqC,QAAQqwB,WAAWwqE,iBACxBz5C,EAAKriD,EACD,WAAY,CACR8G,KAAM,kBACNuB,MAAOzJ,KAAKqC,QAAQqwB,WAAWwqE,kBAChCv1C,UAEqCx7C,IAA5CnM,KAAKqC,QAAQqwB,WAAWyqE,iBACxB15C,EAAKriD,EACD,WAAY,CACR8G,KAAM,kBACNuB,MAAOzJ,KAAKqC,QAAQqwB,WAAWyqE,kBAChCx1C,KASX,MAAMo4D,EAAe,oBAAG//G,KAAKqC,QAAQqwB,kBAAhB,iBAAG,EAAyB0jE,iBAA5B,aAAG,EAAoC2pB,uBAAvC,SAEhBA,GACDt8D,EAAKriD,EACD,WAAY,CACR8G,KAAM,kBACNuB,MAAOs2G,IACRp4D,KAGX,MAAM,YAAEkgC,EAAF,gBAAeC,EAAf,0BAAgC4N,EAAhC,gBAA2DD,GAAoBz1F,KAAKqC,QAAQqwB,WAC5FstF,GAAqBn4B,IAAgBC,IAAoB2N,IAK1B,IAA9BC,EAYP,OATIsqB,GACAv8D,EAAKriD,EACD,WAAY,CACR8G,KAAM,mBACNuB,OAAQu2G,IACTr4D,KAEXlE,EAAKkE,KAEElE,GAIX86D,GAAUhgH,UAAU0hH,eAAiB,SAASC,GAE1C,MAAM/kE,EAAY81D,EAAEiP,GAAU5wG,KAAK,cAAco1C,KAAK,cAElDvJ,IACA/0C,GAAO+L,KAAM,wBAAuBgpC,KACpCqjE,GAASrjE,UAAYA,IAI7BojE,GAAUhgH,UAAU4hH,mBAAqB,SAASD,GAE9ClgH,KAAKk/G,gBAAgBjO,EAAEiP,GAAU5wG,KAAK,cAAco1C,KAAK,aAEzD,MAAM07D,EACAnP,EAAEiP,GAAU5wG,KACV,6DAC+C/P,OAAS,EAEhE6G,GAAO+L,KAAM,2BAA0BiuG,KAEvCpgH,KAAK4+G,oBAAsB3N,EAAEiP,GAAU5wG,KACnC,2DACiD/P,OAAS,EAE9D6G,GAAO+L,KACF,oCAAmCnS,KAAK4+G,uBAExC5+G,KAAK4+G,qBAEN5+G,KAAKigH,eAAeC,GAIxB,MAAMtjB,EAAeqU,EAAEiP,GAAU5wG,KAAK,eAAeo1C,KAAK,YAE1D1kD,KAAK6sF,aAAa/gE,KAAK4wE,GAAqB1/D,iBACxCojF,EAAuBxjB,GAGvBqU,EAAEiP,GAAU5wG,KACZ,gEACkD/P,SAClDS,KAAK6+G,mBAAoB,GAG7Bz4G,GAAO+L,KAAM,yBAAwBnS,KAAK6+G,sBAa9CN,GAAUhgH,UAAU8hH,wBAA0B,WAC1C,OAAO,IAAI71F,SAAQC,IAEfzqB,KAAKk/G,gBAAgBl/G,KAAKqC,QAAQuxD,WAAWwrD,cAG7Cp/G,KAAK4zD,WAAWtF,OACZtuD,KAAKy/G,sBACLjpG,GAAUxW,KAAKsgH,gCAAgC9pG,EAAQiU,KACvDjnB,GAASxD,KAAKugH,8BAA8B/8G,EAAOinB,KAMvDzqB,KAAK4zD,WAAWrvD,YAaxBg6G,GAAUhgH,UAAUgiH,8BAAgC,SAAS/8G,EAAOyQ,GAGhE,MAAMusG,EACAvP,EAAEztG,GAAO8L,KAAK,0BAA0B/P,QACnC0xG,EAAEztG,GAAO8L,KAAK,yBAAyB/P,OAMlD,GAJIihH,IACAp6G,GAAO+L,KAAK,+BACZqsG,GAASrjE,eAAYhvC,GAErB8kG,EAAEztG,GAAO8L,KAAK,4BAA4B/P,OAG1C,YAFAS,KAAK6sF,aAAa/gE,KAAKmuE,GAAWx7D,mBAMtC,MAAMgiF,EAAiBxP,EAAEztG,GAAO8L,KAAK,4BAErC,GAAImxG,EAAelhH,OAAQ,CAEvB,MAAMmhH,EAAYD,EAAe/7D,KAAK,cAChCi8D,EAAgB1P,EAAEztG,GAAO8L,KAAK,eACpC,IAAIsxG,EAUJ,OARID,IACAC,EAAWD,EAAc38G,aAE7BhE,KAAK6sF,aAAa/gE,KACdmuE,GAAWp5D,kBACX6/E,EACAE,GAMR,GAAI3P,EAAEztG,GAAO8L,KAAK,yBAAyB/P,OAWvC,OAVA6G,GAAO6lB,KAAK,uCAAwCzoB,GACnCu8C,GAAAA,QAAAA,iBAAyBv8C,EAAMkiD,aAAa,SAE5C1lD,KAAKqC,QAAQuxD,WAAW4rD,MAAMqB,kBAG3C7gH,KAAK4+G,qBAAsB,QAE/B5+G,KAAK6sF,aAAa/gE,KAAKmuE,GAAW58D,yBAItC,MAAMyjF,EAAS9gH,KAAK2+G,sBACd5I,EAAU,4BAA2B+K,IAE3CvoF,GAAqBE,iBAAiB,IAAI3yB,MAAMiwG,IAChD3vG,GAAO5C,MAAMuyG,EAAQvyG,GAGrB,MAAM+7G,EAAiBv/G,KAAKs/G,oBACtByB,EAAWD,EAAS,IAKrBN,GACDxgH,KAAK6sF,aAAa/gE,KACdmuE,GAAW17D,mBACXghF,EACAwB,GAIR/gH,KAAK0+G,gBAAe,GACpBjiH,OAAO6H,YACH,IAAMtE,KAAKqgH,0BAA0Bl8C,KAAKlwD,IAC1C6sG,IAYRvC,GAAUhgH,UAAU+hH,gCAAkC,SAC9C9pG,EACAvC,GAQJ,GANAjU,KAAKmgH,mBAAmB3pG,GAGxBxW,KAAK2+G,qBAAoB,GAG0B,SAA/C1N,EAAEz6F,GAAQlH,KAAK,cAAco1C,KAAK,SAElC1kD,KAAK0+G,gBAAe,GAGpBzqG,QACG,CACH,MAAM6sG,EAAS9gH,KAAK0+G,iBAEpBt4G,GAAO+L,KAAM,4BAA2B2uG,KACxCrkH,OAAO6H,YACH,IAAMtE,KAAKqgH,0BAA0Bl8C,KAAKlwD,IAC1C6sG,KAIZvC,GAAUhgH,UAAU6yD,aAAe,WAC/B,OAAO,IAAI5mC,SAAQ,CAACC,EAASrU,KACzBpW,KAAK4zD,WAAWtF,OACZtuD,KAAKy/G,sBACLjpG,IACIxW,KAAKigH,eAAezpG,GACpBiU,OAEJu2F,GAAW5qG,EAAO,CACd5S,MAAOytG,EAAE+P,GAAS1xG,KAAK,mBAClB2xG,KAAK,WACVliH,QAASkyG,EAAE+P,GAAS1xG,KAAK,iBACpBtL,eAMrBu6G,GAAUhgH,UAAU2iH,YAAc,SAASC,EAAa1xC,GACpDzvE,KAAKohH,cAAyB,EAAOD,EAAa1xC,IAUtD8uC,GAAUhgH,UAAU6iH,aAAe,SAASC,EAAOC,EAAOC,GACtD,MAAM9uD,GAAKxS,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAKs/G,oBACtB9/G,KAAM,QACJsgD,EAAQ,CACV2H,MAAO,kCACPsyC,KAAM/5F,KAAK03B,SACX,cAAe8mF,GAASR,WAE5B,IAAI50G,EAAM,WAeV,SAAS29E,EAAYgvB,EAAQ3hG,GACzBmkB,GAAqBE,iBAAiB,IAAI3yB,MAAMiwG,IAChD3vG,GAAO5C,MAAMuyG,EAAQ3hG,GACrBmtG,EAAUntG,GAhBVitG,IACAvhE,EAAMuhE,OAAQ,EACdj4G,EAAO,SAAQA,KAEnBqpD,EAAGrxD,EAAE,YAAa0+C,GAclB9/C,KAAK4zD,WAAWtF,OACZmE,GACAj8C,IAEI,IAAIgS,EAAMyoF,EAAEz6F,GAAQlH,KAAK,aAAao1C,KAAK,OAE3Cl8B,EAAMg5F,mBAAmBh5F,GACrBA,GACApiB,GAAO+L,KAAM,OAAM/I,MAAQof,KAC3B84F,EAAM94F,IAENu+D,EAAa,iBAAgB39E,mBAAsBoN,KAG3DuwE,EAAY/jF,UAAKmJ,EAAY,OAAM/C,aAI3Cm1G,GAAUhgH,UAAUkjH,iBAAmB,SAASN,EAAa1xC,GACzDzvE,KAAKohH,cAAyB,EAAMD,EAAa1xC,IAGrD8uC,GAAUhgH,UAAUmjH,OAAS,SAASztG,GAClC,MAAMw+C,GAAKxS,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAKs/G,oBACtB9/G,KAAM,SACJ,UAAE27C,GAAcqjE,GAEjBrjE,GAKLsX,EAAGrxD,EAAE,SAAU,CACXqmD,MAAO,kCACP,aAActM,IAElBn7C,KAAK4zD,WAAWtF,OACZmE,GACAj8C,IAEI,IAAImrG,EAAY1Q,EAAEz6F,GAAQlH,KAAK,UAAUo1C,KAAK,cAE1Ci9D,IACAA,EAAYH,mBAAmBG,IAEnCv7G,GAAO+L,KAAM,oBAAmBwvG,IAAanrG,GAC7CgoG,GAASrjE,eAAYhvC,EACrB8H,EAAS0tG,MAEbn+G,IACI,MAAMuyG,EAAS,eAEfx9E,GAAqBE,iBAAiB,IAAI3yB,MAAMiwG,IAChD3vG,GAAO5C,MAAMuyG,EAAQvyG,OAzBzByQ,KC3fR,MAAM7N,IAASyB,EAAAA,EAAAA,uCAEFsC,GAAS,CAClBy3G,YAAYp9D,EAAYq9D,GACpB,IAAK,MAAMz6D,KAASjpD,MAAMi+C,KAAKoI,EAAWutD,UAAW,CACjD,MAAM/0G,EAAO,CACTukD,WAAY,GACZwwD,SAAU,GACVx4E,QAAS6tB,EAAM7tB,SAGnB,IAAK,MAAMmrB,KAAQvmD,MAAMi+C,KAAKgL,EAAM7F,YAChCvkD,EAAKukD,WAAWmD,EAAKx8C,MAAQw8C,EAAKj7C,MAEtC,MAAMzF,EAAO+7C,GAAAA,QAAAA,QAAgBqH,GAEzBpjD,IAIAhH,EAAKyM,MAAQs2C,GAAAA,QAAAA,YAAoB/7C,IAErC69G,EAAM39G,KAAKlH,GACXgD,KAAK4hH,YAAYx6D,EAAOpqD,EAAK+0G,YAGrC+P,YAAYD,EAAOE,GACf,IAAK,IAAIziH,EAAI,EAAGA,EAAIuiH,EAAMtiH,OAAQD,IAAK,CACnC,MAAMtC,EAAO6kH,EAAMviH,GAEftC,IACA+kH,EAAO3gH,EAAEpE,EAAKu8B,QAASv8B,EAAKukD,YACxBvkD,EAAKyM,OACLs4G,EAAOp7G,EAAE3J,EAAKyM,OAEdzM,EAAK+0G,UACL/xG,KAAK8hH,YAAY9kH,EAAK+0G,SAAUgQ,GAEpCA,EAAOp6D,SAchB,SAASq6D,GAA2BxyD,EAAMjK,GAC7C,MAAMurD,EAAM,GAEZ,IAAK,IAAIxxG,EAAI,EAAGA,EAAIkwD,EAAKjwD,OAAQD,IACzBkwD,EAAKlwD,GAAGi6B,UAAYgsB,GACpBurD,EAAI5sG,KAAKsrD,EAAKlwD,IAItB,OAAOwxG,EAWX,MAAMmR,GAAuB,CAAE,QAAS,QAAS,UAKlC,MAAMC,WAAiBva,GAiBlC/oG,YAAYg1D,EAAYtN,EAAK3O,EAAUwqE,EAAM9/G,GACzCo9E,QACAz/E,KAAKs1F,KAAO6sB,EACZniH,KAAK4zD,WAAaA,EAClB5zD,KAAK69F,QAAU99C,GAAAA,QAAAA,kBAA0BuG,GACzCtmD,KAAKoiH,UAAY97D,EACjBtmD,KAAK23C,SAAWA,EAChB33C,KAAKqiH,oBAAqB,EAC1Bj8G,GAAO+L,KAAM,iBAAgBnS,KAAKoiH,aAClCpiH,KAAK88G,QAAU,GACf98G,KAAKsiH,QAAU,GACftiH,KAAKuiH,aAAe,GACpBviH,KAAKwiH,qBAAuB,GAC5BxiH,KAAKo8G,QAAS,EACdp8G,KAAKyiH,mBAAoB,EACzBziH,KAAKu2C,KAAO,KACZv2C,KAAK0iH,YAAc,KACnB1iH,KAAK2iH,mBAAoB,EACzB3iH,KAAKqC,QAAUA,GAAW,GAC1BrC,KAAK4iH,UACC,IAAIrE,GAAUv+G,KAAK69F,QAAS79F,KAAKs1F,KAAMt1F,KAAK6sF,aAAc,CACxDj5B,WAAY5zD,KAAKs1F,KAAKjzF,QACtBqwB,WAAY1yB,KAAKqC,gBAEe,IAA7BrC,KAAKqC,QAAQq6G,aAA+B18G,KAAKqC,QAAQq6G,eAChE18G,KAAK6iH,MAAQ,IAAIrH,GAAMx7G,OAE3BA,KAAK8iH,aAAe,IAAI7J,GAAaj5G,MACrCA,KAAK+iH,cAAgB,IAAIzI,GAAct6G,MACvCA,KAAKgjH,gBAAgB3gH,GACrBrC,KAAKijH,cAAgB,GACrBjjH,KAAKkjH,YAAc,KACnBljH,KAAKmjH,SAAW,KAChBnjH,KAAKk7F,gBAAkB,GACvBl7F,KAAKojH,4BAA8B,KAEnCpjH,KAAKqjH,QAAS,EACdrjH,KAAKsjH,oBAAsBC,GAQ/BP,kBAA8B,IAAd3gH,EAAc,uDAAJ,GACtBrC,KAAKsiH,QAAQxmD,GAAK97D,KAAKoiH,UACvBpiH,KAAKsiH,QAAQkB,IAAM,iCACnBxjH,KAAKsiH,QAAQT,MAAQ,GAEjBx/G,EAAQohH,SACRzjH,KAAKsiH,QAAQT,MAAM39G,KAAK,CACpB,QAAW,WACX,MAAS7B,EAAQohH,UAIrBphH,EAAQqhH,gBAAkBrhH,EAAQqhH,eAAeC,YACjD3jH,KAAKsiH,QAAQT,MAAM39G,KAAK,CACpB,QAAW,SACX,WAAc,CACV8C,GAAI3E,EAAQqhH,eAAeC,WAC3Bl8D,MAAO,iCAKnBznD,KAAK4jH,mBAAqB98G,KAAK8oB,MASnC5hB,KAAK2pC,EAAU0qE,GAIX,OAHAriH,KAAK23C,SAAWA,EAChB33C,KAAKqiH,mBAAqBA,EAEnB,IAAI73F,SAAQC,IACfzqB,KAAKqC,QAAQo6G,cACNr2G,GAAO+L,KAAM,iCAAgCnS,KAAK69F,YAGnD79F,KAAKqC,QAAQo6G,aACTjyF,QAAQC,UACRzqB,KAAK4iH,UAAUvC,2BAEjBl8C,MAAK,KACTnkE,KAAK6tD,cAAa,GAClB7tD,KAAKwiH,qBAAqBt+G,KACtBlE,KAAK4zD,WAAW5mC,iBACZspF,GAAeC,OAAOC,oBACtBx2G,KAAK6jH,oBAAoB7gH,KAAKhD,QAEtCyqB,UASZojC,aAAai2D,GACT,MAAMhoD,EAAK97D,KAAKsiH,QAAQxmD,GAExB,IAAK97D,KAAK4zD,aAAe5zD,KAAK4zD,WAAWhJ,YAAckR,IAAQ97D,KAAKo8G,SAAW0H,EAE3E,OAGJ,MAAMt0D,GAAOtP,EAAAA,GAAAA,OAAM,CAAE4b,GAAAA,IAOjBgoD,IACI9jH,KAAKqiH,oBACL7yD,EAAKpuD,EAAE,eAAeumD,KAG1B6H,EAAKpuD,EAAE,IAAK,CAAEqmD,MAAOznD,KAAKsiH,QAAQkB,MAE9BxjH,KAAK23C,UACL6X,EAAKpuD,EAAE,YAAYuF,EAAE3G,KAAK23C,UAAUgQ,KAEpC3nD,KAAKqC,QAAQ0hH,WACbv0D,EAAKpuD,EAAE,aAAauF,EAAE3G,KAAKqC,QAAQ0hH,WAAWp8D,KAGlD6H,EAAK7H,MAGTx9C,GAAO23G,YAAY9hH,KAAKsiH,QAAQT,MAAOryD,GAGvCxvD,KAAKgkH,iBAAmBl9G,KAAK8oB,MAE7B5vB,KAAK4zD,WAAW3+B,KAAKu6B,GACjBs0D,GAKA9jH,KAAK4zD,WAAWrvD,QAQxB0/G,UACI79G,GAAOD,IAAI,WAAYnG,KAAKoiH,WAC5B,MAAM5yD,GAAOtP,EAAAA,GAAAA,OAAM,CAAE4b,GAAI97D,KAAKoiH,UAC1B5iH,KAAM,gBAEVQ,KAAKsiH,QAAQ/iH,OAAS,GAerBS,KAAK4zD,WAAW8jD,kBAAoB13G,KAAK4zD,WAAWrvD,QACrDvE,KAAK4zD,WAAW3+B,KAAKu6B,GACrBxvD,KAAK4zD,WAAWrvD,QAMpB2/G,gBAGI,MAAMC,GACAlkE,EAAAA,GAAAA,KAAI,CACFzgD,KAAM,MACNs8D,GAAI97D,KAAK69F,UAERz8F,EAAE,QAAS,CAAEqmD,MAAO1H,GAAAA,QAAAA,GAAAA,aAE7B//C,KAAK4zD,WAAWtF,OAAO61D,GAAS3tG,IAC5B,MAAM6sG,EAGM,IAFNpS,EAAEz6F,GAAQlH,KAAK,+CACZ/P,OAGL8jH,IAAWrjH,KAAKqjH,SAChBrjH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,iBAA6BopB,GACpDrjH,KAAKqjH,OAASA,GAGlB,MAAMe,EACAnT,EAAEz6F,GAAQlH,KAAK,qEAEjB80G,EAAe7kH,OACfS,KAAKqkH,aAAaD,EAAepgH,QAEjCoC,GAAO6lB,KAAK,8BAGhB,MAAMq4F,EAAiF,IAAnErT,EAAEz6F,GAAQlH,KAAK,yCAAyC/P,OAEtEglH,EACAtT,EAAEz6F,GAAQlH,KAAK,qEAEjBtP,KAAK6iH,OACL7iH,KAAK6iH,MAAM1G,gBAAgBoI,GAAkBA,EAAehlH,OAASglH,EAAevgH,YAASmI,GAGjG,MAAMq4G,EACAvT,EAAEz6F,GAAQlH,KAAK,sEACf4rG,EAAiBt5B,QAAQ4iC,MAAAA,OAAD,EAACA,EAAiBxgH,QAEhDhE,KAAK+iH,cAAc9H,mBAAmBC,GAEtC,MAAMuJ,EACAxT,EAAEz6F,GAAQlH,KAAK,8EAEjBm1G,MAAAA,GAAAA,EAAuBllH,QACvBS,KAAK+iH,cAAc3H,gBAAgBqJ,EAAsBzgH,QAGzDsgH,IAAgBtkH,KAAKi8G,qBACrBj8G,KAAKi8G,mBAAqBqI,EAC1BtkH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,yBAAqCqqB,OAGjE9gH,IACC+0B,KAAAA,iBAAsC/0B,GACtC4C,GAAO5C,MAAM,4BAA6BA,MAUlD6gH,aAAaK,GACL1kH,KAAK0kH,YAAcA,IACf1kH,KAAK0kH,WACLt+G,GAAO6lB,KAAM,2BAA0BjsB,KAAK0kH,gBAAgBA,KAEhE1kH,KAAK0kH,UAAYA,EACjB1kH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,eAA2ByqB,IAO1DC,yBAGI,GAAI3kH,KAAKqC,QAAQm6G,iBACb,OAGJ,MAAMoI,GAAU3kE,EAAAA,GAAAA,KAAI,CAAEzgD,KAAM,MACxBs8D,GAAI97D,KAAK69F,UACRz8F,EAAE,QAAS,CAAEqmD,MAAO,yCACpBrmD,EAAE,IAAK,CAAEqmD,MAAO,gBACbjoD,KAAM,WAEdQ,KAAK4zD,WAAWtF,OAAOs2D,GAASC,IAC5B,IAAK5T,EAAE4T,GAAMv1G,KACL,qEACwC/P,OAAQ,CACpD,MAAMw2G,EAAS,oCAKf,OAHAx9E,KAAAA,iBAAsC,IAAIzyB,MAAMiwG,SAChD3vG,GAAO5C,MAAMuyG,GAKjB,MAAM+O,GAAa7kE,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK69F,QAC9Br+F,KAAM,QACL4B,EAAE,QAAS,CAAEqmD,MAAO,yCAEzBq9D,EAAW1jH,EAAE,IAAK,CAAEqmD,MAAO,gBACvBjoD,KAAM,WAEVslH,EAAW1jH,EAAE,QAAS,CAAE,IAAO,cAC1BA,EAAE,SACFuF,EAAE,6CAA6CghD,KAAKA,KAEzDm9D,EAAW1jH,EAAE,QAAS,CAAE,IAAO,yBAC1BA,EAAE,SAASuF,EAAE,UAAUghD,KAAKA,KAEjC3nD,KAAK4zD,WAAWtF,OAAOw2D,MAExBthH,IACC+0B,KAAAA,iBAAsC/0B,GACtC4C,GAAO5C,MAAM,0CAA2CA,MAShEqgH,oBAAoB/sF,GAEZA,IAAWw/E,GAAe10D,OAAOK,WACjCjiD,KAAK6tD,eAQbk3D,WAAWv1D,GACP,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzBs/D,EAAS,GACTC,EAAWz1D,EAAK5nC,qBAAqB,UAAU,GAEjDq9F,IACAD,EAAOluF,OAASmuF,EAAS5uD,aAAe,IAE5C,IAAI6uD,GAAkB,EAClBC,GAAmB,EACvB,MAAMC,EACA51D,EAAKyB,uBACH,sCAAuC,KAAK,GAC9Co0D,EACAD,GAAYA,EAASx9F,qBAAqB,QAAQ,GAExDo9F,EAAOM,qBACD91D,EAAK5nC,qBAAqB,eAAeroB,OAE/CylH,EAAOO,YACDF,GAAeA,EAAY3/D,aAAa,eAC9Cs/D,EAAOzuE,KAAO8uE,GAAeA,EAAY3/D,aAAa,QAGtD,MAAMY,EAAM++D,GAAeA,EAAY3/D,aAAa,OAEpDs/D,EAAO1+D,IAAMA,EACb0+D,EAAOQ,QACDl/D,GAA+D,IAAxDA,EAAInhD,QAAS,GAAEnF,KAAK4iH,UAAUvD,sBAC3C2F,EAAOpI,eACDt2D,GAAOA,EAAInhD,QAAQ,KAAO,GACrBnF,KAAKqC,QAAQojH,eACRn/D,EAAI15C,UAAU05C,EAAInhD,QAAQ,KAAO,EAAGmhD,EAAInhD,QAAQ,MAEhEnF,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,kBAA8B,CACjDyrB,iBAAkBV,EAAOpI,eACzB+I,SAAUn2D,IAGd,MAAMo2D,EAAMp2D,EAAK4G,cAAc,KAE3BwvD,GACAA,EAAIC,SAGR,MAAMhE,EAAQ,GAEd13G,GAAOy3G,YAAYpyD,EAAMqyD,GACzB7hH,KAAKijH,cAAc7mE,GAAQylE,EAI3B,MAAMiE,EAA6B9oH,IAC/B,MAAMwnG,EAAW,GACXuhB,EAAW/oH,EAAK+0G,SAASziG,MAAKlO,GAAmB,SAAdA,EAAEm4B,UAE3C,GAAIwsF,EAAU,CACVvhB,EAAS77C,KAAO,GAChB,IAAK,MAAMlf,IAAO,CAAE,KAAM,OAAQ,UAAY,CAC1C,MAAM2d,EACA2+D,EAAShU,SAASziG,MAAKlO,GAAKA,EAAEm4B,UAAYkQ,IAE5C2d,IACAo9C,EAAS77C,KAAKlf,GAAO2d,EAAM39C,QAIvC,MAAMu8G,EAAYhpH,EAAK+0G,SAASziG,MAAKlO,GAAmB,UAAdA,EAAEm4B,UAM5C,OAJIysF,IACAxhB,EAASj1F,MAAQy2G,EAAUv8G,OAGxB+6F,GAGX,IAAK,IAAIllG,EAAI,EAAGA,EAAIuiH,EAAMtiH,OAAQD,IAAK,CACnC,MAAMtC,EAAO6kH,EAAMviH,GAEnB,OAAQtC,EAAKu8B,SACb,IAAK,MAAO,CACR,MAAM,WAAEgoB,GAAevkD,EAEvB,IAAKukD,EACD,MAEJ,MAAM,KAAE/hD,GAAS+hD,EAEjByjE,EAAOnI,QAAUr9G,EACjB,MAEJ,IAAK,OACDwlH,EAAOrI,KAAO3/G,EAAKyM,MACnB,MACJ,IAAK,SACDu7G,EAAOh+G,GAAKhK,EAAKyM,MACjB,MACJ,IAAK,WACDu7G,EAAOzgB,QAAUvnG,EAAKyM,MACtB,MACJ,IAAK,WACDu7G,EAAOxgB,SAAWshB,EAA2B9oH,GAC7C,MACJ,IAAK,WACDgoH,EAAOj7D,SAAW/pD,KAAKimH,iBAAiBjpH,GACxC,MAEJ,IAAK,OAAQ,CACT,MAAM,WAAEukD,GAAevkD,EAEvB,IAAKukD,EACD,MAEJ,MAAM,KAAEr5C,GAASq5C,EAEJ,YAATr5C,IACA88G,EAAOt3G,QAAU6zC,EAAW93C,OAEhC,QAKR,IAAKzJ,KAAKo8G,SAAWp8G,KAAKyiH,kBAAmB,CACzC,MAAM7yF,EAAM5vB,KAAKk7F,gBAAgB,oBAAsBz+F,OAAOqhG,YAAYluE,MAE1ExpB,GAAOD,IAAI,6BAA8BypB,GAEzC5vB,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,sBACvBj6F,KAAKyiH,mBAAoB,EAG7B,GAAIrmE,IAASp8C,KAAKoiH,UAAW,CACzB,MAAMjc,EACuB,UAAvB6e,EAAOO,YAA0BP,EAAOzuE,KAAO,OAQrD,GANIv2C,KAAKu2C,OAAS4vD,IACdnmG,KAAKu2C,KAAO4vD,EACZnmG,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,mBACAj6F,KAAKu2C,QAERv2C,KAAKo8G,OAAQ,CACdp8G,KAAKo8G,QAAS,EACd,MAAMxsF,EAAM5vB,KAAKk7F,gBAAgB,cAC3Bz+F,OAAOqhG,YAAYluE,MAEzBxpB,GAAOD,IAAI,uBAAwBypB,GAG/B5vB,KAAK23C,WACL33C,KAAKqjH,QAAS,GAMdrjH,KAAK4jH,oBAAsB5jH,KAAKgkH,kBAChChkH,KAAK6tD,eAGT7tD,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,aAItBj6F,KAAKqC,QAAQm6G,kBAAoBx8G,KAAKkkH,sBAExC,QAAY/3G,IAARm6C,EACPlgD,GAAO+L,KAAK,2CACT,QAA2BhG,IAAvBnM,KAAK88G,QAAQ1gE,GAEpBp8C,KAAK88G,QAAQ1gE,GAAQ4oE,EACrB5+G,GAAOD,IAAI,UAAWi2C,EAAM4oE,GAC5BE,OAAoC/4G,IAAlB64G,EAAOluF,OACzBquF,OAAsCh5G,IAAnB64G,EAAOt3G,QACtBs3G,EAAOQ,QACPxlH,KAAKkmH,WAAW9pE,EAAM4oE,EAAOj7D,WAK7B/pD,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,kBACA79C,EACA4oE,EAAOrI,KACPqI,EAAOzuE,KACPyuE,EAAOpI,eACPoI,EAAOzgB,QACPygB,EAAOluF,OACPkuF,EAAOxgB,SACPwgB,EAAOnI,QACPmI,EAAO1+D,IACP0+D,EAAOj7D,SACPi7D,EAAOM,sBAIXJ,GAAkB,OAEnB,CAGH,MAAMiB,EAAenmH,KAAK88G,QAAQ1gE,GAE9B+pE,EAAa5vE,OAASyuE,EAAOzuE,OAC7B4vE,EAAa5vE,KAAOyuE,EAAOzuE,KAC3Bv2C,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,iBAA6B79C,EAAM4oE,EAAOzuE,OAI9C4vE,EAAaZ,cAAgBP,EAAOO,cACpCY,EAAaZ,YAAcP,EAAOO,aAIlCY,EAAatJ,UAAYmI,EAAOnI,UAChCsJ,EAAatJ,QAAUmI,EAAOnI,QAC9B78G,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,4BACA79C,EACA4oE,EAAOnI,UAGXmI,EAAOQ,UAePW,EAAaX,SAAU,EACvBxlH,KAAKkmH,WAAW9pE,EAAM4oE,EAAOj7D,WAI7Bi7D,EAAO12F,cACP63F,EAAa73F,YAAc02F,EAAO12F,aAIlC63F,EAAarvF,SAAWkuF,EAAOluF,SAC/BouF,GAAkB,EAClBiB,EAAarvF,OAASkuF,EAAOluF,QAG7BqvF,EAAaz4G,UAAYs3G,EAAOt3G,UAChCy3G,GAAmB,EACnBgB,EAAaz4G,QAAUs3G,EAAOt3G,SAG7B0gG,IAAAA,CAAQ+X,EAAap8D,SAAUi7D,EAAOj7D,YACvCo8D,EAAap8D,SAAWi7D,EAAOj7D,SAC/B/pD,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,6BAAyC79C,EAAM4oE,EAAOj7D,WAMrF,IAAK,IAAIzqD,EAAI,EAAGA,EAAIuiH,EAAMtiH,OAAQD,IAAK,CACnC,MAAMtC,EAAO6kH,EAAMviH,GAEnB,OAAQtC,EAAKu8B,SACb,IAAK,OACD,IAAKyrF,EAAOQ,QAAS,CACjB,MAAMl3F,EACAtuB,KAAKs1F,KAAKjzF,QAAQ+jH,YACdrmE,GAAAA,QAAAA,mBAA2B3D,GAC3B4oE,EAAOrI,KAEjB38G,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,qBACA79C,EACA9tB,GAER,MACJ,IAAK,qBACG02F,EAAOQ,UAAYxlH,KAAK2iH,oBACxB3iH,KAAK2iH,mBAAoB,EACzB3iH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,cAE3B,MACJ,IAAK,wBACD,GAAI+qB,EAAOQ,QAAS,CAChB,MAAM9gC,EAAa,GAEnB,IAAK,IAAI34E,EAAI,EAAGA,EAAI/O,EAAK+0G,SAASxyG,OAAQwM,IAAK,CAC3C,MAAM,WAAEw1C,GAAevkD,EAAK+0G,SAAShmG,GAEjCw1C,GAAcA,EAAWr3C,MACzBw6E,EAAWnjC,EAAWr3C,KAAOq3C,EAAW93C,OAIhDzJ,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,8BAA0CvV,QAIjB,IAArC1kF,KAAKqmH,8BACZrmH,KAAKqmH,4BAA0E,SAA5C3hC,EAAW,6BAC9Ct+E,GAAO+L,KAAM,yCAAwCnS,KAAKsmH,iCAGlE,MACJ,IAAK,uBAAwB,CACzB,MAAM,WAAE/kE,GAAevkD,EAEvB,IAAKukD,EACD,MAGJ,MAAM,OAAEzqB,GAAWyqB,EAEfzqB,GAAUA,IAAW92B,KAAKsjH,sBAC1BtjH,KAAKsjH,oBAAsBxsF,EAC3B92B,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,6BACAnjE,IAKR,MAEJ,IAAK,eAAgB,CACjB,MAAMyvF,EAAMvpH,EAAKukD,WAEjB,IAAKglE,EACD,MAEJvmH,KAAKkjH,YAAcqD,EAAIC,OAAS,KAChCxmH,KAAKmjH,SAAWoD,EAAIE,KAAO,KAC3BzmH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,sBACvB,MAEJ,QACIj6F,KAAK0mH,YAAY1pH,EAAMo/C,IAK3B8oE,GACAllH,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,gBACA79C,EACA4oE,EAAOluF,QAGXquF,GACA/+G,GAAO+L,KAAM,wBAAuBm0C,MAAQ0+D,EAAOt3G,WAU3Du4G,iBAAiBjpH,GACb,MAAM+sD,EAAW,IAAIxiB,IAErB,IAAK,IAAIx7B,EAAI,EAAGA,EAAI/O,EAAK+0G,SAASxyG,OAAQwM,IAAK,CAC3C,MAAM,WAAEw1C,GAAevkD,EAAK+0G,SAAShmG,GAEjCw1C,GAAcA,EAAWolE,KACzB58D,EAASvkB,IAAI+b,EAAWolE,KAIhC,OAAO58D,EAQXm8D,WAAW9pE,EAAM2N,GACb/pD,KAAK0iH,YAActmE,EACnBp8C,KAAK4mH,cAAgB78D,EAOzB6xC,+BAA+B3jF,GAC3BjY,KAAKojH,4BAA8BnrG,EAOvCquG,6BACI,OAAOtmH,KAAKqmH,4BAQhBK,YAAY1pH,EAAMo/C,GAGd,IACI,IAAIyqE,EAAc7mH,KAAKuiH,aAAavlH,EAAKu8B,SAErCv8B,EAAKu8B,QAAQ29E,WAAW,wBACxB2P,EAAc,CAAE7mH,KAAKojH,8BAGrByD,GACAA,EAAYlkH,SAAQkoB,IAChBA,EAAQ7tB,EAAM+iD,GAAAA,QAAAA,mBAA2B3D,GAAOA,MAG1D,MAAO3zC,GACL8vB,KAAAA,iBAAsC9vB,GACtCrC,GAAO5C,MAAO,oBAAmBxG,EAAKu8B,gBAAiB9wB,IAS/D6lG,YAAYvvG,EAAS+nH,GACjB,MAAMpjH,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAK69F,QACxBr+F,KAAM,cAKU,SAAhBsnH,EACApjH,EAAItC,EAAE0lH,EAAa,GAAI/nH,GAEvB2E,EAAItC,EAAE0lH,EAAa,CAAEr/D,MAAO,4BAA8B1oD,GAG9DiB,KAAK4zD,WAAW3+B,KAAKvxB,GACrB1D,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,qBAAiCl7F,GAU5DgoH,mBAAmB//G,EAAIjI,EAAS+nH,GAC5B,MAAMpjH,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAK,GAAE97D,KAAK69F,WAAW72F,IACtCxH,KAAM,SAKU,SAAhBsnH,EACApjH,EAAItC,EAAE0lH,EAAa/nH,GAAS4oD,KAE5BjkD,EAAItC,EAAE0lH,EAAa,CAAEr/D,MAAO,4BAA8B1oD,GACrD4oD,KAGT3nD,KAAK4zD,WAAW3+B,KAAKvxB,GACrB1D,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,6BAAyCl7F,GAQjDioH,WAAWtM,GACP,MAAMh3G,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAK69F,QACxBr+F,KAAM,cAEVkE,EAAItC,EAAE,UAAWs5G,GACjB16G,KAAK4zD,WAAW3+B,KAAKvxB,GASzBujH,kBAAkB3gE,EAAK4gE,UACZlnH,KAAKijH,cAAc38D,GAEtB4gE,IAIJlnH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,gBAA4B3zC,GAEnDtmD,KAAK4iH,UAAU3D,gBAAgB34D,IAQnC6gE,sBAAsB33D,EAAMpT,GAExB,GAAI60D,EAAEzhD,GAAMlgD,KAAK,8CAA8C/P,OAC3D,OAAO,EAIX,MAAM6nH,EAAgBnW,EAAEzhD,GAAMlgD,KAAK,2DAEnC,GAAI83G,EAAc7nH,OAAQ,CACtB,IAAI+4B,EACJ,MAAM+uF,EACApW,EAAEzhD,GAAMlgD,KACN,kEAUR,OAPI+3G,EAAa9nH,SACb+4B,EAAS+uF,EAAarjH,QAG1BhE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,cAA0B3hE,EAAQ8uF,EAAc1iE,KAAK,QAC5E1kD,KAAK4zD,WAAW29C,KAAK0S,QAAQjkH,KAAK69F,UAE3B,EAIX,MAAMqf,EACAjM,EAAEzhD,GACClgD,KACG,sEAEH/P,OACH+nH,EACArW,EAAEzhD,GACClgD,KACG,sEAEH/P,OACHgoH,EAAcjpH,OAAOmE,KAAKzC,KAAK88G,SAC/BwI,EAAuBrU,EAAEzhD,GAAMlgD,KAAK,eAAe/P,OAEzD,GAAI+nH,EAAQ,CACR,MAAME,EACAvW,EAAEzhD,GACHlgD,KAAK,8DACV,IAAIm4G,EAMAnvF,EAJAkvF,EAAYjoH,SACZkoH,EAAYD,EAAY9iE,KAAK,SAIjC,MAAM2iE,EACApW,EAAEzhD,GAAMlgD,KACV,+DAGA+3G,EAAa9nH,SACb+4B,EAAS+uF,EAAarjH,QAM1BhE,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,OACAijB,EACAuK,EACA1nE,GAAAA,QAAAA,mBAA2B3D,GAC3B9jB,EACAgtF,GAGJpI,GAIAqK,EAAY5kH,SAAQ2jD,IAChB,MAAM0+D,EAAShlH,KAAK88G,QAAQx2D,UAErBtmD,KAAK88G,QAAQx2D,GACpBtmD,KAAKinH,kBAAkB3gE,EAAK0+D,EAAOQ,YAEvCxlH,KAAK4zD,WAAW29C,KAAK0S,QAAQjkH,KAAK69F,SAI7BypB,GACDtnH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,mBAGpBj6F,KAAK88G,QAAQ1gE,GACpBp8C,KAAKinH,kBAAkB7qE,GAAM,IASrCsrE,UAAUhkH,EAAK04C,GACX,MAAM58C,EAAOkE,EAAIgiD,aAAa,QAE9B,GAAa,UAATlmD,EAAkB,CAClB,MAAMohH,EAAW3P,EAAEvtG,GAAK4L,KAAK,eAAetL,OAI5C,OAFAhE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,oBAAgC2mB,IAEhD,EAGX,MAAM/jB,EAAMoU,EAAEvtG,GAAK4L,KAAK,SAAStL,OAC3B02G,EAAUzJ,EAAEvtG,GAAK4L,KAAK,YAE5B,GAAIorG,EAAQn7G,OAAQ,CAChB,MAAMooH,EAAcjN,EAAQ12G,QAExB2jH,GAA+B,KAAhBA,KACf3nH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,gBAA4B0tB,GACnDvhH,GAAOD,IAAK,yBAAwBwhH,MAK5C,IAAIC,EAAQ3W,EAAEvtG,GAAK4L,KAAK,UAAUo1C,KAAK,SAEvC,IAAKkjE,IAEDA,EAAQ3W,EAAEvtG,GAAK4L,KAAK,6BAA6Bo1C,KAAK,SAElDkjE,GAAO,CAEP,MAAMC,EACAD,EAAM3hH,MAAM,2CAElB2hH,EAAS,GAAEC,EAAU,MAAMA,EAAU,MAAMA,EAAU,MAI7D,GAAIzrE,IAASp8C,KAAK69F,QAAS,CACvB,IAAIiqB,EAEJ,GAAI7W,EAAEvtG,GAAK4L,KAAK,sEAAsE/P,OAClFS,KAAKkkH,qBACF,IAAK4D,EAAS7W,EAAEvtG,GAAK4L,KAAK,4DAClBw4G,EAAOvoH,OAAQ,CAC1B,MAAMwoH,EAAiB9W,EAAEvtG,GAAK4L,KAAK,4DACnC,IAAIqoC,EAEAowE,GAAkBA,EAAexoH,SACjCo4C,EAAWowE,EAAe/jH,QAG9BhE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,wBACnB79C,EAAM0rE,EAAOpjE,KAAK,QAASm4C,EAAKllD,IAI5C,MAAMqwE,EAAc/W,EAAEvtG,GAAK4L,KAAK,iBAAiBtL,OAEjD,GAAIgkH,EAAa,CACb,MAAMC,EAAajoH,KAAKs1F,KAAK4yB,sBAAsBF,GAKnD,GAAIC,QAAwB97G,IAAVy7G,EAId,YAHA5nH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,sBACnB79C,EAAM6rE,GAMdprB,IACa,SAATr9F,EACAQ,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,yBACf79C,EAAMygD,EAAK78F,KAAKoiH,UAAWwF,GACnB,cAATpoH,GACPQ,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,iBACf79C,EAAMygD,EAAK78F,KAAKoiH,UAAWwF,IAU/CO,gBAAgB34D,EAAMpT,GAClB,GAAI60D,EAAEzhD,GACGlgD,KACG,mFAGH/P,OACL6G,GAAOD,IAAI,uBAAwBi2C,GACnCp8C,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,wBACpB,GAAIgX,EAAEzhD,GACJlgD,KACG,kFAGH/P,OACYwgD,GAAAA,QAAAA,iBAAyByP,EAAK9J,aAAa,SAE3C1lD,KAAKs1F,KAAKjzF,QAAQm9G,MAAMqB,gBAKrC7gH,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,kBAGvB7zF,GAAO6lB,KAAK,eAAgBujC,GAC5BxvD,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,sCAEL,GAAIgX,EAAEzhD,GAAMlgD,KAAK,8BAA8B/P,OAClD6G,GAAO6lB,KAAK,oDACRujC,GACJxvD,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,2BACpB,GAAIgX,EAAEzhD,GACRlgD,KACG,0FAEkD/P,OAAQ,CAG9D,MAAM6oH,EAAgBnX,EAAEzhD,GAAMlgD,KAAK,cACnC,IAAIssG,EAEAwM,EAAc7oH,SACdq8G,EAAewM,EAAcpkH,QAGjChE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,gCAA4C2hB,QAEnEx1G,GAAO6lB,KAAK,eAAgBujC,GAC5BxvD,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,oBAS/BouB,eAAe/hE,EAAKi/D,GAChB,MAAM+C,GAAUroE,EAAAA,GAAAA,KAAI,CAChB6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QAET4B,EAAE,QAAS,CAAEqmD,MAAO,yCACpBrmD,EAAE,OAAQ,CACPmkH,YAAAA,EACA5I,KAAM58D,GAAAA,QAAAA,mBAA2BuG,KAEpCllD,EAAE,UAAUuF,EAAG,yCAAwC4+G,OACvD59D,KAAKA,KAAKA,KAEX3nD,KAAK4zD,WAAWtF,OACZg6D,GACA9xG,GAAUpQ,GAAOD,IAAI,4CAA6CmgD,EAAK,KAAMi/D,EAAa/uG,KAC1FhT,GAAS4C,GAAOD,IAAI,yCAA0C3C,KAQtE65G,KAAK/2D,GAAuC,IAAlChuB,EAAkC,uDAAzB,wBACf,MAAMiwF,GAAStoE,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK69F,QAC1Br+F,KAAM,QACL4B,EAAE,QAAS,CAAEqmD,MAAO,yCACpBrmD,EAAE,OAAQ,CAAEu7G,KAAM58D,GAAAA,QAAAA,mBAA2BuG,GAC1C/P,KAAM,SACTn1C,EAAE,UAAUuF,EAAE2xB,GAAQqvB,KAAKA,KAAKA,KAErC3nD,KAAK4zD,WAAWtF,OACZi6D,GACA/xG,GAAUpQ,GAAOD,IAAI,8BAA+BmgD,EAAK9vC,KACzDhT,GAAS4C,GAAOD,IAAI,2BAA4B3C,KAYxDglH,SAASt+G,EAAK2oD,EAAW0S,EAASkjD,GAE9BzoH,KAAK4zD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CACA6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QAEL4B,EAAE,QAAS,CAAEqmD,MAAO,0CACzBqpD,IACI,GAAIG,EAAEH,GACGxhG,KACG,0EAEH/P,OAAQ,CACb,MAAMmpH,GACAzoE,EAAAA,GAAAA,KAAI,CACF6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QAEL4B,EAAE,QAAS,CACRqmD,MAAO,yCAGnBihE,EAAWtnH,EAAE,IAAK,CACdqmD,MAAO,gBACPjoD,KAAM,WAEVkpH,EACKtnH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFuF,EAAE,6CACFghD,KACAA,KACL+gE,EACKtnH,EAAE,QAAS,CAAE,IAAO,8BACpBA,EAAE,SACFuF,EAAEuD,GACFy9C,KACAA,KACL+gE,EACKtnH,EAAE,QACE,CAAE,IAAO,yCACbA,EAAE,SACFuF,EAAU,OAARuD,GAA+B,IAAfA,EAAI3K,OAAe,IAAM,KAC3CooD,KACAA,KAGD3nD,KAAKi8G,oBACLyM,EACKtnH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFuF,EAAE,QACFghD,KACAA,KAKT+gE,EACKtnH,EAAE,QAAS,CAAE,IAAO,yBACpBA,EAAE,SACFuF,EAAE,UACFghD,KACAA,KAEL3nD,KAAK4zD,WAAWtF,OACZo6D,GACA,KAII1oH,KAAK23C,SAAWztC,EAChB2oD,MAEJ0S,QAEJkjD,MAGRljD,GAYRu2C,eAAe9c,EAASnsC,EAAW0S,GAC3By5B,GAAW1gG,OAAOiS,OAAOvQ,KAAK88G,SAASlxG,QAAO5F,IAAMA,EAAEw/G,UAASjmH,QAI/DjB,OAAOiS,OAAOvQ,KAAK88G,SAASn6G,SAAQqD,IAC5BA,EAAEsgD,MAAQ27D,GAAqB1rF,SAASvwB,EAAEu/G,cAC1CvlH,KAAKs1F,KAAK1hC,WAAWtF,QACjBrO,EAAAA,GAAAA,KAAI,CACA6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QACT4B,EAAE,QAAS,CACRqmD,MAAO,yCACVrmD,EAAE,OAAQ,CACP,YAAe,SACf,IAAO4E,EAAEsgD,MACVqB,KAAKA,SAKxB,MAAMruB,EAAgBisC,GAAoB,SAE1CvlE,KAAKs1F,KAAK1hC,WAAWtF,QACjBrO,EAAAA,GAAAA,KAAI,CACA6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QACP4B,EAAE,QAAS,CAAEqmD,MAAO,0CACvBqpD,IACI,GAAIG,EAAEH,GAAKxhG,KAAK,2EAA2E/P,OAAQ,CAC/F,MAAMopH,GACA1oE,EAAAA,GAAAA,KAAI,CACF6b,GAAI97D,KAAK69F,QACTr+F,KAAM,QACP4B,EAAE,QAAS,CAAEqmD,MAAO,yCAE3BkhE,EAAavnH,EAAE,IAAK,CAChBqmD,MAAO,gBACPjoD,KAAM,WAEVmpH,EACKvnH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACFuF,EAAE,6CACFghD,KACAA,KACLghE,EACKvnH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACFuF,EAAEq4F,EAAU,OAAS,SACrBr3C,KACAA,KAGD3nD,KAAKqjH,QACLsF,EACKvnH,EAAE,QACC,CAAE,IAAO,yCACZA,EAAE,SACFuF,EAAE,KACFghD,KACAA,KAGT3nD,KAAKs1F,KAAK1hC,WAAWtF,OAAOq6D,EAAc91D,EAAWv5B,QAErDA,EAAc,IAAIxzB,MAAM,+CAGhCwzB,GAaRsvF,cAAc1+G,EAAKqG,GACf,OAAOvQ,KAAKgyG,uBAAuB9nG,EAAKqG,GAU5CyhG,uBAAuB9nG,EAAKqG,GACxBA,EAAOgpB,QAAUrvB,EAEjB,MAAM2+G,EAAgB7oH,KAAKsiH,QAAQT,MAAMj2G,QAAO5O,GAAQkN,IAAQlN,EAAKu8B,UAGrE,QAA6B,IAAzBsvF,EAActpH,QAAgB6uG,IAAAA,CAAQya,EAAc,GAAIt4G,KAI5DvQ,KAAK8xG,mBAAmB5nG,GACxBlK,KAAKsiH,QAAQT,MAAM39G,KAAKqM,GACxBvQ,KAAK4jH,mBAAqB98G,KAAK8oB,MAExB,IASXk5F,gBAAgB5+G,GACZ,OAAOlK,KAAKsiH,QAAQT,MAAMvyG,MAAKtS,GAAQkN,IAAQlN,EAAKu8B,UAOxDu4E,mBAAmB5nG,GACf,MAAM23G,EAAQ7hH,KAAKsiH,QAAQT,MAAMj2G,QAAO5O,GAAQkN,IAAQlN,EAAKu8B,UAE7Dv5B,KAAKsiH,QAAQT,MAAQA,EACrB7hH,KAAK4jH,mBAAqB98G,KAAK8oB,MAQnCotE,oBAAoB90F,EAAM2iB,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAI/kB,MAAM,+BAEpB,IAAI+gH,EAAc7mH,KAAKuiH,aAAar6G,GAE/B2+G,IACD7mH,KAAKuiH,aAAar6G,GAAQ2+G,EAAc,KAEN,IAAlCA,EAAY1hH,QAAQ0lB,GACpBg8F,EAAY3iH,KAAK2mB,GAEjBzkB,GAAO6lB,KACF,sDAAqD/jB,KASlE6gH,uBAAuB7gH,EAAM2iB,GACzB,MAAMg8F,EAAc7mH,KAAKuiH,aAAar6G,GAChC8gH,EAAanC,EAAcA,EAAY1hH,QAAQ0lB,IAAY,GAG7C,IAAhBm+F,EACAnC,EAAYvhH,OAAO0jH,EAAY,GAE/B5iH,GAAO6lB,KAAM,gBAAe/jB,wBAYpCs9G,QAAQyD,GACJ,MAAMjE,EAAShlH,KAAK88G,QAAQmM,GAE5B,OAAIjE,EACOA,EAAOQ,QAGX,KAMXnpB,cACI,MAAqB,cAAdr8F,KAAKu2C,KAOhB2yE,cAAcC,GACV,OAAInpH,KAAK88G,QAAQqM,GACNnpH,KAAK88G,QAAQqM,GAAS5yE,KAG1B,KAOX6yE,uBAAuBtgC,GACnB,MAAMugC,EAAoB,aAG1B,QAAIvgC,IAAS9oF,KAAK8oH,gBAAgBO,KAI3BrpH,KAAKgyG,uBACRqX,EACA,CACI5/G,MAAOq/E,EAAKtqF,aAQxB8qH,uBAAuBxgC,GACnB,MAAMygC,EAAoB,aAG1B,QAAIzgC,IAAS9oF,KAAK8oH,gBAAgBS,KAI3BvpH,KAAKgyG,uBACRuX,EACA,CACI9/G,MAAOq/E,EAAKtqF,aAexBgrH,qBAAqBtnB,EAAYpkB,GAE7B,MAAMtuB,EAAOxvD,KAAKijH,cAAe,GAAEjjH,KAAK69F,WAAWqE,KAEnD,IAAK1yC,EAED,OAAO,KAEX,MAAM32C,EAAO,CACT0/E,OAAO,EACPwF,eAAW5xF,GAEf,IAAIs9G,EAAY,KAEhB,GAAI3rC,IAAcyW,GACdk1B,EAAYzH,GAA2BxyD,EAAM,kBAC1C,IAAIsuB,IAAcyW,GAcrB,OAFAnuF,GAAO5C,MAAO,2BAA0Bs6E,KAEjC,KAd+B,CACtC2rC,EAAYzH,GAA2BxyD,EAAM,cAC7C,MAAMk6D,EAAgB1H,GAA2BxyD,EAAM,+BACjDm6D,EAAgB3H,GAA2BxyD,EAAM,aAEnDm6D,EAAcpqH,OAAS,IACvBsZ,EAAKklF,UAAY4rB,EAAc,GAAGlgH,OAElCigH,EAAcnqH,OAAS,IACvBsZ,EAAK+wG,UAAYF,EAAc,GAAGjgH,QAY1C,OAJIggH,EAAUlqH,OAAS,IACnBsZ,EAAK0/E,MAA+B,SAAvBkxB,EAAU,GAAGhgH,OAGvBoP,EAQXgxG,gBAAgBC,GACZ,OAAO9pH,KAAKijH,cAAe,GAAEjjH,KAAK69F,WAAWisB,KAMjDC,wBACI,QAAI/pH,KAAK4iH,WACE5iH,KAAK4iH,UAAU5D,sBAU9BgL,KAAKj/B,GACD,OAAO/qF,KAAK4zD,WAAWq2D,KAAKD,KAAKj/B,EAAQ,aACrChrC,GAAAA,QAAAA,kBAA0B//C,KAAKoiH,WAAYpiH,KAAK23C,SAChD33C,KAAK0iH,aAMbwH,SACI,OAAOlqH,KAAK4zD,WAAWq2D,KAAKC,SAOhCC,WACI,OAAOnqH,KAAK6iH,MAMhBuH,kBACI,OAAOpqH,KAAK8iH,aAMhB/F,mBACI,OAAO/8G,KAAK+iH,cAMhBsH,iBACI,OAAOrqH,KAAKkjH,YAMhBoH,cACI,OAAOtqH,KAAKmjH,SAQhBoH,eACI,OAAOvqH,KAAK0kH,UAShB8F,gBAAgBlkE,EAAKwiC,EAAMhL,GACvB13E,GAAO+L,KAAK,WAAY22E,EAAMxiC,GAC9B,MAAMmkE,GAAYxqE,EAAAA,GAAAA,KACd,CAAE6b,GAAI97D,KAAK0iH,YACPljH,KAAM,QACT4B,EAAE,OAAQ,CACPqmD,MAAQ,4BAA2Bq2B,IACnCx3B,IAAAA,IAEH3/C,EAAEmiF,EAAKtqF,YACPmpD,KAEL3nD,KAAK4zD,WAAWtF,OACZm8D,GACAj0G,GAAUpQ,GAAOD,IAAI,WAAYqQ,KACjChT,GAAS4C,GAAOD,IAAI,iBAAkB3C,KAO9CknH,OAAOj4D,GAGH,GAFaA,EAAG/M,aAAa,UAEhB1lD,KAAK0iH,YAGd,YAFAt8G,GAAO6lB,KAAK,oCAIhB,MAAM68D,EAAOmoB,EAAEx+C,GAAInjD,KAAK,QAEpBw5E,EAAKvpF,QAA0B,SAAhBupF,EAAK9kF,OACpBhE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,qBAAiCnR,EAAKpkC,KAAK,UAKlEt+C,GAAO6lB,KAAK,sFASpB0+F,YAAYl4D,GAGR,GAFaA,EAAG/M,aAAa,UAEhB1lD,KAAK0iH,YAGd,YAFAt8G,GAAO6lB,KAAK,oCAIhB,MAAM68D,EAAOmoB,EAAEx+C,GAAInjD,KAAK,QAEpBw5E,EAAKvpF,QAA0B,SAAhBupF,EAAK9kF,OACpBhE,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,qBAAiCnR,EAAKpkC,KAAK,UAKlEt+C,GAAO6lB,KAAK,sFAQpBgxF,QACIj9G,KAAKwiH,qBAAqB7/G,SAAQkjH,GAAUA,MAC5C7lH,KAAKwiH,qBAAuB,GAE5BxiH,KAAKo8G,QAAS,EACdp8G,KAAKyiH,mBAAoB,EAS7BvG,QAAQ,aACJl8G,KAAK8iH,aAAaz+B,UAClBrkF,KAAK+iH,cAAc1+B,UAEnB,MAAMqnB,EAAW,GA0BjB,OAxBA,UAAA1rG,KAAK6iH,aAAL,eAAY7G,YAAatQ,EAASxnG,KAAKlE,KAAK6iH,MAAM3G,SAElDxQ,EAASxnG,KAAK,IAAIsmB,SAAQ,CAACC,EAASrU,KAChC,IAAI23C,GAAW,EAEf,MAAM68D,EAAY,WAAsB,IAArBC,EAAqB,wDACpC,EAAKh+B,aAAa30E,eAAe+hF,KAAAA,SAAqB2wB,GACtDvmH,aAAa0pD,GACT88D,GAEA,EAAKj3D,WAAW29C,KAAK0S,QAAQ,EAAKpmB,SAClCznF,EAAO,IAAItQ,MAAM,sEAEjB2kB,KAIRsjC,EAAUzpD,YAAW,IAAMsmH,GAAU,IAAO,KAE5C5qH,KAAKi9G,QACLj9G,KAAK6sF,aAAa9hE,GAAGkvE,KAAAA,SAAqB2wB,GAC1C5qH,KAAKikH,cAGFz5F,QAAQshF,WAAWJ,IC7yDlC,MAAMtlG,IAASyB,EAAAA,EAAAA,2CAKA,MAAMijH,WAA4BpW,GAK7C91G,YAAY02F,GACR7V,QACAz/E,KAAKs1F,KAAOA,EACZt1F,KAAKqxG,MAAQ,GAOjBhnF,KAAKupC,GACD6rB,MAAMp1D,KAAKupC,GAGX5zD,KAAK4zD,WAAWp7B,WAAWx4B,KAAK+kH,WAAW/hH,KAAKhD,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAK4zD,WAAWp7B,WAAWx4B,KAAKmnH,sBAAsBnkH,KAAKhD,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAK4zD,WAAWp7B,WAAWx4B,KAAKmoH,gBAAgBnlH,KAAKhD,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAK4zD,WAAWp7B,WAAWx4B,KAAK0nH,UAAU1kH,KAAKhD,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAK4zD,WAAWp7B,WAAWx4B,KAAK0qH,OAAO1nH,KAAKhD,MACxC,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAK4zD,WAAWp7B,WAAWx4B,KAAK2qH,YAAY3nH,KAAKhD,MAC7C,iCAAkC,KAAM,MAAO,KAAM,MAS7Du8G,WAAWj2D,EAAK3O,EAAUt1C,GACtB,MAAMm2F,EAAUz4C,GAAAA,QAAAA,kBAA0BuG,GAE1C,GAAItmD,KAAK+qH,cAAcvyB,GAAU,CAC7B,MAAMud,EAAS,+BAGf,MADA3vG,GAAO5C,MAAMuyG,GACP,IAAIjwG,MAAMiwG,GAOpB,OALA/1G,KAAKqxG,MAAM7Y,GAAW,IAAI0pB,GAASliH,KAAK4zD,WAAYtN,EAChD3O,EAAU33C,KAAKs1F,KAAMjzF,GACzBrC,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,gBAA4Bj6F,KAAKqxG,MAAM7Y,IAEpCx4F,KAAKqxG,MAAM7Y,GAStBuyB,cAAcvyB,GACV,OAAOA,KAAWx4F,KAAKqxG,MAO3B4S,QAAQ39D,GACJtmD,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,kBAA8Bj6F,KAAKqxG,MAAM/qD,WACtCtmD,KAAKqxG,MAAM/qD,GAOtBy+D,WAAWv1D,GACP,MAAMpT,EAAOoT,EAAK9J,aAAa,QAG/B,GAAI8J,EAAK9J,aAAa,QAClB,OAAO,EAGX,MAAMq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAK29C,IAKDkX,EAAEzhD,GAAMlgD,KAAK,sEACY/P,QACzBw6F,EAAK4qB,yBAGT5qB,EAAKgrB,WAAWv1D,IAET,GAOX23D,sBAAsB33D,GAClB,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzBq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAK29C,IAILA,EAAKotB,sBAAsB33D,EAAMpT,IAE1B,GAOX+rE,gBAAgB34D,GACZ,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzBq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAK29C,IAILA,EAAKouB,gBAAgB34D,EAAMpT,IAEpB,GAOXsrE,UAAUhkH,GAEN,MAAM04C,EAAO14C,EAAIgiD,aAAa,QACxBq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAK29C,IAILA,EAAK2tB,UAAUhkH,EAAK04C,IAEb,GAOXsuE,OAAOj4D,GACH,MAAMrW,EAAOqW,EAAG/M,aAAa,QACvBq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAGlD,OAAK29C,IAILA,EAAK2wB,OAAOj4D,IAEL,GAOXk4D,YAAYl4D,GACR,MAAMrW,EAAOqW,EAAG/M,aAAa,QACvBq0C,EAAO/5F,KAAKqxG,MAAMtxD,GAAAA,QAAAA,kBAA0B3D,IAGlD,OAAK29C,IAILA,EAAK4wB,YAAYl4D,IAEV,IC3Mf,MAAMrsD,IAASyB,EAAAA,EAAAA,WAAU,gBA2BzB,OAtBA,MAMIwiB,KAAKS,GACD9qB,KAAKgrH,qBAAuBppC,QAAQ92D,EAAMmgG,qBAE1C7kH,GAAO+L,KAAM,0BAAyBnS,KAAKgrH,wBAQ/CE,+BACI,OAAOlrH,KAAKgrH,uBCjBd5kH,IAASyB,EAAAA,EAAAA,oDAQf,SAASsjH,GAAuBC,EAAOC,GACnC,MAAMruH,GAAO6iD,EAAAA,GAAAA,QAAO,SAAU,CAC1B4H,MAAO,kCACPn5C,KAAM+8G,EAAkB9iH,EACxBL,KAAMojH,GAAAA,+BAA8CD,EAAkB/9G,OAAInB,IAc9E,OAXIk/G,EAAkBrlH,GAClBhJ,EAAKoE,EAAE,YAAa,CAChB8G,KAAM,OACNuB,MAAO4hH,EAAkBrlH,IAC1B2hD,KAEP3qD,EAAKoE,EAAE,YAAa,CAChBqmD,MAAO,2BACP2jE,MAAAA,IACDzjE,KAEI3qD,EAAKA,KAQhB,SAASuuH,GAA0BC,GAC/B,MAAMxuH,GAAO6iD,EAAAA,GAAAA,QAAO,aAAc,CAC9B4H,MAAO,kCACPj4C,WAwDepG,EAxDUoiH,EAAqB,GAyDtC,MAARpiH,EACO,MACQ,MAARA,EACA,MAGJ,QAPX,IAAuBA,EArDnB,IAAK,IAAI9J,EAAI,EAAGA,EAAIksH,EAAqBjsH,OAAQD,IAC7CtC,EAAKoE,EAAE,SAAU,CACbqmD,MAAO,kCACPn5C,KAAMk9G,EAAqBlsH,KAC5BqoD,KAGP,OAAO3qD,EAAKA,KAUhB,SAASyuH,GAA2Bh5D,EAAIqrB,GACpC,MAAM4tC,EAASza,EAAEx+C,GAAInjD,KAAK,UAAU,GACpC,IACIyoC,EADA7sC,EAAU+lG,EAAEya,GAAQp8G,KAAM,iBAAgBwuE,OAyB9C,OAtBI5yE,EAAQ3L,OACR2L,EAAUA,EAAQ,IAGlBA,GAAU20C,EAAAA,GAAAA,QAAO,UAAW,CACxB33C,KAAM41E,IACP9gF,KACH0uH,EAAOv4F,YAAYjoB,IAGvB6sC,EAAck5D,EAAE/lG,GAASoE,KAAK,eAE1ByoC,EAAYx4C,OACZw4C,EAAcA,EAAY,IAE1BA,GAAc8H,EAAAA,GAAAA,QAAO,cAAe,CAChC4H,MAAO,6BACP97C,MAAOmyE,IACR9gF,KACHkO,EAAQioB,YAAY4kB,IAGjBA,EA+BJ,SAAS4zE,GAAsBl5D,EAAIm5D,GAAgB,MACtD,IAAIx0F,EAEJ,IACIA,EAAO7zB,KAAK+G,MAAMshH,EAAev1D,aACnC,MAAO7yD,GAGL,OAFA4C,GAAO5C,MAAO,sDAAqDooH,EAAev1D,eAE3E,KAGX,GAAI,UAACj/B,SAAD,QAAC,EAAMzlB,QAEP,OAAO,KAIX,MAAMk6G,EAAsBJ,GAA2Bh5D,EAAI8hC,IACrDu3B,EAAsBL,GAA2Bh5D,EAAI8hC,IACrDzkF,EAAU,IAAIw3B,IAEpB,IAAK,MAAM8jF,KAASh0F,EAAKzlB,QACrB,GAAIylB,EAAKzlB,QAAQkC,eAAeu3G,GAAQ,CACpC,MAAM58G,EAAQ,GACRu9G,EAAe30F,EAAKzlB,QAAQy5G,GAI5BY,GAAeD,MAAAA,OAAA,EAAAA,EAAcxsH,SAAUwsH,EAAa,GACpDE,GAAkBF,MAAAA,OAAA,EAAAA,EAAcxsH,QAAS,GAAKwsH,EAAa,GAC3DG,GAAeH,MAAAA,OAAA,EAAAA,EAAcxsH,QAAS,GAAKwsH,EAAa,GACxDI,GAAkBJ,MAAAA,OAAA,EAAAA,EAAcxsH,QAAS,GAAKwsH,EAAa,GAEjE,GAAIC,MAAAA,GAAAA,EAAczsH,OAAQ,OACtB,IAAK,IAAID,EAAI,EAAGA,EAAI0sH,EAAazsH,OAAQD,IACrCwsH,EAAoB34F,YAAYg4F,GAAuBC,EAAOY,EAAa1sH,KAI/EkP,EAAMtK,KAAN,UAAW8nH,EAAa,UAAxB,aAAW,EAAiBzjH,GAGhC,GAAI0jH,MAAAA,GAAAA,EAAiB1sH,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAI2sH,EAAgB1sH,OAAQD,IACxCwsH,EAAoB34F,YAAYo4F,GAA0BU,EAAgB3sH,KAGlF,GAAI4sH,MAAAA,GAAAA,EAAc3sH,OAAQ,OACtB,IAAK,IAAID,EAAI,EAAGA,EAAI4sH,EAAa3sH,OAAQD,IACrCusH,EAAoB14F,YAAYg4F,GAAuBC,EAAOc,EAAa5sH,KAE/EkP,EAAMtK,KAAN,UAAWgoH,EAAa,UAAxB,aAAW,EAAiB3jH,GAGhC,GAAI4jH,MAAAA,GAAAA,EAAiB5sH,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAI6sH,EAAgB5sH,OAAQD,IACxCusH,EAAoB14F,YAAYo4F,GAA0BY,EAAgB7sH,KAGlFwQ,EAAQqd,IAAIi+F,EAAO58G,GAI3B,OAAOsB,kDCrLX,MAAM1J,GAASlE,EAAAA,MAAAA,2CAUTkqH,GAAiB,CAQnBC,aAAc,KAQdhiG,OAAmB,IAAdhoB,EAAc,uDAAJ,GACXrC,KAAKqC,QAAUA,EACfrC,KAAKqsH,aAAersH,KAAKssH,4BAEpBtsH,KAAKqsH,cACNjmH,GAAO+L,KAAK,6BAWpBm6G,4BACI,OAAIhnG,GAAQw7D,SACD,CAACjuB,EAAWU,KACf92D,OAAO8vH,YAAYC,oBACf35D,GACA,CAACrvD,EAAOkgE,KACJ,IAAI+oD,EAmBAA,EADAjpH,GAAwB,sBAAfA,EAAM0E,KACF,IAAIw0E,GACbE,IAGS,IAAIF,GACbl5E,EAAOkgE,EAAa,CAAE,YAER,mBAAdnQ,GACDA,EAAUk5D,OAGtBnnG,GAAQy7D,aACR/gF,KAAK0sH,uBACLpnG,GAAQ07D,iBAAmB17D,GAAQ+9D,0BACnCrjF,KAAK2sH,kCACLrnG,GAAQ+9D,0BACRrjF,KAAK4sH,iCAEhBxmH,GAAOD,IAAI,mCAAoCmf,GAAQm7D,WAEhD,OAQXosC,uBACI,MAAM,aAAEC,GAAiB9sH,KAAKqC,QAQ9B,OAPcyqH,MAAAA,IAAAA,EAAcC,QAAS,CACjCC,iBAAiB,EACjBC,aAAc,EACdC,kBAAkB,EAClBC,kBAAkB,IAW1B3vD,cACI,OAA6B,OAAtBx9D,KAAKqsH,cAShBK,uBAAuB75D,EAAWU,GAAW,WACzC,GAAI92D,OAAO2wH,yBAA2B3wH,OAAO2wH,wBAAwBC,kBAAmB,CACpF,MAAM,wBAAEC,EAAF,sBAA2BC,GAA0BvtH,KAAKqC,QAEhE5F,OAAO2wH,wBAAwBC,kBAC3B,CACIE,sBAAuBA,GAAyB,CAAE,SAAU,YAEhE,SAACpjD,EAAUqjD,GAAyC,IAA7BC,EAA6B,wDAChD,GAAItjD,EAAU,SACV,IAAIujD,GAAmB,EAEvB,GAAID,EAAkB,CAClBC,EAAmB,GACnB,MAAMC,EAAsB,EAAKd,uBAEE,kBAAxBc,IACPD,EAAmB,CACfzqD,SAAU0qD,IAUC,WAAfH,IACAE,EAAiB1qD,UAAY,CACzBqD,kBAAmB,YAK/B,MAAM3C,EAAc,CAChBC,MAAO+pD,EACP7pD,MAAO,CACHb,UAAW,CACPqD,kBAAmB,UACnBC,oBAAqB6D,EACrByjD,aAAY,UAAEN,MAAAA,OAAF,EAAEA,EAAyBjuG,WAA3B,QA9JX,EA+JDknD,aAAY,UAAE+mD,MAAAA,OAAF,EAAEA,EAAyBluG,WAA3B,QA/JX,EAgKDonD,SAAU/pE,OAAOoxH,OAAO/wF,MACxB2pC,UAAWhqE,OAAOoxH,OAAO9wF,UAMrCokC,UAAU2B,aAAawC,aAAa5B,GAC/BS,MAAKt3D,GAAUgmD,EAAU,CACtBhmD,OAAAA,EACAm5D,SAAUmE,EACV2jD,WAAYN,KACZj6D,QAKRA,EAAU,IAAImpB,GAAgBE,QAGtCxoE,GAAOm/C,EAAU,IAAImpB,GACjBE,GACAxoE,WAIRm/C,EAAU,IAAImpB,GAAgBE,MAUtCgwC,gCAAgC34G,EAAUqlB,GACtC,IAAIysC,EAGAA,EADA5E,UAAU4E,gBACQ5E,UAAU4E,gBAAgB/iE,KAAKm+D,WAG/BA,UAAU2B,aAAaiD,gBAAgB/iE,KAAKm+D,UAAU2B,cAG5E,MAAM,wBAAEwqD,GAA4BttH,KAAKqC,QACnCwhE,EAA2C,iBAA5BypD,GAAuC,CAAElnD,UAAWknD,GACnE3pD,EAAQ3jE,KAAK6sH,uBAGnBhpD,EAAMuC,kBAAoBvC,EAAMuC,UAAU/mD,IAE1C,MAAMqkD,EAAc,CAChBG,MAAAA,EACAF,MAAAA,EACAoqD,OAAQ,UAGZ3nH,GAAO+L,KAAK,2CAA4CuxD,GAExDqC,EAAgBrC,GACXS,MAAKt3D,IACFoH,EAAS,CACLpH,OAAAA,EACAm5D,SAAUn5D,EAAO7F,QAGxBmnE,OAAM3qE,IACH,MAAMwqH,EAAe,CACjBC,UAAWzqH,GAASA,EAAM0E,KAC1B04G,SAAUp9G,GAASA,EAAMzE,QACzBmvH,WAAY1qH,GAASA,EAAMuC,OAG/BK,GAAO5C,MAAM,wBAAyBkgE,EAAasqD,GAE/CA,EAAapN,WAAmE,IAAvDoN,EAAapN,SAASz7G,QAAQ,oBAGvDm0B,EAAc,IAAIojD,GAAgBE,KAKtCtjD,EAAc,IAAIojD,GAAgBE,SAU9C+vC,kCAAkC14G,EAAUqlB,GACxClzB,GAAO+L,KAAK,4CAEZgvD,UAAU2B,aAAaiD,gBAAgB,CAAElC,OAAO,IAC3CM,MAAKt3D,IACFoH,EAAS,CACLpH,OAAAA,EACAm5D,SAAUn5D,EAAO7F,QAExBmnE,OAAM,KACH70C,EAAc,IAAIojD,GAAgBE,SAW9CuxC,2BAA2BC,GACvBhoH,GAAO+L,KAAM,uCAAsCi8G,KAEnDpuH,KAAKqC,QAAQirH,wBAA0B,CACnCjuG,IAxRyB,EAyRzBD,IAAKgvG,KAKjB,MCvSMhoH,IAASyB,EAAAA,EAAAA,qCAOTwmH,GAAU,CACZC,mBAAmBtqH,GAIRA,EAAOA,EAAKkJ,QAAQ,iBAAkB,IAAMlJ,EAEvDuqH,UAAUC,EAAWC,GACjB,IACI/2E,EAAK5D,EADLj7B,EAAO,KAeX,OAZKi7B,EAAQu6E,GAAQK,SAASF,EAAW,eAAgBC,MAC7C/2E,EACE22E,GAAQK,SACNF,EACA,aACAC,MACZ51G,EAAO,CACHi7B,MAAOu6E,GAAQM,cAAc76E,GAC7B4D,IAAK22E,GAAQO,YAAYl3E,KAI1B7+B,GAEX81G,cAAc/oH,GACHA,EAAKgH,UAAU,IAE1BiiH,cAAcC,GACF,eAAcA,IAE1BF,YAAYhpH,GACDA,EAAKgH,UAAU,IAE1BmiH,YAAYr3E,GACA,aAAYA,IAExBs3E,SAASppH,GACEA,EAAKgH,UAAU,GAS1BqiH,mBAAmBC,GACf,MAAMC,EAAWD,EAAU5/G,MAAK1J,GAAQA,EAAKT,QAAQ,UAAY,IAEjE,IAAKgqH,EACD,OAGJ,MAAMlnH,EAAIknH,EAASviH,UAAUuiH,EAAShqH,QAAQ,UAAY,GAE1D,OAAOkpH,GAAQC,mBAAmBrmH,IAEtCsyC,WAAW30C,GACP,MAAMiT,EAAO,GACPtM,EAAQ3G,EAAKgH,UAAU,GAAGnP,MAAM,KAUtC,OARAob,EAAKlN,MAAQY,EAAMgO,QACnB1B,EAAKnM,KAAOH,EAAMgO,QAClB1B,EAAKixB,MAAQv9B,EAAMgO,QACa,KAA5BhO,EAAMA,EAAMhN,OAAS,IACrBgN,EAAMyP,MAEVnD,EAAK6hC,IAAMnuC,EAEJsM,GAEXu2G,WAAWh3E,GAEF,KAAIA,EAAMzsC,SAASysC,EAAM1rC,QAAQ0rC,EAAMtO,SACpCsO,EAAMsC,IAAI1sC,KAAK,OAE3BqhH,YAAYzpH,GACR,MAAMiT,EAAO,GACb,IAAItM,EAAQ3G,EAAKgH,UAAU,GAAGnP,MAAM,KAQpC,OANAob,EAAK7R,GAAKuF,EAAMgO,QAChBhO,EAAQA,EAAM,GAAG9O,MAAM,KACvBob,EAAK3Q,KAAOqE,EAAMgO,QAClB1B,EAAKy2G,UAAY/iH,EAAMgO,QACvB1B,EAAK07B,SAAWhoC,EAAMhN,OAASgN,EAAMgO,QAAU,IAExC1B,GAQX02G,aAAa3pH,GACT,MAAM2G,EAAQ3G,EAAKgH,UAAU,IAAInP,MAAM,KAQvC,MAAO,CAPU8O,EAAM,GACNA,EAAM,GAGHA,EAAMhN,OAAS,EAAIgN,EAAM,GAAK,OAKtDijH,cAAc5pH,GACHA,EAAKgH,UAAU,IAE1B6iH,YAAY1hH,GACR,IAAInI,EACG,YAAWmI,EAAG23C,aAAa,SAAS33C,EAAG23C,aAAa,WACnD33C,EAAG23C,aAAa,eAOxB,OALI33C,EAAG23C,aAAa,aACmB,MAAhC33C,EAAG23C,aAAa,cACnB9/C,GAAS,IAAGmI,EAAG23C,aAAa,eAGzB9/C,GAEX8pH,YAAY9pH,GACR,MAAMiT,EAAO,GACPtM,EAAQ3G,EAAKgH,UAAU,GAAGnP,MAAM,KAStC,OAPAob,EAAK4wB,IAAMl9B,EAAMgO,QACjB1B,EAAK,gBAAkBtM,EAAMgO,QAC7B1B,EAAK,cAAgBtM,EAAMgO,QACvBhO,EAAMhN,SACNsZ,EAAK,kBAAoBtM,EAAMyB,KAAK,MAGjC6K,GAEXs9B,iBAAiBvwC,GACb,MAAMiT,EAAO,GACPtM,EAAQ3G,EAAKgH,UAAU,IAAInP,MAAM,KAMvC,OAJAob,EAAK7X,KAAOuL,EAAMgO,QAClB1B,EAAK82G,YAAcpjH,EAAMgO,QAGlB1B,GAEXq8B,UAAUtvC,GACN,MAAMiT,EAAO,GACb,IAAItM,EAAQ3G,EAAKnI,MAAM,KAEvB8O,EAAMgO,QACNhO,EAAQA,EAAMyB,KAAK,KAAKvQ,MAAM,KAC9B,IAAK,IAAI6B,EAAI,EAAGA,EAAIiN,EAAMhN,OAAQD,IAAK,CACnC,IAAI4K,EAAMqC,EAAMjN,GAAG7B,MAAM,KAAK,GAE9B,KAAOyM,EAAI3K,QAAqB,MAAX2K,EAAI,IACrBA,EAAMA,EAAI0C,UAAU,GAExB,MAAMnD,EAAQ8C,EAAMjN,GAAG7B,MAAM,KAAK,GAE9ByM,GAAOT,EACPoP,EAAK3U,KAAK,CAAEgE,KAAMgC,EACdT,MAAAA,IACGS,GAEP2O,EAAK3U,KAAK,CAAEgE,KAAM,GACduB,MAAOS,IAInB,OAAO2O,GAEX+2G,kBAAkBhqH,GACd,MAAM4tC,EAAY,GACZq8E,EAAQjqH,EAAKnI,MAAM,KAEzB+1C,EAAUC,WAAao8E,EAAM,GAAGjjH,UAAU,IAC1C4mC,EAAUhnC,UAAYqjH,EAAM,GAC5Br8E,EAAUE,SAAWm8E,EAAM,GAAGnqG,cAC9B8tB,EAAU34B,SAAWg1G,EAAM,GAC3Br8E,EAAU/mC,GAAKojH,EAAM,GACrBr8E,EAAU9mC,KAAOmjH,EAAM,GAGvBr8E,EAAUh0C,KAAOqwH,EAAM,GACvBr8E,EAAUjqC,WAAa,EACvB,IAAK,IAAIjK,EAAI,EAAGA,EAAIuwH,EAAMtwH,OAAQD,GAAK,EACnC,OAAQuwH,EAAMvwH,IACd,IAAK,QACDk0C,EAAU,YAAcq8E,EAAMvwH,EAAI,GAClC,MACJ,IAAK,QACDk0C,EAAU,YAAcq8E,EAAMvwH,EAAI,GAClC,MACJ,IAAK,aACDk0C,EAAUjqC,WAAasmH,EAAMvwH,EAAI,GACjC,MACJ,IAAK,UACDk0C,EAAUlqC,QAAUumH,EAAMvwH,EAAI,GAC9B,MACJ,QACI8G,GAAO4gD,MACF,sCACG6oE,EAAMvwH,UAAUuwH,EAAMvwH,EAAI,OAS1C,OANAk0C,EAAUs8E,QAAU,IAIpBt8E,EAAUxsC,GAAKiK,KAAKE,SAAS3S,SAAS,IAAI0H,OAAO,EAAG,IAE7CstC,GAEXu8E,kBAAkBC,GACd,IAAIpqH,EAAO,CACN,eAAcoqH,EAAKv8E,aACpBu8E,EAAKxjH,UACLwjH,EAAKt8E,SACLs8E,EAAKn1G,SACLm1G,EAAKvjH,GACLujH,EAAKtjH,KACL,MACAsjH,EAAKxwH,MACPwO,KAAK,KAGP,OADApI,GAAQ,IACAoqH,EAAKxwH,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGwwH,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5BrqH,GAAQ,QACRA,GAAQ,IACRA,GAAQoqH,EAAK,YACbpqH,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQoqH,EAAK,YACbpqH,GAAQ,KAchB,OAVIoqH,EAAKC,gBAAgB,aACrBrqH,GAAQ,UACRA,GAAQ,IACRA,GAAQoqH,EAAK1mH,QACb1D,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQoqH,EAAKC,gBAAgB,cAAgBD,EAAKzmH,WAAa,IAExD3D,GAEXsqH,UAAUlhH,GAIN,MAAM6J,EAAO,IAAIyuB,IACXoO,EAAQ1mC,EAAKvR,MAAM,QAEzB,IAAK,IAAI6B,EAAI,EAAGA,EAAIo2C,EAAMn2C,OAAQD,IAC9B,GAAiC,YAA7Bo2C,EAAMp2C,GAAGsN,UAAU,EAAG,GAAkB,CAExC,MAAM0B,EAAOonC,EAAMp2C,GAAG7B,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhDob,EAAK0F,IAAIjQ,IACVuK,EAAKsU,IAAI7e,EAAM,IAGnBuK,EAAK0F,IAAIjQ,GAAMpK,KAAKwxC,EAAMp2C,IAIlC,OAAOuZ,GASXs3G,oBAAoBjB,GAChB,MAAMkB,EAAiBlB,EAAU5/G,MAAK+gH,GAAeA,EAAYlrH,QAAQ,UAAY,IAGrF,OAAOirH,MAAAA,OAAP,EAAOA,EAAgBxjH,UAAUwjH,EAAejrH,QAAQ,UAAY,IAExEmrH,YAAY1qH,GACR,MAAM2G,EAAQ3G,EAAKM,OAAO,IAAIzI,MAAM,KAC9Bob,EAAO,GAMb,OAJAA,EAAK87B,GAAKpoC,EAAMgO,QAChB1B,EAAKrZ,KAAO+M,EAAMgO,QAClB1B,EAAKlP,OAAS4C,EAEPsM,GAEXg8B,YAAYjvC,GACR,MAAM2G,EAAQ3G,EAAKM,OAAO,GAAGzI,MAAM,KAC7Bob,EAAO,GAYb,OAVAA,EAAKpP,MAAQ8C,EAAMgO,SACc,IAA7B1B,EAAKpP,MAAMtE,QAAQ,KACnB0T,EAAK5P,UAAY,QAEjB4P,EAAK5P,UAAY4P,EAAKpP,MAAMvD,OAAO2S,EAAKpP,MAAMtE,QAAQ,KAAO,GAC7D0T,EAAKpP,MAAQoP,EAAKpP,MAAMvD,OAAO,EAAG2S,EAAKpP,MAAMtE,QAAQ,OAEzD0T,EAAKi8B,IAAMvoC,EAAMgO,QACjB1B,EAAKlP,OAAS4C,EAEPsM,GAEX61G,SAAS6B,EAAUC,EAAQl6E,GACvB,IAAIZ,EAAQ66E,EAAS9yH,MAAM,QAE3B,IAAK,IAAI6B,EAAI,EAAGA,EAAIo2C,EAAMn2C,OAAQD,IAC9B,GAAIo2C,EAAMp2C,GAAGsN,UAAU,EAAG4jH,EAAOjxH,UAAYixH,EACzC,OAAO96E,EAAMp2C,GAGrB,IAAKg3C,EACD,OAAO,EAIXZ,EAAQY,EAAY74C,MAAM,QAC1B,IAAK,IAAIsO,EAAI,EAAGA,EAAI2pC,EAAMn2C,OAAQwM,IAC9B,GAAI2pC,EAAM3pC,GAAGa,UAAU,EAAG4jH,EAAOjxH,UAAYixH,EACzC,OAAO96E,EAAM3pC,GAIrB,OAAO,GAEX0kH,UAAUF,EAAUC,EAAQl6E,GACxB,IAAIZ,EAAQ66E,EAAS9yH,MAAM,QAC3B,MAAMizH,EAAU,GAEhB,IAAK,IAAIpxH,EAAI,EAAGA,EAAIo2C,EAAMn2C,OAAQD,IAC1Bo2C,EAAMp2C,GAAGsN,UAAU,EAAG4jH,EAAOjxH,UAAYixH,GACzCE,EAAQxsH,KAAKwxC,EAAMp2C,IAG3B,GAAIoxH,EAAQnxH,SAAW+2C,EACnB,OAAOo6E,EAIXh7E,EAAQY,EAAY74C,MAAM,QAC1B,IAAK,IAAIsO,EAAI,EAAGA,EAAI2pC,EAAMn2C,OAAQwM,IAC1B2pC,EAAM3pC,GAAGa,UAAU,EAAG4jH,EAAOjxH,UAAYixH,GACzCE,EAAQxsH,KAAKwxC,EAAM3pC,IAI3B,OAAO2kH,GAEXC,kBAAkB/qH,GAKd,GAAmC,IAA/BA,EAAKT,QAAQ,cAEbS,EAAQ,KAAIA,SACT,GAA8B,iBAA1BA,EAAKgH,UAAU,EAAG,IAMzB,OALAxG,GAAO6lB,KACH,kEAEJ7lB,GAAO6lB,KAAKrmB,GAEL,KAE6B,SAApCA,EAAKgH,UAAUhH,EAAKrG,OAAS,KAE7BqG,EAAOA,EAAKgH,UAAU,EAAGhH,EAAKrG,OAAS,IAE3C,MAAMi0C,EAAY,GACZq8E,EAAQjqH,EAAKnI,MAAM,KAEzB,GAAiB,QAAboyH,EAAM,GAIN,OAHAzpH,GAAO6lB,KAAK,uCACZ7lB,GAAO6lB,KAAKrmB,GAEL,KAEX4tC,EAAUC,WAAao8E,EAAM,GAAGjjH,UAAU,IAC1C4mC,EAAUhnC,UAAYqjH,EAAM,GAC5Br8E,EAAUE,SAAWm8E,EAAM,GAAGnqG,cAC9B8tB,EAAU34B,SAAWg1G,EAAM,GAC3Br8E,EAAU/mC,GAAKojH,EAAM,GACrBr8E,EAAU9mC,KAAOmjH,EAAM,GAGvBr8E,EAAUh0C,KAAOqwH,EAAM,GAEvBr8E,EAAUjqC,WAAa,IACvB,IAAK,IAAIjK,EAAI,EAAGA,EAAIuwH,EAAMtwH,OAAQD,GAAK,EACnC,OAAQuwH,EAAMvwH,IACd,IAAK,QACDk0C,EAAU,YAAcq8E,EAAMvwH,EAAI,GAClC,MACJ,IAAK,QACDk0C,EAAU,YAAcq8E,EAAMvwH,EAAI,GAClC,MACJ,IAAK,aACDk0C,EAAUjqC,WAAasmH,EAAMvwH,EAAI,GACjC,MACJ,IAAK,UACDk0C,EAAUlqC,QAAUumH,EAAMvwH,EAAI,GAC9B,MACJ,QACI8G,GAAO4gD,MAAO,oBAAmB6oE,EAAMvwH,UAAUuwH,EAAMvwH,EAAI,OASnE,OANAk0C,EAAUs8E,QAAU,IAIpBt8E,EAAUxsC,GAAKiK,KAAKE,SAAS3S,SAAS,IAAI0H,OAAO,EAAG,IAE7CstC,GAEXo9E,oBAAoBZ,GAChB,IAAIpqH,EAAO,eAEXA,GAAQoqH,EAAKtqE,aAAa,cAC1B9/C,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,aAC1B9/C,GAAQ,IAER,IAAI8tC,EAAWs8E,EAAKtqE,aAAa,YAmBjC,OAfIpgC,GAAQ8sD,aAA0C,WAA3B1+B,EAAShuB,gBAChCguB,EAAW,OAGf9tC,GAAQ8tC,EACR9tC,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,YAC1B9/C,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,MAC1B9/C,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,QAC1B9/C,GAAQ,IACRA,GAAQ,MACRA,GAAS,IAAGoqH,EAAKtqE,aAAa,UAC9B9/C,GAAQ,IACAoqH,EAAKtqE,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACGsqE,EAAKtqE,aAAa,aACXsqE,EAAKtqE,aAAa,cACzB9/C,GAAQ,QACRA,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,YAC1B9/C,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,YAC1B9/C,GAAQ,KAchB,MAV+B,QAA3B8tC,EAAShuB,gBACT9f,GAAQ,UACRA,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,WAC1B9/C,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQoqH,EAAKtqE,aAAa,eAAiB,IAEnC,GAAE9/C,SAQdirH,sBAAsBC,GAClB,MAAMz/G,EAAWy/G,EAAWtiH,MACvBnC,KAAIoC,GAAYA,EAASzH,KACzB4E,QAAO,CAAC0C,EAAMzN,EAAOY,IAAUA,EAAM0D,QAAQmJ,KAAUzN,IACvDtB,OACC+R,EACCw/G,EAAWzhH,YAAcyhH,EAAWzhH,WAAW9P,QAAW,EAEjE,GAAI8R,EAAW,GAAmB,IAAdC,EAEhB,OAEJ,IAAIb,EAAc,KAElB,GAAiB,IAAbY,EACAZ,EAAcqgH,EAAWtiH,MAAM,GAAGxH,QAC/B,GAAiB,IAAbqK,EAAgB,CAEvB,MAAME,EACAu/G,EAAWzhH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnB+B,IACAd,EAAcc,EAAS/C,MAAM/Q,MAAM,KAAK,SAEzC,GAAI4T,GAAY,EAAG,CAEtB,MAAMjC,EACA0hH,EAAWzhH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnBJ,IACAqB,EAAcrB,EAASZ,MAAM/Q,MAAM,KAAK,IAIhD,OAAOgT,GAOXsgH,aAAY,IACDj4F,KAAAA,UAAqB,EAAG,YAYnCzqB,iBAAiBV,EAAOW,EAAMC,GAC1B,IAAK,IAAIjP,EAAI,EAAGA,EAAIqO,EAAMa,MAAMjP,SAAUD,EAAG,CACzC,MAAM0xH,EAAWrjH,EAAMa,MAAMlP,GAE7B,GAAI0xH,EAAShqH,KAAOsH,GACb0iH,EAASxnH,YAAc+E,EAC1B,OAAOyiH,EAASvnH,QAa5BwnH,gBAAgBC,GACLA,EACF1iH,MACA/Q,MAAM,KACN4O,KAAIoD,GAAWC,SAASD,EAAS,MAS1C0hH,SAAQ,CAAC1lH,EAAKjM,IACHiM,EAAIE,MAAM2D,MAAKtJ,GAAKA,EAAExG,OAASA,IAO1C4xH,SAAS3lH,GACL,MAAM4lH,EACA5lH,EAAIhO,MAAM,MAAMmO,QAAOhG,GAAQA,EAAKsxG,WAAW,kBAErD,GAAIma,EAAW9xH,OAAS,EACpB,OAAO8xH,EAAW,GAAGnrH,OAAO,eAAe3G,SAWnD+xH,YAAYl5E,EAAOm5E,GACf,IAAKn5E,IAAUm5E,EACX,OAGJ,MAAMC,EAAuBp5E,EAAMvsC,IAC9BD,QAAOC,GAAOA,EAAI6oC,OAAS7oC,EAAI6oC,MAAMhvB,gBAAkB6rG,EAAU7rG,gBACjErZ,KAAIR,GAAOA,EAAIwP,UAEpB,GAAIm2G,EAAsB,CAGtB,MAAMC,EACAr5E,EAAMxqC,SACPpP,WACAf,MAAM,KACN4O,KAAI3D,GAAKgH,SAAShH,EAAG,MAE1B,IAAK,MAAMisC,KAAM68E,EAAqB57G,UAAW,CAC7C,MAAM87G,EAAeD,EAAatsH,QAAQwvC,GAE1C88E,EAAansH,OAAOosH,EAAc,GAClCD,EAAal6G,QAAQo9B,GAEzByD,EAAMxqC,SAAW6jH,EAAazjH,KAAK,OAc3C2jH,WAAWhkH,EAAO4jH,GAAgC,IAArBK,EAAqB,wDAC9C,IAAKjkH,IAAU4jH,EACX,OAGJ,MAAMM,EAAU,GAChB,IAAIC,EAAY,GAChB,MAAMC,EAAqBR,EAAU7rG,gBAAkBssG,KAAAA,MAAsBJ,EAE7E,IAAK,MAAM/lH,KAAO8B,EAAM9B,IAChBA,EAAI6oC,OACD7oC,EAAI6oC,MAAMhvB,gBAAkB6rG,EAAU7rG,gBACrCqsG,EACAF,EAAQ3tH,KAAK2H,EAAIwP,SAEjBy2G,EAAU5tH,KAAK2H,EAAIwP,UAY/B,GANI02G,IACAD,EAAYnkH,EAAM7B,KACbF,QAAOe,GAAQklH,EAAQ1sH,QAAQwH,EAAK0O,UAAY,GAAK1O,EAAKzD,OAAOqtB,SAAS,yBAC1ElqB,KAAIM,GAAQA,EAAK0O,WAGtBy2G,EAAUvyH,OAAS,EAAG,CAGtB,MAAM0yH,EAAUH,EAAUzlH,KAAIM,GAAS,OAAMA,MACvCulH,EAASvkH,EAAM7B,KAAKF,QACtBe,IAA0C,IAAlCslH,EAAQ9sH,QAAQwH,EAAKzD,UAEjC4oH,EAAU5tH,QAAQguH,EAAO7lH,KAAIM,GAAQA,EAAK0O,WAK1C,MAIM82G,EAJSxkH,EAAMC,SAChBpP,WACAf,MAAM,KACN4O,IAAItB,QACca,QAAO+oC,IAAiC,IAA3Bm9E,EAAU3sH,QAAQwvC,KAE/B,IAAnBw9E,EAAQ5yH,QAERoO,EAAMjB,KAAO,EACbiB,EAAM1E,UAAYmpH,KAAAA,SAClBzkH,EAAMC,SAAW,KAEjBD,EAAMC,SAAWukH,EAAQnkH,KAAK,KAGlCL,EAAM9B,IAAM8B,EAAM9B,IAAID,QAClBe,IAA2C,IAAnCwlH,EAAQhtH,QAAQwH,EAAK0O,WACjC1N,EAAM7B,KAAO6B,EAAM7B,KAAKF,QACpBe,IAA2C,IAAnCwlH,EAAQhtH,QAAQwH,EAAK0O,WAC7B1N,EAAM0kH,SACN1kH,EAAM0kH,OAAS1kH,EAAM0kH,OAAOzmH,QACxBe,IAA2C,IAAnCwlH,EAAQhtH,QAAQwH,EAAK0O,eAMjD,MC5rBe,SAASi3G,GAAI7mH,GACxB,MAAME,EAAQF,EAAIhO,MAAM,UAExB,IAAK,IAAI6B,EAAI,EAAGC,EAASoM,EAAMpM,OAAQD,EAAIC,EAAQD,IAAK,CACpD,IAAIizH,EAAU,KAAI5mH,EAAMrM,KAEpBA,IAAMC,EAAS,IACfgzH,GAAU,QAEd5mH,EAAMrM,GAAKizH,EAEf,MAAM7mH,EAAW,GAAEC,EAAM4O,cAEzBva,KAAK2L,MAAQA,EACb3L,KAAKmwD,IAAMzkD,EAAUC,EAAMqC,KAAK,IAChChO,KAAK0L,QAAUA,ECjBnB,SAAS8mH,GAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOlzH,SAAWmzH,EAAOnzH,OACzB,OAAO,EAGX,IAAK,IAAID,EAAI,EAAGsH,EAAI6rH,EAAOlzH,OAAQD,EAAIsH,EAAGtH,IAEtC,GAAImzH,EAAOnzH,aAAcnB,OAASu0H,EAAOpzH,aAAcnB,OAEnD,IAAKs0H,EAAOnzH,GAAGqzH,OAAOD,EAAOpzH,IACzB,OAAO,OAER,GAAImzH,EAAOnzH,KAAOozH,EAAOpzH,GAG5B,OAAO,EAIf,OAAO,EAQI,SAASszH,GAAUC,EAAOC,GAGrC,GAFA9yH,KAAK6yH,MAAQA,EACb7yH,KAAK8yH,SAAWA,GACXD,EACD,MAAM,IAAI/sH,MAAM,yBACb,IAAKgtH,EACR,MAAM,IAAIhtH,MAAM,4BDbxBwsH,GAAI/zH,UAAUw0H,SAAU,EAMxBT,GAAI/zH,UAAUy0H,qBAAsB,EAMpCV,GAAI/zH,UAAU00H,qBAAsB,EAKpCX,GAAI/zH,UAAU20H,gBAAkB,WAC5B,MAAMC,EAAa,GAEnB,IAAK,IAAIC,EAAa,EAAGA,EAAapzH,KAAK2L,MAAMpM,OAAQ6zH,IAAc,CACnE,MAGMznH,EAAQ,CACVynH,WAAAA,EACAl4G,IAJEmzG,GAAAA,SACEA,GAAAA,SAAiBruH,KAAK2L,MAAMynH,GAAa,WAI7C5kH,MAAO,GACPa,WAAY,IAGhB8jH,EAAWC,GAAcznH,EAEzB0iH,GAAAA,UAAkBruH,KAAK2L,MAAMynH,GAAa,WAAWzwH,SAAQiD,IACzD,MAAMytH,EAAWztH,EAAKgH,UAAU,GAAGnP,MAAM,KAAK,GAIzCkO,EAAM6C,MAAM6kH,KACb1nH,EAAM6C,MAAM6kH,GAAY,CACpB/kH,KAAM+kH,EACN39E,MAAO,KAGf/pC,EAAM6C,MAAM6kH,GAAU39E,MAAMxxC,KAAK0B,MAErCyoH,GAAAA,UAAkBruH,KAAK2L,MAAMynH,GAAa,iBAAiBzwH,SAAQiD,IAC/D,MAAMuiE,EAAMviE,EAAKT,QAAQ,KACnBqK,EAAY5J,EAAKM,OAAO,EAAGiiE,GAAKjiE,OAAO,IACvCsI,EAAQ5I,EAAKM,OAAO,GAAKsJ,EAAUjQ,QAAQ9B,MAAM,KAEnD+Q,EAAMjP,QACNoM,EAAM0D,WAAWnL,KAAK,CAClBsL,UAAAA,EACAhB,MAAAA,OAMhB,OAAO2kH,GAQXb,GAAI/zH,UAAU+0H,aAAe,SAAShlH,GAElC,MAAMilH,EAASvzH,KAAKkzH,kBACpB,IAAI18G,GAAS,EAWb,OATAlY,OAAOmE,KAAK8wH,GAAQ5wH,SAAQywH,IACpB58G,GAGA+8G,EAAOH,GAAY5kH,MAAMF,KACzBkI,GAAS,MAIVA,GAIX87G,GAAI/zH,UAAUi1H,SAAW,SAAS/vE,EAAMgwE,GAEpCpF,GAAAA,UAAkBruH,KAAK0L,QAAS,YAAY/I,SAAQiD,IAChD,MAAM2G,EAAQ3G,EAAKnI,MAAM,KACnB+R,EAAYjD,EAAMgO,QAAQrU,OAAO,GAEvCu9C,EAAKriD,EAAE,QAAS,CAAEqmD,MAAO,kCACrBj4C,UAAAA,IACJ,IAAK,IAAIzD,EAAI,EAAGA,EAAIQ,EAAMhN,OAAQwM,IAC9B03C,EAAKriD,EAAE,UAAW,CAAE8G,KAAMqE,EAAMR,KAAM47C,KAE1ClE,EAAKkE,QAGT,IAAK,IAAIroD,EAAI,EAAGA,EAAIU,KAAK2L,MAAMpM,OAAQD,IAAK,CACxC,MAAM84C,EAAQi2E,GAAAA,WAAmBruH,KAAK2L,MAAMrM,GAAG7B,MAAM,QAAQ,IAE7D,GAAsB,UAAhB26C,EAAMzsC,OACa,UAAhBysC,EAAMzsC,OACU,gBAAhBysC,EAAMzsC,MACX,SAGJ,IAAI2C,EACJ,MAAMolH,EAAYrF,GAAAA,SAAiBruH,KAAK2L,MAAMrM,GAAI,WAG9CgP,IADAolH,GACOA,EAAU9mH,UAAU,GAAGnP,MAAM,KAAK,GAK7CgmD,EAAKriD,EAAE,UAAW,CAAEuyH,QAASF,EACzBvrH,KAAMkwC,EAAMzsC,QAChB,MAAMioH,EAAWvF,GAAAA,SAAiBruH,KAAK2L,MAAMrM,GAAI,UAEjD,GAAIs0H,EAAU,CAEV,MAAM14G,EAAMmzG,GAAAA,SAAiBuF,GAE7BnwE,EAAK3D,MAAM,CAAE53C,KAAMgT,IAGvB,GAAoB,UAAhBk9B,EAAMzsC,OAAqC,UAAhBysC,EAAMzsC,MAAmB,CACpD83C,EAAKriD,EAAE,cACH,CAAEqmD,MAAO,6BACL97C,MAAOysC,EAAMzsC,QACjB2C,GACAm1C,EAAK3D,MAAM,CAAExxC,KAAAA,IAEjB,IAAK,IAAIvC,EAAI,EAAGA,EAAIqsC,EAAMsC,IAAIn7C,OAAQwM,IAAK,CACvC,MAAM8nH,EACAxF,GAAAA,SACEruH,KAAK2L,MAAMrM,GACV,YAAW84C,EAAMsC,IAAI3uC,MAE9B03C,EAAKriD,EAAE,eAAgBitH,GAAAA,YAAoBwF,IAI3C,MAAMC,EACAzF,GAAAA,SACEruH,KAAK2L,MAAMrM,GACV,UAAS84C,EAAMsC,IAAI3uC,MAE5B,GAAI+nH,EAAW,CACX,MAAMC,EAAiB1F,GAAAA,UAAkByF,GAGzC,IAAK,IAAIlgH,EAAI,EAAGA,EAAImgH,EAAex0H,OAAQqU,IACvC6vC,EAAKriD,EAAE,YAAa2yH,EAAengH,IAAI+zC,KAK/C3nD,KAAKg0H,eAAe10H,EAAGmkD,EAAMrL,EAAMsC,IAAI3uC,IAEvC03C,EAAKkE,KAGT,GAAIr5C,EAAM,CACN,MAAMwB,EAAUu+G,GAAAA,UAAkBruH,KAAK2L,MAAMrM,IAE7C,IAAK,MAAQ20H,EAAeC,KAAoBpkH,EAAS,CACrD,MAAMqkH,EAAa9F,GAAAA,oBAA4B6F,GAE/CzwE,EAAKriD,EAAE,SAAU,CACbkN,KAAM2lH,EACN/rH,KAAMojH,GAAAA,+BAA8C6I,OAAahoH,EACjEs7C,MAAO,oCAGX,MAAM32C,EAAOu9G,GAAAA,mBAA2B6F,GAGpCpjH,IACA2yC,EAAKriD,EAAE,aACPqiD,EAAK3D,MAAM,CAAE53C,KAAM,SACnBu7C,EAAK3D,MAAM,CAAEr2C,MAAOqH,IACpB2yC,EAAKkE,MAGTlE,EAAKkE,KAKH0mE,GAAAA,UAAkBruH,KAAK2L,MAAMrM,GAAI,iBAExBqD,SAAQiD,IACnB,MAAMuiE,EAAMviE,EAAKT,QAAQ,KACnBqK,EAAY5J,EAAKM,OAAO,EAAGiiE,GAAKjiE,OAAO,IACvCsI,EAAQ5I,EAAKM,OAAO,GAAKsJ,EAAUjQ,QAAQ9B,MAAM,KAEnD+Q,EAAMjP,SACNkkD,EAAKriD,EAAE,aAAc,CAAEoO,UAAAA,EACnBi4C,MAAO,oCACXj5C,EAAM7L,SAAQ4F,GAAKk7C,EAAKriD,EAAE,SAAU,CAAEkN,KAAM/F,IAAKo/C,OACjDlE,EAAKkE,SAKjB,MAAMysE,EAAW/F,GAAAA,UAAkBruH,KAAK2L,MAAMrM,GAAI,UAElD,GAAI80H,EAAS70H,QAAU+lB,GAAQ89D,uBAAwB,CAGnD,MAAMixC,EAAOD,EACR/nH,KAAIioH,GAAWA,EAAQ72H,MAAM,KAAK,KAClC4O,KAAIkoH,GAAWA,EAAQ92H,MAAM,KAAK,KAEvC42H,EAAK1xH,SAAQkqD,IACTpJ,EAAKriD,EAAE,SAAU,CACbyrD,IAAAA,EACApF,MAAO,oCAEXhE,EAAKkE,QAGH0mE,GAAAA,SAAiBruH,KAAK2L,MAAMrM,GAAI,kBAGlCmkD,EAAKriD,EAAE,YAAa,CAChBoO,UAAW,MACXi4C,MAAO,oCAEX4sE,EAAK1xH,SAAQkqD,IACTpJ,EAAKriD,EAAE,SAAU,CAAEyrD,IAAAA,IAAOlF,QAE9BlE,EAAKkE,MAIT0mE,GAAAA,SAAiBruH,KAAK2L,MAAMrM,GAAI,eAChCmkD,EAAKriD,EAAE,YAAYumD,KAIvB3nD,KAAKg0H,eAAe10H,EAAGmkD,EAAM,KAG7B,MAAM+wE,EAAcnG,GAAAA,UAAkBruH,KAAK2L,MAAMrM,GAAI,aAErD,IAAK,IAAIyM,EAAI,EAAGA,EAAIyoH,EAAYj1H,OAAQwM,IAAK,CACzC,MAAM0oH,EAASpG,GAAAA,YAAoBmG,EAAYzoH,IAS/C,GAPA03C,EAAKriD,EAAE,aAAc,CACjBqmD,MAAO,wCACP3S,IAAK2/E,EAAO3/E,IACZ9tC,GAAIytH,EAAOhrH,QAIXgrH,EAAO5gH,eAAe,aAGtB,OAAQ4gH,EAAOxrH,WACf,KAAKmpH,KAAAA,SACD3uE,EAAK3D,MAAM,CAAE4oB,QAAS,cACtB,MACJ,KAAK0pD,KAAAA,SACD3uE,EAAK3D,MAAM,CAAE4oB,QAAS,cACtB,MACJ,KAAK0pD,KAAAA,SACD3uE,EAAK3D,MAAM,CAAE4oB,QAAS,SACtB,MACJ,KAAK0pD,KAAAA,SACD3uE,EAAK3D,MAAM,CAAE4oB,QAAS,SAM9BjlB,EAAKkE,KAETlE,EAAKkE,KAIT3nD,KAAK00H,kBAAkBp1H,EAAGmkD,GAE1B,MAAMz9C,EAAIhG,KAAK2L,MAAMrM,GAEjB+uH,GAAAA,SAAiBroH,EAAI,KAAIosH,KAAAA,WAA2BpyH,KAAK0L,SACzD+3C,EAAK3D,MAAM,CAAE4oB,QAAS,SACf2lD,GAAAA,SAAiBroH,EAAI,KAAIosH,KAAAA,WAA2BpyH,KAAK0L,SAChE+3C,EAAK3D,MAAM,CAAE4oB,QAAS,cACf2lD,GAAAA,SAAiBroH,EAAI,KAAIosH,KAAAA,WAA2BpyH,KAAK0L,SAChE+3C,EAAK3D,MAAM,CAAE4oB,QAAS,cACf2lD,GAAAA,SAAiBroH,EAAI,KAAIosH,KAAAA,WAA2BpyH,KAAK0L,UAChE+3C,EAAK3D,MAAM,CAAE4oB,QAAS,SAKP,MAAftwB,EAAM1rC,MAAiB2hH,GAAAA,SAAiBroH,EAAG,gBAAiBhG,KAAK0L,UAEjE+3C,EAAK3D,MAAM,CAAE4oB,QAAS,aAE1BjlB,EAAKkE,KAIT,OAFAlE,EAAKkE,KAEElE,GAGX6uE,GAAI/zH,UAAUm2H,kBAAoB,SAAStB,EAAY3vE,GACnDA,EAAKriD,EAAE,aAGP,MAAMuzH,EACAtG,GAAAA,SAAiBruH,KAAK2L,MAAMynH,GAAa,eAAgBpzH,KAAK0L,SAC9DkpH,EACAvG,GAAAA,SAAiBruH,KAAK2L,MAAMynH,GAAa,aAAcpzH,KAAK0L,SAElE,GAAIipH,EAAU,CACV,MAAME,EAAYxG,GAAAA,cAAsBsG,GAExClxE,EAAKriD,EAAE,UAAW,CACdqmD,MAAO,yCACPsjC,OAAQ8pC,EACRnhF,SAAU,uBAId+P,EAAK3D,MAAM,CAAEunB,QAAS,IACtB5jB,EAAKkE,UACF,GAAIitE,EAAS,CAChB,MAAMC,EAAYxG,GAAAA,aAAqBuG,GAEvCnxE,EAAKriD,EAAE,UAAW,CACdqmD,MAAO,yCACPsjC,OAAQ8pC,EAAU,GAClBnhF,SAAUmhF,EAAU,KAIpBA,EAAUt1H,OAAS,EACnBkkD,EAAK3D,MAAM,CAAEunB,QAASwtD,EAAU,KAEhCpxE,EAAK3D,MAAM,CAAEunB,QAAS,IAE1B5jB,EAAKkE,KAKH0mE,GAAAA,UACEruH,KAAK2L,MAAMynH,GACX,iBACApzH,KAAK0L,SAEA/I,SAAQiD,IACjB,MAAM+pH,EAActB,GAAAA,iBAAyBzoH,GAE7C+pH,EAAYloE,MAAQ,8BACpBhE,EAAKriD,EAAE,eAAeuF,EAAEgpH,EAAYA,oBAC7BA,EAAYA,YAEnB,MAAMmF,EACAzG,GAAAA,SACEruH,KAAK2L,MAAMynH,GACX,WACApzH,KAAK0L,SAETopH,IACAnF,EAAYoF,MAAQD,EAAU5uH,OAAO,IAEzCu9C,EAAK3D,MAAM6vE,GACXlsE,EAAKkE,QAET,MAAMqtE,EAAgB3G,GAAAA,UAAkBruH,KAAK2L,MAAMynH,GAAapzH,KAAK0L,SAEjEspH,IACAA,EAAcvtE,MAAQ,uCACtBhE,EAAK3D,MAAMk1E,GAIL3G,GAAAA,UACEruH,KAAK2L,MAAMynH,GACX,eACApzH,KAAK0L,SAEE/I,SAAQiD,IACnB,MAAM4tC,EAAY66E,GAAAA,kBAA0BzoH,GAExC5F,KAAK+yH,UACLv/E,EAAU/mC,GAAK,WAEnB,MAAMinC,EACAF,GAA2C,iBAAvBA,EAAUE,SAC1BF,EAAUE,SAAShuB,cACnB,GAEL1lB,KAAKgzH,sBACe,QAAbt/E,GAAmC,WAAbA,IAC1B1zC,KAAKizH,qBAAoC,QAAbv/E,GAGpC+P,EAAKriD,EAAE,YAAaoyC,GAAWmU,SAGvClE,EAAKkE,MAIT2qE,GAAI/zH,UAAUy1H,eAAiB,SAASZ,EAAY3vE,EAAMwxE,GAEhD5G,GAAAA,UACEruH,KAAK2L,MAAMynH,GACV,aAAY6B,KAEftyH,SAAQiD,IACV,MAAMsvH,EAAW7G,GAAAA,YAAoBzoH,GAEf,YAAlBsvH,EAAS11H,MACTikD,EAAKriD,EAAE,kBAAmB,CACtBqmD,MAAO,qCACPh+C,MAAOyrH,EAASvrH,OAAO,KAE3B85C,EAAKkE,OAELlE,EAAKriD,EAAE,UAAW,CACdqmD,MAAO,qCACPjoD,KAAM01H,EAAS11H,OAEf01H,EAASvrH,OAAOpK,OAAS,GACzBkkD,EAAK3D,MAAM,CAAE,QAAWo1E,EAASvrH,OAAO,KAE5C85C,EAAKkE,UAKjB2qE,GAAI/zH,UAAU42H,iBAAmB,SAAS1xE,EAAMwxE,GAC5C,IAAIxpH,EAAM,GACV,MAAM2pH,EACA3xE,EAAKn0C,KACH,gEAsBR,OApBI8lH,EAAsB71H,SACtBkM,GAAO,uBACH2pH,EAAsB1wE,KAAK,SAC3Bj5C,GAAO2pH,EAAsB1wE,KAAK,SAElCj5C,GAAO,IAEXA,GAAO,QAGcg4C,EAAKn0C,KAAK,wDAElB0E,MAAK,CAACk9F,EAAGt7D,KACtBnqC,GAAQ,aAAYwpH,KAAer/E,EAAG8P,aAAa,UAC/C9P,EAAG3sB,aAAa,aAChBxd,GAAQ,IAAGmqC,EAAG8P,aAAa,cAE/Bj6C,GAAO,UAGJA,GAIX6mH,GAAI/zH,UAAU82H,WAAa,SAAS3J,GAChC,MAAMvwE,EAAYr0C,KAAK8oB,MAGvB5vB,KAAKmwD,IACE,cAAMhV,yCAMb,MAAMm6E,EACArkB,EAAEya,GAAQp8G,KAAK,mDAEjBgmH,EAAO/1H,QACP+1H,EAAOthH,MAAK,CAACm0D,EAAK54D,KACd,MAAMgmH,EACAtkB,EAAE1hG,GACCD,KAAK,YACLjD,KAAI,CAAC6kG,EAAGhmG,IAAYA,EAAQw6C,aAAa,UACzCnnC,MAELg3G,EAASh2H,OAAS,IAClBS,KAAKmwD,KACG,WACA5gD,EAAMm2C,aAAa,cACZn2C,EAAMm2C,aAAa,WAC1B6vE,EAASvnH,KAAK,eAKlChO,KAAK0L,QAAU1L,KAAKmwD,IACpBu7D,EAAOp8G,KAAK,YAAY0E,MAAK,CAACk9F,EAAGhmG,KAC7B,MAAMlF,EAAIhG,KAAKw1H,aAAavkB,EAAE/lG,IAE9BlL,KAAK2L,MAAMzH,KAAK8B,MAWpBhG,KAAKmwD,IAAMnwD,KAAK0L,QAAU1L,KAAK2L,MAAMqC,KAAK,KAI9CskH,GAAI/zH,UAAUi3H,aAAe,SAAStqH,GAClC,MAAM8D,EAAO9D,EAAQoE,KAAK,gBACpBpK,EAAYgG,EAAQoE,KAAK,4DAC/B,IAAI7D,EAAM,GACV,MAAMovC,EAAO31C,EAAUoK,KACnB,4DAEE3D,EAAQ,CAAEA,MAAOqD,EAAK01C,KAAK,SAEjC/4C,KAAa,KAiEb,OAhEgC,aAA5BT,EAAQw5C,KAAK,aAEb/4C,EAAMe,KAAO,KAEbxH,EAAUoK,KAAK,qDAAqD/P,OACpEoM,EAAMm+B,MAAQ+Q,EAAKt7C,OAAS,gBAAkB,oBAE9CoM,EAAMm+B,MAAQ,oBAEd+Q,EAAKt7C,QACLkM,GAAQ,iBAAgBE,EAAMe,4CAC9BjB,GAAQ,eAAcovC,EAAK6J,KAAK,gBAChCj5C,GAAO,kCAEPE,EAAM+uC,IACA1rC,EACGM,KAAK,iBACLjD,KAAI,CAAC6kG,EAAG78D,IAAgBA,EAAYqR,aAAa,QACjDnnC,MACT9S,GAAQ,GAAE4iH,GAAAA,WAAmB1iH,UAGjCF,GAAO,uBACFovC,EAAKt7C,SACNkM,GAAO,+BAIPvG,EAAU3F,SACN2F,EAAUw/C,KAAK,WACfj5C,GAAQ,GAAE4iH,GAAAA,cAAsBnpH,EAAUw/C,KAAK,iBAE/Cx/C,EAAUw/C,KAAK,SACfj5C,GAAQ,GAAE4iH,GAAAA,YAAoBnpH,EAAUw/C,KAAK,eAEjDx/C,EAAUoK,KAAK,qDAAqD0E,MAAK,CAACk9F,EAAGye,KACzElkH,GAAQ,iBAAgBkkH,EAAYjqE,aAAa,UACjDj6C,GAAQ,IAAGwlG,EAAE0e,GAAa3rH,SAC1ByH,GAAO,OACHkkH,EAAY1mG,aAAa,WACzBxd,GAAQ,WAAUkkH,EAAYjqE,aAAa,oBAMvDxgD,EAAUoK,KAAK,cACV0E,MAAK,CAACk9F,EAAG19D,KACN,IAAIE,EAAWF,EAAUkS,aAAa,YAEtChS,EAC0B,iBAAbA,EAAwBA,EAAShuB,cAAgB,GAEzD1lB,KAAKgzH,sBACe,QAAbt/E,GAAmC,WAAbA,IAC1B1zC,KAAKizH,qBAAoC,QAAbv/E,IAEzB1zC,KAAK+yH,SACZv/E,EAAUmR,aAAa,KAAM,WAGjCl5C,GAAO4iH,GAAAA,oBAA4B76E,OAGnCtoC,EAAQw5C,KAAK,YACrB,IAAK,YACDj5C,GAAQ,KAAI2mH,KAAAA,eACZ,MACJ,IAAK,YACD3mH,GAAQ,KAAI2mH,KAAAA,eACZ,MACJ,IAAK,OACD3mH,GAAQ,KAAI2mH,KAAAA,eACZ,MACJ,IAAK,OACD3mH,GAAQ,KAAI2mH,KAAAA,eAGhB3mH,GAAQ,SAAQP,EAAQw5C,KAAK,cAMzB11C,EAAKM,KAAK,aAAa/P,SACvBkM,GAAO,kBAGXuD,EAAKM,KAAK,iBAAiB0E,MAAK,CAACk9F,EAAG78D,KAChC5oC,GAAQ,GAAE4iH,GAAAA,YAAoBh6E,SAC1B48D,EAAE58D,GAAa/kC,KAAK,cAAc/P,SAClCkM,GAAQ,UAAS4oC,EAAYqR,aAAa,SAC1Cj6C,GACOwlG,EAAE58D,GACA/kC,KAAK,cACLjD,KAAI,CAACopH,EAAIjgF,KACN,MAAMttC,EAAOstC,EAAUkQ,aAAa,QAEpC,OACKx9C,EAAQ,GAAEA,KAAU,IACfstC,EAAUkQ,aAAa,YAEpCnnC,MACAvQ,KAAK,MACdvC,GAAO,QAIXA,GAAOzL,KAAKm1H,iBAAiBlkB,EAAE58D,GAAcA,EAAYqR,aAAa,UAI1Ej6C,GAAOzL,KAAKm1H,iBAAiBnmH,EAAM,KAGnCA,EACKM,KAAK,8DACL0E,MAAK,CAACk9F,EAAGwkB,KACNjqH,GACQ,YAAWiqH,EAAOhwE,aAAa,SAC/BgwE,EAAOhwE,aAAa,gBAIpC12C,EACKM,KAAK,wDACL0E,MAAK,CAACk9F,EAAGggB,KACN,MAAM1hH,EAAY0hH,EAAUxrE,aAAa,aACnCl3C,EACAyiG,EAAEigB,GACC5hH,KAAK,WACLjD,KAAI,CAACopH,EAAI5iH,IAAWA,EAAO6yC,aAAa,UACxCnnC,MAEL/P,EAAMjP,SACNkM,GAAQ,gBAAe+D,KAAahB,EAAMR,KAAK,eAK3D,IAAI2nH,EAAc,GACdC,EAAiB,GAwCrB,OAtCA5mH,EACKM,KAAK,oDACL0E,MAAK,CAACk9F,EAAGr+F,KACN,MAAMvE,EAAOuE,EAAO6yC,aAAa,QACjC,IAAImwE,GAAe,EACfC,EAAY,GAEhB7kB,EAAEp+F,GACGvD,KAAK,cACL0E,MAAK,CAACyhH,EAAIjgF,KAAc,MACrB,MAAMttC,EAAOstC,EAAUkQ,aAAa,QACpC,IAAIj8C,EAAQ+rC,EAAUkQ,aAAa,SAEnCj8C,EAAQ4kH,GAAAA,mBAA2B5kH,GACnCqsH,GAAc,UAASxnH,KAAQpG,IAE3BuB,GAASA,EAAMlK,SACfu2H,GAAc,IAAGrsH,KAGrBqsH,GAAa,OAEb,UAAIrsH,SAAJ,OAAI,EAAO8sB,SAAS,kBAChBs/F,GAAe,MAIvBA,EACAF,GAAeG,EAEfF,GAAkBE,KAM9BrqH,GAAOmqH,EAAiBD,EAEjBlqH,GCrrBXmnH,GAAUr0H,UAAUw3H,YAAc,WAE9B,MAAMC,EAAWh2H,KAAK6yH,MAAMK,kBACtB+C,EAAej2H,KAAK8yH,SAASI,kBAC7BgD,EAAW,GAoFjB,OAlFA53H,OAAOmE,KAAKwzH,GAActzH,SAAQwzH,IAC9B,MAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhB/3H,OAAOmE,KAAK4zH,EAAY7nH,OAAO7L,SAAQ2L,MACe,IAA9ChQ,OAAOmE,KAAK2zH,EAAQ5nH,OAAOrJ,QAAQmJ,IAY5B+nH,EAAY7nH,MAAMF,GAAMonC,OACpB0gF,EAAQ5nH,MAAMF,GAAMonC,YAGcvpC,IADvBiqH,EAAQ5nH,MAAMF,GAAMonC,MAAMpmC,MAC5C1J,IAAkC,IAA1BA,EAAKT,QAAQ,iBAEoBgH,IADtBkqH,EAAY7nH,MAAMF,GAAMonC,MAAMpmC,MACjD1J,IAAkC,IAA1BA,EAAKT,QAAQ,cAfpB+wH,EAASC,KACVD,EAASC,GAAkB,CACvB/C,WAAYiD,EAAYjD,WACxBl4G,IAAKm7G,EAAYn7G,IACjB1M,MAAO,GACPa,WAAY,KAGpB6mH,EAASC,GAAgB3nH,MAAMF,GAAQ+nH,EAAY7nH,MAAMF,OAyBjE+nH,EAAYhnH,WAAW1M,SAAQ2zH,IAG3B,IAAIplE,GAAU,EAEd,IAAK,IAAI5xD,EAAI,EAAGA,EAAI82H,EAAQ/mH,WAAW9P,OAAQD,IAAK,CAChD,MAAMi3H,EAAcH,EAAQ/mH,WAAW/P,GAEvC,GAAIg3H,EAAe9mH,YAAc+mH,EAAY/mH,WACtCgjH,GAAY8D,EAAe9nH,MAAO+nH,EAAY/nH,OAAQ,CAEzD0iD,GAAU,EACV,OAIHA,IAIIglE,EAASC,KACVD,EAASC,GAAkB,CACvB/C,WAAYiD,EAAYjD,WACxBl4G,IAAKm7G,EAAYn7G,IACjB1M,MAAO,GACPa,WAAY,KAGpB6mH,EAASC,GAAgB9mH,WAAWnL,KAAKoyH,QAvE7CJ,EAASC,GAAkBE,KA4E5BH,GAMXtD,GAAUr0H,UAAUi1H,SAAW,SAASgD,GACpC,MAAMC,EAAgBz2H,KAAK+1H,cAE3B,IAAIW,GAAW,EA4Df,OA1DAp4H,OAAOmE,KAAKg0H,GAAe9zH,SAAQywH,IAC/BsD,GAAW,EACX,MAAM/qH,EAAQ8qH,EAAcrD,GAE5BoD,EAAOp1H,EAAE,UAAW,CAAE8G,KAAMyD,EAAMuP,MAElCs7G,EAAOp1H,EAAE,cACL,CAAEqmD,MAAO,6BACL97C,MAAOA,EAAMuP,MAKrB5c,OAAOmE,KAAKkJ,EAAM6C,OAAO7L,SAAQg0H,IAC7B,MAAMC,EAAYjrH,EAAM6C,MAAMmoH,GACxBzH,EAAY0H,EAAUlhF,MACtBy+E,EAAa9F,GAAAA,oBAA4Ba,GAE/CsH,EAAOp1H,EAAE,SAAU,CAAEqmD,MAAO,oCAC5B+uE,EAAO12E,MAAM,CACT53C,KAAMojH,GAAAA,+BAA8C6I,OAAahoH,EACjEmC,KAAMsoH,EAAUtoH,OAIpB,MAAMwC,EAAOu9G,GAAAA,mBAA2Ba,GAEpCp+G,IACA0lH,EAAOp1H,EAAE,aACTo1H,EAAO12E,MAAM,CAAE53C,KAAM,SACrBsuH,EAAO12E,MAAM,CAAEr2C,MAAOqH,IACtB0lH,EAAO7uE,MAGX6uE,EAAO7uE,QAIXh8C,EAAM0D,WAAW1M,SAAQuuH,IACjBA,EAAU1iH,MAAMjP,SAEhBi3H,EAAOp1H,EAAE,aAAc,CACnBoO,UAAW0hH,EAAU1hH,UACrBi4C,MAAO,oCAGXypE,EAAU1iH,MAAM7L,SAAQ2L,IACpBkoH,EAAOp1H,EAAE,SAAU,CAAEkN,KAAAA,IAChBq5C,QAET6uE,EAAO7uE,SAIf6uE,EAAO7uE,KACP6uE,EAAO7uE,QAGJ+uE,6BCnNX,MAAMtwH,IAASyB,EAAAA,EAAAA,yCAKA,MAAMgvH,GAIjBj4H,cACIoB,KAAK82H,OAAS/jH,KAAAA,MAAY/S,KAAK+2H,mBAAmB/zH,KAAKhD,MAAO,GAC9DA,KAAKg3H,UAAW,EAMpB3uF,QACIroC,KAAK82H,OAAOx8G,OAMhBy8G,mBAAmBr/G,EAAMu/G,GACrB,IACIv/G,EAAKu/G,GACP,MAAOzzH,GACL4C,GAAO5C,MAAO,gBAAeA,MAAAA,OAAhB,EAAgBA,EAAOuC,SACpCkxH,EAAiBzzH,IAqBzBU,KAAKwT,EAAMzD,GACHjU,KAAKg3H,SACL/iH,GAAYA,EAAS,IAAInO,MAAM,+BAInC9F,KAAK82H,OAAO5yH,KAAKwT,EAAMzD,GAO3BijH,WACIl3H,KAAKg3H,UAAW,kBC7DjB,MAAMG,GAAU,UAQVz3B,GAAS,SAOT03B,GAAQ,QCffhxH,IAASyB,EAAAA,EAAAA,4CAOA,MAAMwvH,WAAsB1vB,GAcvC/oG,YACQguD,EACA0qE,EACAzhB,EACAjiD,EACA2jE,EACAtnD,EACAunD,GACJ/3C,QACAz/E,KAAK4sD,IAAMA,EACX5sD,KAAKs3H,SAAWA,EAChBt3H,KAAK61G,UAAYA,EACjB71G,KAAK4zD,WAAaA,EAClB5zD,KAAKu3H,iBAAmBA,EACxBv3H,KAAKiwE,SAAWA,EAOhBjwE,KAAKw3H,YAAcA,EAMnBx3H,KAAKy3H,SAAU,EAKfz3H,KAAK03H,cAAgB,GAMrB13H,KAAK+5F,KAAO,KAOZ/5F,KAAK23H,gBAAkB,KAMvB33H,KAAKssB,MAAQ,KAMbtsB,KAAKm6F,IAAM,KAOXy9B,mBACA,OAAO53H,KAAKw3H,YAAcx3H,KAAKs3H,SAAWt3H,KAAK61G,UAO/CgiB,mBACA,OAAO73H,KAAKw3H,YAAcx3H,KAAK61G,UAAY71G,KAAKs3H,SAcpDnvC,WAAW4R,EAAMI,EAAK29B,EAAgBz1H,GAClC,GAAmB,OAAfrC,KAAKssB,MAAgB,CACrB,MAAMypF,EACC,kCAAiC/1G,KAAK4sD,oCAC3B5sD,KAAKssB,QAGvB,MADAlmB,GAAO5C,MAAMuyG,GACP,IAAIjwG,MAAMiwG,GAIpB/1G,KAAK+5F,KAAOA,EACZ/5F,KAAKm6F,IAAMA,EACXn6F,KAAK23H,gBAAkBG,EACvB93H,KAAKssB,MAAQyrG,GACb/3H,KAAKg4H,aAAa31H,GAStB21H,aAAa31H,IAWb41H,iBAAiB1C,IAQjB3/F,WACI,OAAO51B,KAAKssB,MAUhB4rG,WAAW3C,IAOX4C,cAAc5C,IAiBd6C,UAAUv8D,EAASw8D,EAASh2H,IAW5Bi2H,YAAY5M,EAAQ7vD,EAASw8D,IAK7BE,mBACI,OAAOv4H,KAAKw3H,YAAcx3H,KAAKs3H,SAAWt3H,KAAK61G,WCjNvD,SAIsC,iDCwBhCzvG,IAASyB,EAAAA,EAAAA,8CAOT2wH,GAAa,IAkDJ,MAAMC,WAAwBpB,GASjB,yBAACqB,GACrB,MAAMC,EAAgBD,EAAeppH,KAAK,0BAE1C,GAAIqpH,EAAcp5H,OAAQ,CACtB,MAAMmpE,EAAUiwD,EAAc,GAAGjzE,aAAa,WAE9C,GAAgB,SAAZgjB,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,EAIf,OAAO,KASe,2BAACgwD,GACvB,MAAME,EAAoBF,EAAeppH,KAAK,2CAE9C,OAAOspH,EAAkBr5H,OAASwL,OAAO6tH,EAAkB50H,QAAU,KAqBzEpF,YACQguD,EACA0qE,EACAzhB,EACAjiD,EACA2jE,EACAtnD,EACAkZ,EACAquC,GACJ/3C,MACI7yB,EACA0qE,EACAzhB,EAAWjiD,EAAY2jE,EAAkBtnD,EAAUunD,GAWvDx3H,KAAK64H,iBAAmB,KAQxB74H,KAAK84H,wBAAqB3sH,EAQ1BnM,KAAK+4H,wBAAqB5sH,EAQ1BnM,KAAKg5H,6BAA+B,KAYpCh5H,KAAKi5H,2BAA6B,KAOlCj5H,KAAKk5H,6BAA0B/sH,EAgB/BnM,KAAKm5H,mBAAoB,EAYzBn5H,KAAKo5H,oBAAqB,EAS1Bp5H,KAAKq5H,oBAAqB,EAE1Br5H,KAAKs5H,kBAAmB,EACxBt5H,KAAKu5H,QAAS,EAQdv5H,KAAKmpF,MAAQA,EAObnpF,KAAKw5H,8BAA2BrtH,EAOhCnM,KAAKy5H,kBAAoB,IAAI5C,GAO7B72H,KAAK05H,cAAe,EAQpB15H,KAAK25H,2BAAwBxtH,EAE7BnM,KAAK45H,eAAiB,GACtB55H,KAAK45H,eAAe11H,KAChB0vD,EAAW5mC,iBACPspF,GAAeC,OAAOC,oBACtBx2G,KAAK65H,oBAAoB72H,KAAKhD,QAGtCA,KAAK85H,iDAA8C3tH,EAUvD4tH,kBACI,OAAO/5H,KAAKssB,QAAUyrG,GAO1BC,aAAa31H,GAAS,UAClBrC,KAAK+yH,QAAUnxC,QAAQv/E,EAAQ0wH,SAC/B/yH,KAAKs5H,kBAAmB,EACxBt5H,KAAKqC,QAAUA,EAMfrC,KAAKg6H,aAAc,EAMnBh6H,KAAKi6H,WAAY,EACjBj6H,KAAKk6H,oBAAsBt4C,QAAQv/E,EAAQ63H,qBAC3Cl6H,KAAKm6H,oBAAsBv4C,QAAQv/E,EAAQ83H,qBAE3C,MAAMC,EAAY,CAAEza,WAAYt9G,EAAQs9G,YAqBxC,GAnBIt9G,EAAQg4H,cACRD,EAAUE,SApSI,KAsSlBF,EAAUG,uBAAwB,EAClCH,EAAUI,wBAA0Bn4H,EAAQm4H,wBAC5CJ,EAAUK,aAAep4H,EAAQo4H,aACjCL,EAAUM,eAAiBr4H,EAAQq4H,eACnCN,EAAUtN,aAAezqH,EAAQyqH,aACjCsN,EAAUvpH,gBAAkB7Q,KAAK6Q,gBAC3ByU,GAAQo8C,wBACFp8C,GAAQ8sD,aACL9sD,GAAQm8D,kBACPn8D,GAAQk8D,mBAGLxhF,KAAKmpF,MAHR,oBAIE9mF,EAAQ+wF,WAJV,aAIE,EAAaunC,6BAJf,mBAKEt4H,EAAQs4H,6BALV,WAOZ36H,KAAKmpF,MAAO,CAEZixC,EAAUQ,kBAAmB,EAC7B,MAAMC,EAAqB76H,KAAK86H,2BAA2Bz4H,QAEzB,IAAvBw4H,IACPT,EAAUS,mBAAqBA,OAEhC,SAEHT,EAAUQ,iBACJv4H,EAAQu4H,kBACFv4H,EAAQ04H,aAAe14H,EAAQ24H,aAC/B34H,EAAQo4H,cAAgBp4H,EAAQo4H,aAAaQ,iBAAmBjJ,GAAcr3F,KAI1Fy/F,EAAUG,sBAAwBH,EAAUQ,oBACa,iBAAhD,UAAOv4H,EAAQirH,+BAAf,aAAO,EAAiCluG,OACtC,UAAA/c,EAAQirH,+BAAR,eAAiCluG,KRxWnB,GQ4WzBi2E,GAAWe,UAAUhS,uBAAuB,CAAEm2C,sBAAuBH,EAAUG,wBAG/El4H,EAAQ88F,cACRi7B,EAAUj7B,aAAc,GAG5Bn/F,KAAKqmF,eACCrmF,KAAKm6F,IAAI+gC,qBACHl7H,KAAK23H,gBACL33H,KAAKiwE,SACLjwE,KAAKmpF,MACLixC,GAEZp6H,KAAKqmF,eAAe80C,eAAiBC,IACjC,IAAKA,EAMD,OAIJ,MAAM5nF,EAAY4nF,EAAG5nF,UACf5jB,EAAMnzB,OAAOqhG,YAAYluE,MAE/B,GAAI4jB,EAAW,CAC6B,OAApCxzC,KAAKi5H,6BACLj5H,KAAKi5H,2BAA6BrpG,GAItC,IAAI8jB,EAAWF,EAAUE,SAEzB,GAAwB,iBAAbA,EAEP,GADAA,EAAWA,EAAShuB,cACH,QAAbguB,GAAmC,WAAbA,GACtB,GAAI1zC,KAAKm6H,oBACL,YAED,GAAiB,QAAbzmF,GACH1zC,KAAKk6H,oBACL,YAIJl6H,KAAKq5H,qBAEbhkC,GAAWiE,cACPjc,GACA,CACIg+C,MAAO,YACP5xH,MAAOmmB,EAAM5vB,KAAKi5H,2BAClB7lC,IAAKpzF,KAAKmpF,MACVmyC,UAAWt7H,KAAKw3H,cAExBx3H,KAAKq5H,oBAAqB,GAE9Br5H,KAAKu7H,iBAAiB/nF,IAU1BxzC,KAAKqmF,eAAem1C,uBAAyB,KACE,WAAvCx7H,KAAKqmF,eAAenb,eACpBlrE,KAAKi6H,WAAY,EAC6B,WAAvCj6H,KAAKqmF,eAAenb,gBACgB,WAAxClrE,KAAKqmF,eAAe9S,iBACvBvzE,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,iBAA6Bj6F,OAUjEA,KAAKqmF,eAAeo1C,2BAA6B,KAC7C,MAAM7rG,EAAMnzB,OAAOqhG,YAAYluE,MAC/B,IAAI8rG,GAAW,EAuBf,OArBK17H,KAAKmpF,QACNnpF,KAAK+5F,KAAKmB,gBACL,aAAYl7F,KAAKqmF,eAAenT,sBAC/BtjD,GAEVxpB,GAAOD,IAAK,cAAanG,KAAKqmF,eAAenT,sBAAsBlzE,KAAKmpF,MAAQ,MAAQ,WAAYv5D,GAEpGylE,GAAWiE,czDjQU,oByDmQjB,CACIlG,IAAKpzF,KAAKmpF,MACV78D,MAAOtsB,KAAKqmF,eAAenT,mBAC3B,gBAAmBlzE,KAAKqmF,eAAenb,eACvCywD,UAAW37H,KAAKg6H,YAChBvwH,MAAOmmB,IAGf5vB,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,6BACAj6F,KACAA,KAAKqmF,eAAenT,oBAChBlzE,KAAKqmF,eAAenT,oBAC5B,IAAK,WACDlzE,KAAKg5H,6BAA+BppG,EACpC,MACJ,IAAK,YAGD,GAA2C,WAAvC5vB,KAAKqmF,eAAenb,eAA6B,CACjDwwD,GAAW,EACX,MAAME,GAA2B57H,KAAKqC,QAAQw5H,kBACvC77H,KAAK+5F,KAAKusB,8BAEbtmH,KAAKg6H,aAAe4B,IACpB57H,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,oBAAgCj6F,MAW5C,IAAKA,KAAK05H,eACF15H,KAAKi6H,WACFyB,GACC17H,KAAK6Q,iBAAmB7Q,KAAKw3H,aAAelyG,GAAQk8D,mBAAqB,CAEjF6T,GAAWiE,cACPjc,GACA,CACIg+C,MAAO,WACP5xH,MAAOmmB,EAAM5vB,KAAKg5H,6BAClB5lC,IAAKpzF,KAAKmpF,MACVmyC,UAAWt7H,KAAKw3H,cAMxB,MAAMsE,EACA7qH,KAAKoO,IACHrf,KAAKg5H,6BACLh5H,KAAKi5H,4BAEbj5H,KAAK25H,sBAAwB/pG,EAAMksG,EAEnCzmC,GAAWiE,cACPjc,GACA,CACIg+C,MAAO,gBACP5xH,MAAOzJ,KAAK25H,sBACZvmC,IAAKpzF,KAAKmpF,MACVmyC,UAAWt7H,KAAKw3H,cAGxBx3H,KAAK05H,cAAe,EACpB15H,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,uBAAmCj6F,MAE3CA,KAAKg6H,aAAc,EACnB,MACJ,IAAK,eACDh6H,KAAKg6H,aAAc,EAIfh6H,KAAKi6H,WACLj6H,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,uBAAmCj6F,MAE3C,MACJ,IAAK,SACDA,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,sBAAkCj6F,QAU9CA,KAAKqmF,eAAe01C,wBAA0B,KAC1C,MAAMC,EAAWh8H,KAAKqmF,eAAenT,mBAGhC,WADGlzE,KAAKqmF,eAAe9S,iBAMP,iBAAbyoD,GACAh8H,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,sBAAkCj6F,OAUlDA,KAAKqmF,eAAe41C,oBAAsB,KACtC,MAAM3vG,EAAQtsB,KAAKqmF,eAAenb,eAC5BgxD,EAAoBl8H,KAAKqmF,eAAe61C,kBAE9C,GAAIl8H,KAAK6Q,kBACD7Q,KAAKmpF,OACI,WAAV78D,GACA4vG,GACiC,iBAA1BA,EAAkBzwH,IAAkB,CAC9CrF,GAAO+L,KAAM,GAAEnS,qCAAqCA,KAAKqmF,kBAEzD,MAAM81C,EAAelF,IACjB,MAAMmF,EAAS,IAAI9J,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAE5DzL,KAAKs8H,eACAn4D,MAAK,IAAMnkE,KAAKqmF,eAAek2C,kCAC/Bp4D,MAAK,KACF,MAAMq4D,EAAS,IAAIlK,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAE5DzL,KAAKy8H,mBAAmBL,EAAQI,MAEnCr4D,MAAK,IAAM8yD,MAAoBzzH,GAASyzH,EAAiBzzH,MAGlExD,KAAKy5H,kBAAkBv1H,KACnBi4H,GACA34H,IACQA,EACA4C,GAAO5C,MAAO,GAAExD,iCAAkCwD,GAElD4C,GAAO4gD,MAAO,GAAEhnD,+CAYxC08H,8BACI,GAAI18H,KAAKmpF,MACL,OAAOnpF,KAAKw5H,yBAWpB+B,iBAAiB/nF,GACb,MAAMmpF,EAAW,IAAIrK,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAE9D,GAAI+nC,GAAaA,EAAUA,UAAUj0C,SAAWS,KAAKs5H,iBAAkB,CACnE,MAAMsD,EAAMvO,GAAAA,UAAkBsO,EAAShxH,MAAM6nC,EAAUm+B,eAAgBgrD,EAASjxH,SAC1EmxH,EAAQxO,GAAAA,kBAA0B76E,EAAUA,WAElD,IAAMopF,IAAOC,EAAQ,CACjB,MAAMC,EAAgB,6BAKtB,OAHAvkG,KAAAA,iBAAsC,IAAIzyB,MAAMg3H,SAChD12H,GAAO5C,MAAMs5H,GAIjBF,EAAIn1E,MAAQ,uCAERznD,KAAKy3H,SAC6B,IAA9Bz3H,KAAK03H,cAAcn4H,QACnB+E,YAAW,KAC2B,IAA9BtE,KAAK03H,cAAcn4H,SAGvBS,KAAK+8H,kBAAkB/8H,KAAK03H,eAC5B13H,KAAK03H,cAAgB,MA/mBV,KAknBnB13H,KAAK03H,cAAcxzH,KAAKsvC,IAExBxzC,KAAK+8H,kBAAkB,CAAEvpF,SAG7BptC,GAAOD,IAAK,GAAEnG,yCAGdA,KAAKs5H,kBAAmB,EAUhCyD,kBAAkBzwH,GACd,IAAKtM,KAAK+5H,gBAAgB,qBAEtB,OAGJ3zH,GAAOD,IAAK,GAAEnG,0BAA0BuD,KAAKF,UAAUiJ,MACvD,MAAM0jH,GAAO/vE,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UACxBr2G,KAAM,QACL4B,EAAE,SAAU,CAAEqmD,MAAO,oBAClB34C,OAAQ,iBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAEZ+vE,EAAW,IAAIrK,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAE9D,IAAK,IAAIyP,EAAM,EAAGA,EAAMyhH,EAAShxH,MAAMpM,OAAQ2b,IAAO,CAClD,MAAM8hH,EAAQ1wH,EAAWV,QAAOmC,GAAMA,EAAG4jE,gBAAkBz2D,IACrDk9B,EACAi2E,GAAAA,WAAmBsO,EAAShxH,MAAMuP,GAAKzd,MAAM,QAAQ,IAE3D,GAAIu/H,EAAMz9H,OAAS,EAAG,CAClB,MAAMq9H,EACAvO,GAAAA,UAAkBsO,EAAShxH,MAAMuP,GAAMyhH,EAASjxH,SAEtDkxH,EAAIn1E,MAAQ,uCACZuoE,EAAK5uH,EAAE,UAAW,CACduyH,QAAS3zH,KAAK43H,eAAiB53H,KAAKs3H,SAC9B,YAAc,YACpBpvH,KAAM80H,EAAM,GAAGtrD,OAASsrD,EAAM,GAAGtrD,OAASt5B,EAAMzsC,QACjDvK,EAAE,YAAaw7H,GAClB,IAAK,IAAIt9H,EAAI,EAAGA,EAAI09H,EAAMz9H,OAAQD,IAAK,CACnC,MAAMk0C,EACA66E,GAAAA,kBAA0B2O,EAAM19H,GAAGk0C,WAIrCxzC,KAAK+yH,UACLv/E,EAAU/mC,GAAK,WAEnBujH,EAAK5uH,EAAE,YAAaoyC,GAAWmU,KAInC,MAAMs1E,EACA5O,GAAAA,SACEsO,EAAShxH,MAAMuP,GACf,iBAAkByhH,EAASjxH,SAEnC,GAAIuxH,EAAiB,CACjB,MAAM1/G,EAAM8wG,GAAAA,iBAAyB4O,GAErC1/G,EAAI2/G,UAAW,EACflN,EAAK5uH,EACD,cACA,CAAEqmD,MAAO,gCACR9gD,EAAE4W,EAAIoyG,oBACJpyG,EAAIoyG,YACXK,EAAKlwE,MAAMviC,GACXyyG,EAAKroE,KAETqoE,EAAKroE,KACLqoE,EAAKroE,MAOb3nD,KAAK4zD,WAAWtF,OACZ0hE,EAAM,KAAMhwH,KAAKm9H,sBAAsBnN,GAAOwI,IAUtD4E,4BACI,MAAMC,GACAp9E,EAAAA,GAAAA,KAAI,CACF6b,GAAI97D,KAAK61G,UACTr2G,KAAM,QACT4B,EAAE,SAAU,CAAEqmD,MAAO,oBAClB34C,OAAQ,eACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MACbxrD,EAAE,YAAa,CAAEqmD,MAAO,oCACxB9gD,EAAE,UACFghD,KAEL3nD,KAAK64H,kBACEwE,EAAYj8H,EACX,iBAAkB,CACdqmD,MAAO,kCACPzgD,GAAIhH,KAAK64H,mBAGrB74H,KAAK4zD,WAAW+hD,QACZ0nB,EAAa,CAMTtvE,QAAS,KAEZogB,MAAMnuE,KAAKm9H,sBAAsBE,IAM1CpF,iBAAiBx0E,GACb,GAA2C,WAAvCzjD,KAAKqmF,eAAenb,eAGpB,YAFA9kE,GAAO6lB,KAAM,GAAEjsB,uDAKnB,MAAMs9H,EAAgB,GAEtB75E,EAAKn0C,KAAK,gCACL0E,MAAK,CAACm0D,EAAK30B,KACR,IAAI5tC,EAAOyoH,GAAAA,oBAA4B76E,GAEvC5tC,EAAOA,EAAKsH,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,MAAMqwH,EAAe,IAAI1xD,gBAAgB,CACrC8F,cAAe,EAOfD,OAAQ,GACRl+B,UAAW5tC,IAGf03H,EAAcp5H,KAAKq5H,MAGtBD,EAAc/9H,QAsBnB6G,GAAO4gD,MAAO,GAAEhnD,oBAAoBs9H,EAAc/9H,+BAClDS,KAAKy5H,kBAAkBv1H,MAbF+yH,IACjB,IAAK,MAAMuG,KAAgBF,EACvBt9H,KAAKqmF,eAAe9W,gBAAgBiuD,GAC/Br5D,MACG,IAAM/9D,GAAO4gD,MAAO,GAAEhnD,8BACtBoU,GAAOhO,GAAO5C,MAAO,GAAExD,+BAAgCoU,KAGnE6iH,IACA7wH,GAAO4gD,MAAO,GAAEhnD,yCAlBhBoG,GAAO5C,MAAO,GAAExD,kCAAmCyjD,EAAK,IAAMA,EAAK,GAAGg6E,WA6B9EC,aAAanI,GAEHtkB,EAAEskB,GAAUjmH,KACV,gEAGF0E,MAAK,CAAC1U,EAAGq+H,KACX,MAAMrvH,EAAOvD,OAAO4yH,EAAYj4E,aAAa,SAE7C,GAAI1lD,KAAKmpF,MAELnpF,KAAK23H,gBAAgBiG,aACjBtvH,EAAMyxC,GAAAA,QAAAA,mBAA2B//C,KAAK61G,gBACvC,CACH,GAAIyV,GAAAA,gCAEIqS,EAAY10G,aAAa,QAAS,CAClC,MAAMkrG,EAAawJ,EAAYj4E,aAAa,QAE5C1lD,KAAK23H,gBAAgBkG,mBAAmBvvH,EAAM6lH,GAGtDljB,EAAE0sB,GACGruH,KAAK,gDACL0E,MAAK,CAAC8pH,EAAIC,KACP,MAAM3S,EAAQ2S,EAAgBr4E,aAAa,SAt0BnE,IAAuBs4E,EAw0BK5S,GAASA,EAAM7rH,SACX4qB,MAAM7b,IAASA,EAAO,EACtBlI,GAAO6lB,KAAM,GAAEjsB,qBAAqBsO,wBAA2B88G,KAE/DprH,KAAK23H,gBAAgBiG,aACjBtvH,GA70Bb0vH,EA80B2B5S,EA70BvCrrE,GAAAA,QAAAA,mBAA2Bi+E,IAAoBA,YA01BtDC,uBACQj+H,KAAKqmF,eACLrmF,KAAKqmF,eAAe43C,uBAEpB73H,GAAO5C,MAAO,GAAExD,6DAOxBk+H,0BACI,OAAOl+H,KAAKqmF,eAAe63C,0BAuB/B5F,YAAY6F,EAAatiE,EAASw8D,EAASruB,GACvChqG,KAAKo+H,oBACDD,GACA,KAIIn+H,KAAKq+H,mBAAkB,KACnBxiE,IAEA77D,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,eAA2Bj6F,SAE3DwD,IACI60H,EAAQ70H,GAERxD,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,qBAAiCj6F,KAAMwD,QAG3E60H,EACAruB,GAWR8d,SAAyB,IAAlB9d,EAAkB,uDAAJ,GACjB,IAAKhqG,KAAKw3H,YACN,MAAM,IAAI1xH,MAAM,+CAoBpBM,GAAO4gD,MAAO,GAAEhnD,2BAChBA,KAAKy5H,kBAAkBv1H,MAnBF+yH,IACjB,MAAMqH,EAAY,GAElB,IAAK,MAAMC,KAAcv0B,EACrBs0B,EAAUp6H,KAAKlE,KAAKqmF,eAAe30D,SAAS6sG,EAAYv+H,KAAKw3H,cAGjEhtG,QAAQ3T,IAAIynH,GACPn6D,MAAK,IAAMnkE,KAAKqmF,eAAe7X,YAAYxuE,KAAKu3H,oBAChDpzD,MAAKq6D,GAAYx+H,KAAKqmF,eAAe7a,oBAAoBgzD,KACzDr6D,MAAK,KAGFnkE,KAAKy+H,oBAAoBz+H,KAAKqmF,eAAeg2C,iBAAiB5wH,QAEjE04D,MAAK,IAAM8yD,MAAoBzzH,GAASyzH,EAAiBzzH,QAM9DA,IACQA,EACA4C,GAAO5C,MAAO,GAAExD,oBAAqBwD,GAErC4C,GAAO4gD,MAAO,GAAEhnD,gCAehCy+H,oBAAoBD,GAChB,IAAIn0G,GAAO41B,EAAAA,GAAAA,KAAI,CACX6b,GAAI97D,KAAK61G,UACTr2G,KAAM,QACP4B,EAAE,SAAU,CACXqmD,MAAO,oBACP34C,OAAQ,mBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAGd,IAAI0lE,GAAIkM,GAAUhL,SACdnpG,EACArqB,KAAKw3H,YAAc,YAAc,aACrCntG,EAAOA,EAAK68B,OACZ9gD,GAAO4gD,MAAO,GAAEhnD,0BAA2BqqB,GAC3CrqB,KAAK4zD,WAAWtF,OAAOjkC,GACnB,KACIjkB,GAAO+L,KAAM,GAAEnS,6CAEnBwD,IACI4C,GAAO5C,MAAO,GAAExD,gCAAiCwD,KAErDg1H,IAORkG,UAAUC,GACN,IAAK3+H,KAAKw3H,YACN,MAAM,IAAI1xH,MAAM,oDAEpB9F,KAAKo+H,oBACDO,GACA,KAEI,GADAv4H,GAAO+L,KAAM,GAAEnS,8BACXA,KAAK6Q,iBAAmByU,GAAQk8D,kBAAmB,CAGnD,MAAMo9C,EAAY5+H,KAAKqmF,eAAe61C,kBAAkBzwH,IAClDywH,EAAoB,IAAIvpH,sBAAsB,CAChDnT,KAAM,QACNiM,IAAKmzH,IAGT5+H,KAAK6+H,sBAAsB3C,OAGnC14H,IACI4C,GAAO5C,MAAO,GAAExD,0BAA2BwD,MAmBvD46H,oBAAoBU,EAAqBjjE,EAASw8D,GAA2B,IAAlBruB,EAAkB,uDAAJ,GA+DrE5jG,GAAO4gD,MAAO,GAAEhnD,wCAChBA,KAAKy5H,kBAAkBv1H,MA/DF+yH,IACjB,MAAMqH,EAAY,GAElB,IAAK,MAAM1tG,KAASo5E,EAChBs0B,EAAUp6H,KAAKlE,KAAKqmF,eAAe30D,SAASd,EAAO5wB,KAAKw3H,cAG5D,MAAMuH,EACA/+H,KAAKg/H,yBAAyBF,GAC9BG,EACAj/H,KAAKqmF,eAAeg2C,iBAAiB5wH,IAMrCyzH,EAHAjuB,EAAE6tB,GACCxvH,KAAK,4DAEwBo1C,KAAK,MAEvCw6E,IAAoBl/H,KAAK64H,mBACzB74H,KAAK64H,iBAAmBqG,GAG5B10G,QAAQ3T,IAAIynH,GACPn6D,MAAK,IAAMnkE,KAAKs8H,aAAayC,EAAa5uE,OAC1CgU,MAAK,KA2BF,GA1BInkE,KAAKssB,QAAUyrG,KACf/3H,KAAKssB,MAAQyrG,IAeT/3H,KAAKmpF,OACAnpF,KAAKm5H,oBAAqBn5H,KAAKk5H,yBACpCl5H,KAAKm/H,qBAQTF,EAAa,CACb,MAAMG,EACA,IAAI9M,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAEnDzL,KAAKy8H,mBACD,IAAInK,GAAI2M,GAAcG,OAGjCj7D,MAAK,IAAM8yD,MAAoBzzH,GAASyzH,EAAiBzzH,QAM9DA,IACQA,GACA4C,GAAO5C,MAAO,GAAExD,yCAAyCwD,KACzD60H,EAAQ70H,KAER4C,GAAO4gD,MAAO,GAAEhnD,sCAChB67D,QAYhBwjE,iBAAkD,IAAnCC,EAAmC,uDAAvB,KAAMC,EAAiB,uDAAN,KACxC,MAAMC,EAAUx/H,KAAKqmF,eAAe63C,0BAEpC,GAAIl+H,KAAK+5H,mBAAqBuF,IAAcE,EAAS,CACjDp5H,GAAO+L,KAAM,GAAEnS,mCAAmCw/H,QAAcF,KAChEt/H,KAAKqmF,eAAeg5C,eAAeC,EAAWC,GAG9C,MAAMpD,EAAelF,IACjBj3H,KAAKs8H,eAAen4D,MAChB,KACI/9D,GAAO4gD,MAAO,GAAEhnD,oCAETi3H,OACRzzH,IACC4C,GAAO5C,MAAO,GAAExD,oCAAoCwD,KAE7CyzH,EAAiBzzH,OAIpC4C,GAAO4gD,MAAO,GAAEhnD,mCAGhBA,KAAKy5H,kBAAkBv1H,KAAKi4H,IAcpCsD,iBAAiBC,EAAiB7jE,EAASw8D,GACvC,GAAIr4H,KAAKqC,QAAQs9H,mBAAoB,CACjC,MAAMl0H,EAAM,IAAI6mH,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAKzD,OAHAzL,KAAK4/H,oBAAoBn0H,EAAKowD,EAASw8D,QACvCr4H,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,qBAAiCj6F,MAIjEA,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,eAA2Bj6F,MAMvD,MAAM6/H,EAAgBH,EAAgBI,QAEtCJ,EACKpwH,KAAK,yBACLo1C,KAAK,UAAW,YAQrBg7E,EACKpwH,KAAK,+BACLu2G,SACL6Z,EACKpwH,KAAK,mCACLu2G,SAML,MAAMka,EAAiBL,EAAgBpwH,KAAK,kCAE5CywH,EAAer7E,KAAK,OAAQ,SAC5Bq7E,EAAe/7H,KAAK,+DAGpBhE,KAAKo+H,oBACDsB,GACA,KAEI1/H,KAAKo+H,oBACDyB,GACA,KACI,MAAMlD,EACA,IAAIrK,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAEnDzL,KAAK4/H,oBAAoBjD,EAAU9gE,EAASw8D,GAE5Cr4H,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,oBACAj6F,KACA6/H,KAERxH,KAERA,GAYRgG,kBAAkBxiE,EAASw8D,GAGvB,MAAMsE,EAAW,IAAIrK,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KACxDu0H,GAAS//E,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UAC1Br2G,KAAM,QACL4B,EAAE,SAAU,CAAEqmD,MAAO,oBAClB34C,OAAQ,iBACRwsH,UAAWt7H,KAAK43H,aAChBqI,UAAWjgI,KAAK63H,aAChBjrE,IAAK5sD,KAAK4sD,MAEd5sD,KAAKm6H,sBACLwC,EAAS3J,qBAAsB,GAE/BhzH,KAAKk6H,sBACLyC,EAAS1J,qBAAsB,GAE/BjzH,KAAK+yH,UACL4J,EAAS5J,SAAU,GAEvB4J,EAASnJ,SACLwM,EACAhgI,KAAK43H,eAAiB53H,KAAKs3H,SAAW,YAAc,aAExDlxH,GAAO+L,KAAM,GAAEnS,+BACfoG,GAAO4gD,MAAMg5E,EAAO94E,QACpBlnD,KAAK4zD,WAAWtF,OAAO0xE,EACnBnkE,EACA77D,KAAKm9H,sBAAsB6C,GAAQx8H,IAC/B60H,EAAQ70H,GAIRxD,KAAK+5F,KAAKlN,aAAa/gE,KACnBmuE,KAAAA,uBAAmCj6F,SAE3Cw4H,IA4BR2G,oBACI,MAAMe,EAAiBlgI,KAAKk5H,wBACtBxwD,EAAU1oE,KAAKm5H,kBAAoB,OAAS,OAElD,IAAIgH,GACElgF,EAAAA,GAAAA,KAAI,CACF6b,GAAI97D,KAAK61G,UACTr2G,KAAM,QAEL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,iBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAEbxrD,EAAE,UAAW,CACV8G,KAAM,QACNwgE,QAAAA,SAGkB,IAAnBw3D,IACPC,EAAgBA,EACX/+H,EAAE,mBAAoB,CAAEqmD,MAAO,mCAC/B9gD,EAAEu5H,IAGX95H,GAAO+L,KAAM,GAAEnS,+CAA+C0oE,wBAA8Bw3D,KAC5F95H,GAAO4gD,MAAMm5E,EAAcj5E,QAE3BlnD,KAAK4zD,WAAWtF,OACZ6xE,EACA,KACAngI,KAAKm9H,sBAAsBgD,GAC3B3H,IASR4H,2BAA2BF,GACvB95H,GAAO+L,KAAM,GAAEnS,uDAAuDkgI,KAEtElgI,KAAKk5H,wBAA0BgH,EAE3BlgI,KAAKmpF,MAGDnpF,KAAKssB,QAAUyrG,IACf/3H,KAAKm/H,oBAGTn/H,KAAKm6F,IAAIimC,2BAA2BF,GAc5CN,oBAAoBjD,EAAU9gE,EAASw8D,GACnC,MAAMgI,GAAkBpgF,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UACnCr2G,KAAM,QACL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,mBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAGlB+vE,EAAShxH,MAAMhJ,SAAQ,CAAC29H,EAAYn4D,KAChC,MAAM/vB,EAAQi2E,GAAAA,WAAmBiS,EAAW7iI,MAAM,QAAQ,IAE1D4iI,EAAgBj/H,EAAE,UACd,CACIuyH,QACI3zH,KAAK43H,eAAiB53H,KAAKs3H,SACrB,YACA,YACVpvH,KAAMkwC,EAAMzsC,QAGpBgxH,EAASjI,kBAAkBvsD,EAAKk4D,GAChCA,EAAgB14E,QAGpBvhD,GAAO+L,KAAM,GAAEnS,iCACfoG,GAAO4gD,MAAMq5E,EAAgBn5E,QAE7BlnD,KAAK4zD,WAAWtF,OAAO+xE,EACnBxkE,EACA77D,KAAKm9H,sBAAsBkD,EAAiBhI,GAC5CG,IAcR+H,oBAAoB1kE,EAASw8D,GAGzB,MAAMmI,GAAkBvgF,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UACnCr2G,KAAM,QACL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,mBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAGlBxmD,GAAO+L,KAAM,GAAEnS,mCACfoG,GAAO4gD,MAAMw5E,EAAgBt5E,QAE7BlnD,KAAK4zD,WAAWtF,OAAOkyE,EACnB3kE,EACA77D,KAAKm9H,sBAAsBqD,EAAiBnI,GAC5CG,IASRiI,yBAAyBP,GACrB,GAAIlgI,KAAK+5H,kBAAmB,CAKxB,GAJA3zH,GAAO+L,KAAM,GAAEnS,kCAAkCkgI,MAI5ClgI,KAAKmpF,OAAS7jE,GAAQ07D,sBAA6C,IAAnBk/C,EAAgC,CACjF,MAAMQ,EAAcR,EAAiB,EAErC,OAAOlgI,KAAK2gI,wBAAuB,EAAMD,GAO7C,YAJ0C,IAAnBR,EACjBlgI,KAAKqmF,eAAek2C,gCACpBv8H,KAAKqmF,eAAeu6C,0BAA0BV,GAKxD,OAAO11G,QAAQC,UAMnB2tG,UAAUv8D,EAASw8D,EAASh2H,GACxB,GAAIrC,KAAKssB,QAAUyrG,GAAnB,CAIA,IAAK11H,GAAWu/E,QAAQv/E,EAAQw+H,sBAAuB,CACnD,MAAMC,GACA7gF,EAAAA,GAAAA,KAAI,CACF6b,GAAI97D,KAAK61G,UACTr2G,KAAM,QAEL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,oBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAEbxrD,EAAE,UACFA,EAAGiB,GAAWA,EAAQi2B,QAAW,WACjCqvB,KAELtlD,GAAWA,EAAQ0+H,kBACnBD,EACK1/H,EAAE,QACFuF,EAAEtE,EAAQ0+H,mBACVp5E,KACAA,KAELm5E,EAAiBn5E,KAGrB3nD,KAAK64H,kBACEiI,EAAiB1/H,EAChB,iBAAkB,CACdqmD,MAAO,kCACPzgD,GAAIhH,KAAK64H,iBACTmI,QAAS3+H,IAAsC,IAA3BA,EAAQ4+H,iBAC7Bt5E,KAEXvhD,GAAO+L,KAAM,GAAEnS,kCACfoG,GAAO4gD,MAAM85E,EAAiB55E,QAE9BlnD,KAAK4zD,WAAWtF,OACZwyE,EACAjlE,EACA77D,KAAKm9H,sBAAsB2D,EAAkBzI,GAC7CG,SAEJpyH,GAAO+L,KAAM,GAAEnS,0CAInBA,KAAK4zD,WAAW83D,OAAO0M,UAAUp4H,KAAK4sD,MAQ1Cs0E,aAAaC,EAAiBC,GAI1Bh7H,GAAO+L,KAAM,GAAEnS,0BAA2BmhI,EAAiBC,GAE3DphI,KAAK45H,eAAej3H,SAAQuV,GAAkBA,MAC9ClY,KAAK45H,eAAiB,GAElB55H,KAAK85H,6CACL95H,KAAK85H,8CAGT95H,KAAKy6D,QAQTo/D,oBAAoB/iG,GACZA,IAAWw/E,GAAe10D,OAAOK,WAAajiD,KAAK84H,qBACnD1yH,GAAO+L,KAAM,GAAEnS,yCACfA,KAAKy8H,mBACDz8H,KAAK84H,mBACL94H,KAAK+4H,qBAcjBsI,4BAA4BC,EAAeC,GACvC,MAAMC,EAAc,GACdllI,EAAO0D,KAiEb,OA/DAixG,EAAEqwB,GAAettH,MAAK,CAACytH,EAAIv2H,KACvB,MAAMhD,EAAO+oG,EAAE/lG,GAASw5C,KAAK,QAC7B,IAAIhP,EAAQ,GAEZu7D,EAAE/lG,GACGoE,KAAK,uDACL0E,MAAK,WAEF,MAAMxE,EAAYxP,KAAK0lD,aAAa,aAC9Bl3C,EACAyiG,EAAEjxG,MACCsP,KAAK,WACLjD,KAAI,WAED,OAAOrM,KAAK0lD,aAAa,WAE5BnnC,MAEL/P,EAAMjP,SACNm2C,GAAU,gBAAelmC,KAAahB,EAAMR,KAAK,eAMvDijG,EAAE/lG,GAASoE,KACT,mDAGJ0E,MAAK,WACL,MAAM1F,EAAO2iG,EAAEjxG,MAAM0kD,KAAK,QAEtB68E,EAAiBjO,aAAahlH,KAG5BhS,EAAKuU,kBAAmBvU,EAAK6sF,QACxB/iF,GAAO6lB,KAAM,GAAE3vB,2CAA8CgS,KAMxE2iG,EAAEjxG,MAAMsP,KAAK,cAAc0E,MAAK,WAC5B0hC,GAAU,UAASpnC,KAAQ2iG,EAAEjxG,MAAM0kD,KAAK,UACpCusD,EAAEjxG,MAAM0kD,KAAK,UAAYusD,EAAEjxG,MAAM0kD,KAAK,SAASnlD,SAC/Cm2C,GAAU,IAAGu7D,EAAEjxG,MAAM0kD,KAAK,YAE9BhP,GAAS,aAKjB6rF,EAAiB51H,MAAMhJ,SAAQ,CAACgJ,EAAO+1H,KAC9BrT,GAAAA,SAAiB1iH,EAAQ,SAAQzD,OAGjCs5H,EAAYE,KACbF,EAAYE,GAAM,IAEtBF,EAAYE,IAAOhsF,SAIpB8rF,EAOXG,gBAAgBl+E,GACZzjD,KAAK4hI,0BAAyB,EAAgBn+E,GAOlDo+E,mBAAmBp+E,GACfzjD,KAAK4hI,0BAAyB,EAAoBn+E,GAStDq+E,2BAA2B96H,GAsBvBZ,GAAO4gD,MAAO,GAAEhnD,+DAA+DgH,KAE/EhH,KAAKy5H,kBAAkBv1H,MAvBF69H,IACjB,MAAMC,EAAiBhiI,KAAKqmF,eAAe47C,iCAAiCj7H,GAE5E,GAAIg7H,EAAeziI,OAAQ,CACvBS,KAAKqmF,eAAe67C,mBAAmBl7H,GACvC,MAAMi4H,EAAc,IAAI3M,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAC3DszH,EAAe/+H,KAAKmiI,2BAA2BH,GAErDhiI,KAAKs8H,aAAayC,EAAa5uE,KAC1BgU,MAAK,KACF,MAAMi+D,EAAc,IAAI9P,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAEjEzL,KAAKy8H,mBAAmBwC,EAAamD,GACrCL,OAEH5zD,OAAM/5D,GAAO2tH,EAAe3tH,UAEjC2tH,OAQJv+H,IACQA,EACA4C,GAAO5C,MAAO,GAAExD,yCAA0CwD,GAE1D4C,GAAO+L,KAAM,GAAEnS,4CAa/B4hI,yBAAyBS,EAAO5+E,GAC5B,MAAM6+E,EAAYD,EAAQ,kBAAoB,qBAE1CA,GACAriI,KAAK09H,aAAaj6E,GAoDtBr9C,GAAO4gD,MAAO,GAAEhnD,eAAesiI,UAG/BtiI,KAAKy5H,kBAAkBv1H,MApDF+yH,IACjB,IAAKj3H,KAAKqmF,eAAeg2C,mBACjBr8H,KAAKqmF,eAAeg2C,iBAAiB5wH,IAAK,CAC9C,MAAM82H,EAAU,GAAED,qCAKlB,OAHAl8H,GAAO5C,MAAM++H,QACbtL,EAAiBsL,GAKrBn8H,GAAOD,IAAK,GAAEnG,mBAAmBsiI,KAEjC,MAAMrD,EAAc,IAAI3M,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAC3DA,EAAM,IAAI6mH,GAAItyH,KAAKqmF,eAAe61C,kBAAkBzwH,KACpD+2H,EACAH,EACIriI,KAAKqhI,4BAA4B59E,EAAMh4C,GACvCzL,KAAKyiI,+BAA+Bh/E,EAAMh4C,GAC9CszH,EACAsD,EACIriI,KAAK0iI,wBAAwBF,GAC7BxiI,KAAKmiI,2BAA2BK,GAOpCtG,EAAoB,IAAIvpH,sBAAsB,CAChDnT,KAAM,QACNiM,IAAKszH,EAAa5uE,OAENkyE,GAASriI,KAAK6Q,iBAAmB7Q,KAAKmpF,OAAS7jE,GAAQk8D,kBACjExhF,KAAK6+H,sBAAsB3C,GAC3Bl8H,KAAKs8H,aAAayC,EAAa5uE,MAE7BgU,MAAK,KACT,MAAMi7D,EAAc,IAAI9M,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAEjErF,GAAOD,IAAK,GAAEnG,QAAQsiI,UACtBtiI,KAAKy8H,mBAAmBwC,EAAaG,GACrCnI,OACDzzH,IACC4C,GAAO5C,MAAO,GAAExD,QAAQsiI,YAAqB9+H,GAC7CyzH,EAAiBzzH,SAe7Bw7H,yBAAyBzkC,GACrB,MAAMqkC,EAAY,IAAItM,GAAI,IAe1B,OAbItyH,KAAKm6H,sBACLyE,EAAU5L,qBAAsB,GAEhChzH,KAAKk6H,sBACL0E,EAAU3L,qBAAsB,GAEhCjzH,KAAK+yH,UACL6L,EAAU7L,SAAU,GAGxB6L,EAAUvJ,WAAW96B,GACrBv6F,KAAK09H,aAAazsB,EAAE1W,GAASjrF,KAAK,aAE3BsvH,EAUXuD,2BAA2BH,GACvB,MAAMpD,EAAY5+H,KAAK6Q,gBACjB,IAAIyhH,GAAItyH,KAAKqmF,eAAeA,eAAe61C,kBAAkBzwH,KAC7D,IAAI6mH,GAAItyH,KAAKqmF,eAAe61C,kBAAkBzwH,KA2CpD,OAzCAu2H,EAAer/H,SAAQ,CAAC+yC,EAAOyyB,MAE3BzyB,EAAQA,EAAMj4C,MAAM,SACdue,MACFhc,KAAK6Q,gBACL6kC,EAAM/yC,SAAQiD,IACV,MAAMsV,EAAM0jH,EAAUjzH,MAAMg3H,WAAUh1H,GAASA,EAAM4oB,SAAS3wB,KAE9D,GAAIsV,GAAO,EACP,GAAIlb,KAAKmpF,MAAO,OASZ,MAAMrL,EAAS,UAAGuwC,GAAAA,WAAmBuQ,EAAUjzH,MAAMuP,GAAKzd,MAAM,QAAQ,WAAzD,aAAG,EAA2DkO,MACvEi3H,EAAmB5iI,KAAKqmF,eAAew8C,yBAAyB/kD,GAAW,GAEjF,CAAEs0C,KAAAA,SAAyBA,KAAAA,UAA0BzvH,SAAQsG,IACzD21H,EAAUjzH,MAAMuP,GAAO0jH,EAAUjzH,MAAMuP,GAClChO,QAAS,KAAIjE,IAAc,KAAI25H,aAIxChE,EAAUjzH,MAAMuP,GAAO0jH,EAAUjzH,MAAMuP,GAAKhO,QAAS,GAAEtH,QAAY,IACnEg5H,EAAUjzH,MAAMuP,GAAO0jH,EAAUjzH,MAAMuP,GAClChO,QAAS,KAAIklH,KAAAA,WAA4B,KAAIA,KAAAA,eAK9D18E,EAAM/yC,SAAQiD,IACVg5H,EAAUjzH,MAAMw8D,GAAOy2D,EAAUjzH,MAAMw8D,GAAKj7D,QAAS,GAAEtH,QAAY,UAI/Eg5H,EAAUzuE,IAAMyuE,EAAUlzH,QAAUkzH,EAAUjzH,MAAMqC,KAAK,IAElD4wH,EAUX8D,wBAAwBlB,GACpB,MAAM5C,EAAY,IAAItM,GAAItyH,KAAKqmF,eAAe61C,kBAAkBzwH,KAmBhE,OAjBA+1H,EAAY7+H,SAAQ,CAAC+yC,EAAOyyB,KAKxB,GAJAy2D,EAAUjzH,MAAMw8D,IAAQzyB,EAIpB11C,KAAKmpF,OAASnpF,KAAK6Q,gBAAiB,OACpC,MAAMitE,EAAS,UAAGuwC,GAAAA,WAAmBuQ,EAAUjzH,MAAMw8D,GAAK1qE,MAAM,QAAQ,WAAzD,aAAG,EAA2DkO,MACvEi3H,EAAmB5iI,KAAKqmF,eAAew8C,yBAAyB/kD,GAAW,GAEjF,CAAEs0C,KAAAA,SAAyBA,KAAAA,UAA0BzvH,SAAQsG,IACzD21H,EAAUjzH,MAAMw8D,GAAOy2D,EAAUjzH,MAAMw8D,GAClCj7D,QAAS,KAAIjE,IAAc,KAAI25H,YAIhDhE,EAAUzuE,IAAMyuE,EAAUlzH,QAAUkzH,EAAUjzH,MAAMqC,KAAK,IAElD4wH,EAYXtC,aAAawG,GACT,GAA2C,WAAvC9iI,KAAKqmF,eAAenb,eAA6B,CACjD,MAAM1nE,EAAQ,IAAIsC,MAAM,4CAIxB,OAFA9F,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,qBAAiCz2F,EAAOxD,MAE7DwqB,QAAQpU,OAAO5S,GAG1B,MAAMo7H,EACAkE,GAAqB9iI,KAAKqmF,eAAe61C,kBAAkBzwH,IAEjE,IAAKmzH,EAAW,CACZ,MAAMp7H,EAAQ,IAAIsC,MAAO,kEAAiE9F,KAAKssB,SAI/F,OAFAtsB,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,qBAAiCz2F,EAAOxD,MAE7DwqB,QAAQpU,OAAO5S,GAG1B,MAAM04H,EAAoB,IAAIvpH,sBAAsB,CAChDnT,KAAMQ,KAAKw3H,YAAc,SAAW,QACpC/rH,IAAKmzH,IAGT,OAAI5+H,KAAKw3H,YACEx3H,KAAK+iI,sBAAsB7G,GAG/Bl8H,KAAK6+H,sBAAsB3C,GAStC2C,sBAAsB3C,GAGlB,OAFA91H,GAAO4gD,MAAO,GAAEhnD,gDAETA,KAAKqmF,eAAetf,qBAAqBm1D,GAC3C/3D,MAAK,KACF/9D,GAAO4gD,MAAO,GAAEhnD,qCAETA,KAAKqmF,eAAezX,aAAa5uE,KAAKu3H,kBACxCpzD,MAAK7vC,IACFluB,GAAO4gD,MAAO,GAAEhnD,+CAETA,KAAKqmF,eAAe7a,oBAAoBl3C,SAWnEyuG,sBAAsB7G,GAGlB,OAFA91H,GAAO4gD,MAAO,GAAEhnD,oCAETA,KAAKqmF,eAAe7X,YAAYxuE,KAAKu3H,kBACvCpzD,MAAK6+D,IACF58H,GAAO4gD,MAAO,GAAEhnD,+CAETA,KAAKqmF,eAAe7a,oBAAoBw3D,GAC1C7+D,MAAK,KACF/9D,GAAO4gD,MAAO,GAAEhnD,gDAGTA,KAAKqmF,eAAetf,qBAAqBm1D,SAiBpE+G,aAAaC,EAAUC,GACnB,MAAMhH,EAAelF,IACjB7wH,GAAO4gD,MAAO,GAAEhnD,gDAAgDkjI,iBAAwBC,KAExF,MAAMlE,EAAcj/H,KAAKqmF,eAAeg2C,iBAAiB5wH,IAEpDzL,KAAK6Q,kBAKF7Q,KAAKqmF,eAAehkF,QAAQk4H,uBACzB2I,GAAYC,GAAYA,EAAS5wG,gBAMpCvyB,KAAKqmF,eAAe+8C,qBAInBF,GAAYC,GAAYA,EAAS5wG,eAMlCvyB,KAAKqmF,eAAe+8C,oBAGbF,GAAYA,EAAS3wG,iBAAmB4wG,IAK/CnjI,KAAKqmF,eAAe+8C,oBACpBpjI,KAAKqmF,eAAe43C,yBAI5Bj+H,KAAKqmF,eAAe48C,aAAaC,EAAUC,GACtCh/D,MAAKk/D,IACF,IAAI3zD,EAAUllD,QAAQC,UAetB,OAbArkB,GAAO4gD,MAAO,GAAEhnD,uDACZqjI,2BAA2CrjI,KAAKssB,SAEhD+2G,IACIH,GAAYC,IACbnjI,KAAKssB,QAAUyrG,KAClBroD,EAAU1vE,KAAKs8H,eAAen4D,MAAK,KAC/B,MAAMi+D,EAAc,IAAI9P,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KAEjEzL,KAAKy8H,mBAAmB,IAAInK,GAAI2M,GAAcmD,OAI/C1yD,EAAQvL,MAAK,KAChB,GAAIg/D,MAAAA,GAAAA,EAAU5wG,eAIV,OAHAnsB,GAAO4gD,MAAO,GAAEhnD,sDAGTA,KAAKqmF,eAAek2C,sCAItCp4D,MAAK,IAAM8yD,MAAoBzzH,GAASyzH,EAAiBzzH,MAGlE,OAAO,IAAIgnB,SAAQ,CAACC,EAASrU,KACzBhQ,GAAO4gD,MAAO,GAAEhnD,8CAA8CkjI,kBAAyBC,KAEvFnjI,KAAKy5H,kBAAkBv1H,KACnBi4H,GACA34H,IACQA,GACA4C,GAAO5C,MAAO,GAAExD,4BAA6BwD,GAC7C4S,EAAO5S,KAEP4C,GAAO+L,KAAM,GAAEnS,6BACfyqB,WAgBpBg4G,+BAA+Ba,EAAkB/B,GAC7C,MAAMS,EAAiB,GA2DvB,OAzDA/wB,EAAEqyB,GAAkBtvH,MAAK,CAACytH,EAAIv2H,KAC1B,MAAMhD,EAAO+oG,EAAE/lG,GAASw5C,KAAK,QAC7B,IAAIhP,EAAQ,GAEZu7D,EAAE/lG,GACGoE,KAAK,uDACL0E,MAAK,WAEF,MAAMxE,EAAYxP,KAAK0lD,aAAa,aAC9Bl3C,EACAyiG,EAAEjxG,MACCsP,KAAK,WACLjD,KAAI,WACD,OAAOrM,KAAK0lD,aAAa,WAE5BnnC,MAEL/P,EAAMjP,SACNm2C,GACQ,gBAAelmC,KACfhB,EAAMR,KAAK,eAK/B,MAAMQ,EAAQ,GAIRyiG,EAAE/lG,GAASoE,KACT,mDAEJ0E,MAAK,WAEL,MAAM1F,EAAO2iG,EAAEjxG,MAAM0kD,KAAK,QAE1Bl2C,EAAMtK,KAAKoK,MAEfizH,EAAiB51H,MAAMhJ,SAAQ,CAACgJ,EAAO+1H,KAC9BrT,GAAAA,SAAiB1iH,EAAQ,SAAQzD,OAGjC85H,EAAeN,KAChBM,EAAeN,GAAM,IAEzBlzH,EAAM7L,SAAQ2L,IACV,MAAM4gH,EACAb,GAAAA,UAAkB1iH,EAAQ,UAAS2C,KAErC4gH,EAAU3vH,SACVyiI,EAAeN,IAAQ,GAAExS,EAAUlhH,KAAK,kBAGhDg0H,EAAeN,IAAOhsF,SAIvBssF,EAeXuB,qBAAqBC,EAAeC,GAChC,MAAMC,EACA,IAAIpR,GAAItyH,KAAKqmF,eAAeg2C,iBAAiB5wH,KACnD,IAAIk4H,EAAU,IAAI/Q,GAAU6Q,EAAQC,GACpC,MAAME,EAAaD,EAAQ5N,cAE3B,GAAIz3H,OAAOmE,KAAKmhI,GAAYrkI,OAGxB,OAFA6G,GAAO5C,MAAO,GAAExD,kCAAkCwjI,IAAiBI,IAE5D,EAGXD,EAAU,IAAI/Q,GAAU8Q,EAAiBD,GACzC,MAAMI,EAAeF,EAAQ5N,cAE7B,OAAIz3H,OAAOmE,KAAKohI,GAActkI,SAC1B6G,GAAO5C,MAAO,GAAExD,qCAAqCwjI,IAAiBK,IAE/D,GAcfC,iBAAiBlzG,GACb,OAAO5wB,KAAK+jI,6BACR,EAA2BnzG,GAC1BuzC,MAAK,KAGF,GAAIvzC,EAAM2B,eACN,OAAOvyB,KAAKqmF,eAAek2C,mCAa3CyH,kBAAkBpzG,GACd,OAAO5wB,KAAK+jI,6BACR,EAA2BnzG,GAUnCmzG,4BAA4BE,EAAQrzG,GAChC,IAAKA,EACD,OAAOpG,QAAQpU,OAAO,kCAE1B,MAAMotH,EAAgBS,EAAS,kBAAoB,iBAC7C9H,EAAelF,IACjB,MAAMluC,EAAM/oF,KAAKqmF,eAEjB,IAAK0C,EAKD,YAJAkuC,EACK,iBAAgBuM,yCAKzB,MAAMU,EAAcn7C,EAAIszC,iBAAiB5wH,KAEnCw4H,EACIl7C,EAAIo7C,gBAAgBvzG,GACpBm4D,EAAIq7C,eAAexzG,IAGxBuzC,MAAKk/D,IACEA,GAAqBa,GAAen7C,EAAImzC,kBAAkBzwH,IAC1DzL,KAAKs8H,eACAn4D,MAAK,MAGDnkE,KAAK6Q,iBAAmB7Q,KAAKujI,qBAAqBC,EAAe,IAAIlR,GAAI4R,IAC1E,MAAM9E,EAAcr2C,EAAIszC,iBAAiB5wH,IAGzCzL,KAAKy8H,mBAAmB,IAAInK,GAAI4R,GAAc,IAAI5R,GAAI8M,IACtDnI,OAGRA,MAGRA,IAKR,OAFA7wH,GAAO4gD,MAAO,GAAEhnD,eAAewjI,UAExB,IAAIh5G,SAAQ,CAACC,EAASrU,KACzBpW,KAAKy5H,kBAAkBv1H,KACnBi4H,GACA34H,IACQA,GACA4C,GAAO5C,MAAO,GAAExD,QAAQwjI,YACxBptH,EAAO5S,KAEP4C,GAAO4gD,MAAO,GAAEhnD,QAAQwjI,UACxB/4G,WAgBpBk2G,uBAAuB0D,EAAa3D,GAChC,IAAK1gI,KAAKqmF,eACN,OAAO77D,QAAQpU,OACX,uEAIR,MAAMkuH,EAAcD,EAAc,eAAiB,iBAC7CE,EAAc7D,EAAc,eAAiB,iBAEnDt6H,GAAO+L,KAAM,GAAEnS,oBAAoBukI,MAAgBD,UAEnD,MAAMnI,EAAelF,IACjB,MAAMuN,EAAkBxkI,KAAKssB,QAAUyrG,GAMjC0M,EACAzkI,KAAKqmF,eAAeq+C,uBAAuBL,GAE7CrkI,KAAKm5H,oBAAsBuH,IAC3B1gI,KAAKm5H,kBAAoBuH,EAUrB1gI,KAAKmpF,OAASq7C,GACdxkI,KAAKm/H,qBAIb,MAAMwF,EACA3kI,KAAKqmF,eAAeu+C,uBAClB5kI,KAAKm5H,mBAAqBn5H,KAAKo5H,oBAInCoL,IACQC,GAAsBE,GAC9B3kI,KAAKs8H,eACAn4D,KACG8yD,EACAA,GAERA,KAIR,OAAO,IAAIzsG,SAAQ,CAACC,EAASrU,KACzBpW,KAAKy5H,kBAAkBv1H,KACnBi4H,GACA34H,IACQA,GACA4C,GAAO5C,MAAO,GAAExD,aAAaukI,MAAgBD,kBAC7CluH,EAAO5S,KAEP4C,GAAO4gD,MAAO,GAAEhnD,aAAaukI,MAAgBD,gBAC7C75G,WAgBpBo6G,eAAenM,GACX,MAAMoM,EACArM,GAAgBsM,kBAAkBrM,GAClCsM,EACAvM,GAAgBwM,oBAAoBvM,GAGtCsM,IACA5+H,GAAO+L,KAAM,GAAEnS,0CAA0CglI,KACzDhlI,KAAKw5H,yBAA2BwL,EAChChlI,KAAK6sF,aAAa/gE,KACdo5G,GAAqDllI,OAGrC,OAApB8kI,GAoBJ1+H,GAAO4gD,MAAO,GAAEhnD,oDAAoD8kI,OAEpE9kI,KAAKy5H,kBAAkBv1H,MAdF+yH,IACbj3H,KAAK+5H,gBAAgB,mBACd/5H,KAAKmlI,yBAAyBL,GAGrC9kI,KAAKs8H,eACAn4D,KAAK8yD,EAAkBA,GAE5BA,OAQJzzH,IACQA,EACA4C,GAAO5C,MAAO,GAAExD,+BAAgCwD,GAEhD4C,GAAO4gD,MAAO,GAAEhnD,6CAA6C8kI,gBA3BrE1+H,GAAO5C,MACF,GAAExD,8EAyCfmlI,yBAAyBC,GACrB,MAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsCplI,KAAKw3H,aACpB,cAAvB4N,IAAuCplI,KAAKw3H,YAOxD,OALI6N,IAAwBrlI,KAAKo5H,qBAC7BhzH,GAAO4gD,MAAO,GAAEhnD,iCAAiCqlI,KACjDrlI,KAAKo5H,mBAAqBiM,GAGvBrlI,KAAKqmF,eAAeu+C,uBACvB5kI,KAAKm5H,mBAAqBn5H,KAAKo5H,oBAQvCqD,mBAAmBgH,EAAQ6B,GACvB,GAAItlI,KAAKssB,QAAUyrG,GAGf,YAFA3xH,GAAO6lB,KAAM,GAAEjsB,iCAAiCA,KAAKssB,kBAKzD,IAAKtsB,KAAK4zD,WAAWhJ,UAQjB,OANK5qD,KAAK84H,qBACN94H,KAAK84H,mBAAqB2K,GAE9BzjI,KAAK+4H,mBAAqBuM,OAC1Bl/H,GAAO6lB,KAAM,GAAEjsB,oEAKnBA,KAAK84H,wBAAqB3sH,EAC1BnM,KAAK+4H,wBAAqB5sH,EAE1B,MAAMo5H,EAAwBC,IAC1B,MAAMtP,EAAWsP,EAAUzP,cAC3B,IAAIvnH,EAAQ,GACRsvE,EAAY,KAYhB,OATAx/E,OAAOmE,KAAKyzH,GAAUvzH,SAAQ8iI,IAC1B,MAAMC,EAAgBpnI,OAAOmE,KAAKyzH,EAASuP,GAAYj3H,OAEvDsvE,EAAYo4C,EAASuP,GAAYvqH,IAC7BwqH,MAAAA,GAAAA,EAAenmI,SACfiP,EAAQA,EAAM9H,OAAOg/H,OAItB,CACH5nD,UAAAA,EACAtvE,MAAAA,IAKR,IAAIg3H,EAAY,IAAI5S,GAAU0S,EAAQ7B,GACtC,MAAM5d,GAAS5lE,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UAC1Br2G,KAAM,QACL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,gBACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAGZ+4E,EAAkBH,EAAUhS,SAAS3N,GAIrC+f,EAAM,GAEZ,GAAID,EAAiB,CACjB,MAAME,EAAaN,EAAsBC,GAGzCp/H,GAAO+L,KAAM,GAAEnS,kCAAkC6lI,EAAW/nD,mBAAmB+nD,EAAWr3H,SAC1FxO,KAAK4zD,WAAWtF,OACZu3D,GACA,KACI7lH,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,cAA0Bj6F,KAAM4lI,KAEhE5lI,KAAKm9H,sBAAsBtX,GAAQriH,IAC/BxD,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,oBAAgCj6F,KAAMwD,EAAOoiI,MAE7EpN,IAIRgN,EAAY,IAAI5S,GAAU6Q,EAAQ6B,GAClC,MAAM9/F,GAAMya,EAAAA,GAAAA,KAAI,CAAE6b,GAAI97D,KAAK61G,UACvBr2G,KAAM,QACL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQ,aACRwsH,UAAWt7H,KAAK43H,aAChBhrE,IAAK5sD,KAAK4sD,MAMlB,GAFyB44E,EAAUhS,SAAShuF,GAEtB,CAClB,MAAMqgG,EAAaN,EAAsBC,GAGzCp/H,GAAO+L,KAAM,GAAEnS,+BAA+B6lI,EAAW/nD,mBAAmB+nD,EAAWr3H,SACvFxO,KAAK4zD,WAAWtF,OACZ9oB,GACA,KACIxlC,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,WAAuBj6F,KAAM4lI,KAE7D5lI,KAAKm9H,sBAAsB33F,GAAKhiC,IAC5BxD,KAAK+5F,KAAKlN,aAAa/gE,KAAKmuE,KAAAA,iBAA6Bj6F,KAAMwD,EAAOqiI,EAAW/nD,UAAW8nD,MAEhGpN,KAsBZ2E,sBAAsBzmG,EAAS6qF,GAC3B,OAAOukB,IAEH,MAAMtiI,EAAQ,GAGRuiI,EAAa90B,EAAE60B,GAAax2H,KAAK,SAEvC,GAAIy2H,EAAWxmI,OAAQ,CACnBiE,EAAM5C,KAAOmlI,EAAWrhF,KAAK,QAC7B,MAAMshF,EAAiB/0B,EAAE60B,GAAax2H,KAAK,gBAEvC02H,EAAezmI,SACfiE,EAAM80B,OAAS0tG,EAAe,GAAGzsG,SAGrC,MAAM0sG,EAAcF,EAAWz2H,KAAK,SAEhC22H,EAAY1mI,SACZiE,EAAME,IAAMuiI,EAAYjiI,QAI3B8hI,IACDtiI,EAAM80B,OAAS,WAGnB90B,EAAMkI,QAAU1L,KAAKxB,WAEjB+iH,EACAA,EAAU/9G,GACHxD,KAAKssB,QAAUyrG,IACM,mBAAjBv0H,EAAM80B,OAMjBlyB,GAAO4gD,MAAO,GAAEhnD,sBAAsBuD,KAAKF,UAAUG,MAErD+0B,KAAAA,iBACI,IAAIzyB,MACC,iBAAgBvC,KAAKF,UAAUG,QASpD0iI,wBACI,OAAOlmI,KAAKqmF,eAAe8/C,qBAM/B1rE,QACIz6D,KAAKssB,MAAQyrG,GACb/3H,KAAK25H,2BAAwBxtH,EAEzBnM,KAAKqmF,iBACLrmF,KAAKqmF,eAAe80C,eAAiB,KACrCn7H,KAAKqmF,eAAeo1C,2BAA6B,KACjDz7H,KAAKqmF,eAAe41C,oBAAsB,KAC1Cj8H,KAAKqmF,eAAem1C,uBAAyB,MAGjDp1H,GAAO4gD,MAAO,GAAEhnD,mCAGhBA,KAAKy5H,kBAAkBpxF,QAEvBjiC,GAAO4gD,MAAO,GAAEhnD,6BAChBA,KAAKy5H,kBAAkBv1H,MAAK69H,IAExB/hI,KAAKqmF,gBAAkBrmF,KAAKqmF,eAAe5rB,QAC3CsnE,IACA37H,GAAO4gD,MAAO,GAAEhnD,+BAGpBoG,GAAO4gD,MAAO,GAAEhnD,oCAGhBA,KAAKy5H,kBAAkBvC,WAO3B14H,WACI,MAAQ,2BAA0BwB,KAAKmpF,MAAQ,MAAQ,mBAAmBnpF,KAAKw3H,mBAAmBx3H,KAAK4sD,OAS3GkuE,2BAA2B,GAAe,IAAf,UAAEsL,GAAa,EACtC,IAAKA,IAAcA,EAAUC,uBACzB,OAMJ,MAAM//E,EAAMtmD,KAAKu4H,mBAEjB,OAAOv+F,EAAAA,GAAAA,aAAYssB,GAAO,GAAM,GChpFxC,MAAMlgD,IAASyB,EAAAA,EAAAA,6CAYf,SAASy+H,GAAoBphI,GACzB,MAAMoH,EAAa2kG,EAAE/rG,GAAWoK,KAAK,cAC/Bi3H,EAAkB,GAexB,OAZAj6H,EAAW0H,MAAK,CAACk9F,EAAG19D,KAChB,MAAM+N,EAAa/N,EAAU+N,WACvBilF,EAAiB,GAEvB,IAAK,IAAIlnI,EAAI,EAAGA,EAAIiiD,EAAWhiD,OAAQD,IAAK,CACxC,MAAMolD,EAAOnD,EAAWjiD,GAExBknI,EAAetiI,KAAM,GAAEwgD,EAAKx8C,SAASw8C,EAAKj7C,SAE9C88H,EAAgBriI,KAAKsiI,EAAex4H,KAAK,SAGtCu4H,EAMI,MAAME,WAA+B7xB,GAQhDh2G,YAAY02F,EAAMzI,EAAc65C,GAC5BjnD,QACAz/E,KAAKs1F,KAAOA,EACZt1F,KAAK6sF,aAAeA,EACpB7sF,KAAK2mI,SAAW,GAChB3mI,KAAK4mI,aAAeF,EAAUG,IAC9B7mI,KAAK8mI,aAAeJ,EAAUtzC,IAC9BpzF,KAAKu3H,iBAAmB,CACpB5mD,qBAAqB,EACrBI,qBAAqB,GAQ7B1mD,KAAKupC,GACD6rB,MAAMp1D,KAAKupC,GACX5zD,KAAK4zD,WAAWp7B,WAAWx4B,KAAK+mI,SAAS/jI,KAAKhD,MAC1C,oBAAqB,KAAM,MAAO,KAAM,MAOhD+mI,SAASt0E,GACL,MAAM7F,EAAMqkD,EAAEx+C,GAAInjD,KAAK,UAAUo1C,KAAK,OAChC51C,EAASmiG,EAAEx+C,GAAInjD,KAAK,UAAUo1C,KAAK,UACnCsiF,EAAUv0E,EAAG/M,aAAa,QAG1BmoD,GAAM5tD,EAAAA,GAAAA,KAAI,CAAEzgD,KAAM,SACpBs8D,GAAIkrE,EACJhgI,GAAIyrD,EAAG/M,aAAa,QAGxB,IAAIuhF,EAAOjnI,KAAK2mI,SAAS/5E,GAEzB,GAAe,qBAAX99C,EAA+B,CAC/B,IAAKm4H,EAcD,OAbAp5B,EAAI/tD,MAAM,CAAEtgD,KAAM,UAClBquG,EAAIzsG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,iBAAkB,CACjBqmD,MAAO,wCAEVE,KACAvmD,EAAE,kBAAmB,CAClBqmD,MAAO,6BAEfrhD,GAAO6lB,KAAM,uBAAsB2gC,KACnCxmD,GAAO4gD,MAAMyL,GACbzyD,KAAK4zD,WAAW3+B,KAAK44E,IAEd,EAIX,GAAIm5B,IAAYC,EAAKpxB,UAcjB,OAbAzvG,GAAO6lB,KACH,8BAA+B2gC,EAAKq6E,EAAKpxB,UAAWpjD,GACxDo7C,EAAI/tD,MAAM,CAAEtgD,KAAM,UAClBquG,EAAIzsG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,iBAAkB,CACjBqmD,MAAO,wCAEVE,KACAvmD,EAAE,kBAAmB,CAClBqmD,MAAO,6BAEfznD,KAAK4zD,WAAW3+B,KAAK44E,IAEd,OAER,QAAa1hG,IAAT86H,EAYP,OATAp5B,EAAI/tD,MAAM,CAAEtgD,KAAM,UAClBquG,EAAIzsG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,sBAAuB,CACtBqmD,MAAO,wCAEVE,KACLvhD,GAAO6lB,KAAK,uBAAwB2gC,EAAK6F,GACzCzyD,KAAK4zD,WAAW3+B,KAAK44E,IAEd,EAEX,MAAMj+E,EAAMnzB,OAAOqhG,YAAYluE,MAKzBu5D,EAAgD,UAAxCppC,GAAAA,QAAAA,mBAA2BinF,GAInCE,EAAej2B,EAAEx+C,GAAInjD,KAAK,uBAEhC,GAAI43H,MAAAA,GAAAA,EAAc3nI,OAAQ,OACtB,IAAI4nI,EAEJ/gI,GAAO+L,KAAM,mCAAkCrD,sCAC/C,IAAK,IAAIxP,EAAI,EAAGA,EAAI4nI,EAAa3nI,OAAQD,IAErC6nI,EAAkBxb,GAAsBl5D,EAAIy0E,EAAa5nI,IAG7D,aAAI6nI,SAAJ,OAAI,EAAiB90G,KAAM,CACvB,MAAM+0G,EAAa,GAEnB,IAAK,MAAMC,KAAYF,EAAgB1kI,OACnC2kI,EAAWljI,KAAM,GAAEmjI,MAAaF,EAAgB5oH,IAAI8oH,OAExDjhI,GAAO4gD,MAAO,YAAWl4C,UAAek4H,kBAAwBI,EAAWp5H,KAAK,UAOxF,OAAQc,GACR,IAAK,mBAAoB,CACrB1I,GAAOD,IAAI,sCAAuCypB,GAClD,MAAM03G,EAAar2B,EAAEx+C,GAAInjD,KAAK,qBAG9B,GADA65E,GAAS/iF,GAAO4gD,MAAO,YAAWl4C,UAAek4H,KAC7CM,MAAAA,GAAAA,EAAY/nI,OAAQ,CACpB,MAAMi/F,EAAa8oC,EAAW5iF,KAAK6vC,IAC7BkK,EAAa6oC,EAAW5iF,KAAK6vC,IAEnCv0F,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,uBACe,SAAfuE,EACe,SAAfC,GAER,MAAMxuB,EAAWkZ,EAAQnpF,KAAK8mI,aAAe9mI,KAAK4mI,aAElDK,EACM,IAAIxO,GACFxnB,EAAEx+C,GAAInjD,KAAK,UAAUo1C,KAAK,OAC1BusD,EAAEx+C,GAAI/N,KAAK,MACXsiF,EACAhnI,KAAK4zD,WACL5zD,KAAKu3H,iBAILh0H,KAAK+G,MAAM/G,KAAKF,UAAU4sE,IAC1BkZ,GACgB,GAExBnpF,KAAK2mI,SAASM,EAAKr6E,KAAOq6E,EAC1BjnI,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,cAA0BgtC,EAAMh2B,EAAEx+C,GAAInjD,KAAK,WAAYsgB,GAC9E,MAEJ,IAAK,iBAAkB,CACnB,MAAMphB,EAAQ,GACR+mH,EAAWtkB,EAAEx+C,GAAInjD,KAAK,kBAG5B,IAAK,MAAMpE,KAAWqqH,EAAU,CAC5B,MAAMjnH,EAAO2iG,EAAE/lG,GAASoE,KAAK,eAAeo1C,KAAK,QAEjDp2C,GAAQE,EAAMtK,KAAKoK,GAEvBlI,GAAO4gD,MAAO,YAAWl4C,UAAek4H,gBAAsBx4H,KAC9DxO,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,cAA0BgtC,EAAMh2B,EAAEx+C,GAAInjD,KAAK,YAClE,MAEJ,IAAK,iBAAkB,CACnB,MAAMytB,EAASk0E,EAAEx+C,GAAInjD,KAAK,iDAE1BlJ,GAAO4gD,MAAO,YAAWl4C,UAAek4H,6BAAmCjqG,MAAAA,OAA9D,EAA8DA,EAAQ/4B,UACnFijI,EAAKpC,eAAe5zB,EAAEx+C,GAAInjD,KAAK,YAC/B,MAEJ,IAAK,iBAAkB,CACnB,MAAMhD,EAAag6H,GAAoBr1B,EAAEx+C,GAAInjD,KAAK,6BAElDlJ,GAAO4gD,MAAO,YAAWl4C,UAAek4H,oBAA0B16H,EAAW0B,KAAK,SAClFhO,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,eAA2BgtC,EAAMh2B,EAAEx+C,GAAInjD,KAAK,YACnE,MAEJ,IAAK,oBAAqB,CACtBlJ,GAAOD,IAAI,iBAAkB8gI,EAAKr6E,KAClC,IAAIu0E,EAAkB,KAClBC,EAAa,KAEbnwB,EAAEx+C,GAAInjD,KAAK,kBAAkB/P,SAC7B4hI,EACMlwB,EAAEx+C,GAAInjD,KAAK,yBAAyB,GAAGiqB,QAC7C6nG,EAAanwB,EAAEx+C,GAAInjD,KAAK,uBAAuBtL,QAEnDoC,GAAO4gD,MAAO,YAAWl4C,UAAek4H,uBAA6B5F,KACrEphI,KAAKo4H,UAAU6O,EAAKr6E,IAAKu0E,EAAiBC,GAC1CphI,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,WAAuBgtC,EAAM9F,EAAiBC,GACrE,MAEJ,IAAK,oBAAqB,OACtBh7H,GAAO+L,KAAK,oCAAqCyd,GACjD,MAAM1qB,EAAY+rG,EAAEx+C,GAAInjD,KAAK,4BACvBhD,EAAag6H,GAAoBphI,GACjCqiI,EAAWt2B,EAAE/rG,GAAWw/C,KAAK,SAC7B8iF,EAASv2B,EAAE/rG,GAAWw/C,KAAK,OAC3B+iF,EAAe,UAAGx2B,EAAE/rG,GAAWoK,KAAK,uBAArB,aAAG,EAAmCtL,OAE3DoC,GAAO4gD,MAAO,YAAWl4C,UAAek4H,mBAAyBO,aACpDC,uBAA4BC,iBAA+Bn7H,EAAW0B,KAAK,SAExFqnF,GAAWiE,cAAc3b,G1DxL/B,6B0D0LU,CACIyV,IAAKjK,EACL1/E,MAAOmmB,KAGfq3G,EAAKxH,iBAAiBxuB,EAAEx+C,GAAInjD,KAAK,YAAY,KACzC,MAAMo4H,EAAcjrI,OAAOqhG,YAAYluE,MAEvCxpB,GAAO+L,KAAK,sCAAuCu1H,GACnDryC,GAAWiE,cAAc3b,G1D3LnC,4B0D6Lc,CACIyV,IAAKjK,EACL1/E,MAAOi+H,QAEhBlkI,IACC+0B,KAAAA,iBAAsC/0B,GACtC4C,GAAO5C,MAAM,2BAA4BA,GACzCyjI,EAAK1G,yBAET,MAEJ,IAAK,aACD0G,EAAKtF,gBAAgB1wB,EAAEx+C,GAAInjD,KAAK,oBAChC,MACJ,IAAK,gBACD23H,EAAKpF,mBAAmB5wB,EAAEx+C,GAAInjD,KAAK,oBACnC,MACJ,QACIlJ,GAAO6lB,KAAK,gCAAiCnd,GAC7C++F,EAAI/tD,MAAM,CAAEtgD,KAAM,UAClBquG,EAAIzsG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,cACC,CAAEqmD,MAAO,wCACZE,KAKT,OAFA3nD,KAAK4zD,WAAW3+B,KAAK44E,IAEd,EAUX85B,oBAAoBC,EAAIv+C,GACpB,MAAM49C,EACA,IAAIxO,GACF3/F,KAAAA,gBAA2B,IAC3B8uG,EACAv+C,EACArpF,KAAK4zD,WACL5zD,KAAKu3H,iBACLv3H,KAAK8mI,cACK,GACM,GAIxB,OAFA9mI,KAAK2mI,SAASM,EAAKr6E,KAAOq6E,EAEnBA,EASX7O,UAAUxrE,EAAKu0E,EAAiBC,GACxBphI,KAAK2mI,SAAS9yH,eAAe+4C,KACI,UAA7B5sD,KAAK2mI,SAAS/5E,GAAKtgC,OACnBtsB,KAAK2mI,SAAS/5E,GAAKs0E,aAAaC,EAAiBC,UAE9CphI,KAAK2mI,SAAS/5E,IAO7Bi7E,4BAcI7nI,KAAK4zD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CAAEzgD,KAAM,MACRs8D,GAAI97D,KAAKs1F,KAAKjzF,QAAQm9G,MAAMngE,SAC3Bj+C,EAAE,WAAY,CAAEqmD,MAAO,yBAC5BqgF,GAAS9nI,KAAK+nI,gCAAgCD,KAC9C,KACI1hI,GAAO6lB,KAAK,sEACZjsB,KAAK4zD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CAAEzgD,KAAM,MACRs8D,GAAI97D,KAAKs1F,KAAKjzF,QAAQm9G,MAAMngE,SAC3Bj+C,EAAE,WAAY,CAAEqmD,MAAO,yBAC5BugF,GAAShoI,KAAK+nI,gCAAgCC,KAC9C,KACI5hI,GAAO6lB,KAAK,mCACZ7lB,GAAO6lB,KAAK,qEAYhC87G,gCAAgCj3B,GAC5B,MAAMm3B,EAAa,GAEnBh3B,EAAEH,GAAKxhG,KAAK,qBAAqB0E,MAAK,CAACm0D,EAAKp6D,KAGxC,MAAMm6H,EAAO,GACP1oI,GAFNuO,EAAKkjG,EAAEljG,IAES22C,KAAK,QAErB,OAAQllD,GACR,IAAK,OACD0oI,EAAK53D,KAAQ,QAAOviE,EAAG22C,KAAK,UACxB32C,EAAG22C,KAAK,UACRwjF,EAAK53D,MAAS,IAAGviE,EAAG22C,KAAK,WAE7BujF,EAAW/jI,KAAKgkI,GAChB,MACJ,IAAK,OACL,IAAK,QAAS,CACVA,EAAK53D,KAAQ,GAAE9wE,KACf0oI,EAAK1sF,SAAWztC,EAAG22C,KAAK,YACxBwjF,EAAK53D,MAAQviE,EAAG22C,KAAK,QACR32C,EAAG22C,KAAK,UAGjBwjF,EAAK53D,MAAS,IAAGviE,EAAG22C,KAAK,WAE7B,MAAMx/C,EAAY6I,EAAG22C,KAAK,aAEtBx/C,GAA2B,QAAdA,IACbgjI,EAAK53D,MAAS,cAAaprE,KAG/BgjI,EAAKC,WAAap6H,EAAG22C,KAAK,aACfwjF,EAAKC,WAChBF,EAAW/jI,KAAKgkI,GAChB,WAKR,MAAM7lI,EAAUrC,KAAKs1F,KAAKjzF,QAG1B,IAAK,IAAI/C,EAAI2oI,EAAW1oI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,MAAMyM,EAAIkF,KAAKC,MAAMD,KAAKE,UAAY7R,EAAI,IACpC8oI,EAAOH,EAAW3oI,GAExB2oI,EAAW3oI,GAAK2oI,EAAWl8H,GAC3Bk8H,EAAWl8H,GAAKq8H,EAGpB,IAAIx8H,EAYJ,OATIA,EADAvJ,EAAQgmI,WACC9/H,GAAKA,EAAE+nE,KAAK4mC,WAAW,QAGvB3uG,GAAKA,EAAE+nE,KAAK4mC,WAAW,SAAY3uG,EAAE+nE,KAAKnrE,QAAQ,kBAAoB,EAGnFnF,KAAK4mI,aAAaz2D,WAAa83D,EAAWr8H,OAAOA,GACjD5L,KAAK8mI,aAAa32D,WAAa83D,EAExBA,EAAW1oI,OAAS,EAM/B+oI,SACI,MAAMzvH,EAAO,GAgBb,OAdAva,OAAOmE,KAAKzC,KAAK2mI,UAAUhkI,SAAQiqD,IAC/B,MACM6a,EADUznE,KAAK2mI,SAAS/5E,GACXy5B,eAEf5e,GAAMA,EAAG8gE,YAET1vH,EAAM,UAAS+zC,KAAS,CACpB27E,UAAW9gE,EAAG8gE,UACdvmE,MAAOyF,EAAGzF,MACVx5C,IAAK/rB,OAAOwO,SAASuc,UAK1B3O,GChef,MAAM2vH,WAAsB5zB,GAIxBh2G,cACI6gF,QACAz/E,KAAKmG,IAAM,GAOfkkB,KAAKupC,GACD6rB,MAAMp1D,KAAKupC,GACX5zD,KAAK4zD,WAAWpG,SAAWxtD,KAAKyoI,YAAYzlI,KAAKhD,MACjDA,KAAK4zD,WAAWnG,UAAYztD,KAAK0oI,YAAY1lI,KAAKhD,MAOtDyoI,YAAYv6E,GACRluD,KAAKmG,IAAIjC,KAAK,EAAE,IAAI4C,MAAO0iD,UAAW,WAAY0E,IAOtDw6E,YAAYx6E,GACRluD,KAAKmG,IAAIjC,KAAK,EAAE,IAAI4C,MAAO0iD,UAAW,WAAY0E,KChC1D,MAAM9nD,IAASyB,EAAAA,EAAAA,2CAET8gI,GAAa,kBAKJ,MAAMC,WAA6Bh0B,GAK9CvqF,KAAKupC,GACD6rB,MAAMp1D,KAAKupC,GAEX5zD,KAAK4zD,WAAWp7B,WACZx4B,KAAK6oI,OAAO7lI,KAAKhD,MAAO2oI,GAAY,KAAM,MAAO,KAAM,MAO/DE,OAAOp2E,GACHrsD,GAAO+L,KAAK,UAAWsgD,GAa3Bu3D,KAAKluD,EAAI1f,EAAM1kB,EAAUoxG,EAAUpmB,GAC/B,OAAO,IAAIl4F,SAAQ,CAACC,EAASrU,KACzB,IAAKssG,EAGD,YAFAtsG,EAAO,IAAItQ,MAAM,oBAIrB,MAAMoqD,GAAMjQ,EAAAA,GAAAA,KAAI,CACZzgD,KAAM,MACNs8D,GAAI4mD,IAGRxyD,EAAI9uD,EAAE,OAAQ,CACVqmD,MAAOkhF,GACP7sE,GAAAA,EACA1f,KAAAA,IAEJ8T,EAAI9uD,EAAE,SAAU,CACZ8G,KAAM,cACNuB,MAAOiuB,IACRiwB,KAECmhF,GAAYA,EAASvpI,QACrB2wD,EAAI9uD,EAAE,SAAU,CACZ8G,KAAM,kBACNuB,MAAOq/H,IACRnhF,KAGP3nD,KAAK4zD,WAAWtF,OACZ4B,GACA15C,IACIpQ,GAAO+L,KAAK,eAAgBqE,GAG5B,MAAM28C,EAAW89C,EAAEz6F,GAAQlH,KAAK,OAAOo1C,KAAK,OAE5C1kD,KAAK+oI,aAAe51E,EAASjtD,OAAO,QAAQ3G,QAC5C6G,GAAO+L,KAAM,2BAA0BnS,KAAK+oI,gBAC5Ct+G,OAEJjnB,IACI4C,GAAO+L,KAAK,cAAe3O,GAC3B4S,EAAO5S,SAUvB0mH,SACI,OAAO,IAAI1/F,SAAQ,CAACC,EAASrU,KACzB,IAAKpW,KAAK+oI,aAIN,OAHA3yH,EAAO,IAAItQ,MAAM,6BACjBM,GAAO6lB,KAAK,uBAKhB,MAAMikC,GAAMjQ,EAAAA,GAAAA,KAAI,CACZzgD,KAAM,MACNs8D,GAAI97D,KAAK+oI,eAGb74E,EAAI9uD,EAAE,SAAU,CACZqmD,MAAOkhF,KAGX3oI,KAAK4zD,WAAWtF,OAAO4B,GAAK15C,IACxBpQ,GAAO+L,KAAK,iBAAkBqE,GAC9BxW,KAAK+oI,aAAe,KACpBt+G,OACDjnB,IACC4C,GAAO+L,KAAK,gBAAiB3O,GAC7BxD,KAAK+oI,aAAe,KACpB3yH,EAAO,IAAItQ,MAAM,yBClHjC,MAAMM,IAASyB,EAAAA,EAAAA,2CAkBf,IAAImhI,IAAmB,EAQvB,MAAMC,GAA8B,6BAO9BC,GACA,wDClBA9iI,IAASyB,EAAAA,EAAAA,mCAKTshI,GAAgB,4DAwDf,MAAMC,GAAuB,CAChC,CAAE94D,KAAM,6CASC87B,GAAsB,OAMtBi9B,GAAiB,mCAOjBz9B,GAAe,8BAKb,MAAMuW,WAAaxa,GAiB9B/oG,YAAYyD,EAASinI,GAAO,MACxB7pD,QACAz/E,KAAK4zD,WAAa,KAClB5zD,KAAKupI,sBAAuB,EAC5BvpI,KAAKk7F,gBAAkB,GACvBl7F,KAAKqC,QAAUA,EACfrC,KAAKspI,MAAQA,EACbtpI,KAAKwpI,mBAAoB,EDxF7BzpF,GAAAA,QAAAA,IAAc,SAAS15C,EAAO3C,GAe1B,OATA0C,GAAOqjI,MAAM,UAAWpjI,EAAO3C,GACZ,iBAARA,IAC6B,IAA7BA,EAAIyB,QAAQ,cAC0C,IAAtDzB,EAAIyB,QAAQ,uCAEnBkB,EAAQ05C,GAAAA,QAAAA,SAAAA,MAIJ15C,GACR,KAAK05C,GAAAA,QAAAA,SAAAA,OAGwB,IAArBipF,IACOC,GAA4Bz9H,KAAK9H,KACxC0C,GAAO4gD,MAAM,yBACbgiF,IAAmB,GAEvB,MACJ,KAAKjpF,GAAAA,QAAAA,SAAAA,KACD35C,GAAO6lB,KAAM,YAAWvoB,KACxB,MAAMgmI,EAAmBR,GAAuB1iG,KAAK9iC,GAEjDgmI,GAAgD,IAA5BA,EAAiBnqI,SACrCypI,GAAkBt5H,SAASg6H,EAAiB,GAAI,IAChDtjI,GAAO4gD,MAAO,2BAA0BgiF,OAE5C,MACJ,KAAKjpF,GAAAA,QAAAA,SAAAA,MACL,KAAKA,GAAAA,QAAAA,SAAAA,MAEDr8C,EAAO,YAAWA,IAClB60B,KAAAA,iBAAsC,IAAIzyB,MAAMpC,IAChD0C,GAAO5C,MAAME,KAarBq8C,GAAAA,QAAAA,mBAA6B,WACzB,OAAOipF,IAGXjpF,GAAAA,QAAAA,gBAA0B,SAASjpB,GAC/B,OAAQA,GACR,KAAKipB,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,MACD,MAAO,QACX,KAAKA,GAAAA,QAAAA,OAAAA,WACD,MAAO,aACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,eACD,MAAO,iBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,UACD,MAAO,YACX,KAAKA,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,cACD,MAAO,gBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,QACI,MAAO,YFjFfA,GAAAA,QAAAA,oBAA4B,SAAU,IAAIyoF,IG8FtC,MAAMzxB,EAAW10G,EAAQ00G,UAAY,GAGrCA,EAAS13D,OAASh9C,EAAQm9G,MAAMngE,OAEhCr/C,KAAK4zD,WArGb,YAOgB,IAPU,sBACtB8iD,EADsB,WAEtBG,EAAa,aAFS,MAGtBC,EAHsB,MAItBwyB,EAJsB,mBAKtB3yB,EALsB,sBAMtBC,EANsB,SAOtBG,GAAY,EAQZ,OALIuyB,IAEAzyB,GAAe,IAA+B,IAA7BA,EAAW1xG,QAAQ,KAAc,IAAM,YAAYmkI,KAGjE,IAAIhzB,GAAe,CACtBI,sBAAAA,EACAG,WAAAA,EACAF,mBAAAA,EACAC,sBAAAA,EACAG,SAAAA,EACAD,MAAAA,IAgFkB6yB,CAAiB,CAC/BjzB,sBAAuBr0G,EAAQq0G,sBAG/BG,WAAYx0G,EAAQw0G,YAAcx0G,EAAQunI,KAC1CN,MAAAA,EACA3yB,mBAAoBt0G,EAAQs0G,mBAC5BC,sBAAuBv0G,EAAQu0G,sBAC/BG,SAAAA,EACAD,MAAK,UAAEz0G,EAAQqhH,sBAAV,aAAE,EAAwB5M,QAInC92G,KAAK4zD,WAAW7oC,GAAGurF,GAAeC,OAAOE,oBAAoB,KAEzD,MAAMozB,EAAU,CACZC,eAAe,EACfC,aAAc/pI,KAAK4zD,WAAW6hD,KAAKQ,qBACnC+zB,wBAAyBhqI,KAAK4zD,WAAW4gD,2BAI7Cx0G,KAAK6sF,aAAa/gE,KACdm+G,GACAC,QACA/9H,OACAA,EACA09H,MAGR7pI,KAAKmqI,sBAELnqI,KAAKy4C,KAAO,IAAI04D,GAAKnxG,KAAK4zD,WAA6B,gCAGvD5zD,KAAKoqI,mBAOLn5B,EAAEx0G,QAAQsuB,IAAM/qB,KAAKqC,QAAQgoI,4BAA8B,GAAK,iBAAlD,UAA2EjP,IACrFp7H,KAAKuvD,WAAW6rE,GAAIjtD,OAAM,YAUlCi8D,mBAGIpqI,KAAKy4C,KAAK+iB,WAAW,qBACrBx7D,KAAKy4C,KAAK+iB,WAAW,8BACrBx7D,KAAKy4C,KAAK+iB,WAAW,wCACrBx7D,KAAKy4C,KAAK+iB,WAAW,+BACrBx7D,KAAKy4C,KAAK+iB,WAAW,0CACrBx7D,KAAKy4C,KAAK+iB,WAAW,kCACrBx7D,KAAKy4C,KAAK+iB,WAAW,kCACrBx7D,KAAKy4C,KAAK+iB,WAAW,0CAEfx7D,KAAKqC,QAAQs9G,YAAer6F,GAAQw+D,eACtC9jF,KAAKy4C,KAAK+iB,WAAW,sBAEU,IAA/Bx7D,KAAKqC,QAAQioI,eAA0BhlH,GAAQs+D,oBAC/C5jF,KAAKy4C,KAAK+iB,WAAW,mCAGc,IAA5Bx7D,KAAKqC,QAAQkoI,YAA8BvqI,KAAKqC,QAAQkoI,aAC/DvqI,KAAKy4C,KAAK+iB,WAAW,yBAIpBl2C,GAAQ8sD,kBAAkD,IAA3BpyE,KAAKqC,QAAQmoI,YAA6BxqI,KAAKqC,QAAQmoI,WACvFxqI,KAAKy4C,KAAK+iB,WAAW,wBASzBx7D,KAAKy4C,KAAK+iB,WAAW,qBACrBx7D,KAAKy4C,KAAK+iB,WAAW,qBAKjBl2C,GAAQk8D,oBAAoD,IAA/BxhF,KAAKqC,QAAQooI,gBAC1CrkI,GAAO+L,KAAK,sBACZnS,KAAKy4C,KAAK+iB,WAAW,kCAGrBx7D,KAAK4zD,WAAWq2D,MAChBjqH,KAAKy4C,KAAK+iB,WAAW,0BAGrB00C,GAAc1yC,YAAYx9D,KAAKqC,UAC/BrC,KAAKy4C,KAAK+iB,WAAWowC,IAAc,GAAO,GAOlD8+B,gBACI,OAAO1qI,KAAK4zD,WAchB+2E,oBAAiD,IAA/BC,EAA+B,uDAAjB,GAAI9zG,EAAa,uCAALpzB,EAAK,uCAC7C,MAAMksB,EAAMnzB,OAAOqhG,YAAYluE,MACzBi7G,EAAY9qF,GAAAA,QAAAA,gBAAwBjpB,GAAQpR,cASlD,GAPA1lB,KAAKk7F,gBAAgB2vC,GAAaj7G,EAClCxpB,GAAOD,IACF,kBAAiB0kI,IAAYnnI,EAAO,IAAGA,KAAS,QACjDksB,GAEJ5vB,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,0BAAsC2wC,EAAa9zG,EAAQpzB,GAClF1D,KAAK8qI,+BACDh0G,IAAWipB,GAAAA,QAAAA,OAAAA,WAA4BjpB,IAAWipB,GAAAA,QAAAA,OAAAA,SAE9C//C,KAAK+qI,qBACL/qI,KAAK4zD,WAAWm/C,aAAa1kD,cAAcruD,KAAK+qI,oBAChD/qI,KAAK+qI,mBAAqB,MAG9B/qI,KAAKgrI,eAAiBhrI,KAAK4zD,WAAW83D,OAAOmc,4BAE7CzhI,GAAO+L,KAAM,iBAAgBnS,KAAK4zD,WAAWtN,OAG7CtmD,KAAKirI,cAGLjrI,KAAKkrI,oBAAqB,EAC1BlrI,KAAKgrI,eAAiBhrI,KAAKy4C,KAAKw5D,yBAAyBjyG,KAAKqC,QAAQm9G,MAAMngE,QACvE8kB,MAAK,IAA8B,IAA7B,SAAEpa,EAAF,WAAYinD,GAAiB,EAC3BjnD,EAAS9d,IAAI8T,GAAAA,QAAAA,GAAAA,OACd35C,GAAO5C,MAAO,yBACVxD,KAAKqC,QAAQm9G,MAAMngE,0DAG3Br/C,KAAKmrI,4BACDn6B,OAAY7kG,MAEnBgiE,OAAM3qE,IACH,MAAMuyG,EAAS,0BAEfx9E,KAAAA,iBACI,IAAIzyB,MAAO,GAAEiwG,MAAWvyG,MAC5B4C,GAAO5C,MAAMuyG,EAAQvyG,GAErBxD,KAAK8qI,8BAA6B,MAI1C9qI,KAAKgrI,eAAgB,EAEjBJ,EAAYjzF,WACZ33C,KAAKwpI,mBAAoB,GAEzBxpI,KAAK4zD,YAAc5zD,KAAK4zD,WAAWhJ,WAChC7K,GAAAA,QAAAA,mBAA2B//C,KAAK4zD,WAAWtN,MAG9CtmD,KAAK6sF,aAAa/gE,KACdm+G,GACAlqF,GAAAA,QAAAA,mBAA2B//C,KAAK4zD,WAAWtN,WAEhD,GAAIxvB,IAAWipB,GAAAA,QAAAA,OAAAA,SACN,+BAARr8C,EACA1D,KAAKorI,2BAA4B,EAEjCprI,KAAKqrI,kBAAmB,EAE5BrrI,KAAKsrI,aAAe5nI,EACR,cAARA,GACA1D,KAAK6sF,aAAa/gE,KACdm+G,GACAC,GAAmCxmI,QAExC,GAAIozB,IAAWipB,GAAAA,QAAAA,OAAAA,MAClB//C,KAAKsrI,aAAe5nI,OACjB,GAAIozB,IAAWipB,GAAAA,QAAAA,OAAAA,aAA6B,CAE/C//C,KAAK4zD,WAAW6hD,KAAKO,eACrB,MAAMu1B,EAA2B3pD,QAAQ5hF,KAAKupI,sBACxChH,EAAS7+H,GAAO1D,KAAKsrI,aAE3B,GAAItrI,KAAKorI,0BAELprI,KAAK6sF,aAAa/gE,KACdm+G,GACAC,SACD,GAAIlqI,KAAKqrI,iBACZrrI,KAAK6sF,aAAa/gE,KACdm+G,GACAC,GACA3H,OACAp2H,EACAnM,KAAKwrI,0CACN,GAAID,EACPvrI,KAAK6sF,aAAa/gE,KACdm+G,GAA+C1H,OAChD,CAMHn8H,GAAO5C,MAAM,4BAIb,MAAMwlI,EAAkBjpF,GAAAA,QAAAA,qBAEpBipF,GAAmB,KAAOA,EAAkB,IAC5ChpI,KAAK6sF,aAAa/gE,KACdm+G,GACAC,GACA3H,GAAU,oBACQp2H,EAClBnM,KAAKwrI,qCAETxrI,KAAK6sF,aAAa/gE,KACdm+G,GACAC,GACA3H,GAAU,gCACQp2H,EAClBnM,KAAKwrI,2CAGd,GAAI10G,IAAWipB,GAAAA,QAAAA,OAAAA,SAAyB,CAC3C,MAAM0rF,EAAuBzrI,KAAK0qI,gBAAgBn2B,uBAGlDv0G,KAAK6sF,aAAa/gE,KACdm+G,GACAC,GACAxmI,GAAO1D,KAAK0rI,8BAA8BD,GAC1Cb,IAWZO,4BAA4Bn6B,EAAYjnD,GAEpCinD,EAAWruG,SAAQ6hG,IAaf,GAZsB,kBAAlBA,EAAShlG,OACTQ,KAAKu5G,6BAA+B/U,EAASt8F,MAG3B,iBAAlBs8F,EAAShlG,OACTQ,KAAK2rI,6BAA+BnnC,EAASt8F,MAG3B,wBAAlBs8F,EAAShlG,OACTQ,KAAK4rI,mCAAqCpnC,EAASt8F,MAGjC,eAAlBs8F,EAAShlG,KAAuB,CAChCQ,KAAK67G,gBAAiB,EACtB,MAAMgwB,EAAuBhlH,IACzBA,EAAElkB,SAAQmpI,IACFA,EAAG3pE,SAAS,0BACZniE,KAAK6sF,aAAa/gE,KAAKm+G,QAK/BlgF,EACA8hF,EAAqB9hF,GAErBy6C,EAASt8F,MAAQlI,KAAKy4C,KAAKw5D,yBAAyBzN,EAASt8F,KAAMs8F,EAAShlG,MACvE2kE,MAAK,QAAGpa,SAAUljC,GAAb,SAAqBglH,EAAqBhlH,MAC/CsnD,OAAM1lE,GAAKrC,GAAO6lB,KAAK,qCAAsCxjB,GAAKA,EAAE1J,WAI3D,UAAlBylG,EAAShlG,OACTQ,KAAKqC,QAAQqhH,eAAe5M,MAAQ92G,KAAK4zD,WAAWkjD,MAAQtS,EAASt8F,MAGnD,WAAlBs8F,EAAShlG,OACTQ,KAAKqC,QAAQqhH,eAAeqoB,OAAS/rI,KAAK4zD,WAAWm4E,OAASvnC,EAASt8F,MAGrD,mBAAlBs8F,EAAShlG,OACTQ,KAAKg7G,8BAAgCxW,EAASt8F,SAItDlI,KAAK8qI,8BAA6B,IAE9B9qI,KAAKu5G,8BACFv5G,KAAK2rI,8BACL3rI,KAAK4rI,qCACR5rI,KAAK4zD,WAAWp7B,WAAWx4B,KAAKgsI,kBAAkBhpI,KAAKhD,MAAO,KAAM,UAAW,KAAM,MAU7F0rI,8BAA8BhoI,GAC1B,IAAKA,EACD,OAAO,KAGX,MAAM6kB,EAAU4gH,GAAc3iG,KAAK9iC,GAEnC,OAAO6kB,EAAUA,EAAQ,GAAK,KAQlCmkC,SAASpG,EAAK3O,GA4BV33C,KAAKirI,cAGLjrI,KAAKgrI,eAAgB,EACrBhrI,KAAKkrI,oBAAqB,EAEtBlrI,KAAK4zD,WAAWm/C,cAAgB/yG,KAAK4zD,WAAWm/C,aAAanhD,eAC7D5xD,KAAK+qI,mBAAqB/qI,KAAK4zD,WAAWm/C,aAAanhD,eACnD5xD,KAAKisI,iBAAiBjpI,KAAKhD,MAC3B,KACA,WAGJoG,GAAO6lB,KAAK,gEAGhBjsB,KAAK4zD,WAAW3H,QACZ3F,EACA3O,EACA33C,KAAK2qI,kBAAkB3nI,KAAKhD,KAAM,CAC9BsmD,IAAAA,EACA3O,SAAAA,KAUZs0F,iBAAiBvoI,GAEb,GAAwC,IAApCutG,EAAEvtG,GAAK4L,KAAK,aAAa/P,QAAiD,IAAjC0xG,EAAEvtG,GAAK4L,KAAK,UAAU/P,OAC/D,OAGJS,KAAKgrI,eAAgB,EAErB,MAAMkB,EAAkBlsI,KAAK4zD,WAAW83D,OAAOqc,gCAAgCrkI,IAEzE,SAAEqmD,EAAF,WAAYinD,GAAeD,GAAertG,GAEhD1D,KAAKmrI,4BAA4Bn6B,EAAYjnD,IAEzCmiF,GAAmBl7B,EAAW3+E,KAAO,GAAK03B,EAAS13B,KAAO,KAC1DryB,KAAK4zD,WAAWm/C,aAAa1kD,cAAcruD,KAAK+qI,oBAChD/qI,KAAK+qI,mBAAqB,MAWlCp+E,OAAOtqD,GACHrC,KAAKirI,cAGLjrI,KAAKgrI,eAAgB,EAErB,MAAMp7G,EAAM5vB,KAAKk7F,gBAAgBixC,UAAY1vI,OAAOqhG,YAAYluE,MAEhExpB,GAAOD,IAAI,8BAA+BypB,GAC1C5vB,KAAK4zD,WAAWjH,OAAOtqD,EAAQikD,IAAKjkD,EAAQuqD,IACxCl9C,SAASrN,EAAQwqD,IAAK,IAAM,EAC5B7sD,KAAK2qI,kBAAkB3nI,KAAKhD,KAAM,CAC9BsmD,IAAKjkD,EAAQikD,IACb3O,SAAUt1C,EAAQs1C,YAQ9BszF,cACIjrI,KAAKorI,2BAA4B,EACjCprI,KAAKqrI,kBAAmB,EACxBrrI,KAAKsrI,kBAAen/H,EACpBnM,KAAKupI,0BAAuBp9H,EAQhC8/C,QAAQ3F,EAAK3O,GACT,IAAK2O,EAAK,CACN,MAAM,gBAAEu6D,EAAF,OAAmBxhE,GAAWr/C,KAAKqC,QAAQm9G,MACjD,IAAI4sB,EAAevrB,GAAmBxhE,EAStC,MAAM,SAAEp0C,GAAaxO,OAErB,GAAIokH,EAAiB,CACjB,MAAM35F,EAASjc,GAAYA,EAASic,QAE/BA,IAA4C,IAAlCA,EAAO/hB,QAAQ,eACnBnF,KAAKspI,SACZ8C,EAAe/sF,GAKvBiH,EAAM8lF,GAAiBnhI,GAAYA,EAASohI,SAGhD,OAAOrsI,KAAK0sD,SAASpG,EAAK3O,GAa9B4kE,WAAW7kF,EAAUr1B,EAASiqI,GAE1B,MAAMjtF,EAAS3nB,EAAS2nB,QAAUh9C,EAAQi6G,aAG1C,IAAIze,EAAW,GAAE79F,KAAKusI,WAAW70G,EAAU2nB,MAC3C,MAAMmtF,EAAcF,EACdA,EAAiBtsI,KAAK4zD,WAAWtN,IAAKtmD,KAAKwpI,mBAC3C1wG,KAAAA,gBAA2B,GAAGpT,cAKpC,OAHAtf,GAAO+L,KAAM,OAAMnS,KAAK4zD,WAAWtN,0BAA0BkmF,KAC7D3uC,GAAW2uC,EAEJxsI,KAAK4zD,WAAW29C,KAAKgL,WAAW1e,EAAS,KAAMx7F,GAU1DkqI,WAAW70G,EAAU2nB,GACjB,MAAQ,GAAE3nB,KAAY2nB,GAAkBr/C,KAAKqC,QAAQm9G,MAAMitB,IAAI/mH,gBASnEqlG,cAAcrzF,EAAU2nB,GACpB,OAAOr/C,KAAK4zD,WAAW29C,KAAKwZ,cAAc/qH,KAAKusI,WAAW70G,EAAU2nB,IAQxE0/C,SACI,OAAO/+F,KAAK4zD,WAAWtN,IAO3BomF,eACI,MAAMhhB,EAAS1rH,KAAK4zD,WAAW83D,OAG/B,OAAOA,EAASA,EAAO4c,SAAW,GAMtCqE,aACI,OAAQ3sI,KAAK4zD,WAAWxtD,QAAU,IAAID,KAAO,KAMjD6jH,OACIhqH,KAAK4zD,WAAWq2D,KAAKD,QAAQ,WASjCvU,KAAK1nD,GACD,OAAO,IAAIvjC,SAAQ,CAACC,EAASrU,KACzBpW,KAAK4zD,WAAW6hD,KAAKA,KAAKz1G,KAAK4zD,WAAWgkD,WAAYntF,EAASrU,EAAQ23C,MAO/E6+E,cACI,OAAO5sI,KAAK4zD,WAAW83D,OAAOib,SAUlCp3E,WAAW6rE,GACP,OAAIp7H,KAAKupI,qBACEvpI,KAAKupI,qBACJvpI,KAAK4zD,YAIjB5zD,KAAKupI,qBAAuB,IAAI/+G,SAAQC,IACpC,MAAMoiH,EAAqB,CAACjC,EAAa9zG,KACjCA,IAAWipB,GAAAA,QAAAA,OAAAA,eACXt1B,IACAzqB,KAAK6sF,aAAa30E,eAAe+hF,KAAAA,0BAAsC4yC,KAI/E7sI,KAAK6sF,aAAa9hE,GAAGkvE,KAAAA,0BAAsC4yC,MAG/D7sI,KAAK8sI,uBAAuB1R,GAErBp7H,KAAKupI,sBAhBD/+G,QAAQC,UA4BvBqiH,uBAAuB1R,GAWnB,IAFCp7H,KAAK4zD,WAAW8jD,kBAAoB13G,KAAK4zD,WAAWrvD,SAEhDvE,KAAK4zD,WAAW8jD,kBAAjB,MAAqC0jB,EAA0C,CAC/E,MAAM2R,EAAS3R,EAAG57H,KAElB,IAAe,iBAAXutI,GAAwC,WAAXA,KAI7B/sI,KAAK4zD,WAAWvxD,QAAQk2D,MAAO,EAG3Bv4D,KAAK4zD,WAAWilD,yBAEhB,OAKZ74G,KAAK4zD,WAAWrE,cAEqB,IAAjCvvD,KAAK4zD,WAAWvxD,QAAQk2D,MACxBv4D,KAAK4zD,WAAWrvD,QAOxB4lI,sBACI,MAAMzD,EAAY,CACdG,IAAK,CAAE12D,WAAY,IACnBijB,IAAK,CAAEjjB,WAAY,KAGjB68D,EAAkBhtI,KAAKqC,QAAQ+wF,KAC9BpzF,KAAKqC,QAAQ+wF,IAAI65C,aAAgB7D,GAEpCjrI,MAAMC,QAAQ4uI,KACd5mI,GAAO+L,KAAK,qBAAsB66H,GAClCtG,EAAUtzC,IAAIjjB,WAAa68D,GAG3BhtI,KAAKqC,QAAQ+wF,KAAOpzF,KAAKqC,QAAQ+wF,IAAI85C,qBACrC9mI,GAAO+L,KAAK,6BACRnS,KAAKqC,QAAQ+wF,IAAI85C,oBAErBxG,EAAUtzC,IAAI85C,mBACRltI,KAAKqC,QAAQ+wF,IAAI85C,oBAG3BltI,KAAK4zD,WAAWrM,oBAAoB,OAAQ,IAAIujE,GAAoB9qH,OACpEA,KAAK4zD,WAAWrM,oBAAoB,SAAU,IAAIk/E,GAAuBzmI,KAAMA,KAAK6sF,aAAc65C,IAClG1mI,KAAK4zD,WAAWrM,oBAAoB,OAAQ,IAAIqhF,IASpD4C,oCACI,MAAM3B,EAAU,GAGhB,GAAI7pI,KAAKqC,QAAQqhH,gBACV1jH,KAAKqC,QAAQqhH,eAAe5M,OAC5B92G,KAAK4zD,WAAW8C,oBAAqB,CAGxC,MAAMy2E,EAAantI,KAAK4zD,WAAW8C,oBAC9B3jB,OAAOt1C,MAAM,WACZm7D,EAAU,GAEhBu0E,EAAWxqI,SAAQiD,IACf,MAAM2G,EAAQ3G,EAAKnI,MAAM,MACnBo7D,EAAStsD,EAAMgO,QACf9Q,EAAQ8C,EAAMyB,KAAK,MAEzB4qD,EAAQC,GAAUpvD,KAItBogI,EAAQC,cACF9pI,KAAKqC,QAAQqhH,eAAe5M,QACtBl+C,EAAQ,iBAUxB,OAJAixE,EAAQE,aAAe/pI,KAAK4zD,WAAW6hD,KAAKQ,qBAC5C4zB,EAAQG,wBAA0BhqI,KAAK4zD,WAAW4gD,0BAG3Cq1B,EAQXjgD,yBAAyB4O,GAErB,IAAKx4F,KAAK2rI,+BAAiCnzC,EACvC,OAGJ,MAAM90F,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAK2rI,+BAE5BjoI,EAAItC,EAAE,eAAgB,CAClBqmD,MAAO,2BACPsyC,KAAMvB,IACL7wC,KAEL3nD,KAAK4zD,WAAW3+B,KAAKvxB,GAQzB0pI,0BAA0B50C,EAASn9E,GAE/B,IAAKrb,KAAK2rI,+BAAiCnzC,EACvC,OAGJ,MAAM90F,GAAMo3D,EAAAA,GAAAA,MAAK,CAAEgB,GAAI97D,KAAK2rI,+BAE5BjoI,EAAItC,EAAE,mBAAoB,CACtBqmD,MAAO,2BACPsyC,KAAMvB,EACN60C,WAAYhyH,EAAQiV,iBACpBC,SAAUlV,EAAQkV,WACnBo3B,KAEH3nD,KAAK4zD,WAAW3+B,KAAKvxB,GAYzBwkH,sBAAsBolB,GAElB,IAAKA,EACD,OAAO,EAGX,IACI,MAAMl2G,EAAO7zB,KAAK+G,MAAMgjI,GASxB,GAAIl2G,GAAwB,iBAATA,EAAmB,CAClC,MAAM53B,EAAO43B,EAAKg1E,IAElB,QAAoB,IAAT5sG,EACP,OAAO43B,EAGXhxB,GAAO4gD,MAAM,yDACM,UAAWxnD,IAEpC,MAAOiJ,GAGL,OAFArC,GAAO5C,MAAO,sBAAqB8pI,IAAc7kI,IAE1C,EAGX,OAAO,EAUXujI,kBAAkBtoI,GACd,MAAM04C,EAAO14C,EAAIgiD,aAAa,QAE9B,GAAMtJ,IAASp8C,KAAK2rI,8BACbvvF,IAASp8C,KAAK4rI,oCACdxvF,IAASp8C,KAAKu5G,8BACdn9D,IAASp8C,KAAKg7G,8BACjB,OAAO,EAGX,MAAMgN,EAAc/W,EAAEvtG,GAAK4L,KAAK,iBAC3BtL,OACCikH,EAAajoH,KAAKkoH,sBAAsBF,GAE9C,OAAKC,IAImC,iBAApCA,EAAW7b,KAA2C6b,EAAWslB,MACjEvtI,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,uBAAmCguB,EAAWslB,OAC1B,wBAApCtlB,EAAW7b,KAAkD6b,EAAWulB,kBAC/ExtI,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,8BAA0CguB,EAAWulB,mBACjC,kBAApCvlB,EAAW7b,IAClBpsG,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,uBAAmCguB,GACf,mBAApCA,EAAW7b,KAClBpsG,KAAK6sF,aAAa/gE,KAAKmuE,KAAAA,qBAAiCguB,IAGrD,GAWX6iB,6BAA6BtmI,GACzB,MAAMipI,EAAmB,CACrB1tF,GAAAA,QAAAA,OAAAA,MACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,SACAA,GAAAA,QAAAA,OAAAA,aACAA,GAAAA,QAAAA,OAAAA,aAGJ,KAAKv7C,GAAWipI,EAAiBl3G,SAASv2B,KAAK4zD,WAAW98B,SAAW92B,KAAKkrI,oBACtE,OAKJ,MAAMwC,EAAS1tI,KAAKqC,QAAQqhH,eAE5B,GAAIgqB,GAAUpvI,OAAOmE,KAAKirI,GAAQnuI,OAAS,EAAG,CAC1C,MAAMg9F,EAAY,CAElBA,GAAe,mBACf,IAAK,MAAM73C,KAAQgpF,EACXA,EAAO75H,eAAe6wC,KACtB63C,EAAU73C,GAAQgpF,EAAOhpF,IAIjC2wC,GAAWwD,QAAQt1F,KAAKF,UAAUk5F,IAGtCv8F,KAAKkrI,oBAAqB,GCh+BnB,SAASyC,GAAT,GAYZ,IAEKC,GAd2C,GAE/C5mI,EAF+C,SAG/C2wC,EAH+C,iBAI/C20F,EAJ+C,kBAQ/CuB,EAR+C,aAW/CC,GACD,EACKC,GAAW,EAEXz4C,EAAO,IAAI6sB,GAAKniH,KAAK4zD,WAAWvxD,SAEpC,MAAMvF,EAAU,IAAI0tB,SAAQ,CAACC,EAASrU,KAIlCw3H,EAAgBx3H,EAGhBk/E,EAAKh+E,YACD8lE,IACA,KACIkY,OAAOnpF,KAEfmpF,EAAKh+E,YACDsmB,IACA,KACQmwG,IAKJF,GAAqBA,IAGRv4C,EAAKinB,WACdv8G,KAAKqC,QAAQ6F,KACblI,KAAKqC,QAAQ6G,OACbojI,GAGC1pB,UAAUxxD,eACV+S,MAAK,KACFmxB,GAAQA,EAAK/lC,aAETw+E,IAOJ/tI,KAAKgO,KAAK8/H,GAEVrjH,QAEH0jD,OAAM,IAAwB,IAAvB,MAAE3qE,EAAF,QAASzE,GAAc,EAC3Bu2F,EAAK/lC,aAELn5C,EAAO,CACH43H,oBAAqBxqI,EACrBzE,QAAAA,WAIpBu2F,EAAKh+E,YACDumB,IACA,CAACowG,EAAiBlvI,EAAS6rI,KACvBx0H,EAAO,CACH63H,gBAAAA,EACArD,YAAAA,EACA7rI,QAAAA,IAEJu2F,OAAOnpF,KAGf4hI,GAAYz4C,EAAKrpC,QAAQjlD,EAAI2wC,MAgBjC,OANA76C,EAAQmyC,OAAS,KACb8+F,GAAW,EACXH,EAAc,IACdt4C,GAAQA,EAAK/lC,cAGVzyD,ECpJX,MAAMsJ,IAASyB,EAAAA,EAAAA,4CASR,MAAMqmI,GAcTtvI,YAAY8zB,EAAYrwB,GACpBrC,KAAK0yB,WAAaA,EAClB1yB,KAAKqC,QAAUA,EAGfrC,KAAKmuI,cAAgB9rI,EAAQ8rI,gBAAkBnc,KAAAA,SACzC7lH,EACAnM,KAAKouI,kBAAkB/rI,EAAQ8rI,eAGrC,MAAME,EAAWruI,KAAKouI,kBAAkB/rI,EAAQgsI,UAC1CC,EAAWtuI,KAAKouI,kBAAkB/rI,EAAQisI,UAEhDtuI,KAAKuuI,kBAAoBF,GAAYruI,KAAKwuI,kBAAkBH,GAAYA,EAAWrc,KAAAA,IACnFhyH,KAAKyuI,kBAAoBH,GAAYtuI,KAAKwuI,kBAAkBF,GAAYA,EAAWtc,KAAAA,IACnF5rH,GAAO4gD,MAAO,iDAAgDhnD,KAAKuuI,wCACxDvuI,KAAKyuI,qBAEZzuI,KAAKuuI,oBAAsBvc,KAAAA,KAAsB1sG,GAAQ29D,gBACzDjjF,KAAKuuI,kBAAoBvc,KAAAA,KAG7BhyH,KAAK0yB,WAAW3H,GACZwsE,IACA,IAAMv3F,KAAK0uI,0BACf1uI,KAAK0yB,WAAW3H,GACZwsE,IACA,IAAMv3F,KAAK0uI,0BACf1uI,KAAK0yB,WAAW3H,GACZwsE,IACA7rF,GAAW1L,KAAK2uI,sBAAsBjjI,KAU9C0iI,kBAAkB15F,GACd,MAAqB,iBAAVA,EACAp2C,OAAOiS,OAAOyhH,MAAe1iH,MAAK7F,GAASA,IAAUirC,EAAMhvB,gBAG/D,KAUX8oH,kBAAkBvT,GAGd,SAAI31G,GAAQ8sD,cAAe9sD,GAAQ07D,kBAI5BvkF,OAAOktE,gBACPltE,OAAOktE,eAAe6Y,iBACtB/lF,OAAOktE,eAAe6Y,gBAAgB,SAASxqC,OACjDzlC,MAAKmiC,GAASA,EAAMxiB,SAASxM,gBAAmB,SAAQu1G,MAWjE0T,sBAAsBC,GAClB,MAAM3T,EAAiB2T,EAAazlD,MAAQnpF,KAAKyuI,kBAAoBzuI,KAAKuuI,kBACpEJ,EAAgBnuI,KAAKmuI,eAAiBnuI,KAAKwuI,kBAAkBxuI,KAAKmuI,eAClEnuI,KAAKmuI,cACL,KAENnuI,KAAK0uI,sBAAsBE,EAAc3T,EAAgBkT,GAW7DO,wBAAwF,IAA7CzT,EAA6C,uDAA5B,KAAMkT,EAAsB,uDAAN,KAC9E,MAAMziI,GAD8E,uDAAnD,OACa1L,KAAK0yB,WAAWgnE,iBACxDm1C,EAAe5T,GAAkCj7H,KAAKuuI,kBAC5D,IAAIO,EAAgBD,EAEpB,GAAInjI,IAAYA,EAAQy9E,QAAUnpF,KAAKqC,QAAQ0sI,sBAAuB,CAClE,MAAMC,EAAqBhvI,KAAK0yB,WAAWosE,kBAAkBzyF,KAAIguF,GAAeA,EAAYmI,UAE5F,IAAK,MAAMysC,KAAUD,EAAoB,CACrC,MAAME,EAAgBxjI,EAAQisH,gBAAgBwX,iBAAiBF,EAAQ16C,IACjE66C,EAAYF,MAAAA,OAAH,EAAGA,EAAetlB,UAE7BwlB,GACGA,IAAcP,IACbO,IAAcpd,KAAAA,KAAqB1sG,GAAQ29D,iBAC/C6rD,EAAgBM,IAI5B1jI,GAAWA,EAAQ2zH,eAAeyP,EAAeX,GAUrDkB,oBACI,OAAOrvI,KAAKuuI,6CCnJpB,MAAMnoI,IAASyB,EAAAA,EAAAA,2CAMA,MAAMynI,GAWjB1wI,YAAYynF,EAAgBkpD,EAAOhlH,GAC/B,IAAK87D,IAAmBkpD,EACpB,MAAM,IAAIjkH,UAAU,kDACjB,GAAI+6D,GAAkBkpD,EACzB,MAAM,IAAIjkH,UAAU,qDA4BxB,GAzBI+6D,EACAjgF,GAAO4gD,MAAM,qCAEb5gD,GAAO4gD,MAAO,6BAA4BuoF,MAK9CvvI,KAAKwvI,SAAW,KAGhBxvI,KAAKyvI,cAAgBllH,EAIrBvqB,KAAK0vI,MAAQ,KAGb1vI,KAAK2vI,oBAAqB,EAG1B3vI,KAAK4vI,mBAAoB,EAIrBvpD,EAAgB,CAChB,MAAMwpD,EACAxpD,EAAexT,kBACb,mBAAoB,CAChBn/B,SAAU,uCAItB1zC,KAAK8vI,eAAeD,GACpB7vI,KAAK0vI,MAAQ,mBAGNH,IACPvvI,KAAK2vI,oBAAqB,EAC1B3vI,KAAK+vI,OAASR,EACdvvI,KAAKgwI,kBASbA,iBAEI,MAAMC,EAAK,IAAIx2E,UAAUz5D,KAAK+vI,QAG9B/vI,KAAK8vI,eAAeG,GACpBjwI,KAAK0vI,MAAQ,YAQjBQ,0BACI,IAAIC,EAAW,EAEf,MAAMC,EAAS,KACPpwI,KAAKqwI,WAGTrwI,KAAKgwI,eAAehwI,KAAK+vI,QACzBI,EAAWl/H,KAAKoO,IAAe,EAAX8wH,EAAc,IAClCnwI,KAAKswI,cAAgBhsI,WAAW8rI,EAAmB,IAAXD,KAG5CnwI,KAAKswI,cAAgBhsI,WAAW8rI,EAAmB,IAAXD,GAQ5CI,yBACQvwI,KAAKswI,gBACLjsI,aAAarE,KAAKswI,eAClBtwI,KAAKswI,mBAAgBnkI,GAU7BqkI,0BAA0BC,GACtB,IAAKzwI,KAAK2vI,mBACN,OAEJ,MAAM,KAAE/uI,EAAF,OAAQ03B,GAAWm4G,EAEzBp7C,GAAWiE,cjEqZ2B,SAAS14F,EAAM03B,GACzD,MAAO,CACH94B,KAAMy9E,GACNnuE,OAAQ,uBACRyyC,WAAY,CACR3gD,KAAAA,EACA03B,OAAAA,IiE3ZqBo4G,CAA+B9vI,EAAM03B,IAC9Dt4B,KAAK2vI,oBAAqB,EAC1B3vI,KAAKyvI,cAAcnlH,KAAKizE,KAAAA,mBAA6B,KACjDv9F,KAAKuwI,yBACLvwI,KAAK2vI,oBAAqB,KAE9B3vI,KAAKkwI,0BAOLS,WACA,OAAO3wI,KAAK0vI,MAMhBj1E,QAII,GAHAz6D,KAAK4vI,mBAAoB,EACzB5vI,KAAKuwI,yBACLvwI,KAAK2vI,oBAAqB,EACtB3vI,KAAKwvI,SAAU,CACf,IACIxvI,KAAKwvI,SAAS/0E,QAChB,MAAOj3D,IAETxD,KAAKwvI,SAAW,MASxBa,SACI,OAAOrwI,KAAKwvI,WAA0C,SAA7BxvI,KAAKwvI,SAAS1mH,YAChC9oB,KAAKwvI,SAAS1mH,aAAe2wC,UAAUk+C,MAQlDi5B,yBAAyBv1H,GACrBrb,KAAK4tD,MAAM,CACPijF,aAAc,mBACXx1H,IAaXizF,YAAYxyC,EAAIzgD,GACZrb,KAAK4tD,MAAM,CACPijF,aAAc,kBACdC,WAAYz1H,EACZygD,GAAAA,IAQRi1E,oBAAoBtnI,GAChBrD,GAAOD,IAAK,iBAAgBsD,MAE5BzJ,KAAK4tD,MAAM,CACPijF,aAAc,oBACdG,MAAOvnI,IAYfwnI,6BAA6BC,GACzB9qI,GAAOD,IAAK,+BAA8B+qI,MAE1ClxI,KAAK4tD,MAAM,CACPijF,aAAc,gCACdM,kBAAmBD,IAS3BE,mCAAmCC,GAC/BjrI,GAAOD,IAAK,uDAAsDkrI,OAClErxI,KAAK4tD,MAAM,CACPijF,aAAc,0BACd3Q,eAAgBmR,IASxBC,uCAAuC5tE,GACnCt9D,GAAOD,IAAK,yCAAwC5C,KAAKF,UAAUqgE,MACnE1jE,KAAK4tD,MAAM,CACPijF,aAAc,8BACXntE,IAUX6tE,qBAAqBxzC,GACjB33F,GAAO4gD,MAAO,+CAA8C+2C,KAC5D/9F,KAAK4tD,MAAM,CACPijF,aAAc,mBACd9yC,UAAAA,IAWRyzC,2BAA2Brd,EAAYp2B,GACnC33F,GAAO+L,KAAM,kDAAiDgiH,MAAep2B,KAC7E/9F,KAAK4tD,MAAM,CACPijF,aAAc,yBACd1c,WAAAA,EACAp2B,UAAAA,IAOR+xC,eAAe/8D,GACX,MAAMxoD,EAAUvqB,KAAKyvI,cAErB18D,EAAQrZ,OAAS,KACbtzD,GAAO+L,KAAM,GAAEnS,KAAK0vI,wBAQpBnlH,EAAQuB,KAAKyxE,KAAAA,oBAGjBxqB,EAAQ76C,QAAUG,IAGK,cAAfr4B,KAAK0vI,OACLtpI,GAAO5C,MAAO,kBAAiB60B,EAAMt5B,YAI7Cg0E,EAAQhZ,UAAY,IAAc,IAE1B17D,GAFa,KAAEwa,GAAW,EAI9B,IACIxa,EAAMkF,KAAK+G,MAAMuO,GACnB,MAAOrV,GAIL,OAHA+0B,KAAAA,iBAAsC/0B,QACtC4C,GAAO5C,MAAM,4CAA6CqV,EAAMrV,GAKpE,MAAMqtI,EAAexyI,EAAIwyI,aAEzB,OAAQA,GACR,IAAK,qCAAsC,CACvC,MAAM,wBAAEY,EAAF,iBAA2BC,EAAmB,IAAOrzI,EAE3D+H,GAAO4gD,MAAO,qBAAoByqF,yBAA+CC,KACjFnnH,EAAQuB,KAAKyxE,KAAAA,yBAAoCk0C,EAAyBC,GAC1E,MAEJ,IAAK,wCAAyC,CAC1C,MAAMrK,EAAWhpI,EAAIgpI,SACfllC,EAA0B,SAAf9jG,EAAIszI,OAErBvrI,GAAO+L,KAAM,uCAAsCk1H,YAAmBllC,KACtE53E,EAAQuB,KAAKyxE,KAAAA,6BAAwC8pC,EAAUllC,GAE/D,MAEJ,IAAK,kBACD53E,EAAQuB,KAAKyxE,KAAAA,0BAAqCl/F,EAAI+9C,KAAM/9C,EAAIyyI,YAEhE,MAEJ,IAAK,gBACDvmH,EAAQuB,KAAKyxE,KAAAA,wBAAmCl/F,EAAI+9C,KAAM/9C,GAE1D,MAEJ,IAAK,4BAA6B,CAE9B,MAAMuzI,EAAiBvzI,EAAIuzI,eAE3BxrI,GAAO+L,KAAM,4BAA2By/H,KACxCrnH,EAAQuB,KAAKyxE,KAAAA,uBAAkCq0C,GAE/C,MAEJ,IAAK,yBAA0B,CAC3B,MAAMC,EAAmBxzI,EAAIwzI,iBAEzBA,IACAzrI,GAAO+L,KAAM,2BAA0B5O,KAAKF,UAAUwuI,MACtDtnH,EAAQuB,KAAKyxE,KAAAA,iCAA4Cs0C,IAE7D,MAEJ,IAAK,cACDzrI,GAAO+L,KAAM,iCAAgC9T,EAAIqP,YACjD,MAEJ,QACItH,GAAO4gD,MAAM,mCAAoC3oD,GAMjDksB,EAAQuB,KAAM,mBAAkB+kH,IAAgBxyI,KAKxD00E,EAAQlZ,QAAUxhC,IACdjyB,GAAO+L,KAAM,sBAAoBnS,KAAK4vI,kBAAoB,SAAW,WAElD,cAAf5vI,KAAK0vI,QACA1vI,KAAK4vI,oBACNxpI,GAAO5C,MAAO,mBAAkB60B,EAAMz3B,QAAQy3B,EAAMC,UACpDt4B,KAAKwwI,0BAA0Bn4G,KAKvCr4B,KAAKwvI,SAAW,MAIpBxvI,KAAKwvI,SAAWz8D,EAUpBnlB,MAAMkkF,GACF,MAAM/+D,EAAU/yE,KAAKwvI,SAErB,IAAKxvI,KAAKqwI,SAEN,MADAjqI,GAAO5C,MAAM,2CACP,IAAIsC,MAAM,qBAGpBitE,EAAQ99C,KAAK1xB,KAAKF,UAAUyuI,2ECvZpC,MAAM1rI,IAASyB,EAAAA,EAAAA,sCAKXyd,GAAQ69D,eACRjhF,EAAQ,KAGZ,MAAM2qF,GAAe,IAAIziE,MASnB2nH,GAAsB,CACxBluE,MAAO,CACH9mC,OAAQ,CACJomC,MAAO,IACP/jD,IAAK,IACLC,IAAK,KAETyd,MAAO,CACHqmC,MAAO,KACP/jD,IAAK,KACLC,IAAK,OAOjB,IAAI2yH,GAAsB,UAEtBC,IAAqB,EAGrBC,IAAY,EAGZC,IAAa,EAGbC,IAAY,EAGZC,IAAa,EAGbtlB,GAAS,KAEb,MAAMulB,GAA0B3qH,SAASG,cAAc,SACjDyqH,QAC6C,IAAtCD,GAAwBE,UAErC,IACIC,GADAC,GAAmB,GAMvB,SAASC,MA0FT,SAASC,GAAyBC,EAAIhmI,GAClC,MAAMimI,EACAlxD,QAAQ/0E,IAAWA,EAAOolB,iBAAiB1yB,OAAS,EACpDwzI,EACAnxD,QAAQ/0E,IAAWA,EAAO64D,iBAAiBnmE,OAAS,EACpDyzI,EAAqB,IAEE,IAAzBH,EAAG1tI,QAAQ,WACX6tI,EAAmBnvE,MAAQkvE,IAEF,IAAzBF,EAAG1tI,QAAQ,WACX6tI,EAAmBrvE,MAAQmvE,GAG/BjmD,GAAa/gE,KAAKyxE,KAAAA,oBAA+By1C,GA4CrD,SAASC,GAA0BC,GAC/B,MAAMC,EACAD,EAAWtnI,QAAOvK,GAAgB,eAAXA,EAAEm3C,OAAuBj5C,OAChD6zI,EACAF,EAAWtnI,QAAOvK,GAAgB,gBAAXA,EAAEm3C,OAAwBj5C,OACjD8zI,EACAH,EAAWtnI,QAAOvK,GAAgB,eAAXA,EAAEm3C,OAAuBj5C,OAChD+zI,EACAJ,EAAWtnI,QAAOvK,GAAgB,gBAAXA,EAAEm3C,OAAwBj5C,OAEvD2zI,EAAWvwI,SAAQ4wI,IACf,MAAMhyF,EAAa,CACf,yBAA4B4xF,EAC5B,0BAA6BC,EAC7B,yBAA4BC,EAC5B,0BAA6BC,EAC7B,UAAaC,EAAOhvE,SACpB,gBAAmBgvE,EAAOC,QAC1B,YAAeD,EAAO/6F,KACtB,aAAgB+6F,EAAOjvE,OAG3B+wB,GAAWiE,clEzGa,mBkEyGmB/3C,MAenD,SAASkyF,GAAmBC,IAzE5B,SAAsCC,GAClC,OAAIA,EAAWp0I,SAAWmzI,GAAiBnzI,QAOvCo0I,EAAWtnI,IAAIunI,GAAuB79H,OAAO/H,KAAK,MAC1C0kI,GACCrmI,IAAIunI,GAAuB79H,OAAO/H,KAAK,IAQpD,SAAS4lI,EAAsBzhI,GAC3B,OAAO5O,KAAKF,UAAU,CAClBm1C,KAAMrmC,EAAKqmC,KACX+rB,SAAUpyD,EAAKoyD,SACfivE,QAASrhI,EAAKqhI,QACdlvE,MAAOnyD,EAAKmyD,MACZuvE,OAAQ1hI,EAAK0hI,WAkDjBC,CAA6BJ,KAYjChB,GAX8BgB,EAWKntI,MAAM,GACzCH,GAAO+L,KAAK,qCAAsCugI,IAElDO,GAA0BP,IAG1B7lD,GAAa/gE,KAAKyxE,KAAAA,wBAAmCm1C,IAErD7lD,GAAa/gE,KAAKyxE,KAAAA,oBAA+Bm1C,KAinBrD,MAAMqB,GAAW,IA3mBjB,cAAuBpsC,GAInB/oG,cACI6gF,MAAMoN,IAYVxiE,OAAmB,UAAdhoB,EAAc,uDAAJ,GAkmBnB,IAA+B2xI,EAjmBW,kBAAvB3xI,EAAQ8vI,aACfA,GAAa9vI,EAAQ8vI,WACrB/rI,GAAO+L,KAAM,gBAAeggI,OAEC,kBAAtB9vI,EAAQ+vI,YACfA,GAAY/vI,EAAQ+vI,UACpBhsI,GAAO+L,KAAM,eAAcigI,OAEE,kBAAtB/vI,EAAQ6vI,YACfA,GAAY7vI,EAAQ6vI,UACpB9rI,GAAO+L,KAAM,eAAc+/H,OAEG,kBAAvB7vI,EAAQgwI,aACfA,GAAahwI,EAAQgwI,WACrBjsI,GAAO+L,KAAM,gBAAekgI,OAEY,kBAAxC,UAAOhwI,EAAQyqH,oBAAf,aAAO,EAAsBC,UAC7BA,GAAS1qH,EAAQyqH,aAAaC,OAC9B3mH,GAAO+L,KAAM,WAAU46G,OAG3BtwH,OAAO6vF,cAAcmmD,IACrBA,QAA4BtmI,EAExBmZ,GAAQ07D,iBACRhhF,KAAKi0I,sBAAwB9zE,kBAE7BngE,KAAKk0I,uBAAoB/nI,EAEzBnM,KAAKm0I,YAAc,YAAiB,IAAR,GAAEntI,GAAM,EAKhC,MACkB,iBAAPA,EACDA,EACAqnH,GAAAA,mBAA2BrnH,IAEzChH,KAAKo0I,WAAa,QAAC,GAAEptI,GAAH,SAAYA,KAE9BhH,KAAKi0I,sBAAwB9zE,kBAE7BngE,KAAKk0I,mBAsjBcF,EArjBS,CAACvlF,EAAS5hD,KAC1B4hD,IACAA,EAAQ4lF,UAAYxnI,IAojBjC,SAAS4hD,EAAS5hD,GAErB,MAAMikG,EAAMkjC,EAAsBlxI,MAAMixI,GAAUhxI,WA4BlD,OA1BI8J,GACOknI,GAASO,wBAAwB,WACjCznI,EAAOolB,gBACPplB,EAAOolB,iBAAiB1yB,QAGxB0yI,IACPxjF,EAAQ+jF,UAAUuB,GAASQ,wBACtBpmE,OAAM,SAASqmE,GACZ,MAAMpgI,EACA,IAAIsoE,GAAgB83D,EAAI,KAAM,CAAE,gBAEtCj8G,KAAAA,8BAAmD,CAC/Cm3C,QAAS1vE,KACTs4B,OAAQlkB,IAGZhO,GAAO6lB,KACH,sGAGAwiC,EACAr6C,MAIT08F,IA9kBH9wG,KAAKm0I,YAAc,QAAC,GAAEntI,GAAH,SAAYA,GAC/BhH,KAAKo0I,WAAa,QAAC,GAAEptI,GAAH,SAAYA,IAGlChH,KAAKkwE,cAAgB5qD,GAAQk8D,mBAAqBl8D,GAAQ07D,gBACpD,CAAE/d,SAAU,CACV,CAAEwxE,yBAA0B,KAC5B,CAAEC,yBAAyB,KAE7B,GAENC,GAAAA,KAAoBtyI,GAEhBrC,KAAK40I,yBACL50I,KAAKkkE,kBAAiBzoD,IAClBi3H,GAAmBj3H,EAAGlV,MAAM,GAE5BH,GAAO4gD,MAAM,sBAAuB0rF,IACpCO,GAA0BP,IAE1B7lD,GAAa/gE,KACTyxE,KAAAA,sBACAm1C,IAEAptH,GAAQm9D,4BACRthB,UAAU2B,aAAa91C,iBACnB,gBACA,IAAMhtB,KAAKkkE,iBAAiByuE,MAIhCF,GAA4Bh2I,OAAOkvF,aAC/B,IAAM3rF,KAAKkkE,iBAAiByuE,KA7WP,QAwXzCzuE,iBAAiBjwD,GACbktD,UAAU2B,aAAaoB,mBAClBC,MAAKC,IACFqvE,GAAmBrvE,GACnBnwD,EAASmwD,MAEZ+J,OAAM3qE,IACH4C,GAAO6lB,KAAM,iCAAgCzoB,KAC7CiwI,GAAmB,IACnBx/H,EAAS,OAarB27D,cAAcilE,GAA0C,IAA/BnxE,EAA+B,uDAAjB,GAAI3V,EAAa,uDAAH,EACjD,OAAO,IAAIvjC,SAAQ,CAACC,EAASrU,KACzB,IAAI0+H,EAAYC,GAAiB,EAEV,iBAAZhnF,IAAyB5jC,MAAM4jC,IAAYA,EAAU,IAC5D+mF,EAAaxwI,YAAW,KACpBywI,GAAiB,EACjBD,OAAa3oI,EACbiK,EAAO,IAAIsmE,GAAgBE,OAC5B7uB,IAGPoT,UAAU2B,aAAawC,aAAa5B,GAC/BS,MAAKt3D,IACFzG,GAAOD,IAAI,sBACXysI,GAAyBiC,EAAWhoI,GAC/BkoI,SACyB,IAAfD,GACPzwI,aAAaywI,GAEjBrqH,EAAQ5d,OAGfshE,OAAM3qE,IACH4C,GAAO6lB,KAAM,wCAAuCzoB,KAASD,KAAKF,UAAUqgE,MAC5E,MAAM+oD,EAAa,IAAI/vC,GAAgBl5E,EAAOkgE,EAAamxE,GAEtDE,SACyB,IAAfD,GACPzwI,aAAaywI,GAEjB1+H,EAAO5S,IAGPipH,EAAWvkH,OAAS00E,IACpBg2D,GAAyBiC,OAAW1oI,SAmBxD6oI,mBACI,OAAKL,GAAAA,cAIE,IAAInqH,SAAQ,CAACC,EAASrU,KACzBu+H,GAAAA,cACI9nI,IACI4d,EAAQ5d,MAEZrJ,IACI4S,EAAO5S,SATRgnB,QAAQpU,OAAO,IAAItQ,MAAM,sCAyBxCmvI,oBAAiD,IAA/BC,EAA+B,uDAAZ,GAAIroI,EAAQ,uCAC7C,MAAMsoI,EAAiB,GAEjBC,EAAuBF,EAAiB3+G,SAAS,SACjDu8G,EACAjmI,GAAUA,EAAOolB,iBAAiB1yB,OAAS,EAE7C61I,IAAyBtC,GACzBqC,EAAejxI,KAAK,SAGxB,MAAMmxI,EAAuBH,EAAiB3+G,SAAS,SACjDw8G,EACAlmI,GAAUA,EAAO64D,iBAAiBnmE,OAAS,EAMjD,OAJI81I,IAAyBtC,GACzBoC,EAAejxI,KAAK,SAGjBixI,EAqBXG,+BAA+BjzI,GAC3B,MAAM,QACF0rD,KACGwnF,GACHlzI,EAEEmzI,EAAuB,GAYvBC,EAA4B,WAK9B,IAFwC,KAFtBF,EAAanxE,SAAW,IAE1Bj/D,QAAQ,WAGpB,OAAOqlB,QAAQC,UAGnB,MAAM,2BACFirH,GACAH,EAIJ,GAAIG,EAA4B,CAC5B,MAAMC,EACAjD,IAAoBA,GAAiBpjI,MAAKikI,GACxB,eAAhBA,EAAO/6F,OACC+6F,EAAOhvE,WAAamxE,GACrBnC,EAAOjvE,QAAUoxE,KAEhC,IAAKC,EACD,OAAOnrH,QAAQpU,OAAO,IAAIsmE,GACtB,CAAEx0E,KAAM,+BACR,GACA,CAAEwtI,KAIV,MAAMR,EAAmB,CAAE,SACrBxxE,EAAc,CAChBG,MAAO,CACHU,SAAUoxE,EAAepxE,WAMjC,OAAOvkE,KAAK4vE,cAAcslE,EAAkBxxE,EAAa3V,GACpDoW,MAAKt3D,IACK,CACHihH,WAAY,SACZjhH,OAAAA,MAKhB,OAAO7M,KAAKg1I,oBACdhyI,KAAKhD,MAqDD41I,EAA6B,WAC/B,MACMC,GADYN,EAAanxE,SAAW,CAAE,QAAS,UACXx4D,QAAO2nI,GAAqB,UAAXA,GAAiC,UAAXA,IAEjF,IAAKsC,EAAwBt2I,OACzB,OAAOirB,QAAQC,UAGnB,MAAMi5C,EAjkBlB,WAA+C,IAAvBmvE,EAAuB,uDAAlB,GAAIxwI,EAAc,uDAAJ,GAGvC,MAAMqhE,EAAcoyE,IAAAA,CAAUzzI,EAAQqhE,aAAequE,IAErD,GAAIc,EAAG1tI,QAAQ,UAAY,EAAG,CAE1B,GAAI4wI,KAAY1zI,EAAQmsF,YAAa,CACjC,MAAM5lF,EAAImtI,KAAY1zI,EAAQmsF,YAE9B9qB,EAAYG,MAAM9mC,OAAS,CAAEomC,MAAOv6D,EAAEm0B,QACtC2mC,EAAYG,MAAM/mC,MAAQ,CAAEqmC,MAAOv6D,EAAEk0B,OAuBzC,GApBK4mC,EAAYG,QACbH,EAAYG,MAAQ,IAOpBv+C,GAAQm8D,kBACJ/d,EAAYG,MAAM9mC,QAAU2mC,EAAYG,MAAM9mC,OAAOomC,MACrDO,EAAYG,MAAM9mC,OAAS,CAAEomC,MAAOO,EAAYG,MAAM9mC,OAAOomC,OAE7D/8D,GAAO6lB,KAAK,8DAEZy3C,EAAYG,MAAM/mC,OAAS4mC,EAAYG,MAAM/mC,MAAMqmC,MACnDO,EAAYG,MAAM/mC,MAAQ,CAAEqmC,MAAOO,EAAYG,MAAM/mC,MAAMqmC,OAE3D/8D,GAAO6lB,KAAK,8DAGhB5pB,EAAQ2zI,eACRtyE,EAAYG,MAAMU,SAAWliE,EAAQ2zI,mBAClC,CACH,MAAMjyE,EAAa1hE,EAAQ0hE,YAAckyE,KAAAA,KAEzCvyE,EAAYG,MAAME,WAAaA,QAGnCL,EAAYG,OAAQ,EAsBxB,OAnBIgvE,EAAG1tI,QAAQ,UAAY,GAClBu+D,EAAYC,OAAsC,kBAAtBD,EAAYC,QACzCD,EAAYC,MAAQ,IAGxBD,EAAYC,MAAQ,CAChBqpD,iBAAkBqlB,KAAeH,GACjC3tE,SAAUliE,EAAQ6zI,YAClBhpB,kBAAmBilB,KAAeD,GAClC/kB,kBAAmBilB,KAAcF,IAGjCnlB,IACAzuH,OAAOmoB,OAAOi9C,EAAYC,MAAO,CAAEspD,aAAc,KAGrDvpD,EAAYC,OAAQ,EAGjBD,EAigBqByyE,CAAeN,EAAyBN,GAI5D,OAFAnvI,GAAO+L,KAAK,0BAA2B5O,KAAKF,UAAUqgE,IAE/C1jE,KAAK4vE,cAAcimE,EAAyBnyE,EAAa3V,IAClE/qD,KAAKhD,MA0CP,OAAOy1I,IACFtxE,MAlGiC,SAASiyE,GAC3C,IAAKA,EACD,OAGJ,MAAM,OAAEvpI,EAAF,SAAUm5D,EAAV,WAAoB8nD,GAAesoB,EAEnCC,EAAqBxpI,EAAOolB,iBAElC,GAAIokH,EAAmB92I,OAAQ,CAC3B,MAAM+2I,EAAqB,IAAItkH,YAAYqkH,GAE3Cb,EAAqBtxI,KAAK,CACtB2I,OAAQypI,EACRtwE,SAAAA,EACA8nD,WAAAA,EACAl9F,MAAO0lH,EAAmBrkH,iBAAiB,KAInD,MAAMskH,EAAqB1pI,EAAO64D,iBAElC,GAAI6wE,EAAmBh3I,OAAQ,CAC3B,MAAMi3I,EAAqB,IAAIxkH,YAAYukH,GAE3Cf,EAAqBtxI,KAAK,CACtB2I,OAAQ2pI,EACRxwE,SAAAA,EACA8nD,WAAAA,EACAl9F,MAAO4lH,EAAmB9wE,iBAAiB,GAC3Cq4B,UAAWC,KAAAA,cAqElB75B,KAAKyxE,GACLzxE,MAlC6B,SAASsyE,GACvC,IAAKA,EACD,OAGJ,MAAMC,EAAcD,EAASxkH,iBAE7B,GAAIykH,EAAYn3I,OAAQ,CACpB,MAAMo3I,EAAc,IAAI3kH,YAAY0kH,GAEpClB,EAAqBtxI,KAAK,CACtB2I,OAAQ8pI,EACR/lH,MAAO+lH,EAAY1kH,iBAAiB,GACpC2kH,QAASrB,EAAaqB,UAI9B,MAAM9yC,EAAc2yC,EAAS/wE,iBAE7B,GAAIo+B,EAAYvkG,OAAQ,CACpB,MAAMs3I,EAAc,IAAI7kH,YAAY8xE,GAEpC0xC,EAAqBtxI,KAAK,CACtB2I,OAAQgqI,EACRjmH,MAAOimH,EAAYnxE,iBAAiB,GACpCq4B,UAAWC,KAAAA,OACX44C,QAASrB,EAAaqB,cAS7BzyE,MAAK,IAAMqxE,IACXrnE,OAAM3qE,IACHgyI,EAAqB7yI,SAAQ,IAAgB,IAAf,OAAEkK,GAAa,EACzC7M,KAAK82I,gBAAgBjqI,MAGlB2d,QAAQpU,OAAO5S,MAUlCoxI,wBACI,OAAOhzD,QACHzgB,UAAU2B,cACH3B,UAAU2B,aAAaoB,kBAUtCowE,wBAAwByC,GACpB,MAAmB,WAAfA,GAA0C,gBAAfA,EACpBxE,GAMS,eAAfwE,GAA8C,UAAfA,IAA2BzxH,GAAQo8D,eAY3Eo1D,gBAAgBE,GACPA,IAILA,EAAYrxE,YAAYhjE,SAAQiuB,IACxBA,EAAM/rB,MACN+rB,EAAM/rB,UAKVmyI,EAAYnyI,MACZmyI,EAAYnyI,OAMZmyI,EAAYC,SACZD,EAAYC,WAQpBC,0BACI,OAAOvC,GAAAA,cAWXwC,qBAAqB5yE,GACjB,OAAKvkE,KAAKs0I,wBAAwB,UAK3BhC,GAAwBE,UAAUjuE,GACpCJ,MAAK,KACF6tE,GAAsBztE,EACtB0tE,IAAqB,EAErB7rI,GAAOD,IAAK,8BAA6Bo+D,KAEzCsoB,GAAa/gE,KAAKyxE,KAAAA,4BACdh5B,MAZD/5C,QAAQpU,OACX,IAAItQ,MAAM,gDAqBtBqoH,2BAA2BC,GACvBumB,GAAAA,2BAA0CvmB,GAQ9CmmB,uBACI,OAAOvC,GAQXoF,oCACI,OAAO1E,GAOX2E,2CACI,OAAO3E,GAAiBngI,MAAKghI,GAAU3xD,QAAQ2xD,EAAOjvE,SAO1DgzE,4BAA4B/D,GACxB,MAAML,EAAa,GACbqE,EAAa,CACf,SAAYhE,EAAOhvE,SACnB,KAAQgvE,EAAO/6F,KACf,MAAS+6F,EAAOjvE,MAChB,QAAWivE,EAAOC,SAKtB,OAFAN,EAAWhvI,KAAKqzI,GAET,CAAErE,WAAAA,GAWbsE,gBAAgB9zE,EAAatG,GACpBsG,EAAYT,WACbS,EAAYT,SAAW,IAK3BS,EAAYT,SACNS,EAAYT,SAASr3D,QACnBxK,IAAMA,EAAEyS,eAAe,gCAE3BupD,GACAsG,EAAYT,SAAS/+D,KAAK,CAAEuzI,2BAA4B,WAgDpE,MCp7BMrxI,IAASyB,EAAAA,EAAAA,wCAKT6vI,GAAoB,CACtB,WAAc,SACd,aAAgB,WAChB,YAAe,WAMJ,MAAMC,WAAmBvtH,MAcpCxrB,YACQ8zB,EACA7lB,EACA+jB,EACAgnH,EACAC,EACA95C,GACJte,QAGAz/E,KAAKgtB,iBAAmBhtB,KAAKsX,YAC7BtX,KAAKktB,oBAAsBltB,KAAKiuB,IAAMjuB,KAAKkY,eAM3ClY,KAAK83I,WAAa,GAClB93I,KAAK0yB,WAAaA,EAClB1yB,KAAK6qF,YAAc,EACnB7qF,KAAKR,KAAOq4I,EACZ73I,KAAK4wB,MAAQA,EACb5wB,KAAK+9F,UAAYA,EACjB/9F,KAAKg4B,SAAW,IAAIsP,IASpBtnC,KAAKgkF,UAAW,EAShBhkF,KAAK+3I,uBAAyBH,EAE9B53I,KAAKg4I,WAAWnrI,GAWpBorI,+BAA+BptH,GACvBvF,GAAQ8sD,YACRpyE,KAAK4wB,MAAMsnH,QAAUrtH,EAErB7qB,KAAK6M,OAAOsrI,WAAattH,EAUjCutH,YAAY54I,EAAMqrB,GACd,GAAK6sH,GAAkB7jI,eAAerU,IAWtC,GANIqrB,EACA7qB,KAAKg4B,SAAS7K,IAAI3tB,EAAMqrB,GAExB7qB,KAAKg4B,SAAS2oC,OAAOnhE,GAGrBQ,KAAK6M,OACL,IAAK,MAAM+jB,KAAS5wB,KAAK6M,OAAO84D,YAC5B/0C,EAAM8mH,GAAkBl4I,IAASqrB,OAZrCzkB,GAAO5C,MAAO,wBAAuBhE,KAqB7C64I,sBACI,GAAKr4I,KAAK6M,OAAV,CAOA,IAAK,MAAMrN,KAAQQ,KAAKg4B,SAASv1B,OAE7B,IAAK,MAAM61I,KAAct4I,KAAK6M,OAAO64D,iBACjC4yE,EAAWZ,GAAkBl4I,SAAS2M,EAG1CnM,KAAK+3I,wBACL/3I,KAAKi4I,oCAA+B9rI,QAbpC/F,GAAO6lB,KACF,GAAEjsB,0DAuBfg4I,WAAWnrI,GACP,GAAI7M,KAAK6M,SAAWA,IAIpB7M,KAAK6M,OAASA,EAMV7M,KAAK6M,QAAQ,CACb,IAAK,MAAMrN,KAAQQ,KAAKg4B,SAASv1B,OAC7BzC,KAAKo4I,YAAY54I,EAAMQ,KAAKg4B,SAASzZ,IAAI/e,IAEzCQ,KAAK+3I,wBACL/3I,KAAKi4I,+BAA+Bj4I,KAAK+3I,yBAQrDQ,eACI,OAAOv4I,KAAK+9F,UAMhBnE,UACI,OAAO55F,KAAKR,KAMhBmyB,eACI,OAAO3xB,KAAK45F,YAAcrF,GAS9BoR,qBACI,OAAO3lG,KAAK4wB,OAAS5wB,KAAK4wB,MAAM2nE,MAMpChmE,eACI,OAAOvyB,KAAK45F,YAAcrF,GAQ9B5hE,UACI,MAAM,IAAI7sB,MAAM,+BAQpB0yI,oBACI,OAAOx4I,KAAK2xB,gBAAkB3xB,KAAK2yB,UAMvCZ,oBACI,OAAO/xB,KAAK6M,OAOhB4rI,cACI,OAAOz4I,KAAK6M,OAAS7M,KAAK6M,OAAO7F,GAAK,KAO1C0xI,WACI,OAAO14I,KAAK4wB,MAOhB+nH,gBACI,OAAO34I,KAAK4wB,MAAM0zC,MAOtBs0E,aACI,OAAO54I,KAAK4wB,MAAQ5wB,KAAK4wB,MAAM5pB,GAAK,KAQxC6xI,gBACI,OAAI74I,KAAK2xB,eACE,MAGJ3xB,KAAK+9F,UAAY/9F,KAAK+9F,UAAY,UAS7C+6C,wBAAwBC,GAChB/4I,KAAK0yB,YAAcqmH,GACnB/4I,KAAK0yB,WAAWsmH,eAAeh5I,KAAM+4I,GAc7CpsF,OAAOosF,GACC/4I,KAAK6M,SACL7M,KAAKg5I,eAAeD,GACpBE,GAAAA,kBAA2BF,EAAW/4I,KAAK6M,SAE/C7M,KAAK83I,WAAW5zI,KAAK60I,GACrB/4I,KAAK84I,wBAAwBC,GAC7B/4I,KAAKk5I,mBAAmBH,GAW5BI,OAAOJ,GACH,IAAK,IAAItzE,EAAKzlE,KAAK83I,WAAYx4I,EAAImmE,EAAGlmE,OAAS,EAAGD,GAAK,IAAKA,EAAG,CAC3D,MAAM8B,EAAIqkE,EAAGnmE,GAERy5I,IACD/4I,KAAKo5I,eAAeh4I,GACpB63I,GAAAA,kBAA2B73I,EAAG,OAE7B23I,GAAa33I,IAAM23I,GACpBtzE,EAAGngE,OAAOhG,EAAG,GAIjBy5I,IACA/4I,KAAKo5I,eAAeL,GACpBE,GAAAA,kBAA2BF,EAAW,OAW9CC,eAAeD,IAWfK,eAAeL,IAYfG,mBAAmBH,IASnB10D,UAKI,OAJArkF,KAAKkuB,qBAELluB,KAAKgkF,UAAW,EAETx5D,QAAQC,UAOnB4uH,mBAQA72C,QACI,OAAIxiG,KAAK6M,OACEosI,GAAAA,YAAqBj5I,KAAK6M,QAG9B,KASXs1F,WACI,YAAkC,IAAvBniG,KAAK6M,OAAO8kI,QACZ3xI,KAAK6M,OAAO8kI,OAc3BzyC,cAAcrU,EAAY9B,GACtB,IAAIuwD,EAAgBzuD,EAMhBvlE,GAAQy9D,8BAA0C,IAARgG,GAAuB/oF,KAAK25F,YACtE2/C,EAAgB,GAGhBt5I,KAAK6qF,aAAeyuD,GACpBt5I,KAAK6qF,WAAayuD,EAClBt5I,KAAK8rB,KACD62E,GACA22C,EACAvwD,IAIuB,IAApB/oF,KAAK6qF,YACS,IAAlByuD,GACAt5I,KAAK2yB,YACJ3yB,KAAK2lG,sBACT3lG,KAAK8rB,KACD62E,GACA22C,GAQZC,UACI,MAAMpvE,EAAWnqE,KAAKy4I,cAChB91E,EAAU3iE,KAAK44I,aAErB,OAAOzuE,GAAYxH,EAAW,GAAEwH,KAAYxH,IAAY,KAW5D62E,eAAexH,GACX,OAAKiH,GAAAA,wBAAiC,UAOlCj5I,KAAKuyB,eACE/H,QAAQC,UAIfD,QAAQ3T,IACJ7W,KAAK83I,WAAWzrI,KACZoiD,GACIA,EAAQ+jF,UAAUR,GACb7jE,OAAM3qE,IAOH,MANA4C,GAAO6lB,KACH,+GAGAwiC,EACAjrD,GACEA,QAGrB2gE,MAAK,KACFnkE,KAAK8rB,KACD62E,GACAqvC,MA5BLxnH,QAAQpU,OACX,IAAItQ,MAAM,iDCxc1B,MAAMM,IAASyB,EAAAA,EAAAA,6CAMA,MAAM4xI,WAAwB9B,GAoBzC/4I,YAAY,GAYT,IAZS,SACR2lE,EADQ,WAERR,EAFQ,UAGR+Z,EAHQ,WAIR0Q,EAJQ,MAKRkrD,EALQ,SAMR1zE,EANQ,WAOR8nD,EAPQ,OAQRjhH,EARQ,MASR+jB,EATQ,UAURmtE,EAVQ,QAWR64C,EAAU,IACX,EACCn3D,MACqB,KACjB5yE,EACA+jB,GAC4B,IAAM5wB,KAAK8rB,KAAKuzE,KAC5CvhB,EACAigB,GAEJ/9F,KAAK25I,sBAAuB,EAC5B,MAAMC,EAAShD,EAAQtnI,MAAK7G,GAAKA,EAAEghG,UAAUzpG,QAEzC45I,GACA55I,KAAK65I,mBAAmBD,GAG5B,MAAME,EAAiB/7C,IAAcC,KAAAA,QAC/BptE,EAAMs7C,cAAc4tE,eACpB,KAKN95I,KAAK+5I,SAAW,CACZl2I,UAAWiD,KAAK8oB,SACbkqH,EAAiB,CAAEA,eAAAA,GAAmB,IAS7C95I,KAAK05I,MAAQA,EACb15I,KAAKgmE,SAAWA,EAChBhmE,KAAK8tH,WAAaA,EAIlB9tH,KAAKwuF,WAAa59D,EAAMs7C,cAAcnvC,OACtC/8B,KAAKg6I,qBAAuBxrD,EAI5BxuF,KAAKi6I,aAAerpH,EAAMulH,iBAGrB73I,OAAOmE,KAAKzC,KAAKi6I,cAAc16I,QAAUw+F,IAAcC,KAAAA,SACxDh+F,KAAKi6I,aAAe,CAChBl9G,OAAQnM,EAAMs7C,cAAcnvC,OAC5BD,MAAOlM,EAAMs7C,cAAcpvC,QAInC98B,KAAKukE,SAAWA,EAUhBvkE,KAAKk6I,cAAgB1vH,QAAQC,UAS7BzqB,KAAKm6I,YAAcp2E,EAMnB/jE,KAAKo6I,aAAc,EAKnBp6I,KAAKq6I,cAAe,EAOpBr6I,KAAKs6I,eAAgB,EAQrBt6I,KAAKu6I,cAAkC,KAAlBv6I,KAAKukE,cAAkBp4D,EAAYnM,KAAKukE,SAE7DvkE,KAAKw6I,cAAgB,EAErBx6I,KAAKy6I,wBAA0Br2E,IAC3B,MAAMs2E,EAAkB16I,KAAKu6I,cAE7Bv6I,KAAK26I,+BAA+Bv2E,SAMO,IAA/BpkE,KAAK04I,WAAW5vH,iBACa,IAAvB9oB,KAAKu6I,gBACXn2E,EAAQ90D,MAAKjO,GAAKA,EAAEkjE,WAAavkE,KAAKu6I,sBAOf,IAApBG,QAAiE,IAAvB16I,KAAKu6I,iBAE1Dv6I,KAAKo6I,aAAc,IAQvBp6I,KAAK2xB,gBAAkBsnH,GAAAA,wBAAiC,YACxDj5I,KAAK46I,4BAA8B56I,KAAKw5I,eAAex2I,KAAKhD,MAC5Di5I,GAAAA,YACI17C,KAAAA,4BACAv9F,KAAK46I,8BAGb3B,GAAAA,YAAqB17C,KAAAA,wBAAmCv9F,KAAKy6I,yBAE7Dz6I,KAAK66I,gCAQTC,cACI,OAAQh0I,KAAK8oB,MAAQ,IAAS5vB,KAAK+5I,SAASl2I,UAAY,IAQ5Dk3I,UACI,OAAI/6I,KAAKuyB,gBAAkBvyB,KAAK25F,UAGrB35F,KAAKo6I,YAGsB,UAA/Bp6I,KAAK04I,WAAW5vH,YAA0B9oB,KAAKo6I,YAO1DS,gCACS76I,KAAKg7I,qCAIVh7I,KAAKo4I,YAAY,cAAc,KAC3Bp4I,KAAKw6I,cAAgB/9I,OAAOqhG,YAAYluE,MACxC5vB,KAAKi7I,gCAGTj7I,KAAKo4I,YAAY,gBAAgB,KAC7Bp4I,KAAKi7I,6BACL5lD,GAAW+D,oBpElBM,gBoEoBb,CACI,WAAcp5F,KAAK45F,UACnB,WAAc,QACdnwF,MAAOhN,OAAOqhG,YAAYluE,MAAQ5vB,KAAKw6I,mBAI/Cx6I,KAAKuyB,gBAAkBvyB,KAAK+9F,YAAcC,KAAAA,QAC1Ch+F,KAAKo4I,YAAY,eAAe,KACvBp4I,KAAKk7I,mBACNl7I,KAAKi7I,iCAWrBD,mCAEI,OAAQh7I,KAAKuyB,gBAAkBvyB,KAAK+9F,YAAcC,KAAAA,QAMtDi9C,6BACI,MAAMxxI,GAASzJ,KAAKk7I,kBAEpBl7I,KAAK8rB,KAAK0zE,GAAqB/1F,GAG/B4rF,GAAWiE,cpE4GwB,SAASxb,EAAWr0E,GAC3D,MAAO,CACH83C,WAAY,CACR,WAAcu8B,EACdr0E,MAAAA,GAEJqF,OAAQ,4BACRtP,KAAMy9E,IoEnHmBk+D,CAA4Bn7I,KAAK45F,UAAWnwF,IACrE4rF,GAAWwD,QAAQt1F,KAAKF,UAAU,CAC9B6E,KAAMs3F,GACNr5F,IAAKsD,KAYbkxI,+BAA+Bv2E,GAC3B,MAAMxzC,EAAQ5wB,KAAK04I,WACblgG,EAAQ,GAAE5nB,EAAM4nB,YACtB,IAAI+6F,EAASnvE,EAAQ90D,MAAKjO,GAAKA,EAAEm3C,OAASA,GAAQn3C,EAAEijE,QAAU1zC,EAAM0zC,QAEpE,IAAKivE,GAAiC,YAAvBvzI,KAAKu6I,cAA6B,CAI7C,MAAMj2E,GAAS1zC,EAAM0zC,OAAS,IAAIp3D,QAAQ,aAAc,IAExDqmI,EAASnvE,EAAQ90D,MAAKjO,GAAKA,EAAEm3C,OAASA,GAAQn3C,EAAEijE,QAAUA,IAI1DtkE,KAAKu6I,cADLhH,EACqBA,EAAOhvE,cAEPp4D,EAW7B6rI,WAAWnrI,GACP4yE,MAAMu4D,WAAWnrI,GAEbA,GAEA7M,KAAKo7I,WAAap7I,KAAKu5I,UACvBnzI,GAAO4gD,MAAO,qBAAoBhnD,KAAKo7I,iBAAiBp7I,SAExDoG,GAAO4gD,MAAO,4BAA2BhnD,QAWjD65I,mBAAmBD,GACf55I,KAAKq7I,cAAgBzB,EACrB55I,KAAKs7I,gBAAkBt7I,KAAK6M,OAC5B7M,KAAKg4I,WAAWh4I,KAAKq7I,cAAcE,YAAYv7I,KAAKs7I,kBACpDt7I,KAAK4wB,MAAQ5wB,KAAK6M,OAAO84D,YAAY,GASzC61E,oBACQx7I,KAAKq7I,gBACLr7I,KAAKq7I,cAAcI,aACnBz7I,KAAKg4I,WAAWh4I,KAAKs7I,iBACrBt7I,KAAKs7I,gBAAkB,KACvBt7I,KAAK4wB,MAAQ5wB,KAAK6M,OAAS7M,KAAK6M,OAAO84D,YAAY,GAAK,MAShE+1E,oBAAoB9B,GACZ55I,KAAKq7I,gBACLr7I,KAAKw7I,oBACLx7I,KAAKq7I,mBAAgBlvI,GAErBytI,GACA55I,KAAK65I,mBAAmBD,GAUhC+B,UAAU/B,GACN,QAAkC,IAAvB55I,KAAKq7I,oBAAmD,IAAXzB,EACpD,OAAOpvH,QAAQC,UAGnB,QAAsB,IAAXmvH,IAA2BA,EAAOnwC,UAAUzpG,MACnD,OAAOwqB,QAAQpU,OAAO,IAAItQ,MAAM,kCAGpC,IAAkC,IAA9B9F,KAAK25I,qBACL,OAAOnvH,QAAQpU,OAAO,IAAItQ,MAAM,mCAKpC,GAAI9F,KAAK25F,YAAc35F,KAAK2xB,eAGxB,OAFA3xB,KAAKq7I,cAAgBzB,EAEdpvH,QAAQC,UAGnB,MAAMiI,EAAa1yB,KAAK0yB,WAExB,OAAKA,GASL1yB,KAAK25I,sBAAuB,EAGrBjnH,EAAWJ,YAAYtyB,MACzBmkE,MAAK,KACFnkE,KAAK07I,oBAAoB9B,GACrB55I,KAAKuyB,gBACLvyB,KAAK83I,WAAWn1I,SAAQi5I,GAAQ3C,GAAAA,kBAA2B2C,EAAM57I,KAAK6M,UAGnE6lB,EAAWhB,SAAS1xB,SAE9BmkE,MAAK,KACFnkE,KAAK25I,sBAAuB,KAE/BxrE,OAAM3qE,IAMH,MAHAxD,KAAK25I,sBAAuB,EAC5B35I,KAAK07I,sBACLt1I,GAAO5C,MAAM,sCAAuCA,GAC9CA,OA7BVxD,KAAK07I,oBAAoB9B,GACrB55I,KAAKuyB,gBACLvyB,KAAK83I,WAAWn1I,SAAQi5I,GAAQ3C,GAAAA,kBAA2B2C,EAAM57I,KAAK6M,UAGnE2d,QAAQC,WAiCvBq+D,OACI,OAAO9oF,KAAK67I,gBAAe,GAQ/BC,SACI,OAAO97I,KAAK67I,gBAAe,GAY/BA,eAAetjD,GACX,MAAMwjD,EAAW/7I,KAAKg8I,UAAUh5I,KAAKhD,KAAMu4F,GAI3C,OAFAv4F,KAAKk6I,cAAgBl6I,KAAKk6I,cAAc/1E,KAAK43E,EAAUA,GAEhD/7I,KAAKk6I,cAWhB8B,UAAUzjD,GACN,GAAIv4F,KAAK25F,YAAcpB,EACnB,OAAO/tE,QAAQC,UAGnB,GAAIzqB,KAAKgkF,SACL,OAAOx5D,QAAQpU,OAAO,IAAIsmE,GAAgBJ,KAG9C,IAAI5M,EAAUllD,QAAQC,UAGtB,MAAMwxH,EAAc,IAAM71I,GAAO+L,KAAM,QAAOnS,SAASu4F,KAEvD,GAAIv4F,KAAK2xB,gBACE3xB,KAAK+9F,YAAcC,KAAAA,UAClB14E,GAAQi8D,8BAChB06D,IAKIj8I,KAAKq7I,eAAiBr7I,KAAKq7I,cAAcU,SACzC/7I,KAAKq7I,cAAcU,SAASxjD,GACrBv4F,KAAK4wB,QACZ5wB,KAAK4wB,MAAMouE,SAAWzG,QAEvB,GAAIA,EACP7oB,EAAU,IAAIllD,SAAQ,CAACC,EAASrU,KAC5B6lI,IACAj8I,KAAKk8I,mCACD,KACQl8I,KAAKq7I,eACLr7I,KAAKw7I,oBAMTx7I,KAAKq4I,sBACLr4I,KAAKm8I,aACLn8I,KAAKg4I,WAAW,MAChBvtH,MAEJrU,UAEL,CACH6lI,IAGA,MAAMG,EAAgB,CAClBpG,eAAgBh2I,KAAKq8I,cACrBj4E,QAAS,CAAEmwB,IACXqiD,QAAS52I,KAAKq7I,cAAgB,CAAEr7I,KAAKq7I,eAAkB,GACvDt3E,WAAY/jE,KAAKs8I,uBAGrB5sE,EACMupE,GAAAA,+BAAwC36I,OAAOmoB,OAC7C,GACA21H,EACA,CAAE14E,YAAa,CAAEG,MAAO7jE,KAAKi6I,iBAErCvqE,EAAUA,EAAQvL,MAAKo4E,IAEnB,MAAMz+D,EAAY99E,KAAK45F,YAAcrF,GAAsBA,GAAkBv0F,KAAK45F,UAC5E4iD,EAAaD,EAAYjtI,MAAK6C,GAAQA,EAAKye,MAAM4nB,OAASslC,IAEhE,IAAI0+D,EAaA,MAAM,IAAI9/D,GAAgBH,IAU9B,OAtBIv8E,KAAKg4I,WAAWwE,EAAW3vI,QAC3B7M,KAAK4wB,MAAQ4rH,EAAW5rH,MAIpB5wB,KAAK+9F,YAAcy+C,EAAWz+C,YAC9B33F,GAAO6lB,KACF,GAAEjsB,6CACHA,KAAK+9F,UAAWy+C,EAAWz+C,WAC/B/9F,KAAK+9F,UAAYy+C,EAAWz+C,WAMhC/9F,KAAKq7I,eACLr7I,KAAK65I,mBAAmB75I,KAAKq7I,eAGjCr7I,KAAK83I,WAAWzrI,KACZuvI,GAAQ3C,GAAAA,kBAA2B2C,EAAM57I,KAAK6M,UAE3C7M,KAAKy8I,oCAIpB,OAAO/sE,EACFvL,MAAK,KACFnkE,KAAK08I,gBAAgBnkD,GACrBv4F,KAAK8rB,KAAKkvD,GAAoBh7E,SAU1Cy8I,iCACI,OAAKz8I,KAAK0yB,WAcH,IAAIlI,SAAQ,CAACC,EAASrU,KACzBpW,KAAK0yB,WAAWiqH,uBAAuB38I,MAClCmkE,KAAK15C,GAASjnB,GAAS4S,EAAO,IAAItQ,MAAMtC,SAftCgnB,QAAQC,UA0BvByxH,kCAAkC1sE,EAAiBl2C,GAC1Ct5B,KAAK0yB,WAKV1yB,KAAK0yB,WAAWkqH,wBAAwB58I,MAAMmkE,KAC1CqL,GACAhsE,GAAS81B,EAAc,IAAIxzB,MAAMtC,MANjCgsE,IAgBRktE,gBAAgB5zD,GACR9oF,KAAK0yB,YACL1yB,KAAK0yB,WAAWmqH,oBAAoB78I,KAAK45F,UAAW55F,KAAM8oF,IAAS9oF,KAAK0yB,WAAWqnE,KAAKlsC,eAahGw2B,UACI,IAAI3U,EAAUllD,QAAQC,UAwBtB,OApBIzqB,KAAKq7I,gBACL3rE,EAAU1vE,KAAK27I,aAGf37I,KAAK0yB,aACLg9C,EAAUA,EAAQvL,MAAK,IAAMnkE,KAAK0yB,WAAWJ,YAAYtyB,SAGzDA,KAAK6M,SACL7M,KAAKm8I,aACLn8I,KAAKm5I,UAGTF,GAAAA,eAAwB17C,KAAAA,wBAAmCv9F,KAAKy6I,yBAE5Dz6I,KAAK46I,6BACL3B,GAAAA,eAAwB17C,KAAAA,4BACpBv9F,KAAK46I,6BAGNlrE,EAAQvL,MAAK,IAAMsb,MAAM4E,YAUpCsV,UAEI,OAAK35F,KAAK6M,WAGN7M,KAAKuyB,gBAAmBvyB,KAAKmiG,cAK7BniG,KAAKq7I,eAAiBr7I,KAAKq7I,cAAc1hD,QAClC35F,KAAKq7I,cAAc1hD,WAGtB35F,KAAK4wB,QAAU5wB,KAAK4wB,MAAMouE,SAStC89C,eAAepqH,GACX1yB,KAAK0yB,WAAaA,EAMlB,IAAK,IAAIpzB,EAAI,EAAGA,EAAIU,KAAK83I,WAAWv4I,OAAQD,IACxCU,KAAK84I,wBAAwB94I,KAAK83I,WAAWx4I,IASrDqzB,UACI,OAAO,EAQX0pH,cACI,OAAOr8I,KAAKu6I,eAAiBv6I,KAAKukE,SAStC/xC,mBACI,OAAOxyB,KAAK0yB,YAAc1yB,KAAK0yB,WAAWuqE,WAU9CmC,yBAAyBrW,EAAKqL,GACtBA,EAAY,IACZp0F,KAAKq6I,cAAe,GAExB,MAAMnnE,EAAqB6V,EAAIo9C,qBAE3BnmI,KAAKs6I,eAAwC,cAAvBpnE,IACtB5uE,YAAW,KACFtE,KAAKq6I,eACNj0I,GAAO6lB,KAAM,GAAEjsB,mDACTo0F,KAENiB,GAAWe,UAAUxR,UpE5iBZ,sBoE4iBqC,CAAE,WAAc5kF,KAAK45F,eAExE,KACH55F,KAAKs6I,eAAgB,GAU7BgC,sBACI,GAAIt8I,KAAKuyB,gBAAkBvyB,KAAK+9F,YAAcC,KAAAA,OAAkB,SAQ5D,MAAM++C,EAAa,WAAG,EAAA/8I,KAAK4wB,OAAMs7C,mBAAd,aAAG,UAEtB,OAAI6wE,GAAiB,eAAgBA,EAC1BA,EAAch5E,gBAGO,IAArB/jE,KAAKm6I,YACLn6I,KAAKm6I,YAMTlE,KAAAA,MASfkG,aASIn8I,KAAKg9I,uBAAwB,EAE7B,IACI/D,GAAAA,gBAAyBj5I,KAAK6M,QADlC,QAGI7M,KAAKg9I,uBAAwB,GAiBrCC,gBACQj9I,KAAKuyB,gBACEvyB,KAAK+9F,YAAcC,KAAAA,QACiB,mBAA7Bh+F,KAAK4wB,MAAMqsH,gBACzBj9I,KAAK4wB,MAAMqsH,gBAEXj9I,KAAKm6I,YACCn6I,KAAKm6I,cAAgBlE,KAAAA,YACjBA,KAAAA,KACAA,KAAAA,aAelBiF,kBACI,SAAIl7I,KAAKuyB,iBACDvyB,KAAK25F,YAAa35F,KAAKg9I,uBAAyBh9I,KAAK+9F,YAAcC,KAAAA,YAItEh+F,KAAK6M,SAaK7M,KAAKk9I,eAAiBl9I,KAAKs7I,gBAAkBt7I,KAAK6M,QAEnD84D,YAAYpzD,MAAKqe,KACxB,eAAgBA,GAA+B,SAArBA,EAAM9H,YACzB,UAAW8H,IAA0B,IAAhBA,EAAM2nE,SAQ7C/5F,WACI,MAAQ,cAAawB,KAAK05I,SAAS15I,KAAK45F,6BCp3BhD,MA+EA,GA/Ec,SAASluF,EAAS+B,GAgC5B,YA/BuB,IAAZ/B,QAAoD,IAAlBA,EAAQC,OAAyBxN,MAAMC,QAAQsN,EAAQC,QAChGD,EAAQC,MAAMhJ,SAAQgL,IACdA,EAAMgE,SAAWhE,EAAMgE,QAAQpS,SAC/BoO,EAAMa,MAAQ,GACdb,EAAMgE,QAAQhP,SAAQkQ,IAClBvU,OAAOmE,KAAKoQ,GAAQlQ,SAAQ6G,IACN,OAAdA,GAGJmE,EAAMa,MAAMtK,KAAK,CACb8C,GAAI6L,EAAO7L,GACXwC,UAAAA,EACAC,MAAOoJ,EAAOrJ,kBAInBmE,EAAMgE,SAIbhE,EAAM0B,YAAc1B,EAAM0B,WAAW9P,QACrCoO,EAAM0B,WAAW1M,SAAQuuH,SACU,IAApBA,EAAU1iH,OAClBrQ,MAAMC,QAAQ8yH,EAAU1iH,SACvB0iH,EAAU1iH,MAAQ0iH,EAAU1iH,MAAMR,KAAK,YAOpDC,GAAAA,MAAgBvC,EAAS+B,IA+CpC,GArCc,SAAShC,GACnB,MAAMC,EAAUuC,GAAAA,MAAgBxC,GAiChC,YA/BuB,IAAZC,QAAoD,IAAlBA,EAAQC,OAAyBxN,MAAMC,QAAQsN,EAAQC,QAChGD,EAAQC,MAAMhJ,SAAQgL,SAES,IAAhBA,EAAMa,OAAyBrQ,MAAMC,QAAQuP,EAAMa,SAC1Db,EAAMgE,QAAU,GAChBhE,EAAMa,MAAM7L,SAAQ2L,IAChB,MAAM6uI,EAAQxvI,EAAMgE,QAAQgxH,WAAU9vH,GAAUA,EAAO7L,KAAOsH,EAAKtH,KAEnE,GAAIm2I,GAAS,EACTxvI,EAAMgE,QAAQwrI,GAAO7uI,EAAK9E,WAAa8E,EAAK7E,UACzC,CACH,MAAMsf,EAAM,CAAE/hB,GAAIsH,EAAKtH,IAEvB+hB,EAAIza,EAAK9E,WAAa8E,EAAK7E,MAC3BkE,EAAMgE,QAAQzN,KAAK6kB,cAGpBpb,EAAMa,YAIe,IAArBb,EAAM0B,YAA8BlR,MAAMC,QAAQuP,EAAM0B,aAC/D1B,EAAM0B,WAAW1M,SAAQuuH,IACU,iBAApBA,EAAU1iH,QACjB0iH,EAAU1iH,MAAQ0iH,EAAU1iH,MAAM/Q,MAAM,YAOrDiO,GCjFL0xI,GAAc,CAAE,QAAS,QAAS,QAClCC,GAAensB,GAAaA,EAAU5hH,MAAKguI,GAAyB,QAAlBA,EAAI9tI,YACtD+tI,GAAersB,GAAaA,EAAU5hH,MAAKguI,GAAyB,QAAlBA,EAAI9tI,YAW5D,SAASguI,GAAmB7vI,EAAOyB,EAAUquI,EAAcC,GACvD,IAAK/vI,IAAUyB,EACX,OAEJ,MAAMuuI,EAAiB50H,GAAO20H,EAAWpuI,MAAKuD,GAAUA,EAAO7L,GAAGxI,aAAeuqB,IAEjF3Z,EAASZ,MAAM7L,SAAQomB,IACnBpb,EAAMgE,QAAQzN,KAAKy5I,EAAe50H,IAGlC,MAAM60H,EAAkBH,EAAa/tI,SAASqZ,EAAK,KAAKzZ,MAAKguI,GAAyB,QAAlBA,EAAI9tI,YAExE,GAAIouI,EAAiB,CACjB,MAAMC,EAAcD,EAAgBpvI,MAAMc,MAAK/G,GAAKA,IAAMwgB,IAE1Dpb,EAAMgE,QAAQzN,KAAKy5I,EAAeE,IAClClwI,EAAM0B,WAAWnL,KAAK05I,OAK9BjwI,EAAM0B,WAAWnL,KAAKkL,GAgB1B,SAAS0uI,GAAkBnwI,EAAOW,EAAMmvI,EAAcC,GAClD,IAAK/vI,IAAUW,EACX,OAMJ,GAJAX,EAAMgE,QAAU,GAChBhE,EAAM0B,WAAa,IAGdouI,EAAanvI,EAAKtH,IAInB,OAHA2G,EAAMgE,QAAQzN,KAAKoK,QACnBX,EAAMmD,KAAOxC,EAAKwC,MAItB,MAGM1B,EAAWiuI,GAAaI,EAAanvI,EAAKtH,KAC1CuK,EAAWgsI,GAAaE,EAAanvI,EAAKtH,KAGhD,GAAIoI,EACAouI,GAAmB7vI,EAAOyB,EAAUquI,EAAcC,QAC/C,GAAInsI,EAAU,CAEjB,MAAMwsI,EAAYxsI,EAAS/C,MAAMc,MAAK/G,GAAKA,IAAM+F,IAC3C0vI,EAAYX,GAAaI,EAAaM,IAExCC,EACAR,GAAmB7vI,EAAOqwI,EAAWP,EAAcC,IAGnDnsI,EAAS/C,MAAM7L,SAAQomB,IACnBpb,EAAMgE,QAAQzN,KAnBH6kB,CAAAA,GAAO20H,EAAWpuI,MAAKuD,GAAUA,EAAO7L,GAAGxI,aAAeuqB,IAmBlD40H,CAAe50H,OAEtCpb,EAAM0B,WAAWnL,KAAKqN,IAK9B5D,EAAMmD,KAAOnD,EAAMgE,QAAQ,GAAGb,KAsBlC,SAASmtI,GAA0B3vI,EAAMmvI,EAAcS,GASnD,IAAKA,EAAO5uI,MARc8oC,KAClBA,EAAMzmC,SACCymC,EAAMzmC,QAAQY,MAAKM,GAAUA,EAAO7L,KAAOsH,EAAKtH,OAM1B,CAGjC,IAAKy2I,EAAanvI,EAAKtH,IACnB,OAAO,EAEX,MAAMoI,EAAWiuI,GAAaI,EAAanvI,EAAKtH,KAC1CuK,EAAWgsI,GAAaE,EAAanvI,EAAKtH,KAEhD,OAAIoI,EACO8uI,EAAO3rI,MAAK6lC,GAASA,EAAMzmC,SAC3BymC,EAAMzmC,QAAQY,MAAKwW,GAAOA,EAAI/hB,GAAGxI,aAAe4Q,EAASZ,MAAM,UAC/D+C,GAAYjD,EAAKtH,GAAGxI,aAAe+S,EAAS/C,MAAM,KAGlDyvI,GAFW,CAAEj3I,GAAIuK,EAAS/C,MAAM,IAEKivI,EAAcS,GAOlE,OAAO,EAkDJ,MAAMC,GAMTC,QAAQrmG,GACJ,IAAKA,GAA0C,iBAApBA,EAAYtsC,IAGnC,OAFA1G,QAAQknB,KAAK,mDAEN8rB,EAIX,MAAMrsC,EAAUuC,GAAgB8pC,EAAYtsC,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAMpM,OAGjC,OAFAwF,QAAQknB,KAAK,iCAEN8rB,EAIX,GAAIrsC,EAAQC,MAAMiL,OAAM5Q,IAAqC,IAAhCo3I,GAAYj4I,QAAQa,EAAEkV,OAG/C,OAFAnW,QAAQknB,KAAK,uDAEN8rB,EAGX,MAAMpsC,EAAQ,GACR0yI,EAAe3yI,EAAQC,MAE7BD,EAAQC,MAAQ,GAChB0yI,EAAa17I,SAAQgL,IACjB,MAAMnO,EAAOmO,EAAMnO,KAEnB,GAAa,gBAATA,EAIA,OAHAmO,EAAMuN,IAAM,YACZvP,EAAMgC,EAAMuN,KAAOvN,GAIvB,QAA2B,IAAhBhC,EAAMnM,GAAuB,CACpC,MAAM8+I,EAAQxI,GAAUnoI,GAGpB2wI,EAAM3sI,SAAWxT,MAAMC,QAAQkgJ,EAAM3sI,UACrC2sI,EAAM3sI,QAAQhP,SAAQkQ,IAClBlF,EAAMmD,KAAO+B,EAAO/B,KAAOnD,EAAMmD,YAAc+B,EAAO/B,QAUzDwtI,EAAMjvI,YAAe1B,EAAMmD,OAC5BwtI,EAAMjvI,WAAa,WAEhBivI,EAAMxtI,KACbwtI,EAAMpjI,IAAM1b,EACZmM,EAAMnM,GAAQ8+I,OACP3wI,EAAMmD,OAETnD,EAAMgE,SAAWxT,MAAMC,QAAQuP,EAAMgE,WACrChG,EAAMnM,GAAMmS,SAAWhG,EAAMnM,GAAMmS,SAAW,IAAIjL,OAAOiH,EAAMgE,eAEnC,IAArBhE,EAAM0B,YAA8BlR,MAAMC,QAAQuP,EAAM0B,cAC/D1D,EAAMnM,GAAM6P,WAAa1D,EAAMnM,GAAM6P,WAAW3I,OAAOiH,EAAM0B,iBAIzE3D,EAAQC,MAAQrN,OAAOiS,OAAO5E,GAG9B,MAAM4yI,EAAS,GAEfjgJ,OAAOiS,OAAO5E,GAAOhJ,SAAQy1C,IACD,aAApBA,EAAMnvC,WACNs1I,EAAOr6I,KAAKk0C,EAAMl9B,QAK1BxP,EAAQ4pH,OAAO3yH,SAAQ4M,IACA,WAAfA,EAAM/P,OACN+P,EAAMivI,KAAOD,EAAOvwI,KAAK,SAKjCtC,EAAQ+yI,aAAe,CACnBC,SAAU,MACVpV,MAAO,KAEX,MAAMqV,EAAS1wI,GAAgBvC,GAE/B,OAAO,IAAIiH,sBAAsB,CAC7BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAKkzI,IAYbC,cAAc7mG,GAA6B,IAAhBynF,EAAgB,uDAAN,KACjC,IAAKznF,GAA0C,iBAApBA,EAAYtsC,IAGnC,OAFA1G,QAAQknB,KAAK,mDAEN8rB,EAIX,MAAMrsC,EAAUuC,GAAgB8pC,EAAYtsC,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAMpM,OAGjC,OAFAwF,QAAQknB,KAAK,iCAEN8rB,EAIX,GAAIrsC,EAAQC,MAAMpM,OAAS,GAAKmM,EAAQC,MAAMiL,OAAM5Q,IAAqC,IAAhCo3I,GAAYj4I,QAAQa,EAAEkV,OAG3E,OAFAnW,QAAQknB,KAAK,6CAEN8rB,EAEX,MAAM8mG,EAAcrf,EAAUvxH,GAAgBuxH,EAAQ/zH,KAAO,KACvDqzI,EAzJd,SAA4BC,EAASC,GACjC,IAAKD,IAAYC,GAAoC,IAAzBD,EAAQpzI,MAAMpM,QAAyC,IAAzBy/I,EAAQrzI,MAAMpM,OACpE,OAAO,EAGX,MAAM0/I,EAAWF,EAAQpzI,MAAM,GACzBuzI,EAAWF,EAAQrzI,MAAM,GAE/B,OAAOszI,EAAS1X,WAAa2X,EAAS3X,UAAY0X,EAASzX,SAAW0X,EAAS1X,OAiJxD2X,CAAmBzzI,EAASmzI,GACzCO,EAAc1zI,EAAQC,MAAM,GAAG47H,SAC/B8X,EAAY3zI,EAAQC,MAAM,GAAG67H,OAC7BzH,EAAiBr0H,EAAQC,MAAM,GAAGgkH,YAClChkH,EAAQ,GAEdD,EAAQC,MAAMhJ,SAAQgL,IAClB,MAAMnO,EAAOmO,EAAMnO,KAEnB,GAAa,gBAATA,EAAwB,CACxB,IAAKq/I,IAAgBA,EAAYlzI,MAAO,CACpC,MAAM2zI,EAAWxJ,GAAUnoI,GAK3B,OAHA2xI,EAASpkI,IAAM5c,OAAOmE,KAAKkJ,GAAOpM,OAAOf,gBACzCmN,EAAMgC,EAAMuN,KAAOokI,GAIvB,MAAMC,EAAeV,EAAYlzI,MAAMg3H,WAAU38H,GAAKA,EAAExG,OAASA,IAOjE,YALI+/I,IACAV,EAAYlzI,MAAM4zI,GAAgB5xI,EAClCkxI,EAAYlzI,MAAM4zI,GAAcrkI,IAAMqkI,IAO9C,MAAMC,EAhNlB,SAA8B/B,GAC1B,MAAM+B,EAAa,GAEnB,OAAK/B,GAAiBt/I,MAAMC,QAAQq/I,IAGpCA,EAAa96I,SAAQ4M,IACbA,EAAMf,OAASrQ,MAAMC,QAAQmR,EAAMf,QACnCe,EAAMf,MAAM7L,SAAQ2L,SACgB,IAArBkxI,EAAWlxI,KAClBkxI,EAAWlxI,GAAQ,IAEvBkxI,EAAWlxI,GAAMpK,KAAKqL,SAK3BiwI,GAbIA,EA4MgBC,CAAqB9xI,EAAM0B,YAK9C,GAAK1B,EAAMgE,QAUXhE,EAAMgE,QAAQhP,SAAQ,CAAC2L,EAAM65D,KAGzB,IAAK75D,EAAKwC,KACN,OAIJ,IAAK+tI,IAAgBA,EAAYlzI,MAAO,CACpC,GAAIsyI,GAA0B3vI,EAAMkxI,EAAYlhJ,OAAOiS,OAAO5E,IAC1D,OAEJ,MAAM2zI,EAAWxJ,GAAUnoI,GAU3B,OARA2xI,EAASpkI,IAAM5c,OAAOmE,KAAKkJ,GAAOpM,OAAOf,WACzC8gJ,EAASr2I,UAAYk/D,GAEK,aAApBx6D,EAAM1E,UADN,WAC8C,WACpDq2I,EAASI,gBAAavzI,EACtB2xI,GAAkBwB,EAAUhxI,EAAMkxI,EAAY7xI,EAAMgE,cACpDhG,EAAM2zI,EAASpkI,KAAOokI,GAM1B,GAAIrB,GAA0B3vI,EAAMkxI,EAAYX,EAAYlzI,OACxD,OAEJ,MAAM2zI,EAAWxJ,GAAUnoI,GAE3B2xI,EAASpkI,IAAM2jI,EAAYlzI,MAAMpM,OAAOf,WACxC8gJ,EAASr2I,UAAY,WACrB60I,GAAkBwB,EAAUhxI,EAAMkxI,EAAY7xI,EAAMgE,SACpDktI,EAAYlzI,MAAMzH,KAAKo7I,WA3CvB,IAAKT,EAAa,CACd,MAAMS,EAAWxJ,GAAUnoI,GAE3B2xI,EAASpkI,IAAM5c,OAAOmE,KAAKkJ,GAAOpM,OAAOf,WACzCmN,EAAMgC,EAAMuN,KAAOokI,MA0C/B5zI,EAAQC,MAAQkzI,EAAcA,EAAYlzI,MAAQrN,OAAOiS,OAAO5E,GAChE,MAAM6yI,EAAO,GAEb9yI,EAAQC,MAAMhJ,SAAQgL,IAClB6wI,EAAKt6I,KAAKyJ,EAAMuN,KACZ4jI,IACAnxI,EAAM45H,SAAW6X,EACjBzxI,EAAM65H,OAAS6X,EACf1xI,EAAMgiH,YAAcoQ,MAK5Br0H,EAAQ4pH,OAAO3yH,SAAQ4M,IACA,WAAfA,EAAM/P,OACN+P,EAAMivI,KAAOA,EAAKxwI,KAAK,SAK/BtC,EAAQ+yI,aAAe,CACnBC,SAAU,MACVpV,MAAO,KAIX59H,EAAQ8d,OAAOiyB,iBACf,MAAMkkG,EAAY1xI,GAAgBvC,GAElC,OAAO,IAAIiH,sBAAsB,CAC7BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAKk0I,oBCxcV,MAAMC,GAAqB,sBAOrBC,GAA0B,0BCahC,SAASC,GAA2B59C,EAAYpkB,EAAWiiE,GAG9D,MAAQ,GAAE79C,KAFqBpkB,EAAUlxE,UAAU,EAAG,KAELmzI,IAU9C,SAASC,GAA2B7rB,GACvC,MAAM8rB,EAA4B9rB,EAAWhvH,QAAQ,KAAO,EAE5D,GAAI86I,GAA6B,EAC7B,MAAM,IAAIn6I,MAAO,wBAAuBquH,KAG5C,MAAM+rB,EAAyB/rB,EAAWjuH,OAAO+5I,EAA2B,GAE5E,IAAK,MAAMzgJ,KAAQlB,OAAOiS,OAAOgkF,GAC7B,GAAI/0F,EAAK0G,OAAO,EAAG,KAAOg6I,EACtB,OAAO1gJ,EAIf,MAAM,IAAIsG,MAAO,wBAAuBquH,KAiB7B,MAAMgsB,WAAuBx4C,GAOxCy4C,aAAa9xI,GACT,MAAM,IAAIxI,MAAM,mBAgBpBqpI,iBAAiB/jB,EAAOttC,GACpB,MAAM,IAAIh4E,MAAM,mBASpBu6I,kBAAkBj1B,EAAO+I,GACrB,MAAM,IAAIruH,MAAM,mBAQpBw6I,mBAAmBhyI,GACf,MAAM,IAAIxI,MAAM,oBC5GjB,SAASy6I,GAAiBhxI,GAC7B,OAAOG,SAASH,EAAMf,MAAM/Q,MAAM,KAAK,GAAI,IAQxC,SAAS+iJ,GAAmBjxI,GAC/B,OAAOG,SAASH,EAAMf,MAAM/Q,MAAM,KAAK,GAAI,IAQ/C,SAASgjJ,GAAc9yI,GACnB,OAAKA,EAAMa,MAIJb,EAAMa,MACRnC,KAAIoC,GAAYA,EAASzH,KACzB4E,QAAO,CAAC0C,EAAMzN,EAAOY,IAAUA,EAAM0D,QAAQmJ,KAAUzN,IACvDtB,OANM,EAaf,MAAMmhJ,GAOF9hJ,YAAY+O,GACR,IAAKA,EACD,MAAM,IAAI7H,MAAM,sBAGpB9F,KAAK2N,MAAQA,EAUba,YAKA,OAJKxO,KAAK2N,MAAMa,QACZxO,KAAK2N,MAAMa,MAAQ,IAGhBxO,KAAK2N,MAAMa,MASlBA,UAAMA,GACNxO,KAAK2N,MAAMa,MAAQA,EAOnBvF,gBACA,OAAOjJ,KAAK2N,MAAM1E,UAOlBA,cAAUA,GACVjJ,KAAK2N,MAAM1E,UAAYA,EAOvBoG,iBAKA,OAJKrP,KAAK2N,MAAM0B,aACZrP,KAAK2N,MAAM0B,WAAa,IAGrBrP,KAAK2N,MAAM0B,WAQlBA,eAAWA,GACXrP,KAAK2N,MAAM0B,WAAaA,EAW5BsxI,iBAAiBC,EAAYC,GACzB,MAAMr3I,EAAYxJ,KAAKwO,MAAMc,MACzBwxI,GAAWA,EAAQ95I,KAAO45I,GACvBE,EAAQt3I,YAAcq3I,IAG7B,OAAOr3I,GAAaA,EAAUC,MAQlCs3I,WAAWpqB,GACF32H,KAAK2N,MAAMa,OAAUxO,KAAK2N,MAAMa,MAAMjP,SAI3CS,KAAK2N,MAAMa,MACLxO,KAAK2N,MAAMa,MAAM5C,QAAOk1I,GAAWA,EAAQ95I,KAAO2vH,KAQ5DqqB,iBAAiBF,GACb9gJ,KAAKwO,MAAMtK,KAAK48I,GAWpBG,UAAUzxI,EAAWhB,GACjB,OAAOxO,KAAKqP,WAAWC,MACnBC,GACIA,EAAMC,YAAcA,KACXhB,GAASA,IAAUe,EAAMf,SAS9C0yI,WAAW1xI,GACP,OAAOxP,KAAKqP,WAAWzD,QACnB2D,GAASA,EAAMC,YAAcA,IASrC2xI,uBAAuB3xI,EAAW4xI,GAC9B,OAAOphJ,KAAKqP,WAAWC,MACnBC,GAASA,EAAMC,YAAcA,GACtB+wI,GAAiBhxI,KAAW6xI,IAS3CC,eAAevwI,GACX,OAAO9Q,KAAKwO,MAAMc,MACdwxI,GAAiC,SAAtBA,EAAQt3I,YACF,OAATsH,GAAiBgwI,EAAQr3I,QAAUqH,KAOnDwwI,eACI,OAAOb,GAAczgJ,KAAK2N,OAQ9B4zI,wBACI,YAAiCp1I,IAA1BnM,KAAK2N,MAAM0B,WAQtBmyI,sBACI,MAAM1jE,EAAY99E,KAAK2N,MAAMnO,KAE7B,GAAkB,UAAds+E,EACA,MAAM,IAAIh4E,MACL,qCAAoCg4E,MAK7C,GAAiB,IAFA2iE,GAAczgJ,KAAK2N,OAIhC,OAAO3N,KAAK2N,MAAMa,MAAM,GAAGxH,GAI/B,GAAIhH,KAAK2N,MAAM0B,WAAY,CACvB,MAAMD,EAAWpP,KAAKihJ,UAAU,OAEhC,GAAI7xI,EACA,OAAOmxI,GAAiBnxI,GAE5B,MAAMmC,EAAWvR,KAAKihJ,UAAU,OAEhC,GAAI1vI,EACA,OAAOgvI,GAAiBhvI,GAE5B,MAAMkwI,EAAWzhJ,KAAKihJ,UAAU,UAEhC,GAAIQ,EACA,OAAOlB,GAAiBkB,IAcpCC,WAAWjxI,GACP,MAAMc,EAAWvR,KAAKmhJ,uBAAuB,MAAO1wI,GAGpD,OAAOc,GAAYivI,GAAmBjvI,GAO1CowI,WACI,OAAO3hJ,KAAKwO,MACPnC,KAAIoC,GAAYA,EAASzH,KACzB4E,QAAO,CAAC0C,EAAMzN,EAAOY,IAAUA,EAAM0D,QAAQmJ,KAAUzN,IAQhE+gJ,uBACI,MAAM9jE,EAAY99E,KAAK2N,MAAMnO,KAE7B,GAAkB,UAAds+E,EACA,MAAM,IAAIh4E,MACL,0CAAyCg4E,KAGlD,MAAM+jE,EAAa7hJ,KAAK2hJ,WAExB,IAAK,MAAMG,KAAiB9hJ,KAAKqP,WAI7B,GAAgC,QAA5ByyI,EAActyI,WACqB,WAA5BsyI,EAActyI,UAAwB,CAE7C,MAAMwpC,EAAgBwnG,GAAmBsB,GAEzCD,EAAWv8I,OACPu8I,EAAW18I,QAAQ6zC,GAAgB,GAI/C,OAAO6oG,EAMXE,iBACI,OAAOx+I,KAAKF,UAAUrD,KAAK2N,MAAM0B,YAQrC2yI,qBAAqB1zI,GACZtO,KAAK2N,MAAM0B,aAIhBrP,KAAK2N,MAAM0B,WAAarP,KAAK2N,MAAM0B,WAC9BzD,QAAOo6G,IAAqD,IAAxCA,EAAUx3G,MAAMrJ,QAAS,GAAEmJ,QAOxD2zI,wBAAwBzyI,GACfxP,KAAK2N,MAAM0B,aAIhBrP,KAAK2N,MAAM0B,WACLrP,KAAK2N,MAAM0B,WACRzD,QAAOo6G,GAAaA,EAAUx2G,YAAcA,KAQzD0yI,YAAYC,EAASC,GACbpiJ,KAAK2N,MAAMa,OACXxO,KAAK2N,MAAMa,MAAM7L,SAAQ8L,IACjBA,EAASzH,KAAOm7I,IAChB1zI,EAASzH,GAAKo7I,MAW9BC,aAAa9yI,GACTvP,KAAKqP,WAAWnL,KAAKqL,IAoBtB,MAAM+yI,GAOT1jJ,YAAY2jJ,GACRviJ,KAAKwiJ,UAAYv0I,GAAAA,MAAgBs0I,GAYrCE,YAAY3kE,GACR,MAAM4kE,EACA1iJ,KAAKwiJ,UAAU72I,MAAM2D,MAAK3B,GAASA,EAAMnO,OAASs+E,IAExD,OAAO4kE,EAAgB,IAAIhC,GAAUgC,GAAiB,KAQ1DC,WACI,OAAO10I,GAAAA,MAAgBjO,KAAKwiJ,YCrapC,MAAMp8I,IAASyB,EAAAA,EAAAA,4CAUA,MAAM+6I,GAQjBhkJ,YAAYmqF,EAAK85D,GACb7iJ,KAAK+oF,IAAMA,EACX/oF,KAAK6iJ,gBAAkBA,EAkB3BC,+BAA+BC,GAE3B,MAAMC,EAAchjJ,KAAK+oF,IAAI2L,eAAeH,IAE5C,IAAKyuD,EAAYzjJ,OACb,OAAO,EACuB,IAAvByjJ,EAAYzjJ,QACnB6G,GAAO5C,MACF,GAAExD,KAAK+oF,qEAC6Bi6D,GAG7C,MAAMlyB,EAAaiyB,EAAYN,YAAY,SAE3C,IAAK3xB,EAKD,OAJA1qH,GAAO4gD,MACF,GAAEhnD,KAAK+oF,+DAGL,EAGX,IAAI2tC,GAAW,EAEf,IAAK,MAAM4hB,KAAc0K,EAAa,CAClC,MAAMzqD,EAAQ+/C,EAAW3+C,UACnBq9C,EAAcsB,EAAWvmH,oBACzBkxH,EAAW3K,EAAWv6C,YAAcC,KAAAA,OAKpCklD,EACAlM,GAAeh3I,KAAK+oF,IAAIo6D,kBAAkBnM,GAGhD,IAFsBiM,IAAa1qD,GAAU2qD,EAGzC,SAIJ,MAAME,EACApjJ,KAAK+oF,IAAIs6D,gBACLrjJ,KAAK+oF,IAAIu6D,UAAU10I,UACnB,CAAE5O,KAAK+oF,IAAIw6D,eAAeC,mBAEpC,IAAKJ,EAAc7jJ,OAAQ,CACvB6G,GAAO5C,MAAO,wBAAuB80I,QAAiBt4I,KAAK+oF,OAE3D,SAGJ2tC,GAAW,EAMX5F,EAAW7nH,UAAYmpH,KAAAA,SAGvB,MAMMqxB,EAAgB,YANFL,EAAc,KAQlC,IAAK,MAAMzsB,KAAWysB,EAElBtyB,EAAWiwB,WAAWpqB,GAGtB7F,EAAWkwB,iBAAiB,CACxBh6I,GAAI2vH,EACJntH,UAAW,QACXC,MAAOg6I,IAEX3yB,EAAWkwB,iBAAiB,CACxBh6I,GAAI2vH,EACJntH,UAAW,OACXC,MAAO6uI,EAAW8C,aAG1B,GAAIgI,EAAc7jJ,OAAS,EAAG,CAC1B,MAAMgQ,EAAQ,CACVf,MAAO40I,EAAcp1I,KAAK,KAC1BwB,UAAW,OAGVshH,EAAWmwB,UAAU1xI,EAAMC,UAAWD,EAAMf,QAE7CsiH,EAAWuxB,aAAa9yI,GAQ3BvP,KAAK+oF,IAAI1mF,QAAQs9G,YAClB3/G,KAAK+oF,IAAI26D,YAAYC,gBAAgB7yB,GAI7C,OAAO4F,EAWXktB,uBAAuB9lE,EAAWnb,GAA0B,IAAjBwH,EAAiB,uDAAN,KAClD,IAAM2T,IAAanb,EAGf,OAFAv8D,GAAO6lB,KAAM,yCAAwC02C,mBAAyBmb,gBAEvE,KAEX,MAAM+lE,EAAO7jJ,KAAK+oF,IAAI/hF,GAKtB,MAAiB,MAAbmjE,GAAqBA,EAIjB,GAAEA,KAAY05E,KAAQlhF,KAAWkhF,IAH7B,GAAE7jJ,KAAK6iJ,mBAAmB/kE,KAAa+lE,KAAQlhF,KAAWkhF,IAgB1EC,2BAA2B5tG,GAAc,MACrC,MAAM2tG,EAAO7jJ,KAAK+oF,IAAI/hF,GAEtB,IAAK,MAAMgqH,KAAY96E,EAAa1nC,MAChC,OAAQwiH,EAASxnH,WACjB,IAAK,QACL,IAAK,QACL,IAAK,UACDwnH,EAASvnH,MAAQunH,EAASvnH,OAAU,GAAEunH,EAASvnH,SAASo6I,IACxD,MACJ,IAAK,OACD,GAAI7yB,EAASvnH,MAAO,CAChB,MAAMs6I,EAAoB/yB,EAASvnH,MAAMhM,MAAM,KAEX,MAAH,IAA7BsmJ,EAAkBxkJ,OAClByxH,EAASvnH,MACHzJ,KAAK4jJ,uBAAL,UACE1tG,EAAavoC,aADf,aACE,EAAoBnO,KACpBukJ,EAAkB,GAClBA,EAAkB,IAE1B39I,GAAO6lB,KAAM,uDAAsD+kG,EAASvnH,UAS5F,IAAKzJ,KAAK+oF,IAAIl4E,kBACV,OAMJ,MAAMmzI,EAAc,UAAG9tG,EAAavoC,aAAhB,aAAG,EAAoB1E,UAE3C,GAAI+6I,IAAmB5xB,KAAAA,UAA2B4xB,IAAmB5xB,KAAAA,SACjEl8E,EAAa1nC,WAAQrC,EACrB+pC,EAAa7mC,gBAAalD,MAIvB,WACH,MAAMgjH,EAAQ,UAAGj5E,EAAavoC,aAAhB,aAAG,EAAoBmD,KAC/B6xD,EAAUwsD,GAAYA,EAAS1xH,MAAM,KAAK,GAC1CkU,EAAU,IAAK,IAAI41B,IAAJ,UAAQ2O,EAAavoC,aAArB,iBAAQ,EAAoBa,aAA5B,aAAQ,EAA2BnC,KAAI9D,GAAKA,EAAEvB,OAEnE,IAAK,MAAM6L,KAAUlB,EAIjB,IAHmBukC,EAAa1nC,MAC3Bc,MAAKhB,GAAQA,EAAKtH,KAAO6L,GAA6B,SAAnBvE,EAAK9E,YAE5B,OACb,MAAMy6I,EAAgBjkJ,KAAK4jJ,uBAAL,UAA4B1tG,EAAavoC,aAAzC,aAA4B,EAAoBnO,KAAMmjE,GAE5EzsB,EAAa1nC,MAAMtK,KAAK,CACpB8C,GAAI6L,EACJrJ,UAAW,OACXC,MAAOw6I,MAe3BC,mCAAmCl1I,GAC/B,IAAKA,EACD,MAAM,IAAIlJ,MAAM,mCAGpB,MAAMi9I,EAAc,IAAIT,GAAiBtzI,EAAKvD,KAE9C,OAAIzL,KAAK8iJ,+BAA+BC,GAC7B,IAAIpwI,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKs3I,EAAYJ,aAIlB3zI,EAkBXm1I,2BAA2BC,GAEvB,IAAKA,IAAgBA,EAAY34I,MAAQ24I,EAAY5kJ,KACjD,OAAO4kJ,EAGX,MAAMrB,EAAc,IAAIT,GAAiB8B,EAAY34I,KAC/C44I,EAAatB,EAAYN,YAAY,SAEvC4B,IACArkJ,KAAK8jJ,2BAA2BO,GAChCrkJ,KAAKskJ,mBAAmBD,IAG5B,MAAMvzB,EAAaiyB,EAAYN,YAAY,SAO3C,OALI3xB,IACA9wH,KAAK8jJ,2BAA2BhzB,GAChC9wH,KAAKskJ,mBAAmBxzB,IAGrB,IAAIn+G,sBAAsB,CAC7BnT,KAAM4kJ,EAAY5kJ,KAClBiM,IAAKs3I,EAAYJ,aAczB2B,mBAAmBpuG,GAAc,UAC7B,IAAKo1E,GAAAA,+BACD,OAGJ,MAAM35G,EAAU,IAAK,IAAI41B,IAAJ,UAAQ2O,EAAavoC,aAArB,iBAAQ,EAAoBa,aAA5B,aAAQ,EAA2BnC,KAAI9D,GAAKA,EAAEvB,OAC7D82E,EAAS,UAAG5nC,EAAavoC,aAAhB,aAAG,EAAoBnO,KAEtC,IAAKs+E,EACD,MAAM,IAAIh4E,MAAM,8DAGpB,IAAK,MAAM+M,KAAUlB,EACEukC,EAAa1nC,MAAMc,MAAKhB,GAAQA,EAAKtH,KAAO6L,GAA6B,SAAnBvE,EAAK9E,aAI1E0sC,EAAa1nC,MAAMtK,KAAK,CACpB8C,GAAI6L,EACJrJ,UAAW,OACXC,MAAOq2I,GAA2B9/I,KAAK6iJ,gBAAiB/kE,EAAW,MChWvF,MAAM13E,IAASyB,EAAAA,EAAAA,yCAef,SAAS08I,GAA0B52I,EAAO62I,EAAiBC,GACvD,MAAMh0I,EAAc+zI,EAAgBx9I,GAC9B4J,EAAkB4zI,EAAgB1zI,KAClCH,EAAmB6zI,EAAgB1yI,MAEnC4yI,EAAkB/2I,EAAM+zI,WAAWjxI,GAErCi0I,IAAoBD,IAGpBC,IAGA/2I,EAAMozI,WAAW2D,GACjB/2I,EAAMq0I,qBAAqB0C,IAE/B/2I,EAAMqzI,iBAAiB,CACnBh6I,GAAIy9I,EACJj7I,UAAW,QACXC,MAAOkH,IAEXhD,EAAMqzI,iBAAiB,CACnBh6I,GAAIy9I,EACJj7I,UAAW,OACXC,MAAOmH,IAEXjD,EAAM00I,aAAa,CACf7yI,UAAW,MACXhB,MAAQ,GAAEiC,KAAeg0I,OAYlB,MAAME,GAIjB/lJ,cAKIoB,KAAK4kJ,sBAAwB,IAAIt9G,IAQrCr4B,iBACIjP,KAAK4kJ,sBAAsBv8G,QAS/Bn5B,aAAa21I,GACTz+I,GAAO4gD,MAAM,yBAA0B69F,GACvC7kJ,KAAK4kJ,sBAAwBC,EAUjCC,eAAeC,GACX,MAAMC,EAAiB,IAAI1C,GAAiByC,GACtCj0B,EAAak0B,EAAevC,YAAY,SAE9C,OAAK3xB,EAME9wH,KAAK2jJ,gBAAgB7yB,GACtBk0B,EAAerC,WAAaoC,GAN9B3+I,GAAO4gD,MAAO,sCAAqC+9F,KAE5CA,GAcfpB,gBAAgB7yB,GACZ,GAA6B,aAAzBA,EAAW7nH,UAEX,OAAO,EAEX,GAAI6nH,EAAWwwB,eAAiB,EAE5B,OAAO,EAEX,MAAM2D,EAAoBn0B,EAAW8wB,uBAErC,IAAK,MAAMtzI,KAAQ22I,EAAmB,CAClC,MAAMn0I,EAAOggH,EAAW6vB,iBAAiBryI,EAAM,QACzCwD,EAAQg/G,EAAW6vB,iBAAiBryI,EAAM,SAChD,IAAI42I,EAAuBllJ,KAAK4kJ,sBAAsBrmI,IAAIjQ,GAE1D,IAAK42I,EAAsB,CAMnBA,EAHgCp0B,EAAW4wB,WAAWpzI,IAK/B+/G,GAAAA,eAE3BruH,KAAK4kJ,sBAAsBz3H,IAAI7e,EAAM42I,GAEzCX,GACIzzB,EACA,CACI9pH,GAAIsH,EACJwD,MAAAA,EACAhB,KAAAA,GAEJo0I,GAKR,OAAO,EAQXC,SAASJ,GACL,MAAMC,EAAiB,IAAI1C,GAAiByC,GACtCj0B,EAAak0B,EAAevC,YAAY,SAE9C,IAAK3xB,EAGD,OAFA1qH,GAAO4gD,MAAO,sCAAqC+9F,KAE5CA,EAEX,GAA6B,aAAzBj0B,EAAW7nH,UAGX,OAFA7C,GAAO4gD,MAAM,uDAEN+9F,EAEX,GAAIj0B,EAAWwwB,eAAiB,EAG5B,OAFAl7I,GAAO4gD,MAAM,qDAEN+9F,EAEX,IAAKj0B,EAAWywB,wBAIZ,OAHAn7I,GAAO4gD,MAAM,0DAGN+9F,EAEX,MAAMK,EAAYt0B,EAAWowB,WAAW,OAIxCpwB,EAAWmxB,wBAAwB,OAGnC,IAAK,MAAM1wI,KAAY6zI,EAAW,CAC9B,MAAMX,EAAUjE,GAAmBjvI,GAEnCu/G,EAAWiwB,WAAW0D,GAG1B,OAAOO,EAAerC,YCtM9B,MAAMv8I,IAASyB,EAAAA,EAAAA,4CASA,MAAMw9I,GAOjBzmJ,YAAY0jI,GACRtiI,KAAKslJ,sBACLtlJ,KAAKsiI,UAAYA,EAQrBgjB,sBACItlJ,KAAKwjJ,kBAAoB,KACzBxjJ,KAAKulJ,gBAAiB,EAU1BC,eAAe/0I,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAI3K,MAAM,kCAEpB9F,KAAKwjJ,kBAAoB/yI,EAO7Bg1I,uBACI,OAAO7jE,QAAQ5hF,KAAKwjJ,mBAcxBkC,gCAAgCX,GAC5B,MAAMC,EAAiB,IAAI1C,GAAiByC,GACtCj0B,EAAak0B,EAAevC,YAAY,SAE9C,IAAK3xB,EAGD,OAFA1qH,GAAO4gD,MAAO,GAAEhnD,KAAKsiI,gDAAgDyiB,KAE9DA,EAGX,GAA6B,aAAzBj0B,EAAW7nH,UAGPjJ,KAAKwjJ,mBAAqBxjJ,KAAKulJ,eAC/Bz0B,EAAWkwB,iBAAiB,CACxBh6I,GAAIhH,KAAKwjJ,kBACTh6I,UAAW,QACXC,MAAQ,YAAWzJ,KAAKwjJ,sBAG5Bp9I,GAAO+L,KAAM,GAAEnS,KAAKsiI,8DAErB,CACH,MAAMqjB,EAAiB70B,EAAW0wB,sBAElC,IAAKmE,EAGD,OAFAv/I,GAAO+L,KAAM,GAAEnS,KAAKsiI,6DAEbyiB,EAEX,GAAI/kJ,KAAKwjJ,kBAAmB,CACxB1yB,EAAWoxB,YAAYyD,EAAgB3lJ,KAAKwjJ,mBAC5C,IAAK,MAAMj0I,KAASuhH,EAAWzhH,WAC3B,GAAwB,QAApBE,EAAMC,UAAqB,CAC3B,MAAMiB,EAAc8vI,GAAiBhxI,GAC/Bk1I,EAAUjE,GAAmBjxI,GAG/BkB,IAAgBk1I,IAChBp2I,EAAMf,MACC,GAAExO,KAAKwjJ,qBAAqBiB,WAK/CzkJ,KAAKwjJ,kBAAoBmC,EAE7B3lJ,KAAKulJ,gBAAiB,EAG1B,OAAOP,EAAerC,YCpH9B,MAAMv8I,GAASlE,EAAAA,MAAAA,6CAETq7F,GAAYr7F,EAAQ,MAE1B,IAAI0jJ,IAA2B,EAC3BC,IAA2B,EAM/B,MAAMC,GAAkB,CAAE,QAAS,iBAAkB,QAAS,SAO/C,MAAMC,WAAyBpO,GAoB1C/4I,YACQu7F,EACAznE,EACAszH,EACAn5I,EACA+jB,EACAktD,EACAigB,EACAzvF,EACAiqF,EACApP,EACAgrC,GAaJ,GAZA10C,MACI/sD,EACA7lB,EACA+jB,GACA,QAGAktD,EACAigB,GACJ/9F,KAAKm6F,IAAMA,EAGS,iBAAT7rF,EACP,MAAM,IAAIgd,UAAW,QAAOhd,qBAEhCtO,KAAKsO,KAAOA,EACZtO,KAAKgmJ,gBAAkBA,EACvBhmJ,KAAKu4F,MAAQA,EACbv4F,KAAKmpF,MAAQA,EACbnpF,KAAKimJ,YAAc9xB,EAEnB/tH,GAAO4gD,MAAO,2BAA0BhnD,QAKxCA,KAAKkmJ,aAAe3tD,EAGhBv4F,KAAKm6F,KAAOn6F,KAAK4wB,OACjB5wB,KAAKmmJ,qBAETnmJ,KAAKomJ,mBAAqB,GAC1BN,GAAgBnjJ,SAAQ01B,IACpBr4B,KAAKomJ,mBAAmB/tH,GAASr4B,KAAKqmJ,uBAAuBrjJ,KAAKhD,KAAMq4B,MAUhF8tH,qBACInmJ,KAAK4wB,MAAM5D,iBAAiB,QAAQ,IAAMhtB,KAAKsmJ,iBAC/CtmJ,KAAK4wB,MAAM5D,iBAAiB,UAAU,IAAMhtB,KAAKumJ,mBACjDvmJ,KAAK4wB,MAAM5D,iBAAiB,SAAS,KACjC5mB,GAAO4gD,MAAO,mBAAkBlgD,KAAK8oB,WAAW5vB,WAWxDsmJ,eACIlgJ,GAAO4gD,MAAO,kBAAiBlgD,KAAK8oB,WAAW5vB,QAE/CA,KAAKm6F,IAAItN,aAAa/gE,KAAKyxE,GAAUthE,kBAAmBj8B,MAU5DumJ,iBACIngJ,GAAO4gD,MAAO,oBAAmBlgD,KAAK8oB,WAAW5vB,QAEjDA,KAAKm6F,IAAItN,aAAa/gE,KAAKyxE,GAAUphE,oBAAqBn8B,MAO9DwmJ,QAAQ/8I,GACAzJ,KAAKu4F,QAAU9uF,IAIfA,IACAzJ,KAAKkmJ,cAAe,GAIpBlmJ,KAAK6M,SACL7M,KAAK6M,OAAO0rF,MAAQ9uF,GAGxBzJ,KAAKu4F,MAAQ9uF,EACbzJ,KAAK8rB,KAAK62E,GAAqC3iG,OAQnD25F,UACI,OAAO35F,KAAKu4F,MAShB/lE,mBACI,OAAOxyB,KAAKgmJ,gBAMhBrzH,UACI,OAAO,EASX8zH,UACI,OAAOzmJ,KAAKsO,KAShBo4I,gBACI,OAAO1mJ,KAAKimJ,YAQhBU,cAAcnnJ,GACNQ,KAAK+9F,YAAcv+F,IAGvBQ,KAAK+9F,UAAYv+F,EACjBQ,KAAK8rB,KAAK62E,GAA0CnjG,IAMxDonJ,gBACI,MAAMpnJ,EAAOQ,KAAKuyB,eAAiB,QAAU,QAEvC3C,EAAMnzB,OAAOqhG,YAAYluE,MAE/B7qB,QAAQoB,IAAK,iBAAgB3G,OAAWowB,GACxC5vB,KAAK0yB,WAAWm0H,qBAAsB,GAAErnJ,YAAiBowB,EAKzD,MAAMk3H,EAAWrqJ,OAAOy+F,gBAAgB,2BAClC6rD,EAAStqJ,OAAOy+F,gBAAgB,yBAChC8rD,EACC78H,MAAM48H,IAAY58H,MAAM28H,GAAgC,EAApBC,EAASD,EAI9CG,EAAOr3H,GACN5vB,KAAK0yB,WAAWm0H,qBAAqB,oBAClC7mJ,KAAK0yB,WAAWm0H,qBAAqB,eACzCG,E7EqUiB,IAASzlG,E6EnUhCvhD,KAAK0yB,WAAWm0H,qBAAsB,GAAErnJ,UAAeynJ,EACvDliJ,QAAQoB,IAAK,eAAc3G,OAAWynJ,GAEtC5xD,GAAWiE,e7EgUqB/3C,E6E/T5B,CACI,WAAc/hD,EACd+4F,MAAOv4F,KAAKkmJ,aACZz8I,MAAOw9I,G7E6TZ1pE,GAAkC,OAAQh8B,K6EjTjD23F,mBAAmBH,GACV6M,IAA4B5lJ,KAAK2xB,gBAC9Bk0H,IAA4B7lJ,KAAKuyB,iBAIrCvyB,KAAK2xB,iBACLi0H,IAA2B,GAE3B5lJ,KAAKuyB,iBACLszH,IAA2B,GAG/B9M,EAAU/rH,iBAAiB,UAAWhtB,KAAK4mJ,cAAc5jJ,KAAKhD,QASlEg5I,eAAeD,GACX+M,GAAgBnjJ,SAAQ01B,IACpB0gH,EAAU/rH,iBAAiBqL,EAAOr4B,KAAKomJ,mBAAmB/tH,OAUlE+gH,eAAeL,GACX+M,GAAgBnjJ,SAAQ01B,IACpB0gH,EAAU7rH,oBAAoBmL,EAAOr4B,KAAKomJ,mBAAmB/tH,OASrEguH,uBAAuB7mJ,GACnB4G,GAAO4gD,MAAO,GAAExnD,sDAAyDQ,QAQ7EknJ,aACI,MAAM,QAAEloD,EAAF,MAAWzG,EAAX,WAAkBzvE,GAAe9oB,KAAK4wB,MAE5C,MAAQ,eAAc9H,aAAsByvE,eAAmByG,IAOnExgG,WACI,MAAQ,uBAAsBwB,KAAKwyB,6BAA6BxyB,KAAK45F,oBACjE55F,KAAKymJ,mBAAmBzmJ,KAAKmpF,sBAAsBnpF,KAAKimJ,wBAAwBjmJ,KAAKknJ,iBC9TjG,MAAM9gJ,IAASyB,EAAAA,EAAAA,sCAQFs/I,GAAa,KAIbC,GAAiB,CARN,IACA,IACA,KAYjB,MAAMC,GAMTzoJ,YAAYynF,GAAgB,UACxBrmF,KAAKynE,GAAK4e,EACV,MAAMihE,EAAe,UAAGtnJ,KAAKynE,GAAGplE,eAAX,iBAAG,EAAiBo4H,oBAApB,aAAG,EAA+B8sB,iBACjDC,EAAmB,CACrBC,IA1BO,IA2BPC,SA1BO,IA2BPC,KAAMR,IAMVnnJ,KAAK4nJ,cAAgBN,MAAAA,EAAAA,EAAmBE,EACxC,MAAMK,EAAgB,UAAG7nJ,KAAK4nJ,cAAc9sH,WAAtB,QAA6B96B,KAAK4nJ,cAexD5nJ,KAAK8nJ,2BAA6B,CAC9B,CACInW,QAAQ,EACRl4F,WAAYn0B,GAAQ8sD,YAAcy1E,EAAiBF,KAAOE,EAAiBJ,IAC3E56F,IApDQ,IAqDRihB,sBAAuBxoD,GAAQ8sD,YAhDhB,EACA,GAiDnB,CACIu/D,QAAQ,EACRl4F,WAAYouG,EAAiBH,SAC7B76F,IAzDQ,IA0DRihB,sBApDe,GAsDnB,CACI6jE,QAAQ,EACRl4F,WAAYn0B,GAAQ8sD,YAAcy1E,EAAiBJ,IAAMI,EAAiBF,KAC1E96F,IA9DQ,IA+DRihB,sBAAuBxoD,GAAQ8sD,YA3DhB,EADA,IAsE3B21E,oBAAoBxpB,GAChB,OAAIv+H,KAAKynE,GAAG47E,iBAAmB9kB,EAAWhsG,eAC/BvyB,KAAK8nJ,2BAGTvpB,EAAWhsG,eACZ,CAAE,CACAo/G,QAAQ,EACRl4F,WAAYz5C,KAAK4nJ,cAAcD,OAEjC,CAAE,CAAEhW,QAAQ,IAWtBqW,0BAA0BjwG,GACtB,MAAMkwG,EAAYh6I,GAAAA,MAAgB8pC,EAAYtsC,KA4B9C,OA1BAw8I,EAAUt8I,MAAMhJ,SAAQgL,IACpB,GAAIA,EAAMnO,OAAS+0F,GACf,OAEJ,IAAK5mF,EAAM0B,aAAe1B,EAAM0B,WAAW9P,OACvC,OAEJ,IAAI2oJ,EAAiB,GAErB,MAAM15I,EAAQ,IAAI+4B,IAElB55B,EAAM0B,WAAWhD,KAAIkD,GACjBA,EAAMf,MACD/Q,MAAM,KACNmO,OAAOg2E,SACPj/E,SAAQ2L,GAAQE,EAAMg3B,IAAIl3B,OAGnCE,EAAM7L,SAAQ2L,IACV,MAAMqD,EAAUhE,EAAMa,MAAM5C,QAAOiH,GAAUA,EAAO7L,GAAGxI,aAAe8P,IAEtE45I,EAAiBA,EAAexhJ,OAAOiL,MAE3ChE,EAAMa,MAAQ05I,KAGX,IAAIv1I,sBAAsB,CAC7BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAKwC,GAAAA,MAAgBg6I,KAW7BE,gBAAgBrqE,GAA8B,IAAnBygD,EAAmB,uDAAN,KAKpC,OAJoBA,MAAAA,GAAAA,EAAY3tG,OAAS2tG,EAAWxsG,oBAC9C/xB,KAAKynE,GAAG4e,eAAexV,kBAAkBvhE,MAAK3I,IAAC,eAAI,UAAAA,EAAEshE,cAAF,mBAAUr3C,aAAV,eAAiB5pB,MAAOu3H,EAAWqa,gBACtF54I,KAAKynE,GAAG4e,eAAexV,kBAAkBvhE,MAAK3I,IAAC,eAAI,UAAAA,EAAEmjB,gBAAF,mBAAY8G,aAAZ,eAAmB4nB,QAASslC,KAezFsqE,kCAAkCp5I,GAG9B,GAAIsW,GAAQ49D,6BACR,OAAOl0E,EAEX,MAAMvD,EAAMwC,GAAAA,MAAgBe,EAAKvD,KAC3B08D,EAAM18D,EAAIE,MAAMg3H,WAAUvqF,GAASA,EAAM54C,OAAS+0F,KAExD,GAAI9oF,EAAIE,MAAMw8D,GAAKksD,OAAS5oH,EAAIE,MAAMw8D,GAAKkgF,cAAgB58I,EAAIE,MAAMw8D,GAAKm7E,WAatE,OAVA73I,EAAIE,MAAMhJ,SAAQ,CAACy1C,EAAO94C,KAClB84C,EAAM54C,OAAS+0F,IAAmBj1F,IAAM6oE,IACxC18D,EAAIE,MAAMrM,GAAG+0H,UAAOloH,EACpBV,EAAIE,MAAMrM,GAAGgkJ,eAAYn3I,EAGzBV,EAAIE,MAAMrM,GAAG+oJ,kBAAel8I,MAI7B,IAAIwG,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKwC,GAAAA,MAAgBxC,KAK7BA,EAAIE,MAAMw8D,GAAKksD,KAAO,CAClB,CACIrtH,GA3LQ,IA4LRiC,UAAW,QAEf,CACIjC,GA9LQ,IA+LRiC,UAAW,QAEf,CACIjC,GAjMQ,IAkMRiC,UAAW,SAOnB,MAAMq/I,EAAgBhjI,GAAQ8sD,aAAe9sD,GAAQ87D,qBAAqB,IACnE,QAAOgmE,GAAep5I,KAAK,OAC3B,YAAWo5I,GAAep5I,KAAK,OAOtC,OAJAvC,EAAIE,MAAMw8D,GAAKkgF,aAAe,CAC1B5+I,MAAO6+I,GAGJ,IAAI31I,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKwC,GAAAA,MAAgBxC,KAU7BimB,SAAS6sG,EAAY/G,GACjB,MAAM5mG,EAAQ2tG,EAAWma,WAEzB,GAAIlhB,EAAa,CAGb,MAAM+wB,EAAkB,CACpBt/I,UAAWmpH,KAAAA,SACX/qD,QAAS,CAAEk3D,EAAWxsG,qBACtB47C,cAAe,IAGdroD,GAAQ8sD,cACTm2E,EAAgB56E,cAAgB3tE,KAAK+nJ,oBAAoBxpB,IAE7Dv+H,KAAKynE,GAAG4e,eAAe9Y,eAAe38C,EAAO23H,QAK7CvoJ,KAAKynE,GAAG4e,eAAe30D,SAASd,GAYxC43H,8BAA8BC,EAAiBC,GAC3C,MAAMnqB,EAAakqB,EAAgB/P,YAC7B,OAAE37G,GAAWwhG,EAAWryD,cAgC9B,OA/BuBlsE,KAAK8nJ,2BAC3Bz7I,KAAIxD,GAAYk0B,EAASl0B,EAASilE,wBAClCzhE,KAAI,CAAC4nF,EAAa9rB,KAAQ,MACvB,IAAIwpE,EAAS8W,EAAgBlQ,iBAAmBv6C,KAAAA,QAM1C0qD,EAAY,GAtQC,KAsQI,UAAA1oJ,KAAK8nJ,2BAA2B3/E,UAAhC,eAAsC2F,wBAEnDmmB,GAAey0D,EAiBzB,OAPI1oJ,KAAKynE,GAAGkhF,yBACL3oJ,KAAKynE,GAAG52D,oBACPyU,GAAQm8D,iBArRG,IAsRZzhF,KAAK8nJ,2BAA2B3/E,GAAK2F,wBACxC6jE,GAAS,GAGNA,KAafiX,2BAA2BH,GAAiB,QACxC,MAAM1qD,EAAY0qD,EAAgBlQ,eAC5BsQ,GAAsB,UAAA7oJ,KAAKynE,GAAGplE,eAAR,mBAAiBo4H,oBAAjB,eAA+BquB,iBAjTxC,IAkTbC,EAAmBN,EAAgBnN,iBAClCmN,EAAgBnN,gBAAgBt0I,KAAOyhJ,EAAgBhQ,cAoB9D,OAlB0Bz4I,KAAK8nJ,2BAC9Bz7I,KAAIxD,GACe7I,KAAKynE,GAAGkhF,0BAA4BrjI,GAAQm8D,gBAItDsnE,EAAmB5B,GAAa0B,EAKhC9qD,IAAcC,KAAAA,SAAqB14E,GAAQk8D,oBAAsBxhF,KAAKynE,GAAG52D,uBACrE1E,EACAtD,EAAS4wC,aAc3BwpF,aAAaC,EAAUC,GAAU,QAC7B,MAAMrlD,EAAS,UAAGqlD,MAAAA,OAAH,EAAGA,EAAUvpC,iBAAb,QAA0BspC,MAAAA,OAA1B,EAA0BA,EAAUtpC,UAC7CxyB,EAAcpnE,KAAKmoJ,gBAAgBrqE,EAAWolD,GAC9CtyG,EAAK,UAAGuyG,MAAAA,OAAH,EAAGA,EAAUuV,kBAAb,QAA2B,KAEtC,OAAKtxE,GAGLhhE,GAAO4gD,MAAO,GAAEhnD,KAAKynE,gBAAgBy7D,UAAiBC,KAE/C/7D,EAAYa,OAAOg7D,aAAaryG,IAJ5BpG,QAAQpU,OAAO,IAAItQ,MAAM,yBAgBxC4+H,uBAAuBiN,GACnB3xI,KAAK2gI,uBAAuBpsC,GAAiBo9C,GASjDqX,aAAap4H,GAAO,QAChB,MAAMktD,EAAYltD,EAAMgpE,UAClBxyB,EAAcpnE,KAAKmoJ,gBAAgBrqE,EAAWltD,GAC9CykB,EAAa+xB,MAAAA,GAAH,UAAGA,EAAaa,cAAhB,aAAG,EAAqB+F,gBAKxC,OAAK34B,MAAAA,GAAD,UAACA,EAAY44B,iBAAb,OAAC,EAAuB1uE,QAG5B81C,EAAW44B,UAAYjuE,KAAK+nJ,oBAAoBn3H,GAEzCw2C,EAAYa,OAAOiG,cAAc74B,IAJ7B7qB,QAAQC,UAevBk2G,uBAAuB7iD,EAAW6zD,GAC9B,MAAMsX,EAAejpJ,KAAKynE,GAAG4e,eAAexV,kBACvCjlE,QAAOjF,GAAKA,EAAEmjB,UAAYnjB,EAAEmjB,SAAS8G,OAASjqB,EAAEmjB,SAAS8G,MAAM4nB,OAASslC,IACvEksB,EAAchqG,KAAKynE,GAAGitB,eAAe5W,GAE3C13E,GAAO+L,KAAM,GAAEnS,KAAKynE,MAAMkqE,EAAS,WAAa,gBAAgB7zD,qBAChEmrE,EAAatmJ,SAAQ,CAACykE,EAAae,KAC3BwpE,EAEY,IAARxpE,GAAa6hC,EAAYzqG,OACzB6nE,EAAYn+D,UAAYmpH,KAAAA,SAExBhrD,EAAYn+D,UAAYmpH,KAAAA,SAG5BhrD,EAAYn+D,UAAYmpH,KAAAA,YAcpCwS,uBAAuB+M,GACnB3xI,KAAK2gI,uBAAuBpsC,GAAiBo9C,GAWjDuX,0BAA0B7zG,GAKhB44B,IAAAA,EAJA3oD,GAAQm8D,iBAAmBpsC,EAAW44B,WAAa9vE,MAAMC,QAAQi3C,EAAW44B,cAI5EA,EAIgB54B,EAAW44B,WAJJr3D,OAAM/N,QAAsD,IAAnCA,EAASilE,uBACpDjlE,EAASilE,wBAA0BG,EAAU,GAAGH,yBAIvDz4B,EAAW44B,UAAUtrE,SAAQ,CAACkG,EAAUs/D,KACpCt/D,EAASilE,sBAAwB9tE,KAAK8nJ,2BAA2B3/E,GAAK2F,2BCnatF,MAAM1nE,IAASyB,EAAAA,EAAAA,qDA+BA,SAASshJ,GAChBhvD,EACAnzF,EACA8wH,EACA7nD,EACAvM,EACAylB,EACA9mF,GAUJrC,KAAKopJ,uBAAgD,IAAxB/mJ,EAAQ88F,aAQrCn/F,KAAKqpJ,iBAAcl9I,EAkBnBnM,KAAKspJ,gBAAkB,GAUvBtpJ,KAAKupJ,qBAAsB,EAO3BvpJ,KAAKm6F,IAAMA,EAMXn6F,KAAKgH,GAAKA,EAOVhH,KAAKmpF,MAAQA,EASbnpF,KAAKwpJ,aAAe,IAAIliH,IAMxBtnC,KAAKgqG,YAAc,IAAI1iE,IAQvBtnC,KAAKypJ,cAAgB,GAoBrBzpJ,KAAK0pJ,WAAa,IAAIpiH,IAKtBtnC,KAAK2pJ,WAAa,KAKlB3pJ,KAAK4pJ,YAAc,KAMnB5pJ,KAAK83H,eAAiBA,EAGtB93H,KAAK6pJ,sBAAwB7pJ,KAAK6pJ,sBAAsB7mJ,KAAKhD,MAC7DA,KAAK83H,eAAe/sG,GAChB++H,GACA9pJ,KAAK6pJ,uBAET7pJ,KAAK+pJ,kBAAoB/pJ,KAAK+pJ,kBAAkB/mJ,KAAKhD,MACrDA,KAAK83H,eAAe/sG,GAChB++H,GACA9pJ,KAAK+pJ,mBACT/pJ,KAAKqC,QAAUA,EAIf,MAAM2nJ,EAAkBtmF,GAAe,GAEvCsmF,EAAgB/mF,SAAW+mF,EAAgB/mF,UAAY,GAInD9kE,MAAMC,QAAQ4rJ,EAAgB/mF,UAC9B+mF,EAAgB/mF,SAAS/+D,KAAK,CAAE+lJ,eAAgBjqJ,KAAKmpF,QAErD/iF,GAAO6lB,KAAK,iEAGhBjsB,KAAKqmF,eAAiB,IAAI4yD,GAAAA,sBAA+BhpE,EAAU+5E,GAEnEhqJ,KAAKkqJ,SAAW,IAAI7C,GAASrnJ,MAC7BA,KAAKuoI,UAAY,GACjBvoI,KAAKgiE,MAAQ,GACbhiE,KAAKmqJ,cAAgB,KAKrBnqJ,KAAKoqJ,uBAAyBpqJ,KAAKqC,QAAQk4H,sBAK3Cv6H,KAAKqqJ,iBAAmBhoJ,EAAQwO,gBAMhC7Q,KAAKsqJ,iCAAmChlI,GAAQi9D,4BAA8BviF,KAAKqqJ,iBACnFrqJ,KAAKsqJ,kCACElkJ,GAAO+L,KAAK,mEAMnBnS,KAAKs6H,SAAWj4H,EAAQi4H,SAExBt6H,KAAKuqJ,QAAU,IAAIpM,GACnB,MAAMzvI,EAAYxM,EAAQ,MAE1BlC,KAAKsjJ,UAAY,IAAI50I,EACjB,CACIC,YAAay4I,GAAe7nJ,OAC5BmS,wBAAwB,EACxBb,gBAAiB7Q,KAAKqqJ,mBAE9BrqJ,KAAKujJ,eAAiB,IAAI8B,GAAerlJ,KAAKxB,YAO9CwB,KAAKwqJ,eAAiB,IAAI5H,GAAe5iJ,KAAMA,KAAKm6F,IAAIswD,sBAMxDzqJ,KAAK6sF,aAAesN,EAAItN,aACxB7sF,KAAK0jJ,YAAc,IAAIiB,GAMvB3kJ,KAAK0qJ,sBAAwB,KAG7B1qJ,KAAKypI,MAAQ,CAACkhB,EAAMx4I,KAChB/L,GAAO4gD,MAAM2jG,EAAMx4I,GAEnBnS,KAAKuoI,UAAUrkI,KAAK,CAChBqqC,KAAM,IAAIznC,KACVtH,KAAMmrJ,EACNlhJ,MAAO0I,GAAQ,MAGvBnS,KAAKm7H,eAAiB,KACtBn7H,KAAKqmF,eAAe80C,eAAiB9iG,IACjCr4B,KAAKypI,MACD,iBACAlmI,KAAKF,UAAUg1B,EAAMmb,UAAW,KAAM,MAEd,OAAxBxzC,KAAKm7H,gBACLn7H,KAAKm7H,eAAe9iG,IAKxBr4B,KAAKqqJ,kBACLrqJ,KAAK4qJ,QAAUC,IACX,MAAMh+I,EAASg+I,EAAIxjF,QAAQ,GAE3BrnE,KAAK8qJ,kBAAkBj+I,EAAQg+I,EAAIj6H,MAAOi6H,EAAIzjF,aAC9Cv6D,EAAOmgB,iBAAiB,eAAevkB,IACnCzI,KAAK+qJ,oBAAoBl+I,EAAQpE,EAAEmoB,WAG3C5wB,KAAKqmF,eAAer5D,iBAAiB,QAAShtB,KAAK4qJ,WAEnD5qJ,KAAKqmF,eAAe2kE,YAAc3yH,GAASr4B,KAAKirJ,mBAAmB5yH,EAAMxrB,QACzE7M,KAAKqmF,eAAe6kE,eAAiB7yH,GAASr4B,KAAKmrJ,qBAAqB9yH,EAAMxrB,SAElF7M,KAAKw7H,uBAAyB,KAC9Bx7H,KAAKqmF,eAAem1C,uBAAyBnjG,IACzCr4B,KAAKypI,MAAM,yBAA0BzpI,KAAKkrE,gBACN,OAAhClrE,KAAKw7H,wBACLx7H,KAAKw7H,uBAAuBnjG,IAGpCr4B,KAAKy7H,2BAA6B,KAClCz7H,KAAKqmF,eAAeo1C,2BAA6BpjG,IAC7Cr4B,KAAKypI,MAAM,6BAA8BzpI,KAAKkzE,oBACN,OAApClzE,KAAKy7H,4BACLz7H,KAAKy7H,2BAA2BpjG,IAGxCr4B,KAAKi8H,oBAAsB,KAC3Bj8H,KAAKqmF,eAAe41C,oBAAsB5jG,IACtCr4B,KAAKypI,MAAM,uBACsB,OAA7BzpI,KAAKi8H,qBACLj8H,KAAKi8H,oBAAoB5jG,IAGjCr4B,KAAK+7H,wBAA0B,KAC/B/7H,KAAKqmF,eAAe01C,wBAA0B1jG,IAC1Cr4B,KAAKypI,MAAM,0BAA2BzpI,KAAKuzE,iBACN,OAAjCvzE,KAAK+7H,yBACL/7H,KAAK+7H,wBAAwB1jG,IAGrCr4B,KAAKorJ,cAAgB,KACrBprJ,KAAKqmF,eAAe+kE,cAAgB/yH,IAChCr4B,KAAKypI,MAAM,iBACgB,OAAvBzpI,KAAKorJ,eACLprJ,KAAKorJ,cAAc/yH,IAIvBr4B,KAAKs6H,WACLt6H,KAAKmqJ,cAAgB1tJ,OAAOkvF,aAAY,KACpC3rF,KAAK6oE,WAAW1E,MAAKnC,IACjB,GAA6B,mBAAlBA,MAAAA,OAAP,EAAOA,EAAOxrD,QAAuB,CACrC,MAAM9C,EAAUsuD,EAAMxrD,SAEtB,IAAK,IAAIlX,EAAI,EAAGA,EAAIoU,EAAQnU,SAAUD,EAAG,CACrC,MAAMwxG,EAAMp9F,EAAQpU,GAEpBwxG,EAAIzoG,QAAQ1F,SAAQuF,IAChBlI,KAAKqrJ,aAAav6C,EAAK5oG,EAAM4oG,EAAIvnC,KAAKrhE,aAI9C85D,EAAMr/D,SAAQiG,GAAK5I,KAAKqrJ,aAAaziJ,EAAG,GAAIA,UAGrD,MAGPxC,GAAO+L,KAAM,cAAanS,QAY9BmpJ,GAAwB5qJ,UAAU8sJ,aAC5B,SAASliF,EAAQjhE,EAAMojJ,GACrB,MAAMtkJ,EAAM,GAAEmiE,EAAOniE,MAAMkB,IAC3B,IAAIK,EAAIvI,KAAKgiE,MAAMh7D,GACnB,MAAM4oB,EAAM,IAAI9oB,KAEXyB,IACDvI,KAAKgiE,MAAMh7D,GAAMuB,EAAI,CACjBuoB,UAAWlB,EACX27H,QAAS37H,EACTrf,OAAQ,GACR6H,MAAO,KAGf7P,EAAEgI,OAAOrM,KAAKonJ,GACd/iJ,EAAE6P,MAAMlU,KAAK0rB,EAAI45B,WACbjhD,EAAEgI,OAAOhR,OAASS,KAAKs6H,WACvB/xH,EAAEgI,OAAOgK,QACThS,EAAE6P,MAAMmC,SAEZhS,EAAEgjJ,QAAU37H,GAMpB,MAAM47H,GAAU,SAASzzG,GACrB,OAAI,MAAOA,EACA,GAGH,SAAQA,EAAYv4C,WAAWu4C,EAAYtsC,OAYvD09I,GAAwB5qJ,UAAU4nI,mBAAqB,WACnD,MAAM75G,EAAQtsB,KAAKqmF,eAAenT,mBAElC,MAAc,cAAV5mD,EACO,YAGJA,GAcX68H,GAAwB5qJ,UAAUskI,yBAA2B,SAAS/kD,GAAmC,IAAxB2tE,EAAwB,wDACrG,MAAMC,EAAiB1rJ,KAAK2rJ,mBAAmB7tE,GAE/C,GAAI99E,KAAKqqJ,iBACL,OAAOoB,EACDC,EAAiBt5B,KAAAA,SAA0BA,KAAAA,SAC3Cs5B,EAAiBt5B,KAAAA,SAA0BA,KAAAA,SAGrD,MAAMw5B,EAAsB9tE,IAAcyW,GAAkBv0F,KAAKopJ,oBAAsBppJ,KAAKupJ,oBAE5F,OAAIqC,EACOF,EAAiBt5B,KAAAA,SAA0BA,KAAAA,SAG/CA,KAAAA,UAUX+2B,GAAwB5qJ,UAAUstJ,2BAA6B,SAASC,EAAWhuE,GAC/E,IAAI0rE,EAAe,GACf3/E,EAAY,GAEhB,IAAK,MAAMw9D,KAAYykB,EACnBtC,EAAeA,EAAa9iJ,OAAO1G,KAAK+rJ,gBAAgB1kB,EAAUvpD,IAItE,MAAMkuE,EAAiBxC,EAAan9I,KAAI4iI,IAAM,uBAAIA,EAAOr+G,aAAX,aAAI,EAAc5pB,MAOhE,OALA6iE,EAAY7pE,KAAKqmF,eAAenf,eAC3Bt7D,QAAOke,GAAYA,EAAS8G,OACtB9G,EAAS8G,MAAM4nB,OAASslC,GACxBkuE,EAAe18I,MAAKqzD,GAAWA,IAAY74C,EAAS8G,MAAM5pB,OAE9D6iE,GAQXs/E,GAAwB5qJ,UAAU8kJ,cAAgB,WAC9C,OAAQrjJ,KAAKqC,QAAQu4H,kBASzBuuB,GAAwB5qJ,UAAUsrJ,sBAAwB,SAClD3nD,EACAnE,GAEJ,IAAKmE,EAGD,YAFA97F,GAAO5C,MAAO,GAAExD,8CAIpB,MAAMs4I,EAAat4I,KAAK+rJ,gBAAgB7pD,EAAY3N,IAEhD+jD,EAAW/4I,QAEX+4I,EAAW,GAAGqO,cAAc5oD,IAWpCorD,GAAwB5qJ,UAAUwrJ,kBAAoB,SAC9C7nD,EACApkB,EACA6b,GAEJ,IAAKuI,EAGD,YAFA97F,GAAO5C,MAAO,GAAExD,4CAIpB,MAAM4wB,EAAQ5wB,KAAK+rJ,gBAAgB7pD,EAAYpkB,GAE3CltD,EAAMrxB,QAENqxB,EAAM,GAAG41H,QAAQ7sD,IAUzBwvD,GAAwB5qJ,UAAU4xF,eAAiB,WAA2B,IAAlBb,EAAkB,uDAAJ,GACtE,MAAMY,EAAc,GACd+7D,EAAiB38D,EAAY/vF,OAC7BS,KAAK6rJ,2BAA2Bv8D,EAAaiF,IAC7Cv0F,KAAKqmF,eAAenf,eACjBt7D,QAAOke,GAAYA,EAAS8G,OAAS9G,EAAS8G,MAAM4nB,OAAS+7C,IAAmBzqE,EAAS8G,MAAMouE,UAcxG,OAZAitD,EAAetpJ,SAAQssI,IACnB,MAAM3gI,EAAO2gI,EAAOid,4BAEhB59I,GAAQA,EAAK/O,SAKb2wF,EAAY5hF,EAAK,GAAGuE,QAAUvE,EAAK,GAAGu8E,eAIvCqF,GASXi5D,GAAwB5qJ,UAAUm2F,eAAiB,SAAS5W,GACxD,IAAI9O,EAAS7wE,MAAMi+C,KAAKp8C,KAAKgqG,YAAYz5F,UAMzC,YAJkBpE,IAAd2xE,IACA9O,EAASA,EAAOpjE,QAAOglB,GAASA,EAAMgpE,YAAc9b,KAGjD9O,GAQXm6E,GAAwB5qJ,UAAU4tJ,mBAAqB,WACnD,OAAOnsJ,KAAK00F,eAAeH,IAAiB,IAShD40D,GAAwB5qJ,UAAUotJ,mBAAqB,SAAS7tE,GAC5D,IAAKA,EACD,MAAM,IAAIh4E,MAAM,2BAGpB,OAAO9F,KAAK00F,eAAe5W,GAAWv+E,OAAS,GAUnD4pJ,GAAwB5qJ,UAAUwtJ,gBAAkB,SAC5C7pD,EACApkB,GACJ,MAAM0rE,EAAe,GACfsC,EACA5pD,EAAa,CAAEA,GAAeliG,KAAKwpJ,aAAa/mJ,OAEtD,IAAK,MAAM4kI,KAAYykB,EAAW,CAC9B,MAAMM,EAAmBpsJ,KAAKwpJ,aAAajrI,IAAI8oH,GAE/C,GAAK+kB,EAOL,IAAK,MAAMvU,KAAkBuU,EAAiB3pJ,OAE1C,IAAKq7E,GAAaA,IAAc+5D,EAAgB,CAC5C,MAAMwU,EAAaD,EAAiB7tI,IAAIs5H,GAEpCwU,GACA7C,EAAatlJ,KAAKmoJ,IAMlC,OAAO7C,GASXL,GAAwB5qJ,UAAU0jI,iCAAmC,SAASj7H,GAC1E,MAAMg7H,EAAiB,GACjBwnB,EAAexpJ,KAAK+rJ,gBAAgB/kJ,GAE1C,GAAKwiJ,MAAAA,IAAAA,EAAcjqJ,OACf,OAAOyiI,EAEX,MAAMsqB,EAAe9C,EAAan9I,KAAIukB,GAASA,EAAM61H,YAC/Ch7I,EAAM,IAAI6mH,GAAItyH,KAAKk8H,kBAAkBzwH,KA2B3C,OAzBA6gJ,EAAa3pJ,SAAQ,CAAC2L,EAAM65D,KACxB,IAAK,MAAMx8D,KAASF,EAAIE,MAAO,CAC3B,IAAI+pC,EAAQ,GACRw5E,EAAYb,GAAAA,UAAkB1iH,EAAQ,UAAS2C,KAEnD,GAAI4gH,EAAU3vH,OAAQ,CACbyiI,EAAe75D,KAChB65D,EAAe75D,GAAO,IAI1B,MAAMokF,EAAWl+B,GAAAA,UAAkB1iH,EAAQ,oBAAmB2C,KAE9D,GAAIi+I,EAAShtJ,OAAQ,CACjB,MAAMy5C,EAAgBuzG,EAAS,GAAG9uJ,MAAM,KAAK,GAE7Ci4C,GAAU,GAAE62G,EAAS,SACrBr9B,EAAYA,EAAUxoH,OAAO2nH,GAAAA,UAAkB1iH,EAAQ,UAASqtC,MAEpEgpF,EAAe75D,IAAS,GAAE+mD,EAAUlhH,KAAK,cACzCg0H,EAAe75D,IAAQzyB,OAK5BssF,GAQXmnB,GAAwB5qJ,UAAUiuJ,uBAAyB,WACvD,MAAM3d,EAAe7uI,KAAKk+H,0BAE1B,OAAOl+H,KAAKkqJ,SAAStC,cAAc/Y,EAAa56F,gBAAkBj0C,KAAKkqJ,SAAStC,eASpFuB,GAAwB5qJ,UAAU+yF,eAAiB,SAAShjF,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAIxI,MAAO,QAAOwI,qBAE5B,IAAK,MAAMiwH,KAAcv+H,KAAKgqG,YAAYz5F,SACtC,GAAIvQ,KAAK20F,aAAa4pC,KAAgBjwH,EAClC,OAAOiwH,EAGf,IAAK,MAAM77B,KAAe1iG,KAAK+rJ,kBAC3B,GAAIrpD,EAAY+jD,YAAcn4I,EAC1B,OAAOo0F,EAIf,OAAO,MASXymD,GAAwB5qJ,UAAUw2F,iBAAmB,SAAS/tF,GAE1D,MAAMylJ,EAAgB77H,GAASA,EAAM8nH,WAAW1xI,KAAOA,EACjDu3H,EAAav+H,KAAK00F,iBAAiBplF,KAAKm9I,GAE9C,GAAIluB,EACA,OAAOv+H,KAAK20F,aAAa4pC,GAG7B,MAAM77B,EAAc1iG,KAAK+rJ,kBAAkBz8I,KAAKm9I,GAEhD,OAAI/pD,EACOA,EAAY+jD,UAGhB,MAOX0C,GAAwB5qJ,UAAU0sJ,mBAAqB,SAASp+I,GAC5D,MAAMs9D,EAAWuiF,GAAIvY,YAAYtnI,GAEjC,IAAK6/I,GAAIC,iBAAiBxiF,GAGtB,YAFA/jE,GAAO+L,KAAM,GAAEnS,mEAAmEmqE,MAMlF7kD,GAAQk8D,oBACR30E,EAAO+/I,WAAav0H,IAChBr4B,KAAK8qJ,kBAAkBj+I,EAAQwrB,EAAMzH,QAEzC/jB,EAAOggJ,cAAgBx0H,IACnBr4B,KAAK+qJ,oBAAoBl+I,EAAQwrB,EAAMzH,SAK/C,MAAMk8H,EAAoBjgJ,EAAOolB,iBAEjC,IAAK,MAAM86H,KAAcD,EACrB9sJ,KAAK8qJ,kBAAkBj+I,EAAQkgJ,GAEnC,MAAMC,EAAoBngJ,EAAO64D,iBAEjC,IAAK,MAAM4yE,KAAc0U,EACrBhtJ,KAAK8qJ,kBAAkBj+I,EAAQyrI,IAgBvC6Q,GAAwB5qJ,UAAUusJ,kBAAoB,SAASj+I,EAAQ+jB,GAA2B,IAApBw2C,EAAoB,uDAAN,KACxF,MAAM+C,EAAWuiF,GAAIvY,YAAYtnI,GAC3BixE,EAAYltD,EAAM4nB,KAExB,IAAKx4C,KAAKmpF,QAAUujE,GAAIC,iBAAiBxiF,GAGrC,YAFA/jE,GAAO+L,KAAM,GAAEnS,mEAAmEmqE,MAOtF,GAHA/jE,GAAO+L,KAAM,GAAEnS,0CAA0CmqE,UAAiB2T,OAGrEA,EAOD,YANAvlD,GAAqBE,iBACjB,IAAI3yB,MACC,oDAAmDqkE,MAOhE,MAAM8iF,EAAYjtJ,KAAKqqJ,iBACjB,IAAI/3B,GAAItyH,KAAKqmF,eAAe61C,kBAAkBzwH,KAC9C,IAAI6mH,GAAItyH,KAAKk8H,kBAAkBzwH,KACrC,IAAIyhJ,EAIJ,GAAIltJ,KAAKqqJ,iBACL,GAAIjjF,GAAeA,EAAYlsD,IAAK,CAChC,MAAMA,EAAMksD,EAAYlsD,IAExBgyI,EAAaD,EAAUthJ,MAAMC,QAAOuhJ,GAAO9+B,GAAAA,SAAiB8+B,EAAM,SAAQjyI,YAE1EgyI,EAAaD,EAAUthJ,MAAMC,QAAOuhJ,IAChC,MAAMr8I,EAAOu9G,GAAAA,SAAiB8+B,EAAK,WAEnC,YAAuB,IAATr8I,GAAwBq5D,IAAar5D,EAAKlE,UAAU,GAAGnP,MAAM,KAAK,WAIxFyvJ,EAAaD,EAAUthJ,MAAMC,QAAOuhJ,GAAOA,EAAIj2C,WAAY,KAAIp5B,OAGnE,IAAKovE,EAAW3tJ,OAKZ,YAJAg5B,GAAqBE,iBACjB,IAAI3yB,MAAO,2DAA0DqkE,UAAiB2T,OAM9F,IAAIoxC,EAAYb,GAAAA,UAAkB6+B,EAAW,GAAI,WAIjD,GAFAh+B,EACMA,EAAUtjH,QAAOhG,IAA8C,IAAtCA,EAAKT,QAAS,QAAOglE,QAC/C+kD,EAAU3vH,OAKX,YAJAg5B,GAAqBE,iBACjB,IAAI3yB,MAAO,4DAA2DqkE,UAAiB2T,OAQ/F,MAAMruE,EAAUy/G,EAAU,GAAGtiH,UAAU,GAAGnP,MAAM,KAAK,GAC/C2vJ,EAAYriJ,OAAO0E,GACnBu2I,EAAkBhmJ,KAAK83H,eAAesoB,aAAagN,GAEzD,GAAIjjI,MAAMijI,IAAcA,EAAY,EAMhC,YALA70H,GAAqBE,iBACjB,IAAI3yB,MACC,uCAAsCsnJ,QAAgBjjF,UAAiB2T,OAI7E,IAAKkoE,EAMR,YALAztH,GAAqBE,iBACjB,IAAI3yB,MACC,8CAA6CsnJ,QAAgBjjF,UAAiB2T,OAO3F,IAAIq2C,EAEA7I,GAAAA,iCACA6I,EAAan0H,KAAK83H,eAAewoB,mBAAmB8M,GAI/Cj5B,IACDA,EAAa2rB,GAA2BkG,EAAiBloE,EAAW,KAK5E13E,GAAO+L,KAAM,GAAEnS,uCAAuCgmJ,UAAwBoH,UAChEtvE,gBAAwBq2C,MAEtC,MAAM+a,EACAlvI,KAAK83H,eAAeqX,iBAAiB6W,EAAiBloE,GAE5D,IAAKoxD,EAID,YAHA32G,GAAqBE,iBACjB,IAAI3yB,MAAO,GAAE9F,0CAA0CgmJ,MAK/D,MAAMztD,EAAQ22C,EAAc32C,MACtBwF,EAAYmxC,EAAcnxC,UAGhC/9F,KAAKqtJ,mBACDrH,EAAiBn5I,EAAQ+jB,EAAOktD,EAAWigB,EAAWqvD,EAAW70D,EAAO47B,IAmBhFg1B,GAAwB5qJ,UAAU8uJ,mBAAqB,SAC/CrH,EACAn5I,EACA+jB,EACAktD,EACAigB,EACAzvF,EACAiqF,EACA47B,GACJ,IAAIm5B,EAAkBttJ,KAAKwpJ,aAAajrI,IAAIynI,GAEvCsH,IACDA,EAAkB,IAAIhmH,IACtBtnC,KAAKwpJ,aAAar8H,IAAI64H,EAAiBsH,IAG3C,MAAMC,EAAgBD,EAAgB/uI,IAAIu/D,GAE1C,GAAIyvE,GAAiBA,EAAc7U,aAAe9nH,EAI9C,YAFAxqB,GAAO+L,KAAM,GAAEnS,0DAA0DgmJ,UAAwBloE,MAG1FyvE,IACPnnJ,GAAO5C,MAAO,GAAExD,0DAA0DgmJ,UAAwBloE,iCAUlG99E,KAAK+qJ,oBAAoBwC,EAAcx7H,oBAAqBw7H,EAAc7U,aAG9E,MAAMh2C,EACA,IAAIqjD,GACE/lJ,KAAKm6F,IACLn6F,KAAKm6F,IAAIznE,WACTszH,EACAn5I,EACA+jB,EACAktD,EACAigB,EACAzvF,EACAiqF,EACAv4F,KAAKmpF,MACLgrC,GAEZm5B,EAAgBngI,IAAI2wD,EAAW4kB,GAE/B1iG,KAAK6sF,aAAa/gE,KAAKyxE,KAAAA,mBAA8BmF,EAAa1iG,OAUtEmpJ,GAAwB5qJ,UAAU4sJ,qBAAuB,SAASt+I,GAC9D,IAAK6/I,GAAIc,aAAa3gJ,GAAS,CAC3B,MAAM7F,EAAK0lJ,GAAIvY,YAAYtnI,GAI3B,YAFAzG,GAAO+L,KAAM,uDAAsDnL,MAMvE,MAAMgmJ,EAAoBngJ,EAAO64D,iBAEjC,IAAK,MAAM4yE,KAAc0U,EACrBhtJ,KAAK+qJ,oBAAoBl+I,EAAQyrI,GAErC,MAAMwU,EAAoBjgJ,EAAOolB,iBAEjC,IAAK,MAAM86H,KAAcD,EACrB9sJ,KAAK+qJ,oBAAoBl+I,EAAQkgJ,IAWzC5D,GAAwB5qJ,UAAUwsJ,oBAAsB,SAChDl+I,EACA+jB,GACJ,MAAMu5C,EAAWuiF,GAAIvY,YAAYtnI,GAC3B81D,EAAU/xC,GAAS87H,GAAItY,WAAWxjH,GAEnC87H,GAAIC,iBAAiBxiF,IAK1B/jE,GAAO+L,KAAM,GAAEnS,uCAAuCmqE,aAAoBxH,MAErEwH,EAMAxH,EAMA3iE,KAAKytJ,uBAAuBtjF,EAAUxH,IAWvCv8D,GAAO6lB,KAAM,GAAEjsB,8CAA8CmqE,aAAoBxH,MAhBjFpqC,GAAqBE,iBAAiB,IAAI3yB,MAAO,GAAE9F,mDANnDu4B,GAAqBE,iBAAiB,IAAI3yB,MAAO,GAAE9F,qDAPnDoG,GAAO+L,KAAM,GAAEnS,qEAAqEmqE,OAyC5Fg/E,GAAwB5qJ,UAAUmvJ,oBAAsB,SAChDvjF,EACAxH,GAEJ,IAAK,MAAMypF,KAAoBpsJ,KAAKwpJ,aAAaj5I,SAC7C,IAAK,MAAM87I,KAAcD,EAAiB77I,SAGtC,GAAI87I,EAAW5T,eAAiBtuE,GACzBkiF,EAAWzT,cAAgBj2E,EAC9B,OAAO0pF,GAiBvBlD,GAAwB5qJ,UAAU2jI,mBAAqB,SAAS9W,GAC5D,MAAMuiC,EAAgB,GAChBL,EAAkBttJ,KAAKwpJ,aAAajrI,IAAI6sG,GAE9C,GAAIkiC,EAAiB,CACjB,MAAMM,EAAoBN,EAAgB/uI,IAAIg2E,IACxCs5D,EAAoBP,EAAgB/uI,IAAIg2E,IAE9Cq5D,GAAqBD,EAAczpJ,KAAK0pJ,GACxCC,GAAqBF,EAAczpJ,KAAK2pJ,GAExC7tJ,KAAKwpJ,aAAa7oF,OAAOyqD,GAI7B,OAFAhlH,GAAO4gD,MAAO,GAAEhnD,uCAAuCorH,WAAeuiC,EAAcpuJ,UAE7EouJ,GAQXxE,GAAwB5qJ,UAAUuvJ,mBAAqB,SAASC,GAC5DA,EAAY1pE,UACZ,MAAMkN,EAAgBw8D,EAAYv7H,mBAC5B86H,EAAkBttJ,KAAKwpJ,aAAajrI,IAAIgzE,GAEzC+7D,EAEOA,EAAgB3sF,OAAOotF,EAAYn0D,YAC3CxzF,GAAO5C,MAAO,GAAExD,yBAAyB+tJ,gCAFzC3nJ,GAAO5C,MAAO,GAAExD,6DAA6DuxF,KAIjFvxF,KAAK6sF,aAAa/gE,KAAKyxE,KAAAA,qBAAgCwwD,IAa3D5E,GAAwB5qJ,UAAUkvJ,uBAAyB,SACnDtjF,EACAxH,GACJ,MAAMorF,EAAc/tJ,KAAK0tJ,oBAAoBvjF,EAAUxH,GAMvD,OAJIorF,GACA/tJ,KAAK8tJ,mBAAmBC,GAGrBA,GAQX5E,GAAwB5qJ,UAAUyvJ,gBAAkB,SAASh/I,GAKzD,MAAMc,EAAU,IAAIw3B,IAMd2mH,EAAY,IAAI3mH,IAEtB,GAAoB,iBAATt4B,GAA8B,OAATA,GACL,iBAAbA,EAAKvD,IAGf,OAFArF,GAAO6lB,KAAK,kDAELnc,EAGX,MAAMpE,EAAUuC,GAAAA,MAAgBe,EAAKvD,KAErC,IAAKtN,MAAMC,QAAQsN,EAAQC,OACvB,OAAOmE,EAGX,IAAInE,EAAQD,EAAQC,MAIhB3L,KAAKqqJ,mBACL1+I,EAAQ,GACR,CAAE4oF,GAAiBA,IAAkB5xF,SAAQm7E,IACzC,MAAMnwE,EAAQjC,EAAQC,MAAM2D,MAAKtJ,GAAKA,EAAExG,OAASs+E,IAEjDnwE,GAAShC,EAAMzH,KAAKyJ,OAI5B,IAAK,MAAMA,KAAShC,EAAO,CACvB,IAAKxN,MAAMC,QAAQuP,EAAMa,OACrB,SAGJ,GAAIrQ,MAAMC,QAAQuP,EAAM0B,YACpB,IAAK,MAAME,KAAS5B,EAAM0B,WACtB,QAA+B,IAApBE,EAAMC,gBACa,IAAhBD,EAAMf,MAAuB,CAEvC,MAAM0/I,EAAa3+I,EAAMf,MAAM/Q,MAAM,KAAK4O,KAAIoD,GAAWC,SAASD,EAAS,MACrE2xI,EAAc8M,EAAW,GAG/B3+I,EAAMf,MAAQ0/I,EAGTD,EAAUhiH,IAAIm1G,IACf6M,EAAU9gI,IAAIi0H,EAAa,IAE/B6M,EAAU1vI,IAAI6iI,GAAal9I,KAAKqL,GAK5C,IAAIf,EAAQb,EAAMa,MAGlBA,EAAQxO,KAAKqqJ,iBACP77I,EAAM5C,QAAOrD,GAAqB,UAAhBA,EAAEiB,YACpBgF,EAAM5C,QAAOrD,GAAqB,SAAhBA,EAAEiB,YAE1B,IAAK,MAAM8E,KAAQE,EAAO,CAKtB,MAAMtE,EAAMlK,KAAKqqJ,iBAAmB18I,EAAMnO,KAAO8O,EAAK7E,MAChDm3I,EAAatyI,EAAKtH,GACxB,IAAIyH,EAAWqB,EAAQyO,IAAIrU,GAY3B,GAVKuE,IACDA,EAAW,CACPD,MAAO,GACP8mH,OAAQ,GACRxkH,KAAM5G,GAEV4F,EAAQqd,IAAIjjB,EAAKuE,IAErBA,EAASD,MAAMtK,KAAK08I,GAEhBqN,EAAUhiH,IAAI20G,GAAa,CAC3B,MAAMvxI,EAAa4+I,EAAU1vI,IAAIqiI,GAEjC,IAAK,MAAMrxI,KAASF,EAChBZ,EAAS6mH,OAAOpxH,KAAKqL,KAMrC,OAAOO,GAsKXq5I,GAAwB5qJ,UAAUo2F,aAAe,SAAS4pC,GACtD,MAAM9vH,EAAWzO,KAAKmuJ,SAAS5vB,EAAWmb,OAE1C,OAAOjrI,GAAYA,EAASD,MAAM,IAatC26I,GAAwB5qJ,UAAU6vJ,oCAC5B,SAASp/I,GACP,MAAMvD,EAAMwC,GAAAA,MAAgBe,EAAKvD,KAC3Bo4D,EAAQp4D,EAAIE,MAAM2D,MAAK8oC,GAAwB,UAAfA,EAAM54C,OAG5CqkE,EAAMx0D,WAAaw0D,EAAMx0D,YAAc,GACvC,MAAM+1I,EAAYvhF,EAAMx0D,WAAWzD,QAAO2D,GAA6B,QAApBA,EAAMC,YAEzD,GAAIq0D,EAAMy/E,WAAaz/E,EAAMwkF,aAAc,CACvC,MAAM75I,EAAQ,GAad,GAXI42I,GAAaA,EAAU7lJ,OACvB6lJ,EAAUziJ,SAAQ4M,IACdf,EAAMtK,KAAKqL,EAAMf,MAAM/Q,MAAM,KAAK,OAGtComE,EAAMr1D,MAAM7L,SAAQ2L,IACO,SAAnBA,EAAK9E,WACLgF,EAAMtK,KAAKoK,EAAKtH,OAIxB68D,EAAMx0D,WAAWC,MAAKC,GAA6B,QAApBA,EAAMC,YAErC,OAAOR,EAGX60D,EAAMx0D,WAAWnL,KAAK,CAClBsL,UAAW,MACXhB,MAAOA,EAAMR,KAAK,OAI1B,OAAO,IAAI2E,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKwC,GAAAA,MAAgBxC,MAKjC,MAAM4iJ,GAAU,CACZnjF,iBACI,OAAOlrE,KAAKqmF,eAAenb,gBAE/BgI,qBACI,OAAOlzE,KAAKqmF,eAAenT,oBAE/BK,kBACI,OAAOvzE,KAAKqmF,eAAe9S,iBAE/B8oD,mBACI,IAAIrtH,EAAOhP,KAAKqmF,eAAeg2C,iBAE/B,OAAKrtH,GAMLhP,KAAKypI,MAAM,oCAAqC+hB,GAAQx8I,IAIpDhP,KAAKqqJ,mBAAqBrqJ,KAAKmpF,OAC/Bn6E,EAAOhP,KAAKuqJ,QAAQnM,QAAQpvI,GAC5BhP,KAAKypI,MAAM,8CACP+hB,GAAQx8I,IAEZA,EAAOhP,KAAKouJ,oCAAoCp/I,GAChDhP,KAAKypI,MAAM,yDACP+hB,GAAQx8I,KACJhP,KAAKqqJ,mBACT/kI,GAAQi8D,gCACRvyE,EAAOhP,KAAKwqJ,eAAetG,mCAAmCl1I,GAC9D5I,GAAO4gD,MACH,uDAAwDh4C,IAWhEA,EA/IY,SAASqtH,EAAkBh6H,GAC/C,IAAKg6H,EACD,MAAM,IAAIv2H,MAAM,mCAGpB,MAAMi9I,EAAc,IAAIT,GAAiBjmB,EAAiB5wH,KACpD6iJ,EAAavL,EAAYN,YAAYluD,IAC3C,IAAIg6D,GAAU,EAEVD,GAAcA,EAAWrlJ,YAAcmpH,KAAAA,WACnC/vH,EAAQ88F,YACRmvD,EAAWrlJ,UAAYmpH,KAAAA,SAEvBk8B,EAAWrlJ,UAAYmpH,KAAAA,SAG3Bm8B,GAAU,GAGd,MAAMC,EAAazL,EAAYN,YAAYluD,IAO3C,OALIi6D,GAAcA,EAAWvlJ,YAAcmpH,KAAAA,WACvCo8B,EAAWvlJ,UAAYmpH,KAAAA,SACvBm8B,GAAU,GAGVA,EACO,IAAI57I,sBAAsB,CAC7BnT,KAAM68H,EAAiB78H,KACvBiM,IAAKs3I,EAAYJ,aAIlBtmB,EA8GQoyB,CAAgBz/I,EAAMhP,KAAKqC,UAItC2M,EAAOhP,KAAKwqJ,eAAerG,2BAA2Bn1I,GAE/CA,IAtCH5I,GAAO4gD,MAAO,GAAEhnD,sDAET,KAsCfk8H,oBACI,IAAIltH,EAAOhP,KAAKqmF,eAAe61C,kBAE/B,OAAKltH,GAKLhP,KAAKypI,MAAM,qCAAsC+hB,GAAQx8I,IAErDhP,KAAKqqJ,mBACDrqJ,KAAKmpF,MAELn6E,EAAOhP,KAAK0uJ,4BAA4B1/I,IAGxCA,EAAOhP,KAAKuqJ,QAAQnM,QAAQpvI,GAC5BhP,KAAKypI,MAAM,+CAAgD+hB,GAAQx8I,MAIpEA,IAjBH5I,GAAO4gD,MAAO,GAAEhnD,wDAET,MAmBnB1B,OAAOmE,KAAK4rJ,IAAS1rJ,SAAQs+G,IACzB3iH,OAAO+f,eACH8qI,GAAwB5qJ,UACxB0iH,EAAM,CACF1iG,IAAK8vI,GAAQptC,QAKzBkoC,GAAwB5qJ,UAAU4vJ,SAAW,SAASzU,GAClD,OAAO15I,KAAK0pJ,WAAWnrI,IAAIm7H,IAS/ByP,GAAwB5qJ,UAAUoqJ,sBAAwB,WACtD,OAAO3oJ,KAAK2uJ,oBAAsB3uJ,KAAKoqJ,wBAS3CjB,GAAwB5qJ,UAAUowJ,iBAAmB,WACjD,MAAM/9H,EAAQ5wB,KAAKmsJ,qBAEnB,OAAOv7H,GAASA,EAAMmtE,YAAcC,GAAU1jE,SAYlD6uH,GAAwB5qJ,UAAUqwJ,iBAAmB,SAAS72G,GAC1D,IAAK/3C,KAAK6uJ,gBACN,OAAO92G,EAGX,MAAMkwG,EAAYh6I,GAAAA,MAAgB8pC,EAAYtsC,KAIxCkC,EAAQs6I,EAAUt8I,MAAM2D,MAAKtJ,GAAKA,EAAExG,OAASQ,KAAK6uJ,gBAAgB/wE,YAExE,IAAKnwE,EACD,OAAOoqC,EAGX,GAAI/3C,KAAK6uJ,gBAAgBzxF,OAcrB,GAbAixD,GAAAA,YAAoB1gH,EAAO3N,KAAK6uJ,gBAAgB38H,UAO5ClyB,KAAK6uJ,gBAAgB38H,WAAa8/F,GAAcr3F,MAAQrV,GAAQ07D,iBAAmBhhF,KAAKmpF,OACxFklC,GAAAA,WAAmB1gH,EAAO3N,KAAK6uJ,gBAAgB38H,UAAU,GAKzDlyB,KAAK6uJ,gBAAgB38H,WAAa8/F,GAAcj3F,KAC7C/6B,KAAKk+H,4BAA8BlM,GAAcj3F,IAAK,CACzD,MAAM+zH,EAAW9uJ,KAAKkqJ,SAAStC,cAAc7sH,KAAO/6B,KAAKkqJ,SAAStC,cAC5DmH,EAAYD,EAASnH,KAAOmH,EAASnH,KAAOR,GAC5C1yI,EAAQxD,KAAKC,OAAOlR,KAAK2uJ,mBAAqBxH,GAAa4H,GAAa,KAI9EphJ,EAAM6rC,UAAY,CAAE,CAChBh6C,KAAM,KACNiV,MAAAA,SAOJ9G,EAAM6rC,eAAYrtC,OAGtBkiH,GAAAA,WAAmB1gH,EAAO3N,KAAK6uJ,gBAAgB38H,UAGnD,OAAO,IAAIvf,sBAAsB,CAC7BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAKwC,GAAAA,MAAgBg6I,MAU7BkB,GAAwB5qJ,UAAUywJ,cAAgB,SAASp+H,GACvD,GAAIA,EAAM+B,UACN,OAAO3yB,KAAKgqG,YAAY/9D,IAAIrb,EAAM8oH,OAGtC,MAAMnoD,EAAgB3gE,EAAM4B,mBACtB86H,EAAkBttJ,KAAKwpJ,aAAajrI,IAAIgzE,GAE9C,OAAO3P,QAAQ0rE,GAAmBA,EAAgB/uI,IAAIqS,EAAMgpE,aAAehpE,IAS/Eu4H,GAAwB5qJ,UAAUmzB,SAAW,SAASd,GAA4B,IAArB4mG,EAAqB,wDAC9E,MAAMkiB,EAAQ9oH,EAAM8oH,MAIpB,GAFAtzI,GAAO+L,KAAM,GAAEnS,eAAe4wB,KAE1B5wB,KAAKgqG,YAAY/9D,IAAIytG,GAErB,OAAOlvH,QAAQpU,OAAO,IAAItQ,MAAO,GAAE8qB,mBAAuB5wB,SAG9DA,KAAKgqG,YAAY78E,IAAIusH,EAAO9oH,GAC5B,MAAMq+H,EAAer+H,EAAMmB,oBAE3B,GAAI/xB,KAAKqqJ,kBAEL,GADAjkJ,GAAO4gD,MAAO,GAAEhnD,wCACZivJ,EACA,IACIjvJ,KAAKkqJ,SAASx4H,SAASd,EAAO4mG,GAChC,MAAOh0H,GAGL,OAFA4C,GAAO5C,MAAO,GAAExD,qBAAqB4wB,aAAiBptB,MAAAA,OAAzC,EAAyCA,EAAOzE,WAEtDyrB,QAAQpU,OAAO5S,QAG3B,CAEH,GAAIyrJ,EACAjvJ,KAAKkvJ,WAAWD,QAGb,IAAK3pI,GAAQi8D,+BACL3wD,EAAMe,gBACLf,EAAM2B,iBAAmB3B,EAAM+oE,UAC3C,OAAOnvE,QAAQpU,OAAO,IAAItQ,MAAO,GAAE9F,mCAAmC4wB,MAI1E,GAAItL,GAAQi8D,+BAAiC3wD,EAAM2B,gBAAkB3B,EAAM+oE,UAAW,CAClF,MAAMlrF,EAAWzO,KAAKmvJ,0BAA0Bv+H,GAEhD5wB,KAAKujJ,eAAeiC,eAAe/2I,EAASD,MAAM,IAClD,MAAMY,EACAX,EAAS6mH,OAAOhmH,MAAK02G,GAAqC,QAAxBA,EAAUx2G,YAE9CJ,GACApP,KAAKsjJ,UAAUp0I,aAAaE,EAASZ,OAEzC,MAAM42I,EACA32I,EAAS6mH,OAAO1pH,QACdo6G,GAAqC,QAAxBA,EAAUx2G,YAE/B,GAAI41I,EAAW,CACX,MAAMgK,EAAiB,IAAI9nH,IAE3B89G,EAAUziJ,SAAQ4O,IACd,MAAMd,EAAcc,EAAS/C,MAAM,GAC7Bi2I,EAAUlzI,EAAS/C,MAAM,GAE/B4gJ,EAAejiI,IAAI1c,EAAag0I,MAEpCzkJ,KAAK0jJ,YAAYx0I,aAAakgJ,KAI1C,IAAIC,EAAe7kI,QAAQC,UAO3B,OAJInF,GAAQ8sD,cACRi9E,EAAeA,EAAalrF,MAAK,IAAM8qF,GAAgBjvJ,KAAKkqJ,SAASlB,aAAap4H,MAG/Ey+H,GAWXlG,GAAwB5qJ,UAAU6lI,eAAiB,SAASxzG,GAGxD,GAFAxqB,GAAO+L,KAAM,GAAEnS,qBAAqB4wB,gBAE/B5wB,KAAKsvJ,oBAAoB,iBAAkB1+H,GAG5C,OAAOpG,QAAQpU,OAAO,yCAG1B,MAAMm5I,EAAe3+H,EAAMmB,oBAE3B,OAAKw9H,EAMDvvJ,KAAKqqJ,iBACErqJ,KAAKkqJ,SAASjnB,aAAa,KAAMryG,GAAOuzC,MAAK,IAAMnkE,KAAKmpF,SAGnEnpF,KAAKkvJ,WAAWK,GAET/kI,QAAQC,SAAQ,KAXnBrkB,GAAO5C,MAAO,GAAExD,4BAA4B4wB,kCAErCpG,QAAQpU,OAAO,sBAiB9B+yI,GAAwB5qJ,UAAU2wJ,WAAa,SAASlY,GACpDh3I,KAAKqmF,eAAehe,UAAU2uE,GAC9Bh3I,KAAKypJ,cAAcvlJ,KAAK8yI,IAO5BmS,GAAwB5qJ,UAAUixJ,cAAgB,SAASxY,GACvDh3I,KAAKqmF,eAAe9d,aAAayuE,GACjCh3I,KAAKypJ,cACCzpJ,KAAKypJ,cAAc79I,QAAOiB,GAAUA,IAAWmqI,KAczDmS,GAAwB5qJ,UAAU+wJ,oBAAsB,SAChD5pJ,EACA64H,GACJ,MAAMkxB,EAAazvJ,KAAKgqG,YAAY/9D,IAAIsyF,MAAAA,OAArB,EAAqBA,EAAYmb,OAMpD,OAJK+V,GACDrpJ,GAAO5C,MAAO,GAAExD,QAAQ0F,YAAqB64H,2BAG1CkxB,GAUXtG,GAAwB5qJ,UAAU2/H,wBAA0B,WAAW,MACnE,MAAMzyH,EAAG,UAAGzL,KAAKqmF,eAAeg2C,wBAAvB,aAAG,EAAsC5wH,IAC5CikJ,EAAe19B,GAAcl3F,IAEnC,IAAKrvB,EACD,OAAOikJ,EAEX,MAEMh7G,EAFYzmC,GAAAA,MAAgBxC,GACVE,MAAM2D,MAAKtJ,GAAKA,EAAExG,OAAS+0F,KAC/B1oF,IAAI,GAAG6oC,MAE3B,OAAIA,EACOp2C,OAAOiS,OAAOyhH,IAAe1iH,MAAK7F,GAASA,IAAUirC,EAAMhvB,gBAG/DgqI,GAQXvG,GAAwB5qJ,UAAU4vH,2BAA6B,SAASC,GACpE,MAAMuhC,EAASvhC,G9Bx1DkB,E8B01DjCpuH,KAAKoqJ,uBAAyBpqJ,KAAKqjJ,iBAAmBsM,GAW1DxG,GAAwB5qJ,UAAU8gI,eAAiB,WAAsD,IAA7CpE,EAA6C,uDAA5B,KAAMkT,EAAsB,uDAAN,KAE/F,MAAM/wE,EAA2B,OAAlB+wE,EACTj8G,EAAWi8G,GAAgClT,EAE7Cj7H,KAAK6uJ,kBAAoB5zB,GAAkBkT,IAC3CnuI,KAAK6uJ,gBAAgBzxF,OAASA,EAC9Bp9D,KAAK6uJ,gBAAgB38H,SAAWA,GACzB+oG,GAAkBkT,EACzBnuI,KAAK6uJ,gBAAkB,CACnBzxF,OAAAA,EACA0gB,UAAWyW,GACXriE,SAAAA,GAGJ9rB,GAAO6lB,KAAM,GAAEjsB,yCAAyCi7H,cAA2BkT,iDAW3Fgb,GAAwB5qJ,UAAU4kJ,kBAAoB,SAASnM,GAC3D,OAAOh3I,KAAKypJ,cAActkJ,QAAQ6xI,IAAgB,GAUtDmS,GAAwB5qJ,UAAU+zB,YAAc,SAASisG,GACrD,MAAMgxB,EAAehxB,EAAWxsG,oBAEhC/xB,KAAKypI,MACD,eACAlL,EAAWmb,MAAO6V,EAAeA,EAAavoJ,QAAKmF,GAElDnM,KAAKsvJ,oBAAoB,eAAgB/wB,KAI9Cv+H,KAAKgqG,YAAYrpC,OAAO49D,EAAWmb,OACnC15I,KAAK0pJ,WAAW/oF,OAAO49D,EAAWmb,OAE9B6V,GACAvvJ,KAAKqmF,eAAe9d,aAAagnF,KAUzCpG,GAAwB5qJ,UAAUqxJ,iBAAmB,SAAS9xE,GAC1D,OAAO99E,KAAKqmF,eAAeve,aAAax4D,MAAK/G,GAAKA,EAAEqoB,OAASroB,EAAEqoB,MAAM4nB,OAASslC,KAUlFqrE,GAAwB5qJ,UAAU0rG,qBAAuB,SAASr5E,GAC9D,OAAO5wB,KAAKqmF,eAAenf,eAAe53D,MAAK1G,GAAKA,EAAEgoB,QAAUA,KAUpEu4H,GAAwB5qJ,UAAU2rG,mBAAqB,SAASt5E,GAC5D,OAAO5wB,KAAKqmF,eAAeve,aAAax4D,MAAK/G,GAAKA,EAAEqoB,QAAUA,KAelEu4H,GAAwB5qJ,UAAU0kI,aAAe,SAASC,EAAUC,GAChE,IAAMD,IAAYC,EAGd,OAFA/8H,GAAO+L,KAAM,GAAEnS,+DAERwqB,QAAQC,UAOnB,MAAMolI,EAAoBjuE,SAASshD,IAAaljI,KAAKgqG,YAAY/9D,IAAIi3F,MAAAA,OAArB,EAAqBA,EAAUwW,QAE/E,GAAI15I,KAAKqqJ,iBAAkB,OACvBjkJ,GAAO4gD,MAAO,GAAEhnD,4CAChB,MAAM89E,EAAS,UAAGqlD,MAAAA,OAAH,EAAGA,EAAUvpC,iBAAb,QAA0BspC,MAAAA,OAA1B,EAA0BA,EAAUtpC,UAC7C/sF,EAASs2H,MAAAA,OAAH,EAAGA,EAAUpxG,oBACnB29C,EAAUyzD,IAAat2H,EAIvB2d,QAAQC,UACRzqB,KAAKkqJ,SAASjnB,aAAaC,EAAUC,GACrC/7D,EAAcpnE,KAAKkqJ,SAAS/B,gBAAgBrqE,EAAWolD,GAE7D,OAAOxzD,EACFvL,MAAK,KACF++D,GAAYljI,KAAKgqG,YAAYrpC,OAAOuiE,EAASwW,OAC7CvW,GAAYnjI,KAAKgqG,YAAY78E,IAAIg2G,EAASuW,MAAOvW,GAE7C/7D,IAEAA,EAAYn+D,UAAYk6H,EAAW/Q,KAAAA,SAA0BA,KAAAA,WAK/B9sG,GAAQ49D,+BAAiCigD,EACrE34G,QAAQC,UACRzqB,KAAKkqJ,SAASlB,aAAa7lB,IAGAh/D,MAAK,IAAMnkE,KAAKmpF,OAAS0mE,OAItEzpJ,GAAO4gD,MAAO,GAAEhnD,sCAEhB,IAAIqvJ,EAAe7kI,QAAQC,UAS3B,OAPIy4G,GACAljI,KAAKsyB,YAAY4wG,GAEjBC,IACAksB,EAAervJ,KAAK0xB,SAASyxG,IAG1BksB,EAAalrF,MAAK,KAAM,KAWnCglF,GAAwB5qJ,UAAU4lI,gBAAkB,SAAS5F,GACzD,MAAMgxB,EAAehxB,EAAWxsG,oBAMhC,OAJA/xB,KAAKypI,MACD,mBACAlL,EAAWmb,MAAO6V,EAAeA,EAAavoJ,GAAK,MAElDhH,KAAKsvJ,oBAAoB,mBAAoB/wB,GAK9Cv+H,KAAKqqJ,iBACErqJ,KAAKkqJ,SAASjnB,aAAa1E,EAAY,MAG9CgxB,GACAnpJ,GAAO+L,KAAM,GAAEnS,uBAAuBu+H,aACtCv+H,KAAKwvJ,cAAcD,GAEZ/kI,QAAQC,SAAQ,KAG3BrkB,GAAO5C,MAAO,GAAExD,sDAAsDu+H,KAE/D/zG,QAAQpU,OAAO,qBAhBXoU,QAAQpU,OAAO,0CAmB9B+yI,GAAwB5qJ,UAAUs0E,kBAAoB,SAASvO,EAAO72D,GAGlE,OAFAzN,KAAKypI,MAAM,oBAAqBnlE,EAAO72D,GAEhCzN,KAAKqmF,eAAexT,kBAAkBvO,EAAO72D,IAWxD07I,GAAwB5qJ,UAAUuxJ,4BAA8B,SACxDC,GACJ,IAAIhL,EAASgL,EAAStkJ,IAEtB,MAAMukJ,EAAkBjL,EAAO5/I,QAAQ,WACjC8qJ,EAAgBlL,EAAO5/I,QAAQ,mBAAoB6qJ,GACzD,IAAIE,EAAkBnL,EAAOnrH,YAAY,gBAEzC,IAAuB,IAAnBq2H,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOF,EAGX,MAAMI,EAAcpL,EAAO5/I,QAAQ,OAAQ8qJ,GACrCG,EAASrL,EAAOn4I,UAAUqjJ,EAAeE,EAAc,GAE7DpL,EAASA,EAAO73I,QAAQkjJ,EAAQ,IAChCF,EAAkBnL,EAAOnrH,YAAY,gBACrC,MAAMy2H,EAAgBtL,EAAO5/I,QAAQ,OAAQ+qJ,GACvCI,EAAUvL,EAAOx+I,MAAM,EAAG8pJ,GAC1BE,EAAgBH,EAAOr9G,OACvBy9G,EAAUzL,EAAOx+I,MAAM8pJ,GAI7B,OAFAtL,EAAU,GAAEuL,QAAcC,IAAgBC,IAEnC,IAAI79I,sBAAsB,CAC7BnT,KAAMuwJ,EAASvwJ,KACfiM,IAAKs5I,KAYboE,GAAwB5qJ,UAAUkyJ,2BAA6B,SAASp0B,GACpE,MAAM0mB,EAAc,IAAIT,GAAiBjmB,EAAiB5wH,KAC1D,IAAIilJ,GAAoB,EACxB,MAAMpC,EAAavL,EAAYN,YAAYluD,IAE3C,GAAI+5D,EAAY,CACZ,MAAMqC,EAAwB3wJ,KAAK6iI,yBAAyBtuC,IAExD+5D,EAAWrlJ,YAAc0nJ,IACzBrC,EAAWrlJ,UAAY0nJ,EACvBvqJ,GAAO+L,KAAM,GAAEnS,0CAA0C2wJ,KACzDD,GAAoB,QAGxBtqJ,GAAO6lB,KAAM,GAAEjsB,wDAGnB,MAAMwuJ,EAAazL,EAAYN,YAAYluD,IAE3C,GAAIi6D,EAAY,CACZ,MAAMoC,EAAwB5wJ,KAAK6iI,yBAAyBtuC,IAExDi6D,EAAWvlJ,YAAc2nJ,IACzBpC,EAAWvlJ,UAAY2nJ,EACvBxqJ,GAAO+L,KAAM,GAAEnS,0CAA0C4wJ,KACzDF,GAAoB,QAGxBtqJ,GAAO6lB,KAAM,GAAEjsB,wDAGnB,OAAI0wJ,EACO,IAAI/9I,sBAAsB,CAC7BnT,KAAM68H,EAAiB78H,KACvBiM,IAAKs3I,EAAYJ,aAIlBtmB,GAWX8sB,GAAwB5qJ,UAAUmwJ,4BAA8B,SAASxyB,GACrE,MAAM6mB,EAAc,IAAIT,GAAiBpmB,EAAkBzwH,KAc3D,MAZA,CAAE8oF,GAAiBA,IAAkB5xF,SAAQm7E,IACzC,MAAMnyE,EAAQo3I,EAAYN,YAAY3kE,GAChC4tE,EAAiB1rJ,KAAK2rJ,mBAAmB7tE,GACzC+yE,EAAkB7wJ,KAAK+rJ,gBAAgB,KAAMjuE,GAAWv+E,OAAS,EAEvEoM,EAAM1C,UAAYyiJ,GAAkBmF,EAC9Bz+B,KAAAA,SACAs5B,EACIt5B,KAAAA,SACAy+B,EAAkBz+B,KAAAA,SAA0BA,KAAAA,YAGnD,IAAIz/G,sBAAsB,CAC7BnT,KAAM08H,EAAkB18H,KACxBiM,IAAKs3I,EAAYJ,cAWzBwG,GAAwB5qJ,UAAUuyJ,WAAa,SAAS/4G,GACpD,MAAM,aAAE+0E,GAAiB9sH,KAAKqC,QAE9B,KAAKyqH,MAAAA,GAAAA,EAAcC,QAAWD,MAAAA,GAAAA,EAAcikC,uBACxC,OAAOh5G,EAGX,MAAMkwG,EAAYh6I,GAAAA,MAAgB8pC,EAAYtsC,KACxCulJ,EAAS/I,EAAUt8I,MAEzB,IAAK,MAAMgC,KAASqjJ,EAChB,GAAmB,UAAfrjJ,EAAMnO,KAAkB,CACxB,MAAM,QAAE6b,GAAY1N,EAAM9B,IAAIyD,MAAKokC,GAAYA,EAASgB,QAAUs9E,GAAcp3F,OAEhF,IAAKvf,EAED,SAGJ,IAAI41I,EAAWtjJ,EAAM7B,KAAKwD,MAAKokC,GAAYA,EAASr4B,UAAYA,IAE3D41I,IACDA,EAAW,CACP51I,QAAAA,EACAnS,OAAQ,KAIhB,MAAMgoJ,EAAajjJ,GAAAA,YAAsBgjJ,EAAS/nJ,QAClD,IAAIioJ,GAAa,EAYjB,GAVIrkC,MAAAA,GAAAA,EAAcC,SACdmkC,EAAWnkC,OAAS,EACpBokC,GAAa,GAGbrkC,MAAAA,GAAAA,EAAcikC,wBACdG,EAAWE,kBAAoBtkC,EAAaikC,sBAC5CI,GAAa,IAGZA,EAED,SAGJ,IAAIE,EAAe,GAEnB,IAAK,MAAMnnJ,KAAO5L,OAAOmE,KAAKyuJ,GAC1BG,GAAiB,GAAEnnJ,KAAOgnJ,EAAWhnJ,OAGzC+mJ,EAAS/nJ,OAASmoJ,EAAat+G,OAIvC,OAAO,IAAIpgC,sBAAsB,CAC7BnT,KAAMu4C,EAAYv4C,KAClBiM,IAAKwC,GAAAA,MAAgBg6I,MAS7BkB,GAAwB5qJ,UAAUg+H,8BAAgC,WAC9D,OAAOv8H,KAAK4gI,0BAA0B5gI,KAAK0qJ,wBAG/CvB,GAAwB5qJ,UAAUitE,oBAAsB,SAASzzB,GAC7D,IAAIg4G,EAAWh4G,EAwBf,OAtBA/3C,KAAKypI,MAAM,oCAAqC+hB,GAAQuE,IAGxDA,EAAW/vJ,KAAK8wJ,WAAWf,GAEtB/vJ,KAAKqqJ,iBAGErqJ,KAAKmpF,QAGb4mE,EAAW/vJ,KAAKuqJ,QAAQ3L,cAAcmR,GACtC/vJ,KAAKypI,MACD,oDACA+hB,GAAQuE,MARZA,EAAW/vJ,KAAKywJ,2BAA2BV,GAC3CA,EAAW/vJ,KAAK8vJ,4BAA4BC,IAW3C/vJ,KAAKsqJ,mCACNyF,EAAW/vJ,KAAK4uJ,iBAAiBmB,IAG9B,IAAIvlI,SAAQ,CAACC,EAASrU,KACzBpW,KAAKqmF,eAAe7a,oBAAoBukF,GACnC5rF,MAAK,KACFnkE,KAAKypI,MAAM,gCACX,MAAMkgB,EAAat7B,GAAAA,SAAiB0hC,EAAStkJ,KAEzCk+I,IAAe3pJ,KAAK2pJ,aACpB3pJ,KAAK2pJ,WAAaA,EAClB3pJ,KAAK6sF,aAAa/gE,KACdyxE,KAAAA,oBAA+Bv9F,KAAM2pJ,IAE7Cl/H,OACDrW,IACCpU,KAAKypI,MAAM,+BAAgCr1H,GAC3CpU,KAAK6sF,aAAa/gE,KACdyxE,KAAAA,6BACAnpF,EAAKpU,MACToW,EAAOhC,UAkBvB+0I,GAAwB5qJ,UAAUmmI,uBAAyB,SAASiN,GAChEvrI,GAAO4gD,MAAO,GAAEhnD,+BAA+B2xI,KAC/C,MAAM4c,EAAUvuJ,KAAKopJ,sBAAwBzX,EAI7C,OAFA3xI,KAAKopJ,oBAAsBzX,EAEvB3xI,KAAKqqJ,kBACLrqJ,KAAKkqJ,SAASxlB,uBAAuBiN,IAG9B,GAGJ4c,GAGXpF,GAAwB5qJ,UAAUwoE,qBAAuB,SAAShvB,GAS9D,GARA/3C,KAAKypI,MAAM,qCAAsC+hB,GAAQzzG,IAIzDA,EAAc/3C,KAAK8wJ,WAAW/4G,GAIzB/3C,KAAKqqJ,kBAYH,IAAKrqJ,KAAKmpF,MAAO,CACpB,MAAMmoE,EAAqBtxJ,KAAKqmF,eAAe61C,kBAG/CnkF,EAAc/3C,KAAKuqJ,QAAQ3L,cAAc7mG,EAAau5G,GACtDtxJ,KAAKypI,MACD,gDACA+hB,GAAQzzG,IAER/3C,KAAKqjJ,kBAELtrG,EAAc/3C,KAAKsjJ,UAAU9xI,uBAAuBumC,GAGpDA,EAAc/3C,KAAKkqJ,SAAS9B,kCAAkCrwG,GAC9D/3C,KAAKypI,MACD,oDACA+hB,GAAQzzG,WA3BZ/3C,KAAKqjJ,kBAELtrG,EAAc/3C,KAAKsjJ,UAAU9xI,uBAAuBumC,GAAa,GACjE/3C,KAAKypI,MACD,kDACA+hB,GAAQzzG,KAIhBA,EAplCe,SAAS/oC,GAC5B,GAAoB,iBAATA,GAA8B,OAATA,GACL,iBAAbA,EAAKvD,IAGf,OAFArF,GAAO6lB,KAAK,kDAELjd,EAIX,MAAMf,EAAY/L,EAAQ,MACpBwJ,EAAUuC,EAAU3D,MAAM0E,EAAKvD,UAEd,IAAZC,QACyB,IAAlBA,EAAQC,OACfxN,MAAMC,QAAQsN,EAAQC,QAC7BD,EAAQC,MAAMhJ,SAAQgL,IASlB,MAAM4jJ,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArB7jJ,EAAM0B,YACVlR,MAAMC,QAAQuP,EAAM0B,aACvB1B,EAAM0B,WAAW1M,SAAQ4M,SACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMf,OACb+iJ,EAAWrtJ,KAAK6G,OAAOwE,EAAMf,MAAM/Q,MAAM,KAAK,QAM1DU,MAAMC,QAAQuP,EAAMa,OAAQ,CAC5B,IAAIlP,EAEJ,IAAKA,EAAI,EAAGA,EAAIqO,EAAMa,MAAMjP,OAAQD,IACF,iBAAnBqO,EAAMa,MAAMlP,SACa,IAAtBqO,EAAMa,MAAMlP,GAAG0H,IACtBuqJ,EAAWpsJ,QAAQwI,EAAMa,MAAMlP,GAAG0H,KAAO,IAC5CwqJ,EAAattJ,KAAKyJ,EAAMa,MAAMlP,WACvBqO,EAAMa,MAAMlP,IAI3B,IAAKA,EAAI,EAAGA,EAAIqO,EAAMa,MAAMjP,OAAQD,SACF,IAAnBqO,EAAMa,MAAMlP,IACnBkyJ,EAAattJ,KAAKyJ,EAAMa,MAAMlP,IAItCqO,EAAMa,MA0BtB,WAAuD,IAAhB0gH,EAAgB,uDAAJ,GAC/C,IAAK5pG,GAAQo7D,aAAep7D,GAAQ87D,qBAAqB,IACrD,OAAO8tC,EAGX,IAAIuiC,EAAgB,IAAKviC,GAsBzB,OApB2BA,EAAUtjH,QAAOolH,GACjB,YAAvBA,EAASxnH,WAA8C,MAAnBwnH,EAASvnH,QAC5C4C,KAAI2kH,GAAYA,EAAShqH,KAEXrE,SAAQ+uJ,IAEvB,MAAMC,EAAYF,EAAcniJ,MAAK1J,GACjCA,EAAKoB,KAAO0qJ,GAA6B,UAAnB9rJ,EAAK4D,YAE/BmoJ,EAAUloJ,MAAS,GAAE2oH,KAAAA,YAA2Bs/B,IAGhDD,EACMA,EAAc7lJ,QAAOhG,GAAQA,EAAKoB,KAAO0qJ,IAI/CD,EAAcvtJ,KAAKytJ,MAGhBF,EArDmBG,CAA8BJ,OAKxD,MAAM7S,EAAS1wI,EAAU5D,MAAMqB,GAG/B,OAAO,IAAIiH,sBAAsB,CAC7BnT,KAAMwP,EAAKxP,KACXiM,IAAKkzI,IAihCSkT,CAAe95G,GA+BjC,OAPAA,EAAc/3C,KAAK4uJ,iBAAiB72G,GAEhC/3C,KAAKqqJ,mBAELtyG,EAAc/3C,KAAKkqJ,SAASlC,0BAA0BjwG,IAGnD,IAAIvtB,SAAQ,CAACC,EAASrU,KACzBpW,KAAKqmF,eAAetf,qBAAqBhvB,GACpCosB,MAAK,KACFnkE,KAAKypI,MAAM,iCACX,MAAMmgB,EAAcv7B,GAAAA,SAAiBt2E,EAAYtsC,KAE7Cm+I,IAAgB5pJ,KAAK4pJ,cACrB5pJ,KAAK4pJ,YAAcA,EACnB5pJ,KAAK6sF,aAAa/gE,KACdyxE,KAAAA,qBAAgCv9F,KAAM4pJ,IAE9Cn/H,OACDrW,IACCpU,KAAKypI,MAAM,gCAAiCr1H,GAC5CpU,KAAK6sF,aAAa/gE,KACdyxE,KAAAA,8BACAnpF,EACApU,MACJoW,EAAOhC,UAavB+0I,GAAwB5qJ,UAAUqiI,0BAA4B,SAAS3sC,GAAa,MAChF,GAAIA,EAAc,EACd,MAAM,IAAInuF,MAAO,wBAAuBmuF,KAI5C,GAAI3uE,GAAQ07D,gBACR,OAAOx2D,QAAQC,UAGnBzqB,KAAK0qJ,sBAAwBz2D,EAC7B,MAAMw0D,EAAkBzoJ,KAAKmsJ,qBAE7B,IAAK1D,GAAmBA,EAAgB9uD,UACpC,OAAOnvE,QAAQC,UAEnB,MAAMqnI,EAAc9xJ,KAAK4vJ,iBAAiBr7D,IAE1C,IAAKu9D,EACD,OAAOtnI,QAAQC,UAEnB,MAAM4qB,EAAay8G,EAAY9jF,gBAE/B,GAAK34B,MAAAA,GAAD,UAACA,EAAY44B,iBAAb,QAAC,EAAuB1uE,OACxB,OAAOirB,QAAQC,UAInB,MAAMsnI,EAAa/xJ,KAAK2oJ,wBAn5EW,sBADD,qBAw5ElCtzG,EAAW28G,sBAAwBD,EACnC3rJ,GAAO+L,KAAM,GAAEnS,mDAAmD+xJ,WAAoBtJ,KAGtFzoJ,KAAKiyJ,sBAAwBjyJ,KAAKkqJ,SAAS1B,8BAA8BC,EAAiBx0D,GAC1F,MAAMi+D,EAAclyJ,KAAKkqJ,SAAStB,2BAA2BH,GACvD1qD,EAAY0qD,EAAgBlQ,eAElC,GAAIv4I,KAAKqjJ,gBAAiB,CACtB,IAAK,MAAMx6I,KAAYwsC,EAAW44B,UAAW,CACU,QAA/C54B,EAAW44B,UAAUp6D,eAAehL,KACpCwsC,EAAW44B,UAAUplE,GAAU8oI,OAAS3xI,KAAKiyJ,sBAAsBppJ,GAInEyc,GAAQ8sD,cAAgB/8B,EAAW44B,UAAUplE,GAAUmpJ,sBAAwBD,GAG3E/xJ,KAAKk+H,4BAA8BlM,GAAcl3F,MAC7C,UAAA96B,KAAKqC,eAAL,mBAAco4H,oBAAd,SAA4B8sB,kBACzBvnJ,KAAK2oJ,yBACL3oJ,KAAKqqJ,oBACZh1G,EAAW44B,UAAUplE,GAAU4wC,WAAay4G,EAAYrpJ,KAIpE7I,KAAKkqJ,SAAShB,0BAA0B7zG,QAGrC,GAAI4+C,EAAc,EAAG,SACxB,IAAIk+D,EDx8EmB,ECs9EvB,GAXIp0D,IAAcC,GAAU3jE,QAAUouH,EAAgBj6D,WAAayF,IAC/Dk+D,EAAclhJ,KAAKC,MAAMu3I,EAAgBj6D,WAAayF,IAG1D5+C,EAAW44B,UAAU,GAAG0jE,QAAS,EACjCt8F,EAAW44B,UAAU,GAAGH,sBAAwBqkF,EAGhD7sI,GAAQ8sD,cAAgB/8B,EAAW44B,UAAU,GAAG+jF,sBAAwBD,GAGpE/xJ,KAAKk+H,4BAA8BlM,GAAcl3F,KAAjD,UAAwD96B,KAAKqC,eAA7D,iBAAwD,EAAco4H,oBAAtE,OAAwD,EAA4B8sB,iBAAkB,OACtG,IAAIj5D,EAAO,UAAGtuF,KAAKwsJ,gCAAR,aAAG,EAA+B7E,KAET,QAAhC5pD,IAAcC,GAAU3jE,SACxBi0D,EAAO,oBAAGtuF,KAAKkqJ,SAASpC,2BACnBx4I,MAAK8iJ,GAASA,EAAMtkF,wBAA0BqkF,WAD5C,aAAG,EACuD14G,kBAD1D,QACwE60C,GAEnFj5C,EAAW44B,UAAU,GAAGx0B,WAAa60C,QAGzCj5C,EAAW44B,UAAU,GAAG0jE,QAAS,EAKrC,OAFAvrI,GAAO+L,KAAM,GAAEnS,2BAA2Bi0F,eAAyB1wF,KAAKF,UAAUgyC,EAAW44B,cAEtF6jF,EAAY5jF,cAAc74B,GAAY8uB,MAAK,KAC9CskF,EAAgBzO,qBAAuB/lD,EACvCj0F,KAAK6sF,aAAa/gE,KAAKyxE,KAAAA,2CAAsDkrD,OAiBrFU,GAAwB5qJ,UAAUqmI,uBAAyB,SAAS+M,GAChEvrI,GAAO4gD,MAAO,GAAEhnD,+BAA+B2xI,KAC/C,MAAM4c,EAAUvuJ,KAAKupJ,sBAAwB5X,EAI7C,OAFA3xI,KAAKupJ,oBAAsB5X,EAEvB3xI,KAAKqqJ,kBACLrqJ,KAAKkqJ,SAAStlB,uBAAuB+M,IAG9B,GAGJ4c,GAYXpF,GAAwB5qJ,UAAU8zJ,UAAY,SAASC,GAA2C,IAApC/hI,EAAoC,uDAAzB,IAAKgiI,EAAoB,uDAAL,IACzF,IAAKvyJ,KAAKqpJ,YAAa,CACnB,GAAIrpJ,KAAKqmF,eAAeve,WAAY,CAChC,MAAM0qF,EAAYxyJ,KAAKqmF,eAAeve,aAAax4D,MAAK/G,GAAKA,EAAEm/D,OAE/D1nE,KAAKqpJ,YAAcmJ,GAAaA,EAAU9qF,KAC1C1nE,KAAKqpJ,aAAejjJ,GAAO+L,KAAM,GAAEnS,gDAGvC,IAAKA,KAAKqpJ,YAAa,CACnB,MAAMoJ,EAAkBt0J,MAAMi+C,KAAKp8C,KAAKgqG,YAAYz5F,UAAUjB,MAAK3I,GAAKA,EAAEgrB,iBAEtE3xB,KAAKqmF,eAAeze,kBAAoB6qF,IACxCzyJ,KAAKqpJ,YAAcrpJ,KAAKqmF,eAAeze,iBAAiB6qF,EAAgB/Z,aAE5E14I,KAAKqpJ,aAAejjJ,GAAO+L,KAAM,GAAEnS,iEAGnCA,KAAKqpJ,cACLrpJ,KAAKqpJ,YAAYqJ,aAAe1yJ,KAAK2yJ,cAAc3vJ,KAAKhD,OAIhE,GAAIA,KAAKqpJ,YAAa,CAClB,GAAIrpJ,KAAKqpJ,YAAYuJ,WAOjB,YANA5yJ,KAAKspJ,gBAAgBplJ,KAAK,CACtBouJ,MAAAA,EACA/hI,SAAAA,EACAgiI,aAAAA,IAMRvyJ,KAAKqpJ,YAAYwJ,WAAWP,EAAO/hI,EAAUgiI,QAE7CnsJ,GAAO6lB,KAAM,GAAEjsB,iDAavBmpJ,GAAwB5qJ,UAAUo0J,cAAgB,SAASt6H,GAGvD,GAAIr4B,KAAKqpJ,aAA8B,KAAfhxH,EAAMy6H,MAAe9yJ,KAAKspJ,gBAAgB/pJ,OAAQ,CACtE,MAAM,MAAE+yJ,EAAF,SAAS/hI,EAAT,aAAmBgiI,GAAiBvyJ,KAAKspJ,gBAAgB/uI,QAE/Dva,KAAKqpJ,YAAYwJ,WAAWP,EAAO/hI,EAAUgiI,KAQrDpJ,GAAwB5qJ,UAAU0/H,qBAAuB,WACrD,MAAMmkB,EAAU/zB,GAAAA,eAEhBjoH,GAAO+L,KAAM,GAAEnS,oCAAoCoiJ,KACnDpiJ,KAAKujJ,eAAeiC,eAAepD,IAOvC+G,GAAwB5qJ,UAAU6kI,kBAAoB,WAClDh9H,GAAO+L,KAAM,GAAEnS,qCACfA,KAAKujJ,eAAe+B,uBAQxB6D,GAAwB5qJ,UAAUk8D,MAAQ,WACtCz6D,KAAKypI,MAAM,QAGXzpI,KAAK83H,eAAe7pG,IAAI67H,GAAoC9pJ,KAAK+pJ,mBACjE/pJ,KAAK83H,eAAe7pG,IAAI67H,GAAyC9pJ,KAAK6pJ,uBACtE7pJ,KAAKqqJ,kBAAoBrqJ,KAAKqmF,eAAen5D,oBAAoB,QAASltB,KAAK4qJ,SAE/E,IAAK,MAAMmI,KAAc/yJ,KAAKwpJ,aAAaj5I,SACvC,IAAK,MAAMmyF,KAAeqwD,EAAWxiJ,SACjCvQ,KAAK8tJ,mBAAmBprD,GAGhC1iG,KAAKwpJ,aAAanhH,QAElBroC,KAAKypJ,cAAgB,GAErBzpJ,KAAKqpJ,YAAc,KACnBrpJ,KAAKspJ,gBAAkB,GAElBtpJ,KAAKm6F,IAAI64D,sBAAsBhzJ,OAChCoG,GAAO5C,MAAO,GAAExD,iDAEO,OAAvBA,KAAKmqJ,gBACL1tJ,OAAO6vF,cAActsF,KAAKmqJ,eAC1BnqJ,KAAKmqJ,cAAgB,MAEzB/jJ,GAAO+L,KAAM,GAAEnS,+BACfA,KAAKqmF,eAAe5rB,SAGxB0uF,GAAwB5qJ,UAAUqwE,aAAe,SAASlL,GACtD,OAAO1jE,KAAKizJ,sBAAqB,EAAoBvvF,IAGzDylF,GAAwB5qJ,UAAUiwE,YAAc,SAAS9K,GACrD,OAAO1jE,KAAKizJ,sBAAqB,EAAkBvvF,IAGvDylF,GAAwB5qJ,UAAU00J,qBAAuB,SACjDC,EACAxvF,GACJ,MAAMyvF,EAAUD,EAAU,QAAU,SAEpClzJ,KAAKypI,MAAO,SAAQ0pB,IAAW5vJ,KAAKF,UAAUqgE,EAAa,KAAM,MAEjE,MAAM0vF,EAAgB,CAACzT,EAAW0T,EAAWC,KACzC,IACItzJ,KAAKypI,MACA,SAAQ0pB,2BAAkC3H,GAAQ7L,IAElD3/I,KAAKqqJ,mBAGDrqJ,KAAK2rJ,mBAAmBp3D,KACrBv0F,KAAKujJ,eAAekC,wBACxBzlJ,KAAKi+H,uBAIT0hB,EAAY,IAAIhtI,sBAAsB,CAClCnT,KAAMmgJ,EAAUngJ,KAChBiM,IAAKzL,KAAKujJ,eAAemC,gCACrB/F,EAAUl0I,OAGlBzL,KAAKypI,MACA,SAAQ0pB,wEAET3H,GAAQ7L,KAGhB,MAAM8I,EAAkBzoJ,KAAKmsJ,qBAGzBnsJ,KAAKqjJ,iBAAmB/9H,GAAQ49D,gCAC5BulE,MAAAA,OAAA,EAAAA,EAAiBlQ,kBAAmBv6C,GAAU3jE,QAC/Cr6B,KAAKqqJ,mBACJrqJ,KAAK2oJ,2BAEThJ,EAAY3/I,KAAKsjJ,UAAU1wI,sBAAsB+sI,GACjD3/I,KAAKypI,MACA,SAAQ0pB,wCAET3H,GAAQ7L,MAGX3/I,KAAKqC,QAAQs9G,YAAcr6F,GAAQ49D,+BAEpCy8D,EAAY,IAAIhtI,sBAAsB,CAClCnT,KAAMmgJ,EAAUngJ,KAChBiM,IAAKzL,KAAK0jJ,YAAYoB,eAAenF,EAAUl0I,OAGnDzL,KAAKypI,MACA,SAAQ0pB,2CAET3H,GAAQ7L,KAGhB,MAAM7vI,EAAU9P,KAAKguJ,gBAAgBrO,GAErC3/I,KAAKuzJ,sBAAsBzjJ,GAE3BujJ,EAAU1T,GACZ,MAAOl3I,GACLzI,KAAKypI,MAAO,SAAQ0pB,WAAkB1qJ,GACtCzI,KAAKypI,MAAO,SAAQ0pB,WAAkB3H,GAAQ7L,IAC9Cv5I,GAAO5C,MAAO,GAAExD,cAAcmzJ,WAAkB1qJ,EAAG+iJ,GAAQ7L,IAE3D2T,EAAS7qJ,KAIX+qJ,EAAgB,CAACp/I,EAAKk/I,KACxBtzJ,KAAKypI,MAAO,SAAQ0pB,aAAoB/+I,GACxC,MAAMq/I,EACAP,EACI31D,KAAAA,oBACAA,KAAAA,qBAEVv9F,KAAK6sF,aAAa/gE,KAAK2nI,EAAWr/I,EAAKpU,MAEvCszJ,EAASl/I,IAKb,GAAIpU,KAAKsqJ,iCAAkC,CACvC,MAAMljF,EAAcpnE,KAAKqmF,eAAexV,kBACnCvhE,MAAK3I,IAAC,eAAIA,EAAEmjB,WAAY,UAAAnjB,EAAEmjB,gBAAF,mBAAY8G,aAAZ,eAAmB4nB,QAAS+7C,MAEzD,GAAIntB,EAAa,WACb,IAAIssF,EAAY,UAAG/pF,eAAe6Y,gBAAgB+R,WAAlC,aAAG,EAAiDv8C,OACpE,MAAM9lB,EAAQ,UAAGlyB,KAAK6uJ,uBAAR,aAAG,EAAsB38H,SACjCkrC,EAAM,UAAGp9D,KAAK6uJ,uBAAR,aAAG,EAAsBzxF,OAEjCs2F,GAAgBxhI,GAAYkrC,EAG5Bs2F,EAAa39I,MAAK0iC,GACPA,EAAKvmB,SAASxM,gBAAmB,GAAE6uE,MAAmBriE,KAAc,EAAI,IAE5EwhI,GAAgBxhI,IACvBwhI,EAAeA,EACV9nJ,QAAO6sC,GAAQA,EAAKvmB,SAASxM,gBAAmB,GAAE6uE,MAAmBriE,OAK1E5M,GAAQk8D,mBAAqBl8D,GAAQg8D,iBAAiB,QACtDoyE,EAAeA,EACV9nJ,QAAO6sC,GAAQA,EAAKvmB,SAASxM,gBAAmB,GAAE6uE,MAAmBy9B,GAAcn3F,YAG5F,IACIusC,EAAYusF,oBAAoBD,GAClC,MAAOt/I,GACLhO,GAAO6lB,KAAM,GAAEjsB,iCAAiCkyB,YAAmBkrC,YAAkBhpD,KAKjG,OAAO,IAAIoW,SAAQ,CAACC,EAASrU,KACzB,IAAIw9I,EAGAA,EADAV,EACYlzJ,KAAKqmF,eAAe7X,YAAY9K,GAEhC1jE,KAAKqmF,eAAezX,aAAalL,GAGjDkwF,EACKzvF,MACG14D,GAAO2nJ,EAAc3nJ,EAAKgf,EAASrU,KACnC5S,GAASgwJ,EAAchwJ,EAAO4S,SAS9C+yI,GAAwB5qJ,UAAUs1J,oBAAsB,SAAS/S,GAC7D,OAAIA,GAAWA,EAAQxrB,QAAUwrB,EAAQxrB,OAAO/1H,OACrCuhJ,EAAQxrB,OAAO,GAAG9mH,MAAM,GACxBsyI,GAAWA,EAAQtyI,OAASsyI,EAAQtyI,MAAMjP,OAC1CuhJ,EAAQtyI,MAAM,GAGlB,MAUX26I,GAAwB5qJ,UAAUg1J,sBAAwB,SAASzjJ,GAC/D,IAAK,MAAM8gB,KAAS5wB,KAAKgqG,YAAYz5F,SAAU,CAC3C,MAAMujJ,EAAmB9zJ,KAAKqqJ,iBAAmBz5H,EAAMgpE,UAAYhpE,EAAMwqH,WAEzE,GAAItrI,EAAQm8B,IAAI6nH,GAAmB,CAC/B,MAAM1R,EAAUtyI,EAAQyO,IAAIu1I,GAE5B,IAAK1R,EAGD,YAFAh8I,GAAO5C,MAAO,GAAExD,iCAAiC8zJ,KAIrD,MAAM3R,EAAUniJ,KAAK0pJ,WAAWnrI,IAAIqS,EAAM8oH,OACpCqa,EAAa/zJ,KAAK6zJ,oBAAoBzR,GACtC4R,EAAah0J,KAAK6zJ,oBAAoB1R,GAGxC4R,IAAeC,IACfA,GAAc5tJ,GAAO5C,MAAO,GAAExD,mCAAmC4wB,gBAAoBwxH,KACrFpiJ,KAAK0pJ,WAAWv8H,IAAIyD,EAAM8oH,MAAO0I,GACjCpiJ,KAAK6sF,aAAa/gE,KAAKyxE,KAAAA,yBAAoC3sE,EAAOmjI,SAE9DnjI,EAAM2B,gBAAmB3B,EAAM+oE,WAIvCvzF,GAAO6lB,KAAM,GAAEjsB,kDAAkD4wB,aAAiBkjI,OAK9F3K,GAAwB5qJ,UAAUgxE,gBAAkB,SAAS/7B,GAQzD,OAPAxzC,KAAKypI,MAAM,kBAAmBlmI,KAAKF,UAAU,CACzCmwC,UAAWA,EAAUA,UACrBk+B,OAAQl+B,EAAUk+B,OAClBC,cAAen+B,EAAUm+B,cACzB59B,iBAAkBP,EAAUO,kBAC7B,KAAM,MAEF/zC,KAAKqmF,eAAe9W,gBAAgB/7B,IAQ/C21G,GAAwB5qJ,UAAUu2F,0BAA4B,WAC1D,IAAIm/D,EAAgB,EAEoC,MAMxD,OANIj0J,KAAKqjJ,iBAAmBrjJ,KAAKiyJ,sBAC7BgC,EAAa,UAAGj0J,KAAKiyJ,sBAAsBrmJ,QAAOiB,GAAU+0E,QAAQ/0E,YAAvD,aAAG,EAA8DtN,OACvES,KAAKqjJ,kBACZ4Q,EAAgB7M,GAAe7nJ,QAG5B00J,GASX9K,GAAwB5qJ,UAAUsqE,SAAW,WACzC,OAAO7oE,KAAKqmF,eAAexd,YAU/BsgF,GAAwB5qJ,UAAU4wJ,0BAA4B,SAASv+H,GACnE,MAAM8oH,EAAQ9oH,EAAM8oH,MACpB,IAAIjrI,EAAWzO,KAAKmuJ,SAASzU,GAO7B,GALIjrI,GACArI,GAAO5C,MAAO,GAAExD,6CAA6C05I,MAI7D15I,KAAKqjJ,iBACDzyH,EAAM2nH,iBAAmBv6C,GAAU3jE,QAAWr6B,KAAK2oJ,wBAavDl6I,EAAW,CACPD,MAAO,CAAE6/G,GAAAA,gBACTiH,OAAQ,QAfqE,CACjF7mH,EAAW,CACPD,MAAO,GACP8mH,OAAQ,IAEZ,IAAK,IAAIh2H,EAAI,EAAGA,EAAI8nJ,GAAe7nJ,OAAQD,IACvCmP,EAASD,MAAMtK,KAAKmqH,GAAAA,gBAExB5/G,EAAS6mH,OAAOpxH,KAAK,CACjBsK,MAAOC,EAASD,MAAMjI,QACtBiJ,UAAW,QAQnB,IAAKxP,KAAKqC,QAAQs9G,WAAY,CAK1B,MAAMu0C,EAAezlJ,EAASD,MAAMjP,OAEpC,IAAK,IAAID,EAAI,EAAGA,EAAI40J,IAAgB50J,EAAG,CACnC,MAAMmR,EAAchC,EAASD,MAAMlP,GAC7BmlJ,EAAUp2B,GAAAA,eAEhB5/G,EAASD,MAAMtK,KAAKugJ,GACpBh2I,EAAS6mH,OAAOpxH,KAAK,CACjBsK,MAAO,CAAEiC,EAAag0I,GACtBj1I,UAAW,SAOvB,OAHAf,EAASqC,KAAO8f,EAAMwqH,WACtBp7I,KAAK0pJ,WAAWv8H,IAAIusH,EAAOjrI,GAEpBA,GAQX06I,GAAwB5qJ,UAAUsS,gBAAkB,WAChD,OAAO7Q,KAAKqqJ,kBAQhBlB,GAAwB5qJ,UAAUC,SAAW,WACzC,MAAQ,UAASwB,KAAKgH,WAAWhH,KAAKmpF,MAAQ,MAAQ,UC37F1D,MAAM/iF,IAASyB,EAAAA,EAAAA,iCAMf,IAAIssJ,GAA0B,EAO1BC,GAAoB,EAiBxB,SAASC,KAA6C,IAA1BC,EAA0B,uDAAJ,GAC9C,OAAOA,EAAoBjoJ,KAAIkoJ,IAC3B,MAAM,SACFvuF,EADE,WAEF8nD,EAFE,OAGFjhH,EAHE,MAIF+jB,EAJE,UAKFmtE,EALE,QAMF64C,GACA2d,GAEE,SAAEhwF,EAAF,WAAYR,GAAenzC,EAAMs7C,cAOvC,OAFAkoF,GAAoBtpE,GAAqBspE,IAElC,IAAI3a,GAAgB,CACvBl1E,SAAAA,EACAR,WAAAA,EACA+Z,UAAWltD,EAAM4nB,KACjBkhG,MAAO0a,GACPpuF,SAAAA,EACA8nD,WAAAA,EACAjhH,OAAAA,EACA+jB,MAAAA,EACAmtE,UAAWA,GAAa,KACxB64C,QAAAA,OAQG,MAAM8V,WAAY/kD,GAM7B/oG,YAAY8zB,GAA0B,IAAdrwB,EAAc,uDAAJ,GAC9Bo9E,QACAz/E,KAAK0yB,WAAaA,EAMlB1yB,KAAKw0J,gBAAkB,IAAIltH,IAE3BtnC,KAAKgqG,YAAc,GAEnBhqG,KAAKqC,QAAUA,EAKfrC,KAAKwvI,SAAW,KAUhBxvI,KAAKy0J,YAAStoJ,EAQdnM,KAAK00J,gBAAkB,KASvB10J,KAAK20J,qBAAkBxoJ,EAQvBnM,KAAK40J,mBAAqB,KAG1B50J,KAAK60J,qBAAuB70J,KAAK8hG,gBAAgB9+F,KAAKhD,MAEtDA,KAAK80J,qBAAuB90J,KAAK80J,qBAAqB9xJ,KAAKhD,MAC3DA,KAAK+0J,iCACC/0J,KAAK+0J,iCAAiC/xJ,KAAKhD,MAQjDA,KAAKg1J,WAAaC,KAAAA,KAIdhc,GAAAA,wBAAiC,YACjCA,GAAAA,YACI17C,KAAAA,4BACAv9F,KAAK+0J,kCAGT9b,GAAAA,YACI17C,KAAAA,oBACAv9F,KAAK80J,uBAUjBI,UACIjc,GAAAA,eAAwB17C,KAAAA,4BAAuCv9F,KAAK+0J,kCACpE9b,GAAAA,eAAwB17C,KAAAA,oBAA+Bv9F,KAAK80J,sBAExD90J,KAAKm1J,sBACLn1J,KAAKkY,eACDqlF,KAAAA,kBACAv9F,KAAKm1J,sBAYO,yBAACC,GACrB,OAAOf,GAAmBe,GAYO,sCAAC/yJ,GAClC,OAAO42I,GAAAA,+BAAwC52I,GAC1C8hE,MAAKixF,GAAcf,GAAmBe,KAW/CC,wBAAwBhvE,EAAgBkpD,GACpCvvI,KAAKwvI,SAAW,IAAIF,GAAcjpD,EAAgBkpD,EAAOvvI,KAAK6sF,cAE9D7sF,KAAKm1J,qBAAuB,KACxB,MAAMG,EAAW,CAAC9xJ,EAAO+xJ,EAAS9rJ,KAC9B8uB,KAAAA,iBAAsC/0B,GACtC4C,GAAO5C,MAAO,eAAc+xJ,KAAWhyJ,KAAKF,UAAUoG,uBAA4BjG,IAKtF,GAAIxD,KAAKw1J,0BACL,IACIx1J,KAAKwvI,SAAS8B,uCAAuCtxI,KAAKw1J,2BAC5D,MAAOhyJ,GACL8xJ,EAAS9xJ,EAAO,2BAA4BxD,KAAKw1J,2BAGzD,GAAIx1J,KAAK40J,mBACL,IACI50J,KAAKwvI,SAASyB,6BAA6BjxI,KAAK40J,oBAClD,MAAOpxJ,GACL8xJ,EAAS9xJ,EAAO,gCAAiCxD,KAAK40J,oBAG9D,QAAoC,IAAzB50J,KAAK20J,gBACZ,IACI30J,KAAKwvI,SAAS4B,mCAAmCpxI,KAAK20J,iBACxD,MAAOnxJ,GACL8xJ,EAAS9xJ,EAAO,0BAA2BxD,KAAK20J,iBAGxD,QAA2B,IAAhB30J,KAAKy0J,SAA2C,IAAjBz0J,KAAKy0J,OAC3C,IACIz0J,KAAKwvI,SAASuB,oBAAoB/wI,KAAKy0J,QACzC,MAAOjxJ,GACL8xJ,EAAS9xJ,EAAO,oBAAqBxD,KAAKy0J,QAGlD,IAAKnpC,GAAAA,+BACD,IACItrH,KAAKwvI,SAAS+B,qBAAqBvxI,KAAKg1J,YAC1C,MAAOxxJ,GACL8xJ,EAAS9xJ,EAAO,mBAAoBxD,KAAKg1J,YAIjDh1J,KAAKkY,eAAeqlF,KAAAA,kBAA6Bv9F,KAAKm1J,sBACtDn1J,KAAKm1J,qBAAuB,MAEhCn1J,KAAKsX,YAAYimF,KAAAA,kBAA6Bv9F,KAAKm1J,sBAGnDn1J,KAAKsX,YAAYimF,KAAAA,uBAAkCv9F,KAAK60J,sBAW5DC,uBACI90J,KAAK+0J,iCAAiC9b,GAAAA,wBAQ1Cn3C,kBAAqC,IAArB8vC,EAAqB,uDAAJ,GAC7B,MAAM6jB,EAAoBz1J,KAAK00J,iBAAmB,GAClD,IAAIgB,EAAwB,GACxBC,EAAyB,GAE7B31J,KAAK00J,gBAAkB9iB,EAEvB8jB,EAAwBD,EAAkB7pJ,QACtC5E,IAAOhH,KAAK+/F,UAAU/4F,KAE1B2uJ,EAAyB/jB,EAAehmI,QACpC5E,IAAyC,IAAnCyuJ,EAAkBtwJ,QAAQ6B,KAEpChH,KAAK0yB,WAAWm6D,aAAa/gE,KACzByrE,GACAm+D,EACAC,GAORp3D,cACQv+F,KAAKwvI,WAODxvI,KAAKwvI,UAAmC,cAAvBxvI,KAAKwvI,SAASmB,MAC/B3wI,KAAKwvI,SAAS/0E,QAGlBz6D,KAAKwvI,SAAW,MASxBrhB,2BAA2BC,GACvB6qB,GAAAA,2BAAoC7qB,GASxCwnC,+BAA+BlyF,GAC3B1jE,KAAKw1J,0BAA4B9xF,EAE7B1jE,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAAS8B,uCAAuC5tE,GAa7D08D,2BAA2BF,GACvBlgI,KAAK20J,gBAAkBz0B,EAEnBlgI,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAAS4B,mCAAmClR,GAWzD21B,aAAa93D,GACL/9F,KAAKg1J,aAAej3D,IACpB/9F,KAAKg1J,WAAaj3D,EAEd/9F,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAAS+B,qBAAqBxzC,IAU/C+3D,oBAAoB3hC,EAAYp2B,GACxB/9F,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAASgC,2BAA2Brd,EAAYp2B,GAe7Dg4D,gBAAgBC,GACZh2J,KAAK40J,mBAAqBoB,EAEtBh2J,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAASyB,6BAA6B+kB,GASjC,mBAACvC,EAAWx7I,GAC1BghI,GAAAA,YAAqBwa,EAAWx7I,GAQf,sBAACw7I,EAAWx7I,GAC7BghI,GAAAA,eAAwBwa,EAAWx7I,GAO5B,cAAe,IAAd5V,EAAc,uDAAJ,GAGlB,OAFArC,KAAKqC,QAAUA,EAER42I,GAAAA,KAAcj5I,KAAKqC,SAmB9B64H,qBAAqB+6B,EAAWhmF,EAAUkZ,EAAO9mF,GAC7C,MAAM6tE,EAAgB3sE,KAAK+G,MAAM/G,KAAKF,UAAU41I,GAAAA,qBAEN,IAA/B52I,EAAQw4H,qBACfoe,GAAAA,gBAAyB/oE,EAAe7tE,EAAQw4H,oBAEhDxlC,GAAWe,UAAUhS,uBACjB,CAAEy2C,mBAAoBx4H,EAAQw4H,sBAGlCx4H,EAAQm4H,0BACRp0H,GAAO4gD,MAAM,iDACbipB,EAASimF,0BAA2B,IAGX5wI,GAAQ07D,iBAC7B17D,GAAQk8D,oBAAsBn/E,EAAQwO,mBAG1CzK,GAAO4gD,MAAM,gDACbipB,EAASjE,aAAe,UAGxB3pE,EAAQq4H,iBACRzqD,EAASi9D,mBAAqB,SAMlCj9D,EAASkmF,aAAe,aAExBhC,GAA0BrpE,GAAqBqpE,IAE/C,MAAMiC,EACA,IAAIjN,GACFnpJ,KACAm0J,GACA8B,EACAhmF,EAAUC,EACViZ,EAAO9mF,GAIf,OAFArC,KAAKw0J,gBAAgBrnI,IAAIipI,EAAcpvJ,GAAIovJ,GAEpCA,EAYXpD,sBAAsBqD,GAClB,MAAMrvJ,EAAKqvJ,EAAwBrvJ,GAEnC,QAAIhH,KAAKw0J,gBAAgBvoH,IAAIjlC,KAEzBhH,KAAKw0J,gBAAgB7zF,OAAO35D,IAErB,GAWfsvJ,cAAc1lI,GACV,IAAKA,EACD,MAAM,IAAI9qB,MAAM,wCAGpB9F,KAAKgqG,YAAY9lG,KAAK0sB,GAEtBA,EAAM8B,WAAa1yB,KAAK0yB,WAO5By5H,qBACI,MAAMoK,EAAav2J,KAAK00F,eAAeH,IAGvC,OAAOgiE,EAAWh3J,OAASg3J,EAAW,QAAKpqJ,EAO/CqqJ,qBACI,MAAMC,EAAaz2J,KAAK00F,eAAeH,IAGvC,OAAOkiE,EAAWl3J,OAASk3J,EAAW,QAAKtqJ,EAO/Cs+I,qBACI,OAAOzqJ,KAAK0yB,WAAWuqE,WAS3BvI,eAAe5W,GACX,IAAI9O,EAAShvE,KAAKgqG,YAAYzjG,QAO9B,YALkB4F,IAAd2xE,IACA9O,EAASA,EAAOpjE,QACZglB,GAASA,EAAMgpE,YAAc9b,KAG9B9O,EASX+8E,gBAAgBjuE,GACZ,IAAI0rE,EAAe,GAEnB,IAAK,MAAMzgE,KAAO/oF,KAAKw0J,gBAAgBjkJ,SAAU,CAC7C,MAAMmmJ,EAAiB3tE,EAAIgjE,qBAAgB5/I,EAAW2xE,GAElD44E,IACAlN,EAAeA,EAAa9iJ,OAAOgwJ,IAI3C,OAAOlN,EAQX7uD,aAAalxF,GACT,MAAMktJ,EAAe,GASrB,OAPA32J,KAAK00F,eAAeH,IAAiB5xF,SAAQoqJ,IAEzC4J,EAAazyJ,KAAKuF,EAAQsjJ,EAAWjkE,OAASikE,EAAWjR,aAKtDtxH,QAAQ3T,IAAI8/I,GAQvB77D,aAAarxF,GACT,MAAMktJ,EAAe,GAUrB,OARA32J,KAAK00F,eAAeH,IAAiB7tF,OAAO1G,KAAK00F,eAAeH,KAC3D5xF,SAAQ21I,IAELqe,EAAazyJ,KAAKuF,EAAQ6uI,EAAWxvD,OAASwvD,EAAWwD,aAK1DtxH,QAAQ3T,IAAI8/I,GAOvBC,iBAAiBhmI,GACb,MAAM3W,EAAMja,KAAKgqG,YAAY7kG,QAAQyrB,IAExB,IAAT3W,GAIJja,KAAKgqG,YAAY1kG,OAAO2U,EAAK,GAQT,yBAAC48I,EAAYhqJ,GACjC,OAAOosI,GAAAA,kBAA2B4d,EAAYhqJ,GAOhC,mBAACA,GACf,OAAOosI,GAAAA,YAAqBpsI,GAOf,kBAAC+jB,GACd,OAAOqoH,GAAAA,WAAoBroH,GAOH,+BACxB,OAAOqoH,GAAAA,wBAUmB,+BAAClC,GAC3B,OAAOkC,GAAAA,wBAAiClC,GAWpB,2BACpB,OAAOzxH,GAAQk4C,cAQQ,8BACvB,OAAOy7E,GAAAA,uBAQ6B,2CACpC,OAAOA,GAAAA,oCAOoC,kDAC3C,OAAOA,GAAAA,2CAOuB,mCAAC1F,GAC/B,OAAO0F,GAAAA,4BAAqC1F,GAUrB,4BAAChvE,GACxB,OAAO00E,GAAAA,qBAA8B10E,GAetB,oBAAC13D,GAChB,OAAO6/I,GAAIC,iBAAiB1T,GAAAA,YAAqBpsI,IAe9B,wBAACs9D,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,EAQY,wBAACl2D,GACpBglI,GAAAA,iBAA0BhlI,GAQR,uBAAC+iI,GACnBiC,GAAAA,gBAAyBjC,GAOC,iCAC1B,OAAOiC,GAAAA,0BAMX7+C,qBACQp6F,KAAKwvI,WACLxvI,KAAKwvI,SAAS/0E,QACdz6D,KAAKwvI,SAAW,KAEhBxvI,KAAKkY,eAAeqlF,KAAAA,uBAAkCv9F,KAAK60J,uBAYnE31D,cAAcnW,EAAKz6E,EAAMu8E,EAAYl4D,GACjC,MAAM/B,EAAQm4D,EAAIuI,eAAehjF,GAE5BsiB,IAEOA,EAAMe,gBAIPf,EAAM+B,YAAcA,GAC3BvsB,GAAO5C,MACF,GAAEotB,qBAAyB+B,EAAU,KAAO,kBAGrD/B,EAAMsuE,cAAcrU,EAAY9B,IAR5B3iF,GAAO6lB,KAAM,6CAA4C3d,MAmBjEwoJ,mBAAmBh7F,EAAIzgD,GACnB,IAAIrb,KAAKwvI,SAGL,MAAM,IAAI1pI,MAAM,gCAFhB9F,KAAKwvI,SAASlhC,YAAYxyC,EAAIzgD,GAWtCu1H,yBAAyBv1H,GACjBrb,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAASoB,yBAAyBv1H,GAU/C07I,SAASttJ,GACDzJ,KAAKy0J,SAAWhrJ,IAChBzJ,KAAKy0J,OAAShrJ,EACVzJ,KAAKwvI,UAAYxvI,KAAKwvI,SAASa,UAC/BrwI,KAAKwvI,SAASuB,oBAAoBtnI,GAEtCzJ,KAAK6sF,aAAa/gE,KAAKyxE,KAAAA,oBAA+B9zF,IAU9Ds2F,UAAU/4F,GACN,OAAQhH,KAAK00J,iBACN10J,KAAK00J,gBAAgBvvJ,QAAQ6B,IAAO,EAW/C+tJ,iCAAiCxwF,GAC7B,MAAMyyF,EAAoBh3J,KAAK+rJ,gBAAgBx3D,IAE/C,IAAK,MAAM3jE,KAASomI,EAChBpmI,EAAM4oH,eAAej1E,ICl6B1B,MAAM0yF,GAAsB,yBAMtBC,GAAuB,0BCD9BnhB,GAAc7zI,EAAQ,MACtB87F,GAAY97F,EAAQ,MACpB+3F,GAAa/3F,EAAQ,MAErBkE,IAASyB,EAAAA,EAAAA,wDAcTsvJ,GAAoB,CACtB,CAAEr6H,MAAO,KACLC,OAAQ,KACRq6H,OAAQ,EACRvtI,OAAQ,OACRwtI,SAAU,KACd,CAAEv6H,MAAO,KACLC,OAAQ,IACRq6H,OAAQ,EACRvtI,OAAQ,OACRwtI,SAAU,MACd,CAAEv6H,MAAO,IACLC,OAAQ,IACRq6H,OAAQ,EACRvtI,OAAQ,WACRwtI,SAAU,KACd,CAAEv6H,MAAO,IACLC,OAAQ,IACRq6H,OAAQ,EACRvtI,OAAQ,WACRwtI,SAAU,KACd,CAAEv6H,MAAO,IACLC,OAAQ,IACRq6H,OAAQ,EACRvtI,OAAQ,MACRwtI,SAAU,MACd,CAAEv6H,MAAO,IACLC,OAAQ,IACRq6H,OAAQ,EACRvtI,OAAQ,MACRwtI,SAAU,OAalB,IAAIx3C,GAAe,IAmEJ,MAAMy3C,GAOjB14J,YAAY8zB,EAAYm6D,EAAcxqF,GAAS,MAC3CrC,KAAK6sF,aAAeA,EAKpB7sF,KAAK6kG,YAAcnyE,EAKnB1yB,KAAKu3J,YAAc,CACfC,kBAAmB,IACnBC,YAAQtrJ,GAMZnM,KAAK03J,8BAAgC,EAKrC13J,KAAKg3G,SAAW30G,EAMhBrC,KAAK23J,aAAe,GAMpB33J,KAAK43J,mBAAqB,EAM1B53J,KAAK63J,mBAAqB,GAGtB,UAAA73J,KAAKg3G,SAAS9tG,cAAd,eAAsB22G,cAAe,IACrCA,GAAe7/G,KAAKg3G,SAAS9tG,OAAO22G,cAKxCntF,EAAW3H,GACP+sI,GACA,KACI93J,KAAK+3J,8BAA8B,GACnC/3J,KAAK6sF,aAAa/gE,KACdksI,GACAh4J,KAAKu3J,aACTv3J,KAAKi4J,0BAGbvlI,EAAWqnE,KAAKziF,YACZ2iF,GAAWn3D,8BACX,CAACo3D,EAAemJ,KACPnJ,EAAc/Q,OAAsB,cAAbka,IACxBrjG,KAAK43J,kBAAoBn7J,OAAOqhG,YAAYluE,UAQxD8C,EAAW3H,GACP+sI,IACA,CAACz9D,EAAah/E,KAxMC,UAyMPA,EAAQ7b,MACRQ,KAAKk4J,mBACD79D,EAAYmI,QAASnnF,EAAQ9K,WAI7CmiB,EAAW3H,GACP+sI,IACA,CAACz9D,EAAah/E,KACVrb,KAAKk4J,mBAAmB79D,EAAYmI,QAASnnF,MAGrDqX,EAAW3H,GACP+sI,IACA,CAACz9D,EAAah/E,KAjNa,sBAkNnBA,EAAQ7b,MACRQ,KAAK6sF,aAAa/gE,KACdgsI,GACAz9D,EAAYmI,QACZnnF,MAKhBqX,EAAWwlE,WAAWlB,2BAA2Bh3F,KAAKm4J,kBAAkBn1J,KAAKhD,OAG7E0yB,EAAW3H,GACP+sI,IACAlnI,IACQA,EAAM2B,iBACF3B,EAAM+oE,UACN35F,KAAK63J,mBAAqB,EAE1B73J,KAAKo4J,6BAIrB1lI,EAAW3H,GACP+sI,IACAlnI,IACQA,EAAM2B,iBAAmB3B,EAAM+oE,WAC/B35F,KAAKo4J,4BAGjB1lI,EAAWynE,IAAIpvE,GACXwyE,GAAUzhE,4CACVlL,IACI5wB,KAAKu3J,YAAYvd,qBAAuBppH,EAAMopH,wBAGtDtnH,EAAW3H,GACP+sI,IACAO,IACIr4J,KAAKu3J,YAAYc,aAAeA,KAGxC3lI,EAAW3H,GACP+sI,IACApzE,IACI1kF,KAAKu3J,YAAYe,YACXvtJ,QAAQ25E,GAAc,IAAI,oBAS5C0zE,yBACQp4J,KAAK63J,kBAAoB,IACzB73J,KAAK63J,kBAAoBp7J,OAAOqhG,YAAYluE,OAWpD2oI,4BAA4Bx6D,EAAWpE,EAAS6+D,GAI5C,MAAMhqE,EAAaunD,GAAYyiB,GAE/B,IACI7pE,EADA8pE,EAAU,IA2Bd,GAtBIz4J,KAAKu3J,YAAY5oE,aACjBA,EAAa3uF,KAAKu3J,YAAY5oE,WAAWJ,OAgBrCoL,IACAhL,GAAc,KAIlBgL,IAAYnL,GAAcuP,IAAcC,GAAU1jE,SAC/Ct6B,KAAK43J,kBAAoB,GACzB53J,KAAK63J,kBAAoB,OAGT1rJ,IAAfwiF,GACAvoF,GAAO5C,MAAM,6DAEbi1J,EAAU,KAEVA,EADO9pE,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAEH,MAAM+pE,EAAY14J,KAAK6kG,YAAY8zD,0BAEnC,GAAID,EAAW,SACX,MAAMrV,EAAgBqV,EAAUrV,gBAC1BuV,EAAuBF,EAAUlM,yBAGvCoM,EAAqBlkH,MAAQgkH,EAAUx6B,0BAGvC,MAAM26B,EAAmBp8J,OAAOqhG,YAAYluE,MACtC3e,KAAKmO,IAAIpf,KAAK63J,kBAAmB73J,KAAK43J,mBACtChrE,EAAa,oBAAG5sF,KAAKg3G,SAAS9tG,cAAjB,aAAG,EAAsBgtF,uBAAzB,QAA4C,IAG/D,IAAIrsE,EAxSpB,SAAmBy5H,EAAW90D,EAAYqqE,EAAkBD,GACxD,IAAI/uI,EAAS,EACTkT,EAAS9rB,KAAKoO,IAAImvE,EAAWzxD,OAAQyxD,EAAW1xD,OAGhDg8H,EAAkB3B,GAAkB7nJ,MAAKuX,GAAKA,EAAEkW,QAAUA,IAE9D,GAAI+7H,GAAmBxV,GAAasV,EAAqBlkH,QAAUs9E,KAAAA,IAG/D,IAAKj1F,EAAS+7H,EAAgB/7H,OAAQA,GAAU,IAAKA,GAAU,EAAG,CAC9D,MAAMg8H,EAAeh8H,EAGrB,GADA+7H,EAAkB3B,GAAkB7nJ,MAAKuX,GAAKA,EAAEkW,SAAWg8H,KACvDD,EAKA,MAJAjvI,GAAUvE,GAAQ07D,gBACZ83E,EAAgBzB,SAChBuB,EAAqBE,EAAgBjvI,aAK5CivI,IAGPjvI,EAASvE,GAAQ07D,gBACX83E,EAAgBzB,SAChBuB,EAAqBE,EAAgBjvI,SAK/C,OAAO5Y,KAAKoO,IAAIwK,EAAS,IAS7B,SAAgBgvI,GACZ,OAAIA,EAAmB,IACZ9tJ,OAAOk4B,iBAMX48E,GAAe5uG,KAAKkpB,IAAI,KAAM0+H,EAAmB,KAjBzBG,CAAO/nJ,KAAKmO,IAAI,EAAGy5I,EAAmB,OAwQ5CI,CAAU5V,EAAe70D,EAAYqqE,EAAkBD,GAEpE/uI,EAAS5Y,KAAKoO,IAAIwK,EAxTP,MA2TPgvI,EAAmBjsE,IACnB6rE,EAAU,IAAMz4J,KAAKu3J,YAAYjpE,QAAQC,OAAS1kE,GAKtD8kE,GAAcA,GAAc,KAC5B8pE,EAAUxnJ,KAAKoO,IAAIo5I,EAAS,KAKpC,GAAIz4J,KAAK03J,6BAA+B,EAAG,CACvC,MAAMwB,EAAuB,EACvBC,EAAwBn5J,KAAKu3J,YAAYC,kBACzC4B,GAAe38J,OAAOqhG,YAAYluE,MAAQ5vB,KAAK03J,8BAAgC,IAErFe,EAAUxnJ,KAAKoO,IAAIo5I,EAASU,EAAyBC,EAAcF,GAGvE,OAAOjoJ,KAAKoO,IAAI,IAAKo5I,GAOzBV,8BAA8BtuJ,GAC1BzJ,KAAKu3J,YAAYC,kBAAoB/tJ,EACrCzJ,KAAK03J,6BAA+Bj7J,OAAOqhG,YAAYluE,MAO3DqoI,uBAEI,MAAMp/I,EAAO,CACTy1E,QAAStuF,KAAKu3J,YAAYjpE,QAC1BK,WAAY3uF,KAAKu3J,YAAY5oE,WAC7B6oE,kBAAmBx3J,KAAKu3J,YAAYC,kBACpCC,OAAQz3J,KAAKu3J,YAAYE,OACzBY,aAAcr4J,KAAKu3J,YAAYc,aAC/Bre,qBAAsBh6I,KAAKu3J,YAAYvd,qBACvCpoD,eAAgB5xF,KAAKu3J,YAAY1lE,qBAGrC,IACI7xF,KAAK6kG,YAAY+rC,yBAAyB/3H,GAC5C,MAAOzE,KAYb+jJ,kBAAkBpvE,EAAKlwE,GAEnB,IAAKkwE,EAAII,MAAO,CACZ,MAAMsuE,EACA5+I,EAAK3T,WACA2T,EAAK3T,UAAU3F,QAAUsZ,EAAK3T,UAAU,GAAGuuF,IAEtDzzF,KAAKu3J,YAAYE,OAASA,QAAkBtrJ,EAKhD,GAAI48E,IAAQ/oF,KAAK6kG,YAAY8zD,0BACzB,OAGJ,IAAIzuJ,EACJ,MAAMmvJ,GACCr5J,KAAK6kG,YAAYy0D,0BAClB7Q,EACAzoJ,KAAK6kG,YAAYsnD,qBACjBpuD,EACA0qD,EAAkBA,EAAgB1qD,eAAY5xF,EAC9CwtF,GAAU8uD,GAAkBA,EAAgB9uD,UAC5CnL,EAAai6D,EACbx3I,KAAKoO,IAAIopI,EAAgBj6D,WAAYi6D,EAAgBzO,sBAAwB,KAOnF,IAAK9vI,KALAyvF,GACD35F,KAAKo4J,yBAIGv/I,EACJA,EAAKhF,eAAe3J,KACpBlK,KAAKu3J,YAAYrtJ,GAAO2O,EAAK3O,IAKjCmvJ,GACAr5J,KAAK+3J,8BACD/3J,KAAKu4J,4BACDx6D,EACApE,EACAnL,IAGZxuF,KAAK6sF,aAAa/gE,KACdksI,GACAh4J,KAAKu3J,aACTv3J,KAAKi4J,uBAQTC,mBAAmBlxJ,EAAI6R,GAEnB7Y,KAAK23J,aAAa3wJ,GAAM,CACpBsnF,QAASz1E,EAAKy1E,QACdK,WAAY91E,EAAK81E,WACjB6oE,kBAAmB3+I,EAAK2+I,kBACxBC,OAAQ5+I,EAAK4+I,OACbY,aAAcx/I,EAAKw/I,aACnBre,qBAAsBnhI,EAAKmhI,qBAC3BpoD,eAAgB/4E,EAAK+4E,gBAGzB5xF,KAAK6sF,aAAa/gE,KACdksI,GACAhxJ,EACAhH,KAAK23J,aAAa3wJ,IAO1B6hE,WACI,OAAO7oE,KAAKu3J,aCrgBpB,MAAMnxJ,IAASyB,EAAAA,EAAAA,wDAaA,MAAM0xJ,GAKjB36J,YAAY8zB,GACR1yB,KAAK6kG,YAAcnyE,EASvB8mI,kBACI,MAAM,mBAAE75B,EAAF,iBAAsB9D,GAAqB77H,KAAK6kG,YAAYxiG,QAAQ6G,OACpEuwJ,OAAiD,IAArB59B,IAAqCA,EACjEvV,EAA6BtmH,KAAK6kG,YAAY9K,KAAKusB,6BACnDozC,EAAyBpzC,IAA+BuV,EAO9D,GALAz1H,GAAO+L,KACA,mCAAuBwtH,wBACF9D,qCACavV,KAErCmzC,IAAwB59B,IAAqBvV,GAA+BqZ,EAAoB,CAChGv5H,GAAO+L,KAAK,6CACZ,MAAMmmB,EAASqnG,EACTxkC,EACAA,EAIN,YAFAn7F,KAAK6kG,YAAYhY,aAAa/gE,KAAKyrE,EAAyCj/D,GAKhF,MAAMqhI,EAAgB35J,KAAK6kG,YAAYnL,iBACjCkgE,EAAkBD,GAAiBA,EAAczzB,wBAElDyzB,EAE0B,cAApBC,EACPxzJ,GAAO+L,KAAK,qDAEZ/L,GAAO+L,KACA,mEAAaynJ,+BACcF,KAC9BA,EACA15J,KAAK6kG,YAAYnL,iBAAiB0+B,WAC9B,KACIhyH,GAAO+L,KAAK,+CAEhB3O,IACI4C,GAAO5C,MAAO,8CAA6CA,EAAMzE,aAClE,CACCu5B,OAAQ,qBACRyoG,kBAAmB,aACnBE,gBAAgB,EAChBJ,sBAAsB,IAG9B7gI,KAAK6kG,YAAYnL,iBAAiB0jC,6BArBtCh3H,GAAO6lB,KAAK,8CA6BpB5rB,QAUIL,KAAK6kG,YAAYvP,KAAKmgB,KAAK,MAAOtxC,MAC9B,KACSnkE,KAAK65J,YACN75J,KAAK85J,kBAAoBr9J,OAAO6H,YAAW,KACvCtE,KAAK85J,uBAAoB3tJ,EACzBnM,KAAKw5J,oBACN,SAGXh2J,IACI4C,GAAO5C,MAAM,8CAA+CA,MAOxEyrC,SACIjvC,KAAK65J,WAAY,EACjBp9J,OAAO4H,aAAarE,KAAK85J,oBC/G1B,MAAMC,GAAwB,wBAQxBjhF,GAA2B,4BAO3BqB,GAAiB,0BAOjB6/E,GAAmB,6BAWnBC,GAAuB,uBAYvBC,GAAsB,gCAQtBC,GAAuB,iCCvCrB,MAAMC,WAA+BhwI,MAOhDxrB,YAAY8zB,GACR+sD,QAEAz/E,KAAK6kG,YAAcnyE,EACnB1yB,KAAKq6J,gBAAkB,KACvBr6J,KAAKs6J,eAAiB,KAEjBh1I,GAAQy9D,yBACTrwD,EAAWwlE,WAAWtB,sBAAsB52F,KAAKu6J,YAAYv3J,KAAKhD,OAEtE0yB,EAAW3H,GAAGwsE,GAAmCv3F,KAAKw6J,YAAYx3J,KAAKhD,OAM3Ey6J,uBACIp2J,aAAarE,KAAKq6J,iBAClBr6J,KAAKq6J,gBAAkB,KAU3BK,6BAA6B7vE,GAGzB,MAAM/zD,EAAwB,IAAf+zD,EAIa,OAAxB7qF,KAAKs6J,gBAA2Bt6J,KAAKs6J,iBAAmBxjI,IACxD92B,KAAKs6J,eAAiBxjI,EACtB92B,KAAK8rB,KAAK6uI,GAA0C36J,KAAKs6J,iBAUjEM,6BAA6B/vE,GACrB7qF,KAAK66J,cAIU,IAAfhwE,GAAqB7qF,KAAKq6J,gBAMJ,IAAfxvE,GAAoB7qF,KAAKq6J,iBAChCr6J,KAAKy6J,uBANLz6J,KAAKq6J,gBAAkB/1J,YAAW,KAC9BtE,KAAK66J,aAAc,EAEnB76J,KAAK8rB,KAAK6uI,MAvEA,MAuFtBJ,YAAYxxE,EAAKz6E,EAAMu8E,EAAYl4D,GAE/B,IAAKA,IAAY3yB,KAAK86J,YAClB,OAIJ,MAAMpR,EAAa3gE,EAAI2gE,WAAWnrI,IAAIve,KAAK86J,YAAYphB,OAIlDgQ,GAAeA,EAAWl7I,MAAM+nB,SAASjoB,KAM9CtO,KAAK06J,6BAA6B7vE,GAClC7qF,KAAK46J,6BAA6B/vE,IAStC2vE,YAAY5pI,GACJA,EAAM4nH,sBAENx4I,KAAK86J,YAAclqI,EACnB5wB,KAAK66J,aAAc,EACnB76J,KAAKy6J,uBAGDn1I,GAAQy9D,0BACRnyD,EAAM7F,GACF43E,IACA9X,IACI7qF,KAAK46J,6BAA6B/vE,MAG1Cj6D,EAAM7F,GACF43E,IACA9X,IACI7qF,KAAK46J,6BAA6B/vE,GAClC7qF,KAAK06J,6BAA6B7vE,SC/H3C,MAAMkwE,GAMjBn8J,YAAY8zB,GACR1yB,KAAK0yB,WAAaA,EAElBA,EAAW1F,iBACPuqE,GACAv3F,KAAKu6J,YAAYv3J,KAAKhD,OAE1BA,KAAKg7J,SAAWh7J,KAAK0yB,WAAWuqE,WASpCs9D,YAAYvzJ,EAAI6jF,IAKP7qF,KAAK0yB,WAAWmuE,eACdhW,GAtCiB,IAuChB7jF,IAAOhH,KAAKg7J,UACLh7J,KAAK0yB,WAAW8jI,qBAAqB78D,WAIpD35F,KAAK0yB,WAAWynE,IAAItN,aAAa/gE,KAC7ByxE,KAAAA,yBACAv2F,ICjDL,SAASi0J,GAAmB54J,GAC/B,MAAM64J,EAAmBz+J,OAAOy0E,cAAgBz0E,OAAO00E,mBAEvD,GAAK+pF,EAIL,OAAO,IAAIA,EAAiB74J,GCIjB,MAAM84J,WAAwB/wI,MASzCxrB,YAAYw8J,EAAoBC,EAAcC,GAC1C77E,QAKAz/E,KAAKu7J,oBAAsBH,EAK3Bp7J,KAAKw7J,cAAgBH,EAKrBr7J,KAAKy7J,YAAcH,EAKnBt7J,KAAK07J,eAAiB,IAAIC,aAAa,IAKvC37J,KAAK47J,cAAgBX,GAAmB,CAAEY,WAAYR,EAAaS,4BAMnE97J,KAAK+7J,eAAiBV,EAAaW,kBAMnCh8J,KAAKi8J,gBAAkBj8J,KAAKi8J,gBAAgBj5J,KAAKhD,MAEjDA,KAAKk8J,0BAeI,cAAChmB,EAAaklB,EAAoBC,GAC3C,OAAO3O,GAAIpX,+BAA+B,CACtClxE,QAAS,CAAE,SACX8xE,YAAAA,IACD/xE,MAAKo6D,IAEJ,IAAKA,EAAW,GACZ,MAAM,IAAIz4H,MAAO,qDAAoDowI,KAGzE,OAAO,IAAIilB,GAAgBC,EAAoBC,EAAc98B,EAAW,OAYhF29B,0BACIl8J,KAAKm8J,aAAen8J,KAAK47J,cAAclwE,wBAAwB1rF,KAAKy7J,YAAY5uJ,QAQhF7M,KAAKo8J,qBAAuBp8J,KAAK47J,cAAcS,sBAAsBr8J,KAAKu7J,oBAAqB,EAAG,GActGU,gBAAgBK,GAEZ,MAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAiB,IAAK18J,KAAK07J,kBAAmBa,GAC9CI,EAAkB71J,KAAK8oB,MAE7B,IAAItwB,EAAI,EAER,KAAOA,EAAIU,KAAK+7J,eAAiBW,EAAen9J,OAAQD,GAAKU,KAAK+7J,eAAgB,CAC9E,MAAMa,EAAYF,EAAen2J,MAAMjH,EAAGA,EAAIU,KAAK+7J,gBAG7Cc,EAAW78J,KAAKw7J,cAAcsB,uBAAuBF,EAAUr2J,SAErEvG,KAAK8rB,KAAKouI,GAAqB,CAC3Br2J,UAAW84J,EACXI,MAAOF,EACPG,QAASJ,EACTr4F,SAAUvkE,KAAKy7J,YAAYpf,gBAInCr8I,KAAK07J,eAAiBgB,EAAen2J,MAAMjH,EAAGo9J,EAAen9J,QAQjE09J,qBACIj9J,KAAKo8J,qBAAqBc,eAAiBl9J,KAAKi8J,gBAChDj8J,KAAKm8J,aAAalwG,QAAQjsD,KAAKo8J,sBAC/Bp8J,KAAKo8J,qBAAqBnwG,QAAQjsD,KAAK47J,cAAcuB,aAQzDC,wBAIIp9J,KAAKo8J,qBAAqBc,eAAiB,OAC3Cl9J,KAAKo8J,qBAAqB7sG,aAC1BvvD,KAAKm8J,aAAa5sG,aAQtB8tG,oBACIr9J,KAAKo9J,wBACLp9J,KAAKy7J,YAAYtf,aAQrBE,cACI,OAAOr8I,KAAKy7J,YAAYpf,cAS5B1D,gBACI,OAAO34I,KAAKy7J,YAAY6B,iBAQ5Bj9J,QACIL,KAAKi9J,qBAQTp4J,OACI7E,KAAKo9J,wBACLp9J,KAAK07J,eAAiB,GAQ1BxG,UACQl1J,KAAKu9J,aAITv9J,KAAKq9J,oBACLr9J,KAAKu9J,YAAa,IClO1B,MAAMn3J,IAASyB,EAAAA,EAAAA,oDAYA,MAAM21J,WAAyBpzI,GAAAA,aAW1CxrB,YAAY8zB,EAAY+qI,GACpBh+E,QAKAz/E,KAAK09J,oBAAsBD,EAM3Bz9J,KAAK29J,YAAc,KAKnB39J,KAAK49J,sBAAuB,EAK5B59J,KAAK69J,mBAAqB,GAS1B79J,KAAK89J,gBAAkBtzI,QAAQC,UAK/BzqB,KAAK+9J,iBAAmB/9J,KAAK+9J,iBAAiB/6J,KAAKhD,MAEnD0yB,EAAW3H,GAAGwsE,GAAmCv3F,KAAKw6J,YAAYx3J,KAAKhD,OACvE0yB,EAAW3H,GAAGwsE,GAAqCv3F,KAAKg+J,cAAch7J,KAAKhD,OAC3E0yB,EAAW3H,GAAGwsE,GAA0Cv3F,KAAKwpG,kBAAkBxmG,KAAKhD,OAQxFi+J,uBAAuBC,GACnBl+J,KAAK69J,mBAAmB35J,KAAKg6J,GAC7BA,EAAWnzI,GAAGgvI,IAAuB,MAGV/5J,KAAK69J,mBAAmBjyJ,QAAOuyJ,IAAoC,IAAxBA,EAASh8D,aAKvD5iG,QAAUS,KAAK49J,qBAC/B59J,KAAKo+J,kBACGp+J,KAAK49J,sBACb59J,KAAKq+J,sBASjBA,mBACQr+J,KAAK29J,cACL39J,KAAK29J,YAAY5yI,GAAGmvI,GAAqBl6J,KAAK+9J,kBAC9C/9J,KAAK29J,YAAYt9J,QACjBL,KAAK49J,sBAAuB,GAQpCQ,kBACQp+J,KAAK29J,cACL39J,KAAK29J,YAAYzlJ,eAAegiJ,GAAqBl6J,KAAK+9J,kBAC1D/9J,KAAK29J,YAAY94J,QAErB7E,KAAK49J,sBAAuB,EAahCG,iBAAiBlB,GACb,IAAK,MAAMsB,KAAYn+J,KAAK69J,mBACxBM,EAASG,gBAAgBzB,GASjC0B,0BAA0B5kE,GACtB,IAAK,MAAMwkE,KAAYn+J,KAAK69J,mBACxBM,EAASK,gBAAgB7kE,GAWjC6gE,YAAY5pI,GACJA,EAAM4nH,sBAGNx4I,KAAK89J,gBAAkB99J,KAAK89J,gBAAgB35F,MAAK,IAAMnkE,KAAK09J,wBACvDv5F,MAAKk3F,GACFF,GAAgB97J,OAAOuxB,EAAMyrH,cAnJjB,KAmJyDgf,KAExEl3F,MAAKs6F,IACFr4J,GAAO4gD,MAAM,kCAAmCp2B,EAAM+nH,iBAEtD34I,KAAK29J,YAAcc,EAInBz+J,KAAKu+J,0BAA0B3tI,EAAM+oE,cAExCxrB,OAAM3qE,IACH4C,GAAO6lB,KAAK,mCAAoCzoB,OAYhEgmG,kBAAkB54E,GACVA,EAAM4nH,sBAENx4I,KAAK89J,gBAAkB99J,KAAK89J,gBAAgB35F,MAAK,KAE7CnkE,KAAKu+J,0BAA0B3tI,EAAM+oE,eAajDqkE,cAAcptI,GACNA,EAAM4nH,sBAENx4I,KAAK89J,gBAAkB99J,KAAK89J,gBAAgB35F,MAAK,KAC7C/9D,GAAO4gD,MAAM,uCAAwCp2B,EAAM+nH,iBAGvD34I,KAAK29J,cACL39J,KAAKo+J,kBACLp+J,KAAK29J,YAAYzI,UACjBl1J,KAAK29J,YAAc,MAIvB,IAAK,MAAMQ,KAAYn+J,KAAK69J,mBACxBM,EAAStoI,aCnLd,MAAM6oI,WAA0Bt0I,GAAAA,aAM3CxrB,cACI6gF,QAMAz/E,KAAK2+J,aAAc,EAKnB3+J,KAAK4+J,YAAc,GAKnB5+J,KAAK6+J,eAAiB,GAKtB7+J,KAAK8+J,SAAU,EAEf9+J,KAAK++J,qBAAuB/+J,KAAK++J,qBAAqB/7J,KAAKhD,MAS/D++J,uBACI,MAAMC,EAAW/zE,GAAiBjrF,KAAK4+J,aACjCK,EAAgBh0E,GAAiBjrF,KAAK6+J,gBAExCG,EAxEoB,IAwEkBC,EAlEd,MAmExBj/J,KAAK8rB,KAAKkuI,IAEVh6J,KAAKk/J,iBAAgB,IAIzBl/J,KAAK61B,QASTspI,cAActC,EAAUuC,GACpBp/J,KAAK4+J,YAAY16J,KAAK24J,GACtB78J,KAAK6+J,eAAe36J,KAAKk7J,GAS7BF,gBAAgBvtB,GACZ3xI,KAAK8+J,QAAUntB,EACf3xI,KAAK8rB,KAAKiuI,GAAuB/5J,KAAK8+J,SAQ1CN,gBAAgB7kE,GAEZ35F,KAAKk/J,iBAAiBvlE,GACtB35F,KAAK61B,QAQTssE,WACI,OAAOniG,KAAK8+J,QAQhBjpI,QACI71B,KAAK2+J,aAAc,EACnB3+J,KAAK4+J,YAAc,GACnB5+J,KAAK6+J,eAAiB,GACtBx6J,aAAarE,KAAKq/J,iBAatBf,gBAAgBzB,GACZ,GAAK78J,KAAK8+J,QAKV,GAAI9+J,KAAK2+J,YAAT,CAEI,MAAMW,EAAiBn0E,GAAqB0xE,EAASG,SAErDh9J,KAAKm/J,cAActC,EAASE,MAAO9xE,GAAiBq0E,SAOxD,GAAIzC,EAASE,MAvJK,GAuJsB,CACpC,MACMqC,EAAcn0E,GADGE,GAAqB0xE,EAASG,UAGjDoC,EArJkB,MAsJlBp/J,KAAK2+J,aAAc,EACnB3+J,KAAKm/J,cAActC,EAASE,MAAOqC,GAGnCp/J,KAAKq/J,gBAAkB/6J,WAAWtE,KAAK++J,qBApJpB,SCApB,MAAMQ,WAA8Bn1I,GAAAA,aAK/CxrB,cACI6gF,QAMAz/E,KAAK2+J,aAAc,EAKnB3+J,KAAK4+J,YAAc,GAKnB5+J,KAAK8+J,SAAU,EAEf9+J,KAAKw/J,mBAAqBx/J,KAAKw/J,mBAAmBx8J,KAAKhD,MAQ3Dw/J,qBACkBv0E,GAAiBjrF,KAAK4+J,aAxDlB,KA2Dd5+J,KAAK8rB,KAAKquI,IAIVn6J,KAAKk/J,iBAAgB,IAIzBl/J,KAAK61B,QASTqpI,gBAAgBvtB,GACZ3xI,KAAK8+J,QAAUntB,EACf3xI,KAAK8rB,KAAKiuI,GAAuB/5J,KAAK8+J,SAQ1CN,gBAAgB7kE,GAEZ35F,KAAKk/J,gBAAgBvlE,GACrB35F,KAAK61B,QAQTssE,WACI,OAAOniG,KAAK8+J,QAYhBR,gBAAgBzB,GACP78J,KAAK8+J,UAKN9+J,KAAK2+J,YACL3+J,KAAK4+J,YAAY16J,KAAK24J,EAASE,OAO/BF,EAASE,MArHG,KAsHZ/8J,KAAK2+J,aAAc,EACnB3+J,KAAK4+J,YAAY16J,KAAK24J,EAASE,OAG/B/8J,KAAKq/J,gBAAkB/6J,WAAWtE,KAAKw/J,mBA/GhB,OAwH/B3pI,QACI71B,KAAK2+J,aAAc,EACnB3+J,KAAK4+J,YAAc,GACnBv6J,aAAarE,KAAKq/J,kBCrJnB,MAAMI,GAAkB,0BCKzBr5J,IAASyB,EAAAA,EAAAA,yCAMT63J,GAAmB,mBAMnBC,GAAoB,oBAK1B,MAAMC,GAOFhhK,YAAYy7F,EAAawlE,GAErB7/J,KAAKq6F,YAAcA,EAGnBr6F,KAAK6/J,QAAUA,EAGf7/J,KAAKgH,GAAKqzF,EAAYmI,QAGtBxiG,KAAK8/J,SAAW,GAIhB9/J,KAAK+/J,cAAgB,EAErB//J,KAAKggK,eAAiBhgK,KAAKggK,eAAeh9J,KAAKhD,MAC/CA,KAAK+1B,YAAc/1B,KAAK+1B,YAAY/yB,KAAKhD,MACzCA,KAAKigK,eAAiBjgK,KAAKigK,eAAej9J,KAAKhD,MAC/CA,KAAKkgK,mBAAqBlgK,KAAKkgK,mBAAmBl9J,KAAKhD,MACvDA,KAAKs5F,cAAgBt5F,KAAKs5F,cAAct2F,KAAKhD,MAIzC6/J,EAAQM,mBACRngK,KAAK+1B,cAGT/1B,KAAKm1G,aAAe14G,OAAOkvF,YACvB3rF,KAAK+1B,YAAa8pI,EAAQO,gBAC9BpgK,KAAKqgK,kBAAoB5jK,OAAO6H,WAC5BtE,KAAKkgK,mBAAoBlgK,KAAK6/J,QAAQS,qBAO9CN,iBACQhgK,KAAKm1G,cACL14G,OAAO6vF,cAActsF,KAAKm1G,cAE1Bn1G,KAAKqgK,mBACL5jK,OAAO6vF,cAActsF,KAAKqgK,mBAQlCtqI,cACI,MAAMwqI,EAAYvgK,KAAK+/J,gBACjBS,EAAiB,CACnBhhK,KAAMkgK,GACN14J,GAAIu5J,GAGRvgK,KAAK6/J,QAAQvxD,YAAYkyD,EAAgBxgK,KAAKgH,IAC9ChH,KAAK8/J,SAASS,GAAa,CACvBv5J,GAAIu5J,EACJE,SAAUhkK,OAAOqhG,YAAYluE,OAQrCqwI,eAAejqI,GACX,MAAMU,EAAU12B,KAAK8/J,SAAS9pI,EAAShvB,IAEnC0vB,IACAA,EAAQ+8D,IAAMh3F,OAAOqhG,YAAYluE,MAAQ8G,EAAQ+pI,SACjDzgK,KAAK6/J,QAAQhzE,aAAa/gE,KACtB40I,GACA1gK,KAAKq6F,YACL3jE,EAAQ+8D,MAGhBzzF,KAAKkgK,qBASTA,qBACI,MAAMtwI,EAAMnzB,OAAOqhG,YAAYluE,MAI/B,IACI8G,EAAS6pI,EADT9sE,EAAMvrE,EAAAA,EAIV,IAAKq4I,KAAavgK,KAAK8/J,SACf9/J,KAAK8/J,SAASjsJ,eAAe0sJ,KAC7B7pI,EAAU12B,KAAK8/J,SAASS,GAEpB7pI,EAAQ+pI,SAAW7wI,EAAM5vB,KAAK6/J,QAAQS,2BAE/BtgK,KAAK8/J,SAASS,GACd7pI,EAAQ+8D,MACfA,EAAMxiF,KAAKoO,IAAIo0E,EAAK/8D,EAAQ+8D,OAKpCA,EAAMvrE,EAAAA,GACNloB,KAAKs5F,cAAc7F,GAQ3B6F,cAAc7F,GACV4B,GAAWiE,c7F8Jc,SAAS/H,EAAew6C,EAAQt4C,GAO7D,MAAO,CACHlyC,WAPe,CACf,eAAkBgwC,EAClBw6C,OAAAA,EACAt4C,IAAAA,GAKAvrF,KAAM,UACN1I,KAAMy9E,I6FxKmB0jF,CACrB3gK,KAAKgH,GACLhH,KAAKq6F,YAAYoL,YAAY,UAC7BhS,KAmBG,MAAMmtE,GAMjBhiK,YAAY8zB,EAAYrwB,EAASisG,GAC7BtuG,KAAK0yB,WAAaA,EAClB1yB,KAAK6sF,aAAen6D,EAAWm6D,aAC/B7sF,KAAKsuG,YAAcA,EAGnBtuG,KAAKogK,eAAiB,IAGtBpgK,KAAKsgK,oBAAsB,IAG3BtgK,KAAK8iG,aAAe,GAGpB9iG,KAAKmgK,mBAAoB,EAErB99J,GAAWA,EAAQw9J,UACyB,iBAAjCx9J,EAAQw9J,QAAQ1qD,eACvBn1G,KAAKogK,eAAiB/9J,EAAQw9J,QAAQ1qD,cAEO,iBAAtC9yG,EAAQw9J,QAAQQ,oBACvBrgK,KAAKsgK,oBAAsBj+J,EAAQw9J,QAAQQ,mBAI3CrgK,KAAKsgK,oBAAsB,GAAKtgK,KAAKsgK,oBACnCtgK,KAAKogK,iBACPpgK,KAAKsgK,oBAAsBtgK,KAAKogK,iBAGxCh6J,GAAO+L,KACF,uCACGnS,KAAKogK,qCACLpgK,KAAKsgK,wBAEbtgK,KAAK6gK,kBAAoB7gK,KAAK6gK,kBAAkB79J,KAAKhD,MACrD0yB,EAAW3H,GACPwsE,GACAv3F,KAAK6gK,mBAET7gK,KAAK8gK,gBAAkB9gK,KAAK8gK,gBAAgB99J,KAAKhD,MACjD0yB,EAAW3H,GACPwsE,GACAv3F,KAAK8gK,iBAET9gK,KAAK+gK,gBAAkB/gK,KAAK+gK,gBAAgB/9J,KAAKhD,MACjD0yB,EAAW3H,GACPwsE,GACAv3F,KAAK+gK,iBAET/gK,KAAKghK,kBAAoBhhK,KAAKghK,kBAAkBh+J,KAAKhD,MACrD0yB,EAAW3H,GACPwsE,EACAv3F,KAAKghK,mBAObA,oBACIhhK,KAAKmgK,mBAAoB,EASzB,IAAK,MAAMn5J,KAAMhH,KAAK8iG,aAClB,GAAI9iG,KAAK8iG,aAAajvF,eAAe7M,GAAK,CACtC,MAAMi6J,EAAqBjhK,KAAK8iG,aAAa97F,GAE7CvK,OAAO6H,WAAW28J,EAAmBlrI,YAAa,MAW9DgrI,gBAAgB1mE,EAAah/E,GAGrBA,EAAQ7b,OAASkgK,GACjB1/J,KAAKkhK,cAAc7mE,EAAYmI,QAASnnF,GACjCA,EAAQ7b,OAASmgK,IACxB3/J,KAAKigK,eAAe5lE,EAAYmI,QAASnnF,GAWjDwlJ,kBAAkB75J,EAAIqzF,GACdr6F,KAAKogK,gBAAkB,IAIvBpgK,KAAK8iG,aAAa97F,KAClBZ,GAAO+L,KACF,0CAAyCnL,gBAC9ChH,KAAK8iG,aAAa97F,GAAIg5J,wBACfhgK,KAAK8iG,aAAa97F,IAG7BhH,KAAK8iG,aAAa97F,GAAM,IAAI44J,GAAmBvlE,EAAar6F,OAQhE8gK,gBAAgB95J,GACRhH,KAAKogK,gBAAkB,GAIvBpgK,KAAK8iG,aAAa97F,KAClBhH,KAAK8iG,aAAa97F,GAAIg5J,wBACfhgK,KAAK8iG,aAAa97F,IAWjCk6J,cAAc3vE,EAAe76D,GAEzB,GAAIA,GAAWA,EAAQ1vB,GAAI,CACvB,MAAMgvB,EAAW,CACbx2B,KAAMmgK,GACN34J,GAAI0vB,EAAQ1vB,IAGhBhH,KAAKsuG,YAAYt4E,EAAUu7D,QAE3BnrF,GAAO+L,KACF,6CAA4Co/E,MAUzD0uE,eAAe1uE,EAAev7D,GAC1B,MAAMirI,EAAqBjhK,KAAK8iG,aAAavR,GAEzC0vE,GACAA,EAAmBhB,eAAejqI,GAO1CnxB,OACIuB,GAAO+L,KAAK,oBAEZnS,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAK6gK,mBACT7gK,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAK8gK,iBACT9gK,KAAK0yB,WAAWzE,IACZspE,GACAv3F,KAAK+gK,iBACT/gK,KAAK0yB,WAAWzE,IACZspE,EACAv3F,KAAKghK,mBAET,IAAK,MAAMh6J,KAAMhH,KAAK8iG,aACd9iG,KAAK8iG,aAAajvF,eAAe7M,IACjChH,KAAK8iG,aAAa97F,GAAIg5J,iBAI9BhgK,KAAK8iG,aAAe,ICrX5B,MAAM18F,IAASyB,EAAAA,EAAAA,oDAOA,MAAMs5J,GAKjBviK,YAAY8zB,GACR1yB,KAAK6kG,YAAcnyE,EASnB1yB,KAAKohK,SAAU,EAEfphK,KAAK6kG,YAAY73E,iBACbuqE,IAAmC,IAAMv3F,KAAKqhK,mBAClDrhK,KAAK6kG,YAAY73E,iBACbuqE,IAAiC,IAAMv3F,KAAKqhK,mBAChDrhK,KAAK6kG,YAAY73E,iBACbuqE,IAAkC,IAAMv3F,KAAKqhK,mBAOrDA,iBACI,MAAMC,EAAYthK,KAAKohK,QACjB9+D,GACCtiG,KAAK6kG,YAAYhE,eACb7gG,KAAK6kG,YAAY08D,uBAAyB,EAEjDD,IAAch/D,IACdtiG,KAAKohK,QAAU9+D,EACfl8F,GAAO4gD,MAAO,iBAAgBs6G,QAAgBh/D,KAC9CtiG,KAAK6kG,YAAYhY,aAAa/gE,KAC1ByrE,GAAqC+pE,EAAWh/D,KC7ChE,MAAMl8F,IAASyB,EAAAA,EAAAA,+DASR,MAAM25J,GAIT5iK,cAGIoB,KAAKyhK,oBAAsB,CAAE,UAdR,KAiBrBzhK,KAAKy0J,QAhBW,EAmBhBz0J,KAAK20J,gBArBc,KAwBnB30J,KAAK40J,mBAAqB,GAE1B50J,KAAKw1J,0BAA4B,CAC7B9xF,YAAa,GACbg+F,mBAAoB1hK,KAAK0hK,mBACzB1wB,MAAOhxI,KAAKy0J,OACZkN,iBAAkB,GAClBxwB,kBAAmBnxI,KAAK40J,oBAO5BlxF,kBAGA,OAFA1jE,KAAKw1J,0BAA0BxkB,MAAQhxI,KAAKy0J,OAEvCz0J,KAAK40J,mBAAmBr1J,QAM7BS,KAAKw1J,0BAA0B9xF,YAAc,GACzC1jE,KAAK40J,mBAAmBr1J,OAAS,GASjCS,KAAKw1J,0BAA0BkM,mBAAqB,CAAE,UAAa1hK,KAAK20J,iBACxE30J,KAAKw1J,0BAA0BmM,iBAAmB,GAClD3hK,KAAKw1J,0BAA0BrkB,kBAAoB,KAenDnxI,KAAKw1J,0BAA0B9xF,YAAY1jE,KAAK40J,mBAAmB,IAAM,CACrE,UAAa50J,KAAK20J,iBAEtB30J,KAAKw1J,0BAA0BkM,mBAAqB1hK,KAAKyhK,oBACzDzhK,KAAKw1J,0BAA0BmM,iBAAmB3hK,KAAK40J,mBACvD50J,KAAKw1J,0BAA0BrkB,kBAAoB,IAGhDnxI,KAAKw1J,2BAxCDx1J,KAAKw1J,0BAiDpBoM,YAAYn4J,GACR,MAAM8kJ,EAAUvuJ,KAAKy0J,SAAWhrJ,EAOhC,OALI8kJ,IACAvuJ,KAAKy0J,OAAShrJ,EACdrD,GAAO4gD,MAAO,2CAA0Cv9C,OAGrD8kJ,EAUXsT,wBAAwB3hC,GACpB,MAAMquB,EAAUvuJ,KAAK20J,kBAAoBz0B,EAOzC,OALIquB,IACAvuJ,KAAK20J,gBAAkBz0B,EACvB95H,GAAO4gD,MAAO,oCAAmCk5E,MAG9CquB,EASXuT,+BAA+BjwB,GAC3B,MAAM0c,GAAWngD,IAAAA,CAAQpuG,KAAKw1J,0BAA2B3jB,GAOzD,OALI0c,IACAvuJ,KAAKw1J,0BAA4B3jB,EACjCzrI,GAAO4gD,MAAO,qCAAoCzjD,KAAKF,UAAUwuI,OAG9D0c,EASXwT,wBAAwB/L,GACpB5vJ,GAAO4gD,MAAO,gCAA+BzjD,KAAKF,UAAU2yJ,MAC5Dh2J,KAAK40J,mBAAqBoB,GAS3B,MAAMgM,GAQTpjK,YAAY8zB,EAAYynE,GAAK,QACzBn6F,KAAK6kG,YAAcnyE,EACnB1yB,KAAKiiK,KAAO9nE,EAEZ,MAAM,OAAEjxF,GAAWwpB,EAAWrwB,QAG9BrC,KAAKy0J,OAAL,UAAcvrJ,MAAAA,OAAd,EAAcA,EAAQg5J,kBAAtB,SAAqCh5J,MAAAA,OAAA,EAAAA,EAAQi5J,gBAvK7B,EA0KhBniK,KAAK20J,gBA5Kc,KA+KY,UAAGzrJ,MAAAA,OAAH,EAAGA,EAAQk5J,yCAAX,UAG3BpiK,KAAKw1J,0BAA4B,IAAIgM,GAChBxhK,KAAKw1J,0BAA0BoM,YAAY5hK,KAAKy0J,SAErDz0J,KAAKiiK,KAAKrM,+BAA+B51J,KAAKw1J,0BAA0B9xF,cAExF1jE,KAAKiiK,KAAKlL,SAAS/2J,KAAKy0J,QAI5Bz0J,KAAK40J,mBAAqB,GAE1B50J,KAAK6kG,YAAY95E,GACbwsE,IACA7rF,GAAW1L,KAAKqpG,uBAAuB39F,KAW/C29F,uBAAuBulC,GACfA,EAAazlD,QAAUnpF,KAAKw1J,0BAC5B5mB,EAAaxO,2BAA2BpgI,KAAK20J,kBAE7C30J,KAAKw1J,0BAA0BqM,wBAAwB7hK,KAAK20J,iBAC5D30J,KAAKiiK,KAAKrM,+BAA+B51J,KAAKw1J,0BAA0B9xF,cAShFy/B,WACI,OAAOnjG,KAAKy0J,OAUhBsB,gBAAgBC,GAGZ,GAFAh2J,KAAK40J,mBAAqBoB,EAEtBh2J,KAAKw1J,0BAAT,CAEI,MAAM6M,EAAoBrM,EAAIpqJ,QAAO5E,GAAMA,IAAOhH,KAAK6kG,YAAY5H,aAC7DqlE,EAAiB/+J,KAAK+G,MAAM/G,KAAKF,UAAUrD,KAAKw1J,0BAA0B9xF,cAEhF2+F,EAAkB9iK,QAAUS,KAAKw1J,0BAA0BuM,wBAAwBM,GACnF,MAAME,EAAiBviK,KAAKw1J,0BAA0B9xF,YAGjD0qC,IAAAA,CAAQm0D,EAAgBD,IACzBtiK,KAAKiiK,KAAKrM,+BAA+B2M,QAKjDviK,KAAKiiK,KAAKlM,gBAAgBC,GAU9Be,SAASttJ,GACL,GAAIzJ,KAAKy0J,SAAWhrJ,EAAO,CAGvB,GAFAzJ,KAAKy0J,OAAShrJ,EAEVzJ,KAAKw1J,0BAML,YALqBx1J,KAAKw1J,0BAA0BoM,YAAYn4J,IAGhDzJ,KAAKiiK,KAAKrM,+BAA+B51J,KAAKw1J,0BAA0B9xF,cAI5F1jE,KAAKiiK,KAAKlL,SAASttJ,IAU3B+4J,kCAAkCtiC,GAC9BlgI,KAAK20J,gBAAkBz0B,EAEvB,IAAK,MAAMx0H,KAAW1L,KAAK6kG,YAAYiF,oBAC/Bp+F,EAAQy9E,QAAUnpF,KAAKw1J,0BACvBt1B,GAAkBx0H,EAAQ00H,2BAA2BF,GAE3BlgI,KAAKw1J,0BAA0BqM,wBAAwB3hC,IAG1ElgI,KAAKiiK,KAAKrM,+BAA+B51J,KAAKw1J,0BAA0B9xF,aAU3F++F,uBAAuB/+F,GAOnB,GANK1jE,KAAKw1J,4BACNx1J,KAAKw1J,0BAA4B,IAAIgM,IAGdxhK,KAAKw1J,0BAA0BsM,+BAA+Bp+F,GAEjE,SACpB1jE,KAAKy0J,OAAL,UAAc/wF,EAAYstE,aAA1B,QAAmChxI,KAAKy0J,OACxCz0J,KAAK40J,mBAAL,UAA0BlxF,EAAYytE,yBAAtC,QAA2DnxI,KAAK40J,mBAChE50J,KAAKiiK,KAAKrM,+BAA+BlyF,GAEzC,MAAMg/F,EAAa1iK,KAAK6kG,YAAYiF,oBAAoBx6F,MAAK5D,GAAWA,EAAQy9E,QAEhF,GAAIu5E,EAAY,OACZ,IAAIxiC,EAAc,UAAG5hI,OAAOiS,OAAOmzD,EAAYA,aAAa,UAA1C,aAAG,EAA2C+C,UAE3C,MAAhBy5D,IACDA,EAAc,UAAGx8D,EAAYg+F,0BAAf,aAAG,EAAgCj7F,WAErDy5D,GAAkBwiC,EAAWtiC,2BAA2BF,MCxTjE,MAAMyiC,GAQT/jK,YAAY8zB,EAAYynE,GAAK,UACzBn6F,KAAK0yB,WAAaA,EAClB1yB,KAAK4iK,uBAAL,oBAA8BlwI,EAAWrwB,eAAzC,iBAA8B,EAAoB6G,cAAlD,aAA8B,EAA4B25J,6BAA1D,SACA7iK,KAAKm6F,IAAMA,EACXn6F,KAAK0yB,WAAW3H,GACZwsE,IACA7rF,GAAW1L,KAAKqpG,uBAAuB39F,KAC3C1L,KAAK0yB,WAAW3H,GACZwsE,IACA,IAAMv3F,KAAK8iK,iCACf9iK,KAAKm6F,IAAIpvE,GACLwyE,KAAAA,kCACAs0C,IAAoB,OAEZ,UAAA7xI,KAAK+iK,+BAAL,eAA8BC,eAAgBnxB,EAAiBmxB,cAC/DhjK,KAAK+iK,wBAA0BlxB,EAC/B7xI,KAAK8iK,mCAarBz5D,uBAAuBulC,GACnBA,EAAat3H,YACT4tH,IACAx5H,IACQA,IAAY1L,KAAK0yB,WAAWuwI,0BAC5BjjK,KAAK8iK,kCAYrBA,+BACI,MAAMI,EAAqBljK,KAAKmjK,2BAC1Bz3D,EAAW,GAEjB,GAAIw3D,GAAsB,EACtB,IAAK,MAAMx3J,KAAW1L,KAAK0yB,WAAWo3E,oBAClC4B,EAASxnG,KAAKwH,EAAQ+0H,yBAAyByiC,IAIvD,OAAO14I,QAAQ3T,IAAI60F,GASvBy3D,2BAA2B,MACvB,MAAMC,EAAqBpjK,KAAK0yB,WAAWuwI,yBACrCzpC,EAA2B4pC,EAC3BA,EAAmBj6E,MACfi6E,EAAmB1mC,8BACnB18H,KAAK4iK,uBAAL,UAA8B5iK,KAAK+iK,+BAAnC,aAA8B,EAA8BC,iBAAc72J,OAC9EA,EAEN,OAAInM,KAAKqjK,6BAA+B,GAAK7pC,GAA4B,EAC9DvoH,KAAKoO,IAAIrf,KAAKqjK,4BAA6B7pC,GAC3CA,GAA4B,EAC5BA,EAGJx5H,KAAKqjK,4BAShBC,+BAA+BpjC,GAG3B,OAFAlgI,KAAKqjK,4BAA8BnjC,EAE5BlgI,KAAK8iK,gCC1GpB,UAQIS,wBAAwB59C,GACpB,MAAM69C,EAAc79C,GACbA,EAAS/9F,qBAAqB,0BAA0B,GAE/D,GAAK47I,EAIL,MAAO,CACHhgK,MAAOggK,EAAY99G,aAAa,kBAChC41E,UAAWkoC,EAAY99G,aAAa,aACpC+9G,cAAeD,EAAY99G,aAAa,kBACxCg+G,UAAWF,EAAY99G,aAAa,cACpC5uB,OAAQ0sI,EAAY99G,aAAa,YAWzCi+G,sBAAsBh+C,GAClB,MAAMi+C,EACAj+C,EAAS/9F,qBAAqB,wBAAwB,GACtDi8I,EAAoBD,GACnBA,EAA2BvtG,YAC5BytG,EACAn+C,EAAS/9F,qBAAqB,QAAQ,GACtC+oH,EAAOmzB,GACNA,EAAcztG,aACdytG,EAAcztG,YAAY3wC,cAC3Bq+I,EACAp+C,EAAS/9F,qBAAqB,cAAc,GAIlD,MAAO,CACHi8I,kBAAAA,EACAlzB,KAAAA,EACA+yB,UALEK,GAAsBA,EAAmB1tG,cAenD2tG,mBAAmBhuI,GACf,MAAMiuI,EAAQjuI,GAAYA,EAASpO,qBAAqB,SAAS,GAEjE,OAAOq8I,GAASA,EAAMv+G,aAAa,eASvCw+G,aAAav+C,GACT,MAAMw+C,EACAx+C,EAAS/9F,qBAAqB,cAAc,GAGlD,OAFkBu8I,GAAsBA,EAAmB9tG,aAW/D+tG,YAAYz+C,GACDA,EAASjgE,aAAa,QAAQnvB,SAAS,UCpFvC,MAAM8tI,GAMjBzlK,cAA0B,IAAdyD,EAAc,uDAAJ,GAClBrC,KAAK6zD,YAAcxxD,EAAQuxD,WAC3B5zD,KAAK0vI,MAAQrtI,EAAQsuI,KAErB3wI,KAAKskK,cAAcjiK,EAAQqhK,WAC3B1jK,KAAKukK,UAAUliK,EAAQy0B,QAQ3B0lE,WACI,OAAOx8F,KAAK8mF,OAQhB09E,QACI,OAAOxkK,KAAKykK,WAQhBC,eACI,OAAO1kK,KAAK2kK,WAQhBC,uBACI,OAAO5kK,KAAK6kK,mBAQhBppE,YACI,OAAOz7F,KAAK+8F,QAQhB+nE,gBACI,OAAO9kK,KAAK+kK,YAQhBC,UACI,OAAOhlK,KAAK0vI,MAUhBu1B,SAASzhK,GACLxD,KAAK8mF,OAAStjF,EAUlB0hK,qBAAqB18I,GACjBxoB,KAAK6kK,mBAAqBr8I,EAS9B+7I,UAAUztI,GACN92B,KAAK+8F,QAAUjmE,EAQnB6kE,aAAatB,GACTr6F,KAAK2kK,WAAatqE,EAQtBqB,cAAcrB,GACVr6F,KAAK+kK,YAAc1qE,EAoBvBh6F,MAAM,GAAiD,IAAjD,QAAE8kK,EAAF,YAAWC,EAAX,YAAwB1iD,EAAxB,SAAqCv4C,GAAY,EACnD,OAAO,IAAI3/C,SAAQ,CAACC,EAASrU,KACzBpW,KAAK6zD,YAAYvF,OACbtuD,KAAKqlK,UAAU,CACXv2J,OAAQ,QACRq2J,QAAAA,EACAziD,YAAAA,EACA0iD,YAAAA,EACAj7F,SAAAA,KAEJ3zD,IAKIxW,KAAKukK,UAAU,WACfvkK,KAAKskK,cACDgB,GAAkBtB,mBAAmBxtJ,IAEzCiU,OAEJjnB,IACIxD,KAAKulK,gBAAgB/hK,GAErB4S,EAAO5S,SAcvBqB,KAAK,GAAiB,IAAjB,YAAE69G,GAAe,EAClB,OAAO,IAAIl4F,SAAQ,CAACC,EAASrU,KACzBpW,KAAK6zD,YAAYvF,OACbtuD,KAAKqlK,UAAU,CACXv2J,OAAQ,OACR4zG,YAAAA,IAEJj4F,EACArU,MAqBZivJ,UAAU,GAAyD,IAAzD,OAAEv2J,EAAF,QAAUq2J,EAAV,YAAmBC,EAAnB,YAAgC1iD,EAAhC,SAA6Cv4C,GAAY,EAC/D,OAAOlqB,EAAAA,GAAAA,KAAI,CACP6b,GAAI4mD,EACJljH,KAAM,QAET4B,EAAE,QAAS,CACR,MAAS,kCACT,OAAU0N,EACV,SAAYq2J,EACZ,eAAkBnlK,KAAK0vI,MACvB,SAAYvlE,EACZ,sBAAyBi7F,IAE5Bz9G,KAUL49G,gBAAgBvkD,GACZ,MAAMx9G,EAAQw9G,EAAQp5F,qBAAqB,SAAS,GAEpD5nB,KAAKilK,SAASzhK,EAAMuuG,SAAS,GAAGx4E,SAUpC+qI,cAAcZ,GACV1jK,KAAKykK,WAAaf,GCxP1B,MAAMt9J,IAASyB,EAAAA,EAAAA,oDCETzB,IAASyB,EAAAA,EAAAA,+DAWA,MAAM29J,GAOjB5mK,YAAY8zB,GACR1yB,KAAK6kG,YAAcnyE,EACnB1yB,KAAKylK,sBAAwB,GAC7BzlK,KAAK0lK,sBAAwB,GAC7B1lK,KAAK2lK,wBAA0B,GAC/B3lK,KAAK4lK,mCAAqC,GAC1C5lK,KAAK6lK,0BAA4B7lK,KAAK6lK,0BAA0B7iK,KAAKhD,MACrEA,KAAK8lK,4BAA8B9lK,KAAK8lK,4BAA4B9iK,KAAKhD,MACzEA,KAAK+lK,eAAiB/lK,KAAK+lK,eAAe/iK,KAAKhD,MAC/CA,KAAK6kG,YAAY95E,GAAGitI,GAA8Ch4J,KAAK8lK,6BACvE9lK,KAAK6kG,YAAY3M,WAAWlB,2BAA2Bh3F,KAAK6lK,2BAC5D7lK,KAAK6kG,YAAY95E,GAAG+sI,GAA4B93J,KAAK+lK,gBAUzDD,4BAA4Bp+E,EAAD,GAA6B,IAApB,eAAEkK,GAAkB,EACpD,MAAMo0E,EAAmBhmK,KAAK4lK,mCAAmCl+E,GAAU,GAAM,EAIjF,GAFA1nF,KAAK4lK,mCAAmCl+E,GAAUs+E,GAEE,IAAhDhmK,KAAK0lK,sBAAsBvgK,QAAQuiF,IAAmBA,KAAU1nF,KAAK2lK,yBAC9D/zE,GAAkB,GAAKo0E,EAAkB,EAChD,OAGJ,MAAM3rE,EAAcr6F,KAAK6kG,YAAYjyE,mBAAmB80D,GAExD,GAAI2S,GACeA,EAAY0J,qBAAqBxP,IAErCh1F,OAAS,GAAK86F,EAAY0L,eAIjC,OAIR,MAAMkgE,EAAmBjmK,KAAKylK,sBAAsB/9E,GAE/CvpF,MAAMC,QAAQ6nK,KAAqBA,EAAiBrvJ,OAAMi0E,GAA6B,IAAfA,MACzE7qF,KAAK2lK,wBAAwBj+E,GAAU,CACnCw+E,kBAAmBt0E,EACnBq0E,iBAAkB,KAY9BJ,0BAA0B98E,EAAD,GAA0B,IAApB,eAAE6I,GAAkB,EAC3C7I,IAAQ/oF,KAAK6kG,YAAY8zD,4BAI7Br6J,OAAOmE,KAAKmvF,GAAgBjvF,SAAQ+kF,IAChC,IAAoD,IAAhD1nF,KAAK0lK,sBAAsBvgK,QAAQuiF,GACnC,OAGJ,MAAMu+E,EAAmBjmK,KAAKylK,sBAAsB/9E,GAE/CvpF,MAAMC,QAAQ6nK,GAERA,EAAiB1mK,QAxFR,GAyFhB0mK,EAAiB1rJ,QAFjBva,KAAKylK,sBAAsB/9E,GAAU,GAKzC1nF,KAAKylK,sBAAsB/9E,GAAQxjF,KAAK0tF,EAAelK,OAI3DppF,OAAOmE,KAAKzC,KAAK2lK,yBAAyBhjK,SAAQ+kF,IAC9C,MAAM,iBAAEu+E,EAAF,kBAAoBC,GAAsBlmK,KAAK2lK,wBAAwBj+E,GAI7E,GAFAu+E,EAAiB/hK,KAAK0tF,EAAelK,IAnGjB,IAqGhBu+E,EAAiB1mK,OAAoC,CACrD,GAAI0mK,EAAiBrvJ,OAAMi0E,QAAoC,IAAfA,GAA6C,IAAfA,IAAmB,CAC7F,MAAMs7E,EAAyB5iK,KAAKF,UAAU4iK,GAE9C5wE,GAAWiE,cpGgZxB,SAAuC5R,EAAQu+E,EAAkBC,GACpE,MAAO,CACH1mK,KAAMy9E,GACNnuE,OAAQ,uBACRyyC,WAAY,CACRmmC,OAAAA,EACAu+E,iBAAAA,EACAC,kBAAAA,IoGtZYE,CAA8B1+E,EAAQy+E,EAAwBD,IAClE9/J,GAAO6lB,KAAM,yEACTy7D,0BAA+By+E,2BAC/BD,KACJlmK,KAAK0lK,sBAAsBxhK,KAAKwjF,GAChC1nF,KAAK+lK,eAAer+E,UAGjB1nF,KAAK2lK,wBAAwBj+E,QAWhDq+E,eAAer+E,UACJ1nF,KAAKylK,sBAAsB/9E,GAQtCrD,UACIrkF,KAAK6kG,YAAY52E,IAAI+pI,GAA8Ch4J,KAAK8lK,6BACxE9lK,KAAK6kG,YAAY52E,IAAI6pI,GAA4B93J,KAAK+lK,gBACtD/lK,KAAK6kG,YAAY3M,WAAWjB,8BAA8Bj3F,KAAK6lK,2BAC/D7lK,KAAKylK,2BAAwBt5J,EAC7BnM,KAAK2lK,6BAA0Bx5J,EAC/BnM,KAAK0lK,2BAAwBv5J,EAC7BnM,KAAK4lK,wCAAqCz5J,EAC1CnM,KAAK6kG,iBAAc14F,GC3I3B,MAAM/F,IAASyB,EAAAA,EAAAA,wDAMf,MAAMw+J,GAMFznK,YAAYsJ,GACRlI,KAAKkI,KAAOA,EACZlI,KAAKiE,MAAQ,EACbjE,KAAK+xF,IAAM,EACX/xF,KAAK8rF,QAAU,GAQnBW,QAAQzB,GACqB,iBAAdA,EACP5kF,GAAO5C,MACF,GAAExD,KAAKkI,iCAAiClI,KAAKiE,QAC9C+mF,GACI7gE,MAAM6gE,KACdhrF,KAAK+xF,KAAO/G,EACZhrF,KAAK8rF,QAAQ5nF,KAAK8mF,GAClBhrF,KAAKiE,OAAS,GAStBqiK,YACI,OAAOtmK,KAAK+xF,IAAM/xF,KAAKiE,MAQ3BsiK,aAAap9F,GACTA,EAAQ,GAAEnpE,KAAKkI,YAAclI,KAAKsmK,YAClCn9F,EAAQ,GAAEnpE,KAAKkI,gBAAkB3E,KAAKF,UAAUrD,KAAK8rF,SAOzDj2D,QACI71B,KAAK8rF,QAAU,GACf9rF,KAAK+xF,IAAM,EACX/xF,KAAKiE,MAAQ,GASrB,MAAMuiK,GAQF5nK,YAAY6nK,EAAqBt9E,EAAO77E,GAKpCtN,KAAKmpF,MAAQA,EAObnpF,KAAK0mK,GAAKp5J,EAQVtN,KAAK2mK,WAAa,EAMlB3mK,KAAK4mK,QAAU,IAAIP,GAAkB,OAYrCrmK,KAAK6mK,iBAAmB,IAAIv/H,IAO5BtnC,KAAK8mK,qBAAuBL,EAU5BzmK,KAAK+mK,oBAAiB56J,EAEtBnM,KAAKgnK,mBAAqB,CAACj+E,EAAK/mB,KACxBhiE,KAAKmpF,QAAUJ,EAAII,OACnBnpF,KAAKinK,mBAAmBjlG,IAIhC,MAAMtvC,EAAa+zI,EAAoB5hE,YAEvCnyE,EAAWwlE,WAAWlB,2BAClBh3F,KAAKgnK,oBAEJhnK,KAAKmpF,QACNnpF,KAAKkhG,YAAcl6F,GAAMhH,KAAK6mK,iBAAiBlmG,OAAO35D,GACtD0rB,EAAW3H,GAAG+sI,GAA4B93J,KAAKkhG,aAE/ClhG,KAAKknK,sBACC,CAAClgK,EAAI6R,IAAS7Y,KAAKmnK,oBAAoBngK,EAAI6R,GACjD6Z,EAAW3H,GACPitI,GACAh4J,KAAKknK,wBASjBD,mBAAmBpuJ,GACf,GAAKA,GAcL,GARIyM,GAAQ09D,yBACJnqE,EAAK3T,WAAa2T,EAAK3T,UAAU3F,QACjCS,KAAK4mK,QAAQn6E,QAAQ5zE,EAAK3T,UAAU,GAAGuuF,KAI/CzzF,KAAK2mK,YAAc,EAEf3mK,KAAK2mK,YAAc3mK,KAAK0mK,GAAI,CAC5B,GAAIphJ,GAAQ09D,wBAAyB,CACjC,MAAMtwD,EAAa1yB,KAAK8mK,qBAAqBjiE,YAEvCuiE,EAAc,CAChBh0E,IAAKpzF,KAAKmpF,MACV,gBAAmBz2D,EAAW6uI,uBAelC,GAZI1oJ,EAAK3T,WAAa2T,EAAK3T,UAAU3F,QACjCjB,OAAOmoB,OAAO2gJ,EAAa,CACvB,qBACIvuJ,EAAK3T,UAAU,GAAGmuF,mBACtB,sBACIx6E,EAAK3T,UAAU,GAAGquF,oBACtB,eAAkB16E,EAAK3T,UAAU,GAAG1F,OAI5CQ,KAAK4mK,QAAQL,aAAaa,GAEtBpnK,KAAKmpF,MAAO,CAEZ,MAAMk+E,EAAgBrnK,KACjB8mK,qBAAqBQ,gBAAgBP,eAErC58I,MAAMk9I,KAEPD,EAAW,SACLpnK,KAAK4mK,QAAQN,YAAce,OAElC,CAEH,MAAME,EAAevnK,KAAKwnK,yBACpBC,EAAcznK,KAAK4mK,QAAQN,YAEjCtmK,KAAK+mK,eAAiBU,EAAcF,EAE/Bp9I,MAAMs9I,IAAiBt9I,MAAMo9I,KAE9BH,EAAW,gBAAsBpnK,KAAK+mK,gBAI9C1xE,GAAWiE,cAAcvb,GAAoBqpF,IAGjDpnK,KAAK0nK,uBA5DLthK,GAAO5C,MAAM,YAsErBgkK,yBACI,IAAIvjK,EAAQ,EAAG8tF,EAAM,EAIrB,IAAK,MAAM41E,KAAa3nK,KAAK6mK,iBAAiBt2J,SAAU,CACpD,MAAMq3J,EAAMD,EAAUrB,YAEjBn8I,MAAMy9I,KACP71E,GAAO61E,EACP3jK,GAAS,EACT0jK,EAAU9xI,SAIlB,OAAOk8D,EAAM9tF,EAUjBkjK,oBAAoBngK,EAAI6R,GACpB,MAAMgvJ,EAAmC,iBAAhBhvJ,EAAK4+I,OAC9B,IAAIqQ,EAAS9nK,KAAK6mK,iBAAiBtoJ,IAAIvX,IAElC8gK,GAAUD,IACXC,EAAS,IAAIzB,GAAmB,GAAEr/J,cAClChH,KAAK6mK,iBAAiB15I,IAAInmB,EAAI8gK,IAG9BD,EACAC,EAAOr7E,QAAQ5zE,EAAK4+I,QACbqQ,GACP9nK,KAAK6mK,iBAAiBlmG,OAAO35D,GAQrC0gK,iBACI1nK,KAAK4mK,QAAQ/wI,QACT71B,KAAK6mK,kBACL7mK,KAAK6mK,iBAAiBx+H,QAE1BroC,KAAK2mK,WAAa,EAMtBtiF,UAEI,MAAM3xD,EAAa1yB,KAAK8mK,qBAAqBjiE,YAE7CnyE,EAAWwlE,WAAWjB,8BAClBj3F,KAAKgnK,oBACJhnK,KAAKmpF,QACNz2D,EAAWzE,IACP+pI,GACAh4J,KAAKknK,uBACTx0I,EAAWzE,IACP6pI,GACA93J,KAAKkhG,eAaN,MAAM6mE,GAOjBnpK,YAAY8zB,EAAYplB,GAOpBtN,KAAK0mK,GAAKp5J,EAENA,EAAI,GACJlH,GAAO+L,KAAM,0CAAyC7E,aAc1DtN,KAAK2mK,WAAa,EAOlB3mK,KAAK6kG,YAAcnyE,EAQnB1yB,KAAKgoK,mBACC,IAAI3B,GAAkB,wBAQ5BrmK,KAAKioK,qBACC,IAAI5B,GAAkB,0BAQ5BrmK,KAAKkoK,mBACC,IAAI7B,GAAkB,wBAQ5BrmK,KAAKmoK,qBACC,IAAI9B,GAAkB,0BAQ5BrmK,KAAKooK,gBACC,IAAI/B,GAAkB,oBAQ5BrmK,KAAKqoK,kBACC,IAAIhC,GAAkB,sBAQ5BrmK,KAAKsoK,oBACC,IAAIjC,GAAkB,qBAQ5BrmK,KAAKuoK,iBACC,IAAIlC,GAAkB,sBAQ5BrmK,KAAKwoK,mBACC,IAAInC,GAAkB,wBAO5BrmK,KAAKyoK,cAAgB,IAAIpC,GAAkB,oBAQ3CrmK,KAAK0oK,oBACC,IAAIrC,GAAkB,2BAO5BrmK,KAAK2oK,aAAe,IAAItC,GAAkB,mBAQ1CrmK,KAAK4oK,mBACC,IAAIvC,GAAkB,0BAQ5BrmK,KAAK6oK,uBACC,IAAIxC,GAAkB,iBAQ5BrmK,KAAK8oK,uBACC,IAAIzC,GAAkB,wBAO5BrmK,KAAK+oK,sBACC,IAAI1C,GAAkB,gBAQ5BrmK,KAAKgpK,sBACC,IAAI3C,GAAkB,uBAQ5BrmK,KAAKipK,OAAS,IAAI5C,GAAkB,sBAEpCrmK,KAAKkpK,2BAAwB/8J,EAE7BnM,KAAKmpK,qBAAuBtwJ,IACxB7Y,KAAKinK,mBAAmBpuJ,GACxB7Y,KAAKopK,kCAAkCvwJ,IAE3C6Z,EAAW3H,GACPitI,GACAh4J,KAAKmpK,sBAETnpK,KAAKqpK,oBAAsB,KACvBjjK,GAAO4gD,MAAM,uCACbhnD,KAAK0nK,iBACL1nK,KAAKsnK,gBAAgBI,iBACrB1nK,KAAKspK,gBAAgB5B,kBAEzBh1I,EAAW3H,GACP+sI,GACA93J,KAAKqpK,qBAETrpK,KAAKupK,uBAAyB,CAACjI,EAAWh/D,MAIpB,IAAdA,IACAl8F,GAAO+L,KAAK,+BACZnS,KAAKwpK,sBAGb92I,EAAW3H,GACP+sI,GACA93J,KAAKupK,wBAETvpK,KAAKsnK,gBACC,IAAId,GAAmBxmK,MAAM,EAAiBsN,GAEpDtN,KAAKspK,gBACC,IAAI9C,GAAmBxmK,MAAM,EAAgBsN,IAtN/ClH,GAAO+L,KAAK,uCA+NpB80J,mBAAmBpuJ,GAEf,IAAKA,EAGD,YAFAzS,GAAO5C,MAAM,YAKjB,MAAM2lF,EAAQnpF,KAAK6kG,YAAYhE,cACzB4oE,EAAWzpK,KAAK6kG,YAAY08D,sBAElC,IAAKp4E,GAASsgF,EAAW,EAKrB,OAUJ,MAAMn7E,EAAUz1E,EAAKy1E,QACf90C,EAAY3gC,EAAK2gC,UACjBm1C,EAAa91E,EAAK81E,WAClBvoB,EAAYvtD,EAAK41E,UACjBD,EAAa31E,EAAK21E,WAExB,GAAKF,EAIE,GAAK90C,EAIL,GAAKm1C,EAIL,GAAKvoB,EAIL,GAAKooB,GA2DZ,GArDAxuF,KAAKgoK,mBAAmBv7E,QAAQ6B,EAAQ3qB,MAAM4qB,QAC9CvuF,KAAKioK,qBAAqBx7E,QAAQ6B,EAAQ3qB,MAAM9wC,UAEhD7yB,KAAKkoK,mBAAmBz7E,QAAQ6B,EAAQzqB,MAAM0qB,QAC9CvuF,KAAKmoK,qBAAqB17E,QAAQ6B,EAAQzqB,MAAMhxC,UAE5CvN,GAAQg9D,gCACRtiF,KAAKooK,gBAAgB37E,QAAQjzC,EAAU+0C,QACvCvuF,KAAKqoK,kBAAkB57E,QAAQjzC,EAAU3mB,WAG7C7yB,KAAKuoK,iBAAiB97E,QAAQkC,EAAWJ,QACzCvuF,KAAKwoK,mBAAmB/7E,QAAQkC,EAAW97D,UAC3C7yB,KAAKsoK,oBAAoB77E,QAAQkC,EAAW5+D,OAE5C/vB,KAAKipK,OAAOx8E,QAAQ5zE,EAAK2+I,mBAErBpxF,IACApmE,KAAKyoK,cAAch8E,QACfzsF,KAAK0pK,sBACDtjG,GAAW,EAAoB43B,GAAU3jE,SACjDr6B,KAAK0oK,oBAAoBj8E,QACrBzsF,KAAK0pK,sBACDtjG,GAAW,EAAoB43B,GAAU1jE,UAEjDt6B,KAAK2oK,aAAal8E,QACdzsF,KAAK0pK,sBACDtjG,GAAW,EAAkB43B,GAAU3jE,SAC/Cr6B,KAAK4oK,mBAAmBn8E,QACpBzsF,KAAK0pK,sBACDtjG,GAAW,EAAkB43B,GAAU1jE,WAG/Ck0D,IACAxuF,KAAK6oK,uBAAuBp8E,QACxBzsF,KAAK2pK,yBACDn7E,GAAY,EAAoBwP,GAAU3jE,SAElDr6B,KAAK8oK,uBAAuBr8E,QACxBzsF,KAAK2pK,yBACDn7E,GAAY,EAAoBwP,GAAU1jE,UAElDt6B,KAAK+oK,sBAAsBt8E,QACvBzsF,KAAK2pK,yBACDn7E,GAAY,EAAkBwP,GAAU3jE,SAEhDr6B,KAAKgpK,sBAAsBv8E,QACvBzsF,KAAK2pK,yBACDn7E,GAAY,EAAkBwP,GAAU1jE,WAGpDt6B,KAAK2mK,YAAc,EAEf3mK,KAAK2mK,YAAc3mK,KAAK0mK,GAAI,CAE5B,MAAMU,EAAc,CAChBh0E,IAAKjK,EACL,gBAAmBsgF,GAGnB5wJ,EAAK3T,WAAa2T,EAAK3T,UAAU3F,QACjCjB,OAAOmoB,OAAO2gJ,EAAa,CACvB,qBACIvuJ,EAAK3T,UAAU,GAAGmuF,mBACtB,sBACIx6E,EAAK3T,UAAU,GAAGquF,oBACtB,eAAkB16E,EAAK3T,UAAU,GAAG1F,OAI5CQ,KAAKgoK,mBAAmBzB,aAAaa,GACrCpnK,KAAKioK,qBAAqB1B,aAAaa,GAEvCpnK,KAAKkoK,mBAAmB3B,aAAaa,GACrCpnK,KAAKmoK,qBAAqB5B,aAAaa,GAEnC9hJ,GAAQg9D,gCACRtiF,KAAKooK,gBAAgB7B,aAAaa,GAClCpnK,KAAKqoK,kBAAkB9B,aAAaa,IAExCpnK,KAAKuoK,iBAAiBhC,aAAaa,GACnCpnK,KAAKwoK,mBAAmBjC,aAAaa,GACrCpnK,KAAKsoK,oBAAoB/B,aAAaa,GAEtCpnK,KAAKyoK,cAAclC,aAAaa,GAC3Bj9I,MAAMnqB,KAAK0oK,oBAAoBpC,cAChCtmK,KAAK0oK,oBAAoBnC,aAAaa,GAE1CpnK,KAAK2oK,aAAapC,aAAaa,GAC1Bj9I,MAAMnqB,KAAK4oK,mBAAmBtC,cAC/BtmK,KAAK4oK,mBAAmBrC,aAAaa,GAGzCpnK,KAAK6oK,uBAAuBtC,aAAaa,GACpCj9I,MAAMnqB,KAAK8oK,uBAAuBxC,cACnCtmK,KAAK8oK,uBAAuBvC,aAAaa,GAE7CpnK,KAAK+oK,sBAAsBxC,aAAaa,GACnCj9I,MAAMnqB,KAAKgpK,sBAAsB1C,cAClCtmK,KAAKgpK,sBAAsBzC,aAAaa,GAG5CpnK,KAAKipK,OAAO1C,aAAaa,GAEzB/xE,GAAWiE,cAAcvb,GAAoBqpF,IAE7CpnK,KAAK0nK,uBA/GLthK,GAAO5C,MAAM,sBAJb4C,GAAO5C,MAAM,uBAJb4C,GAAO5C,MAAM,wBAJb4C,GAAO5C,MAAM,uBAJb4C,GAAO5C,MAAM,gBA8IrBmmK,yBAAyBC,EAAiBj3I,EAASorE,GAC/C,IAAI8rE,EAAgB,EAChBC,EAAY,EAChB,MAAMC,EAAO/pK,KAAK6kG,YAAY5H,WAE9B,IAAK,MAAM+sE,KAAU1rK,OAAOmE,KAAKmnK,GAC7B,GAAIj3I,EAAUq3I,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAM1vE,EACA1nE,EACI,KACA3yB,KAAK6kG,YAAYjyE,mBAAmBo3I,GACxCC,EAAmBL,EAAgBI,GAGzC,IAAKr3I,GAAW0nE,IAAgB4vE,EAAkB,CAC9C,MAAMC,EAAgBlqK,KAAKmqK,6BACvBF,EAAkB5vE,EAAa0D,GAE9B5zE,MAAM+/I,KACPL,GAAiBK,EACjBJ,GAAa,IAM7B,OAAOD,EAAgBC,EAc3BK,6BAA6BC,EAAQ/vE,EAAa0D,GAC9C,IAAIvvF,EAAQlQ,OAAOmE,KAAK2nK,GAAQ/9J,KAAIiC,GAAQvD,OAAOuD,KAC/Cw1F,EAAc,KAIlB,MAAM/a,EAAM/oF,KAAK6kG,YAAY8zD,0BAEzBt+D,GACAyJ,EAAczJ,EAAY0J,qBAAqBxP,IAC3CuP,IACAt1F,EACMA,EAAM5C,QACJ0C,GAAQw1F,EAAYx0F,MAChBshB,IACKA,EAAM+oE,WACA/oE,EAAM61H,YAAcn4I,GACpBsiB,EAAMmtE,YAAcA,SAG/C+F,EAAc9jG,KAAK6kG,YAAYnQ,eAAeH,IAC9C/lF,EACMA,EAAM5C,QACJ0C,GAAQw1F,EAAYx0F,MAChBshB,IACKA,EAAM+oE,WACA5Q,EAAI4L,aAAa/jE,KAAWtiB,GAC5BsiB,EAAMmtE,YAAcA,OAG/C,IAAI8rE,EAAgB,EAChBQ,EAAgB,EAEpB,IAAK,MAAM/7J,KAAQE,EAAO,CACtB,MAAM87J,EACAv/J,OAAOq/J,EAAO97J,GAAMyuB,QAAUhyB,OAAOq/J,EAAO97J,GAAMwuB,QAGnD3S,MAAMmgJ,IAAmBA,EAAiB,IAC3CT,GAAiBS,EACjBD,GAAiB,GAIzB,OAAOR,EAAgBQ,EAa3BX,sBAAsBtjG,EAAWzzC,EAASorE,GACtC,IAAIwsE,EAAa,EACbT,EAAY,EAChB,MAAMC,EAAO/pK,KAAK6kG,YAAY5H,WAE9B,IAAK,MAAM+sE,KAAU1rK,OAAOmE,KAAK2jE,GAC7B,GAAIzzC,EAAUq3I,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAM1vE,EACA1nE,EACI,KAAO3yB,KAAK6kG,YAAYjyE,mBAAmBo3I,GAC/CQ,EAAYpkG,EAAU4jG,GAG5B,IAAKr3I,GAAW0nE,IAAgBmwE,EAAW,CACvC,MAAMC,EACAzqK,KAAK0qK,0BACHF,EAAWnwE,EAAa0D,GAE3B5zE,MAAMsgJ,KACPF,GAAcE,EACdX,GAAa,IAM7B,OAAOS,EAAaT,EAcxBY,0BAA0BN,EAAQ/vE,EAAa0D,GAC3C,IAAIvvF,EAAQlQ,OAAOmE,KAAK2nK,GAAQ/9J,KAAIiC,GAAQvD,OAAOuD,KAC/Cw1F,EAAc,KAIlB,MAAM/a,EAAM/oF,KAAK6kG,YAAY8zD,0BAEzBt+D,GACAyJ,EAAczJ,EAAY0J,qBAAqBxP,IAC3CuP,IACAt1F,EACMA,EAAM5C,QACJ0C,GAAQw1F,EAAYx0F,MAChBshB,IAAUA,EAAM+oE,WACT/oE,EAAM61H,YAAcn4I,GACpBsiB,EAAMmtE,YAAcA,SAG3C+F,EAAc9jG,KAAK6kG,YAAYnQ,eAAeH,IAC9C/lF,EACMA,EAAM5C,QACJ0C,GAAQw1F,EAAYx0F,MAChBshB,IAAUA,EAAM+oE,WACT5Q,EAAI4L,aAAa/jE,KAAWtiB,GAC5BsiB,EAAMmtE,YAAcA,OAG3C,IAAIwsE,EAAa,EACbF,EAAgB,EAEpB,IAAK,MAAM/7J,KAAQE,EAAO,CACtB,MAAMm8J,EAAc5/J,OAAOq/J,EAAO97J,KAG7B6b,MAAMwgJ,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,GAIzB,OAAOE,EAAaF,EAUxBjB,kCAAkCvwJ,GAC9B,IAAKA,IAASA,EAAK3T,YAAc2T,EAAK3T,UAAU3F,OAC5C,OAEJ,MAAMqrK,EAAiB,CACnBx3E,IAAKv6E,EAAK3T,UAAU,GAAGkuF,IACvB,qBAAwBv6E,EAAK3T,UAAU,GAAGmuF,mBAC1C,sBAAyBx6E,EAAK3T,UAAU,GAAGquF,oBAC3C,eAAkB16E,EAAK3T,UAAU,GAAG1F,MAGnCQ,KAAKkpK,uBAA0B96D,IAAAA,CAAQw8D,EAAgB5qK,KAAKkpK,yBAC7DlpK,KAAKkpK,sBAAwB0B,EAC7Bv1E,GAAWiE,crGhcZ,CACH95F,KAAMy9E,GACNnuE,OAAQ,kBACRyyC,WqG6buDqpH,KAW3DpB,oBACIxpK,KAAK0nK,iBACL1nK,KAAKsnK,gBAAgBI,iBAOzBA,iBACI1nK,KAAKgoK,mBAAmBnyI,QACxB71B,KAAKioK,qBAAqBpyI,QAE1B71B,KAAKkoK,mBAAmBryI,QACxB71B,KAAKmoK,qBAAqBtyI,QAE1B71B,KAAKooK,gBAAgBvyI,QACrB71B,KAAKqoK,kBAAkBxyI,QAEvB71B,KAAKuoK,iBAAiB1yI,QACtB71B,KAAKwoK,mBAAmB3yI,QACxB71B,KAAKsoK,oBAAoBzyI,QAEzB71B,KAAKyoK,cAAc5yI,QACnB71B,KAAK0oK,oBAAoB7yI,QACzB71B,KAAK2oK,aAAa9yI,QAClB71B,KAAK4oK,mBAAmB/yI,QAExB71B,KAAK6oK,uBAAuBhzI,QAC5B71B,KAAK8oK,uBAAuBjzI,QAC5B71B,KAAK+oK,sBAAsBlzI,QAC3B71B,KAAKgpK,sBAAsBnzI,QAE3B71B,KAAKipK,OAAOpzI,QAEZ71B,KAAK2mK,WAAa,EAMtBtiF,UACIrkF,KAAK6kG,YAAY52E,IACb6pI,GACA93J,KAAKqpK,qBACTrpK,KAAK6kG,YAAY52E,IACb+pI,GACAh4J,KAAKmpK,sBACTnpK,KAAK6kG,YAAY52E,IACb6pI,GACA93J,KAAKupK,wBACTvpK,KAAKsnK,gBAAgBjjF,UACrBrkF,KAAKspK,gBAAgBjlF,qCC9+Bd,MAAMwmF,GAQjBjsK,YAAY8zB,GACR1yB,KAAKgiE,MAAQ,CACTurE,MAAO,GAIPu9B,kBAAmB,MAGvB,MAAMz8I,EAASqE,EAAWuqE,WAE1Bj9F,KAAKgiE,MAAMurE,MAAMl/G,GAAU,IAAI08I,KAAJ,CAAiB18I,EAAQ,MAAM,GAC1DruB,KAAK0yB,WAAaA,EAElBA,EAAW1F,iBACPuqE,EACAv3F,KAAKgrK,mBAAmBhoK,KAAKhD,OACjC0yB,EAAW1F,iBACPuqE,GACAv3F,KAAKirK,YAAYjoK,KAAKhD,OAC1B0yB,EAAW1F,iBACPuqE,GACAv3F,KAAKkrK,aAAaloK,KAAKhD,OAC3B0yB,EAAW1F,iBACPuqE,EACAv3F,KAAKmrK,qBAAqBnoK,KAAKhD,OACnC0yB,EAAW1F,iBACPuqE,GACAv3F,KAAKorK,uBAAuBpoK,KAAKhD,OACjC0yB,EAAW4iE,MACX5iE,EAAW4iE,KAAKh+E,YACZ2iF,KAAAA,uBACAj6F,KAAKqrK,aAAaroK,KAAKhD,OAanCgrK,mBAAmBF,GACf,MAAMQ,EACAtrK,KAAKgiE,MAAMurE,MAAMvtI,KAAKgiE,MAAM8oG,mBAC5BS,EAAqBvrK,KAAKgiE,MAAMurE,MAAMu9B,GAE5CQ,GAAsBA,EAAmB38I,oBAAmB,GAC5D48I,GAAsBA,EAAmB58I,oBAAmB,GAC5D3uB,KAAKgiE,MAAM8oG,kBAAoBA,EAWnCG,YAAY58I,EAAQgsE,GACZA,EAAYyL,YAIX9lG,KAAKgiE,MAAMurE,MAAMl/G,KAClBruB,KAAKgiE,MAAMurE,MAAMl/G,GAAU,IAAI08I,KAAJ,CAAiB18I,EAAQgsE,EAAY7qE,mBAYxE07I,aAAa78I,GACT,MAAMm9I,EAAYxrK,KAAKgiE,MAAMurE,MAAMl/G,GAE/Bm9I,GACAA,EAAUv7I,gBAYlBk7I,qBAAqB98I,EAAQoB,GACzB,MAAM+7I,EAAYxrK,KAAKgiE,MAAMurE,MAAMl/G,GAE/Bm9I,GACAA,EAAU/8I,eAAegB,GAYjC27I,uBAAuB/8I,EAAQxV,GAC3B,MAAM2yJ,EAAYxrK,KAAKgiE,MAAMurE,MAAMl/G,GAE/Bm9I,GACAA,EAAUn7I,oBAAoBxX,EAAKyX,iBAAkBzX,EAAK0X,UAWlEs4C,WACI,OAAO7oE,KAAKgiE,MAAMurE,MAStB89B,aAAaI,GACT,IAAK,MAAMp9I,KAAUo9I,EAAU,CAC3B,IAAIC,EACJ,MAAMC,EAAiB3rK,KAAK0yB,WAAWE,mBAAmBvE,GAGrDs9I,GAAmBA,EAAe7lE,aAC/B9lG,KAAKgiE,MAAMurE,MAAMl/G,IACjBq9I,EAAuB1rK,KAAKgiE,MAAMurE,MAAMl/G,GAEnCq9I,EAAqBl8I,kBACtBk8I,EACKj9I,eAAeg9I,EAASp9I,GAAQC,eAGzCo9I,EAAuB,IAAIX,KAAJ,CACnB18I,EAAQo9I,EAASp9I,GAAQC,aAC7BtuB,KAAKgiE,MAAMurE,MAAMl/G,GAAUq9I,EAC3BA,EAAqBz7I,kBAI7By7I,EAAqB98I,yBACf68I,EAASp9I,GAAQO,yBAEvB88I,EAAqBv7I,qBAAqBs7I,EAASp9I,GAAQ+B,+CClLvE,MAAMhqB,GAASlE,EAAAA,MAAAA,mDAUA,SAAS0pK,GAAmBl5I,GAEvC1yB,KAAKjD,SAAW,GAEhBiD,KAAK0yB,WAAaA,EAClB1yB,KAAK0yB,WAAWm5I,mBACZ,WAAY7rK,KAAK8rK,gBAAgB9oK,KAAKhD,OAG9C4rK,GAAmBrtK,UAAUutK,gBACvB,SAAS/uK,EAAUgvK,EAAa9iD,GAC9B,IAAKjpH,KAAK0yB,WAAW8yF,QAAQyD,GAKzB,YAJA7iH,GAAO6lB,KACF,8CAA6ClvB,IAC9CksH,GAKR,MAAM9iH,EAAM,GAEZpJ,EAASg1G,SAASpvG,SAAQ6J,IAEtB,MAAMtE,EAAOsE,EAAU+0C,WAAWr5C,KAC5BwF,EAAUlB,EAAU/C,MAEtBzJ,KAAKjD,SAASmL,KAAUwF,IACxB1N,KAAKjD,SAASmL,GAAQwF,EACtBtH,GAAO+L,KAAM,OAAMjK,cAAiBwF,KAEpCvH,EAAIjC,KAAK,CACL8C,GAAI,oBACJwF,UAAWtE,EACXwF,QAAAA,QAMRvH,EAAI5G,OAAS,GACb81F,GAAWwD,QAAQt1F,KAAKF,UAAU8C,KAW9CylK,GAAmBrtK,UAAUytK,oBAAsB,SAASC,GACxD,OAAOjsK,KAAKjD,SAASkvK,IC5DlB,MAAMC,GAAmB,YAMnBC,GAAmB,YAOnBC,GAAc,OAMdC,GAAW,KAMXC,GAAY,MAMZC,GAAgB,UAOhBC,GAAiB,WAMjBC,GAAe,SAOfC,GAAsB,sBAOtBC,GAAuB,+BCvD9BvmK,IAASyB,EAAAA,EAAAA,2DAMT+kK,GAAgB,gBAMP,MAAMC,WAA+BllE,GAWhD/oG,YAAYkuK,EAAYx+I,EAAawrE,GACjCra,QAEAz/E,KAAK8sK,WAAaA,EAClB9sK,KAAKsuB,YAAcA,EACnBtuB,KAAK85F,SAAWA,EAShB95F,KAAKssB,WAAQngB,EAMjBtH,OACQ7E,KAAKssB,QAAUygJ,IACZ/sK,KAAKssB,QAAUygJ,GAMtB/sK,KAAKgtK,aAAa,QALd5mK,GAAO6lB,KAAK,mDAWpB5rB,QAGQL,KAAKssB,QAAUygJ,IACZ/sK,KAAKssB,QAAUygJ,IACf/sK,KAAKssB,QAAUygJ,IACf/sK,KAAKssB,QAAUygJ,GAMtB/sK,KAAKgtK,aAAa,SALd5mK,GAAO6lB,KAAK,yCAgBpBghJ,SAAS5pE,EAAU6pE,GACf,GAAI7pE,IAAarjG,KAAKssB,MAClB,OAGJ,MAAM6gJ,EAAWntK,KAAKssB,MAEtBtsB,KAAKssB,MAAQ+2E,EACbrjG,KAAK6sF,aAAa/gE,KAAK8gJ,GACnB,CACI7jK,QAAS/I,KAAK8sK,WACdI,cAAAA,EACAC,SAAAA,EACA9pE,SAAUrjG,KAAKssB,MACfgC,YAAatuB,KAAKsuB,cAW9B8+I,iBAAiBn1J,GACbjY,KAAKsX,YAAYs1J,GAAe30J,GAQpCo1J,oBAAoBp1J,GAChBjY,KAAKkY,eAAe00J,GAAe30J,GASvC+0J,aAAal+J,GACT,MAAMyyC,EAAa,CACf,MAAS,kCACT,OAAUzyC,EACVw+J,WAAYttK,KAAK8sK,YAGrBvrH,EAAWgsH,YAAcvtK,KAAKsuB,YAE9B,MAAMmkC,GAAKxS,EAAAA,GAAAA,KAAI,CACX6b,GAAI97D,KAAK85F,SAAS4oB,YAClBljH,KAAM,QACL4B,EAAE,QAASmgD,GACXoG,KAELvhD,GAAO4gD,MAAO,GAAEl4C,yBAA+B2jD,EAAG/K,UAClD1nD,KAAK85F,SAASlmC,WAAWtF,OACrBmE,GACA,SACAjvD,IACI4C,GAAO5C,MACF,aAAYsL,kCAAwCtL,GACzDxD,KAAKitK,SAASF,QCxJ9B,MAAM3mK,IAASyB,EAAAA,EAAAA,+CAUA,MAAM2lK,GAOjB5uK,YAAYk7F,GACR95F,KAAK85F,SAAWA,EAChB95F,KAAK6sF,aAAeiN,EAASjN,aAC7BzmF,GAAO4gD,MAAM,uBACbhnD,KAAK2mI,SAAW,GAEhB3mI,KAAKytK,2BAA6BztK,KAAK0tK,oBAAoB1qK,KAAKhD,MAKhE85F,EAASkD,oBAAoB,uBACzBh9F,KAAK2tK,oBAAoB3qK,KAAKhD,OAStC2tK,oBAAoB3wK,GAChB,MAAMukD,EAAavkD,EAAKukD,WAExB,IAAKA,EACD,OAGJn7C,GAAO4gD,MAAM,+BAAgCzF,GAE7C,MAAM8hD,EAAW9hD,EAAWj1B,MAE5B,GAAI+2E,IAAarjG,KAAKssB,MAItB,OAAQ+2E,GACR,KAAKuqE,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GAAwB,CACzB,MAAM7kK,EAAUw4C,EAAW+rH,WAE3B,IAAKvkK,EACD,OAIJ,MAAM2C,EAAU1L,KAAK2mI,SAAS59H,GAE1B2C,EACAA,EAAQuhK,SAAS5pE,EAAU9hD,EAAWssH,gBAEtCznK,GAAO6lB,KAAK,kCAAmCljB,KAc3D+kK,wBAAwBhB,EAAYx+I,GAChC,GAAItuB,KAAK2mI,SAASmmC,GAId,OAHA1mK,GAAO6lB,KAAK,uDACR6gJ,GAEG,IAAIhnK,MAAM8nK,IAGrB,MAAMliK,EAAU,IAAImhK,GAChBC,EAAYx+I,EAAatuB,KAAK85F,UAMlC,OAJApuF,EAAQ0hK,iBAAiBptK,KAAKytK,4BAE9BztK,KAAK2mI,SAASmmC,GAAcphK,EAErBA,EASXgiK,oBAAoBr1I,GAChB,MAAMtvB,EAAUsvB,EAAMtvB,QAEtB,GAAIsvB,EAAMgrE,WAAauqE,IAChBv1I,EAAMgrE,WAAauqE,GAAwB,CAC9C,MAAMliK,EAAU1L,KAAK2mI,SAAS59H,GAE9B,IAAK2C,EAID,YAHAtF,GAAO5C,MAAM,6CACTuF,GAKR2C,EAAQ2hK,oBAAoBrtK,KAAKytK,mCAC1BztK,KAAK2mI,SAAS59H,GAGzB/I,KAAK6sF,aAAa/gE,KACdmuE,KAAAA,mCACA5hE,ICtHZ,MAAMjyB,IAASyB,EAAAA,EAAAA,iDAEFkmK,GAA+B,aAM7B,MAAMC,WAA2B7tB,GAI5CvhJ,cACI6gF,QAUAz/E,KAAKiuK,WAAa,IAAI3mI,IAMtBtnC,KAAK85F,SAAW,KAMhB95F,KAAKkuK,kBAAoB,GAMzBluK,KAAKmuK,mBAAqB,GAU1BnuK,KAAKouK,aAAe,IAAI9mI,IAS5B+mI,gCACQruK,KAAK85F,UACL95F,KAAK85F,SAASkY,uBACV+7D,GACA,CAAEtkK,MAAOlG,KAAKF,UAAUrD,KAAKkuK,qBAWzCI,+BAA+BpsE,GAAY,MACvC,MAAMyjB,EAAQ,UAAG3lH,KAAK85F,gBAAR,aAAG,EAAe+vB,gBAAgB3nB,GAEhD,OAAOtgB,QAAQ+jC,GAAYA,EAASr2G,MAAKtS,GAAQA,EAAKu8B,UAAYw0I,MAOtEQ,YAAYx0E,GACR,MAAMy0E,EAAcxuK,KAAK85F,SAEzB95F,KAAK85F,SAAWC,EACZy0E,IACAA,EAAYzlD,uBACR,aAAc/oH,KAAKyuK,mBACvBD,EAAYzlD,uBACR,aAAc/oH,KAAK0uK,mBACvBF,EAAYzlD,uBACR,YAAa/oH,KAAK2uK,mBAClBrjD,GAAAA,iCACAtrH,KAAK4uK,oBACEJ,EAAYzlD,uBACXglD,GAA8B/tK,KAAK4uK,oBAC3C5uK,KAAK6uK,oBACEL,EAAYthJ,oBACX+sE,KAAAA,gBAA4Bj6F,KAAK6uK,sBAG7C90E,IACIuxB,GAAAA,gCACAtrH,KAAK8uK,2BAA2B/0E,GAChC/5F,KAAKquK,kCAKLruK,KAAKyuK,kBAAoB,CAACzxK,EAAMo/C,KAC5Bp8C,KAAK6sF,aAAa/gE,KACdg+H,GACA1tG,EAAMm4C,GAAgC,SAAfv3F,EAAKyM,QAEpCswF,EAAKiD,oBAAoB,aAAch9F,KAAKyuK,mBAE5CzuK,KAAK0uK,kBAAoB,CAAC1xK,EAAMo/C,KAC5Bp8C,KAAK6sF,aAAa/gE,KACdg+H,GACA1tG,EAAMm4C,GAAgC,SAAfv3F,EAAKyM,QAEpCswF,EAAKiD,oBAAoB,aAAch9F,KAAK0uK,mBAE5C1uK,KAAK2uK,kBAAoB,CAAC3xK,EAAMo/C,KAC5Bp8C,KAAK6sF,aAAa/gE,KACdg+H,GACA1tG,EAAMp/C,EAAKyM,QAEnBswF,EAAKiD,oBAAoB,YAAah9F,KAAK2uK,qBAWvDG,2BAA2B/0E,GACvB,MAAMg1E,EAAsB,CAAC7sE,EAAY3J,KACrCv4F,KAAK6sF,aAAa/gE,KACdg+H,GACA5nD,EACA3N,GACAgE,IAEFy2E,EAAsB,CAAC9sE,EAAY3J,KACrCv4F,KAAK6sF,aAAa/gE,KACdg+H,GACA5nD,EACA3N,GACAgE,IAIRv4F,KAAKyuK,kBAAoB,CAACzxK,EAAMo/C,KACvBp8C,KAAKsuK,+BAA+BlyH,IACrC2yH,EAAoB3yH,EAAqB,SAAfp/C,EAAKyM,QAGvCswF,EAAKiD,oBAAoB,aAAch9F,KAAKyuK,mBAE5CzuK,KAAK0uK,kBAAoB,CAAC1xK,EAAMo/C,KACvBp8C,KAAKsuK,+BAA+BlyH,IACrC4yH,EAAoB5yH,EAAqB,SAAfp/C,EAAKyM,QAGvCswF,EAAKiD,oBAAoB,aAAch9F,KAAK0uK,mBAE5C,MAAMO,EAAqB,CAAC/sE,EAAYnE,KACpC/9F,KAAK6sF,aAAa/gE,KACdg+H,GACA5nD,EAAYnE,IAGpB/9F,KAAK2uK,kBAAoB,CAAC3xK,EAAMo/C,KACvBp8C,KAAKsuK,+BAA+BlyH,IACrC6yH,EAAmB7yH,EAAMp/C,EAAKyM,QAGtCswF,EAAKiD,oBAAoB,YAAah9F,KAAK2uK,mBAE3C3uK,KAAK4uK,mBAAqB,CAAC5xK,EAAM8sH,KAC7B,MAAM5nB,EAAa4nB,GACb,MAAErgH,GAAUzM,EACZkyK,EAAiB3rK,KAAK+G,MAAMb,GAC5B0lK,EAAqBnvK,KAAKsuK,+BAA+BpsE,GACzDktE,EACApvK,KAAKmuK,mBAAmBjsE,KAAgBliG,KAAKmuK,mBAAmBjsE,GAAc,IAEpF,IAAK,MAAMiyB,KAAc71H,OAAOmE,KAAKysK,GAAiB,CAClD,MAAMpxF,EAAYkiE,GAA2B7rB,GACvCk7C,EAAgBztF,QAAQstF,EAAe/6C,GAAY57B,OACnD+2E,EAAiBF,EAAoBj7C,KACnCi7C,EAAoBj7C,GAAc,CAAEA,WAAAA,IAExCm7C,EAAe/2E,QAAU82E,IACzBC,EAAe/2E,MAAQ82E,EACnBF,GAAsBrxF,IAAcyW,GACpCw6E,EAAoB7sE,EAAYmtE,GAEhCL,EAAoB9sE,EAAYmtE,IAIxC,MAAME,EAAeL,EAAe/6C,GAAYp2B,UAE5CuxE,EAAevxE,YAAcwxE,IAC7BD,EAAevxE,UAAYwxE,EAC3BJ,GAAsBF,EAAmB/sE,EAAYqtE,IAK7D,MAAMC,EAAiBlxK,OAAOmE,KAAKysK,GAEnC,IAAK,MAAM/6C,KAAc71H,OAAOmE,KAAK2sK,IACW,IAAxCI,EAAerqK,QAAQgvH,WAChBi7C,EAAoBj7C,IAIvCp6B,EAAKiD,oBAAoB,aAAch9F,KAAK4uK,oBAG5C5uK,KAAK6uK,mBAAqBvoH,IACtB,MAAM47C,EAAaniD,GAAAA,QAAAA,mBAA2BuG,GAI9C,UAFOtmD,KAAKmuK,mBAAmBjsE,GAE3BopB,GAAAA,+BACA,IAAK,MAAQphH,EAAKT,KAAWzJ,KAAKiuK,WAAW7lI,UACrC3+B,IAAUy4F,UACHliG,KAAKouK,aAAalkK,IAMzC6vF,EAAK/sE,iBAAiBitE,KAAAA,gBAA4Bj6F,KAAK6uK,oBAU3DY,oCAAoCvtE,EAAYpkB,GAC5C,MAAM4xF,EAAoB1vK,KAAKmuK,mBAAmBjsE,GAElD,IAAKwtE,EACD,OAAO,KAGX,IAAK,MAAM7pC,KAAcvnI,OAAOiS,OAAOm/J,GAGnC,GAFmB1vB,GAA2Bna,EAAW1R,cAEtCr2C,EACf,OAAO+nD,EAIf,OAAO,KAMXsJ,iBAAiB/jB,EAAOttC,GACpB,MAAM6xF,EAAyB,KAC3B,GAAI3vK,KAAK85F,SACL,OAAO95F,KAAK85F,SAAS0vB,qBAAqB4B,EAAOttC,GAErD13E,GAAO5C,MAAM,mDAGjB,GAAI8nH,GAAAA,+BAA6C,CAC7C,MAAMskD,EAAe5vK,KAAK85F,SAAS+vB,gBAAgBuB,GAEnD,IAAKwkD,EACD,MAAM,IAAI9pK,MAAO,8CAA6CslH,KAGlE,IAAKprH,KAAKsuK,+BAA+BljD,GACrC,OAAOukD,IAMX,MAAME,EAAY,GACZC,EAAsB9vK,KAAKyvK,oCAAoCrkD,EAAOttC,GAK5E,GAAIA,IAAcyW,GACds7E,EAAUt3E,OAAQu3E,GAAsBA,EAAoBv3E,UACzD,IAAIza,IAAcyW,GAUrB,MAAM,IAAIzuF,MAAO,2BAA0Bg4E,KAVL,CACtC+xF,EAAUt3E,OAAQu3E,GAAsBA,EAAoBv3E,MAC5Ds3E,EAAU9xE,UAAY+xE,EAAsBA,EAAoB/xE,eAAY5xF,EAE5E,MAAMu9G,EAAgB1H,GAA2B4tD,EAAc,+BAE3DlmD,EAAcnqH,OAAS,IACvBswK,EAAUjmD,UAAYF,EAAc,GAAGjgH,QAM/C,OAAOomK,EAGX,OAAOF,IAMXtvB,kBAAkBj1B,EAAO+I,GACrB,OAAOn0H,KAAKmuK,mBAAmB/iD,GAASprH,KAAKmuK,mBAAmB/iD,GAAO+I,QAAchoH,EAMzFi0I,aAAa9xI,GACT,OAAOtO,KAAKiuK,WAAW1vJ,IAAIjQ,GAS/BsvH,aAAatvH,EAAM4zF,GACf,GAAoB,iBAAT5zF,EACP,MAAM,IAAIgd,UAAW,QAAOhd,uBAKhC,MAAMyhK,EAAgB/vK,KAAKiuK,WAAW1vJ,IAAIjQ,GAEtCyhK,GAAiBA,IAAkB7tE,GACnC97F,GAAO5C,MAAO,+BAA8BusK,QAAoB7tE,KAEpEliG,KAAKiuK,WAAW9gJ,IAAI7e,EAAM4zF,GAU9B8tE,mBAAmB77C,EAAY57B,GACtBv4F,KAAKkuK,kBAAkB/5C,KACxBn0H,KAAKkuK,kBAAkB/5C,GAAc,IAGzCn0H,KAAKkuK,kBAAkB/5C,GAAY57B,MAAQA,EAEvCv4F,KAAK85F,UAIL95F,KAAKquK,gCASb4B,kBAAkB97C,EAAYp2B,GACrB/9F,KAAKkuK,kBAAkB/5C,KACxBn0H,KAAKkuK,kBAAkB/5C,GAAc,IAGrCn0H,KAAKkuK,kBAAkB/5C,GAAYp2B,YAAcA,IAEjD/9F,KAAKkuK,kBAAkB/5C,GAAYp2B,UAAYA,IAAcC,KAAAA,YAAmB7xF,EAAY4xF,EAK5F/9F,KAAKquK,iCAOb/tB,mBAAmBhyI,GACf,OAAOtO,KAAKouK,aAAa7vJ,IAAIjQ,GASjCuvH,mBAAmBvvH,EAAM6lH,GACrB,GAAoB,iBAAT7lH,EACP,MAAM,IAAIgd,UAAW,QAAOhd,uBAKhC,MAAM4hK,EAAelwK,KAAKouK,aAAa7vJ,IAAIjQ,GAEvC4hK,GAAgBA,IAAiB/7C,GACjC/tH,GAAO5C,MAAO,QAAO8K,kCAAqC4hK,QAAmB/7C,KAGjFn0H,KAAKouK,aAAajhJ,IAAI7e,EAAM6lH,IC5WpC,MAAM/tH,IAASyB,EAAAA,EAAAA,iCA+CA,SAASsoK,GAAgB9tK,GAAS,MAC7C,IAAKA,EAAQ6F,MAAQ7F,EAAQ6F,KAAKwd,gBAAkBrjB,EAAQ6F,KAAK1J,WAAY,CACzE,MAAMu3G,EACA,8GAIN,MADA3vG,GAAO5C,MAAMuyG,GACP,IAAIjwG,MAAMiwG,GAKpB,GAHA/1G,KAAK4zD,WAAavxD,EAAQuxD,WAC1B5zD,KAAKs1F,KAAL,UAAYt1F,KAAK4zD,kBAAjB,aAAY,EAAiB0hC,KAEzBt1F,KAAKs1F,KAAKy1B,cAAc1oH,EAAQ6F,KAAM7F,EAAQi6G,cAAe,CAC7D,MAAMvG,EAAS,2DAKf,aAHO/1G,KAAK4zD,kBACL5zD,KAAKs1F,KACZlvF,GAAO5C,MAAMuyG,GACP,IAAIjwG,MAAMiwG,GAEpB/1G,KAAK6sF,aAAe,IAAIziE,MACxBpqB,KAAKqC,QAAUA,EACfrC,KAAKowK,aAAe,IAAI72E,GAA4Bv5F,MACpDA,KAAK8iG,aAAe,GAOpB9iG,KAAK23H,gBAAkB,IAAIq2C,GAE3BhuK,KAAKgrG,MAAM3oG,GACXrC,KAAKqwK,mBAAqB,IAAIzE,GAAmB5rK,MAMjDA,KAAK05F,iBAAmB,KACxB15F,KAAK49F,oBAAsB,KAC3B59F,KAAKswK,YAAc,KACnBtwK,KAAKuwK,sBAAuB,EAC5BvwK,KAAK28F,aAAc,EACnB38F,KAAKk9F,iBAAkB,EACvBl9F,KAAKm9F,iBAAkB,EACvBn9F,KAAKq9F,iBAAmB,CACpB15B,OAAO,EACPE,OAAO,GAEX7jE,KAAK46F,gBAAiB,EAGtB56F,KAAK06F,kBAAoB,KAEzB16F,KAAK+6F,qBAAsB,EAG3B/6F,KAAK66F,uBAAyB,KAM9B76F,KAAKwwK,YAAa,EAGlBxwK,KAAK0kF,WAAa,GAOlB1kF,KAAKw3J,kBACC,IAAIF,GAAkBt3J,KAAMA,KAAK6sF,aAAcxqF,GAMrDrC,KAAKymK,oBACC,IAAIsB,GAAoB/nK,KAAMqC,EAAQ6G,OAAOunK,cAAgB,IAM9DpuK,EAAQ6G,OAAO+sF,qBAChBj2F,KAAK0wK,4BAA8B,IAAIlL,GAA2BxlK,OAMtEA,KAAKi7F,4BAA6B,EAKlCj7F,KAAK2wK,sBAAwB,IAAI9F,GAAsB7qK,MAUvDA,KAAK4wK,qBAAuB,KAE5B,MAAMC,EACAnhK,SAASrN,EAAQ6G,OAAOkqF,KAAO/wF,EAAQ6G,OAAOkqF,IAAI09E,eAAgB,IAOxE9wK,KAAK8wK,eAAiB3mJ,MAAM0mJ,GAAS,EAAIA,EACzCzqK,GAAO+L,KAAM,mBAAkBnS,KAAK8wK,kBAQpC9wK,KAAK+wK,4BAA6B,EAQlC/wK,KAAKozF,KAAM,EAMXpzF,KAAKy5F,iBAAmB,KAExBz5F,KAAKgxK,kBAAoB,IAAIxD,GAAWxtK,KAAK+5F,MAC7C/5F,KAAKixK,iBAAmB,IThQ5B,MAQIryK,YAAYk7F,GAIR95F,KAAKkxK,UAAY,GAEjBlxK,KAAKmxK,UAAYr3E,EAEjB95F,KAAK+kH,WAAa/kH,KAAK+kH,WAAW/hH,KAAKhD,MAEvCA,KAAKmxK,UAAUtkF,aAAav1E,YACxB2iF,KAAAA,kBAA8Bj6F,KAAK+kH,YAS3CqsD,WAAW1N,GACP,OAAO1jK,KAAKkxK,UAAUxN,GAe1B3+C,WAAW,GAAgC,IAAhC,iBAAEW,EAAF,SAAoBC,GAAY,EACnC2/C,GAAkBlB,YAAYz+C,GAC9B3lH,KAAKqxK,qBAAqB1rD,GACnBD,GACP1lH,KAAKsxK,qBAAqB3rD,GAoBlC4rD,eAAelvK,GACX,MAAMqJ,EAAU,IAAI24J,GAAa,IAC1BhiK,EACHuxD,WAAY5zD,KAAKmxK,UAAUv9G,aAG/B,OAAOloD,EAAQrL,MAAM,CACjB8kK,QAAS9iK,EAAQ8iK,QACjBC,YAAa/iK,EAAQ+iK,YACrB1iD,YAAa1iH,KAAKmxK,UAAUzuD,YAC5Bv4C,SAAU9nE,EAAQ8nE,WAEjBhG,MAAK,KAKGnkE,KAAKoxK,WAAW1lK,EAAQ84J,WACzBxkK,KAAKwxK,YAAY9lK,GACjB1L,KAAKyxK,mBAAmB/lK,IAGrBA,KAEVyiE,OAAM3qE,IACHxD,KAAKyxK,mBAAmB/lK,GAEjB8e,QAAQpU,OAAO5S,MAYlCkuK,cAAchO,GACV,MAAMh4J,EAAU1L,KAAKoxK,WAAW1N,GAEhC,OAAIh4J,EACOA,EAAQ7G,KAAK,CAAE69G,YAAa1iH,KAAKmxK,UAAUzuD,cAG/Cl4F,QAAQpU,OAAO,IAAItQ,MAAM,2BASpC0rK,YAAY9lK,GACR1L,KAAKkxK,UAAUxlK,EAAQ84J,SAAW94J,EAYtCimK,eAAejO,EAAW5sI,EAAQ65G,GAC9B,MAAMjlI,EAAU,IAAI24J,GAAa,CAC7BzwG,WAAY5zD,KAAKmxK,UAAUv9G,WAC3B8uD,YAAa1iH,KAAKmxK,UAAUzuD,YAC5BiuB,KAAAA,EACA+yB,UAAAA,EACA5sI,OAAAA,IAKJ,OAFA92B,KAAKwxK,YAAY9lK,GAEVA,EASX+lK,mBAAmB/lK,EAAS4vH,GACxBt7H,KAAKmxK,UAAUtkF,aAAa/gE,KACxBmuE,KAAAA,uBAAmCvuF,EAAS4vH,GAUpD+1C,qBAAqB1rD,GACjB,MAAM69C,EAAc8B,GAAkB/B,wBAAwB59C,GAE9D,IAAK69C,EACD,OAGJ,MAAM,MAAEhgK,EAAF,UAAS83H,EAAT,cAAoBmoC,EAApB,UAAmCC,EAAnC,OAA8C5sI,GAAW0sI,EAI/D,IAAI93J,EAAU1L,KAAKoxK,WAAW1N,GAKzBh4J,GAAsB,QAAXorB,EAaZprB,GACGA,EAAQ+vF,cAAgB3kE,GACxBprB,EAAQ8wF,aAAeh5F,EAC1B4C,GAAO6lB,KAAK,uCACR1oB,KAAKF,UAAUmgK,KAKlB93J,IACDA,EAAU1L,KAAK2xK,eAAejO,EAAW5sI,EAAQ2sI,IAGrD/3J,EAAQ64J,UAAUztI,GAEdtzB,GACAkI,EAAQu5J,SAASzhK,GAGrBxD,KAAKyxK,mBAAmB/lK,EAAS4vH,IA/B7Bl1H,GAAO6lB,KACH,qCACA,2CAuCZqlJ,qBAAqB3rD,GACjB,MAAM,kBAAEk+C,EAAF,KAAqBlzB,EAArB,UAA2B+yB,GAC3B4B,GAAkB3B,sBAAsBh+C,GAE9C,IAAK+9C,EAID,YAHAt9J,GAAO6lB,KACH,2DAKR,IAAIvgB,EAAU1L,KAAKoxK,WAAW1N,GAEzBh4J,IACDA,EAAU1L,KAAK2xK,eAAejO,EAAW,GAAI/yB,IAGjDjlI,EAAQw5J,qBAAqBrB,GAE7B7jK,KAAKyxK,mBAAmB/lK,KSWiB1L,KAAK+5F,MAQlD/5F,KAAK4xK,uCAAoCzlK,EAKrCnM,KAAK6xK,oBACLzrK,GAAO+L,KAAK,sCAEZnS,KAAK8xK,eAAiB,IAAI5hE,GAAclwG,OAQ5CA,KAAK+xK,8BAA2B5lK,EAOhCnM,KAAKgyK,8BAA2B7lK,ECzRrB,SAAS8lK,GAAgBC,EAAO5oC,EAAOjnI,GAClDrC,KAAKkyK,MAAQA,EACblyK,KAAKspI,MAAQA,EACbtpI,KAAKqC,QAAUA,EACfrC,KAAKs1F,KAAO,IAAI6sB,GAAK9/G,EAASinI,GAG9BtpI,KAAKgtB,iBAAiBi9G,IAClB,CAACkoC,EAASzuK,EAAKknI,EAAaf,KACxBx0C,GAAW+D,oB7GkOjB,SAASg5E,EAAWC,EAAcxoC,GAChC,MAAO,CACHrqI,KAAMy9E,GACNnuE,OAAQ,oBACRyyC,WAAY,CACR,WAAc6wH,EACd,cAAiBC,KACdxoC,I6GxOHyoC,CAA4BH,EAASzuK,EAAKmmI,OAItD7pI,KAAKgtB,iBAAiBi9G,IAClBvmI,IAMQA,GACA2xF,GAAWiE,cACPi5E,GACA,CAAExzK,QAAS2E,IAEnB2xF,GAAWwD,QACPt1F,KAAKF,UACD,CACI2D,GAAIurK,GACJ7uK,IAAAA,QD+PxBysK,GAAgB5xK,UAAUK,YAAcuxK,GAcxCA,GAAgBqC,gBAAkB,SAASlsH,EAAKmsH,GAC5C,IAAIjmC,EAqBJ,OAnBIimC,EAEAjmC,EAAc1zG,KAAAA,gBAA2B,GAAGpT,eAK5C8mH,EAAczsF,GAAAA,QAAAA,eAAuBuG,GAAKpgD,OAAO,EAAG,GAC/Cwf,cAIM,eAEHla,KAAKghI,KACTA,EAAc1zG,KAAAA,gBAA2B,GAAGpT,gBAI7C8mH,GAQX2jC,GAAgB5xK,UAAUysG,MAAQ,WAAuB,IAAd3oG,EAAc,uDAAJ,GACjDrC,KAAKowK,aAAalyE,qBAElB,MAAM,OAAEh1F,GAAWlJ,KAAKqC,QAKlBqwK,EAAgB,CAClBvkC,cAAejlI,EAAOuxH,aAChBvxH,EAAOuxH,aAAa0T,cACpBjlI,EAAOkqF,KAAOlqF,EAAOkqF,IAAI4nC,aAAehJ,KAAAA,KAC9C+c,sBAAuB7lI,EAAOuxH,cAAgBvxH,EAAOuxH,aAAasU,sBAClEV,SAAWnlI,EAAOuxH,cAAgBvxH,EAAOuxH,aAAaQ,gBAC9C/xH,EAAO6xH,YAAc/I,KAAAA,KAC7Bsc,SAAUplI,EAAOkqF,IACXlqF,EAAOkqF,IAAI6nC,gBAAmB/xH,EAAOkqF,IAAI2nC,YAAc/I,KAAAA,KACvDA,KAAAA,KAGVhyH,KAAK2yK,eAAiB,IAAIzkC,GAAeluI,KAAM0yK,GAC/C1yK,KAAK4yK,gBAAkB1pK,EAAO2pK,aAAe3pK,EAAO2pK,aAAer0D,GAASX,kBAC5E79G,KAAK+5F,KAAO/5F,KAAKs1F,KAAKinB,WAClBv8G,KAAKqC,QAAQ6F,KAAM,IACZgB,EACHu6G,QAASzjH,KAAK4yK,iBAElBzC,GAAgBqC,iBAGpBxyK,KAAK23H,gBAAgB42C,YAAYvuK,KAAK+5F,MAGtC/5F,KAAK8yK,4BACC9yK,KAAK8yK,4BAA4B9vK,KAAKhD,MAC5CA,KAAK+5F,KAAKziF,YACN2iF,GAAWn8D,uBAAwB99B,KAAK8yK,6BAE5C9yK,KAAK+yK,yBAA2B/yK,KAAK+yK,yBAAyB/vK,KAAKhD,MACnEA,KAAK+5F,KAAKziF,YACN2iF,GAAWl8D,oBAAqB/9B,KAAK+yK,0BAEzC/yK,KAAKgzK,4BACChzK,KAAKgzK,4BAA4BhwK,KAAKhD,MAC5CA,KAAK+5F,KAAKziF,YACN2iF,GAAWr8D,uBAAwB59B,KAAKgzK,6BAE5ChzK,KAAKizK,kBAAoBjzK,KAAKizK,kBAAkBjwK,KAAKhD,MACrDA,KAAK+5F,KAAKziF,YAAY2iF,GAAWt8D,8BAC7B39B,KAAKizK,mBAETjzK,KAAKkzK,kCAAoClzK,KAAKkzK,kCAAkClwK,KAAKhD,MACrFA,KAAK+5F,KAAKziF,YAAY2iF,GAAWn7D,eAAgB9+B,KAAKkzK,mCAEtDlzK,KAAKmzK,2BAA6BnzK,KAAKmzK,2BAA2BnwK,KAAKhD,MACvEA,KAAKozK,oBAAsBpzK,KAAKozK,oBAAoBpwK,KAAKhD,MACzDA,KAAK+5F,KAAKziF,YAAY2iF,GAAW54D,eAAgBrhC,KAAKozK,qBACtDpzK,KAAK+5F,KAAKziF,YAAY2iF,GAAWz4D,WAAYxhC,KAAKozK,qBAClDpzK,KAAK+5F,KAAKziF,YAAY2iF,GAAWx4D,iBAAkBzhC,KAAKmzK,4BACxDnzK,KAAK+5F,KAAKziF,YAAY2iF,GAAWv4D,cAAe1hC,KAAKozK,qBAErDpzK,KAAK6/J,QAAU,IAAIe,GACf5gK,KACAkJ,GACA,CAACnK,EAAS+8D,KACN,IACI97D,KAAKsuG,YACDvvG,EAAS+8D,GAAI,GACnB,MAAOt4D,GACL4C,GAAO6lB,KAAK,+CAAgDzoB,GAASA,EAAME,SAIlF1D,KAAKm6F,MACNn6F,KAAKm6F,IAAM,IAAIuyD,GAAI1sJ,KAAMqC,GACzBrC,KAAKowK,aAAa9yE,oBACdguB,GAAAA,gCACAtrH,KAAKqzK,sBAAsBrzK,KAAKm6F,MAIxCn6F,KAAKszK,uBAAyB,IAAItR,GAAuBhiK,KAAMA,KAAKm6F,KACpEn6F,KAAKuzK,oBAAsB,IAAI5Q,GAAoB3iK,KAAMA,KAAKm6F,KAE9Dn6F,KAAKgkG,4BACC,IAAInE,GACF7/F,KAAKm6F,IACLn6F,KACA,CAGIsgG,kBAAmBp3F,EAAOsqK,6BAC1BjzE,eAAgBr3F,EAAOuqK,8BACvBpzE,kBAAmBn3F,EAAOwqK,mCAEtC1zK,KAAKgkG,4BAA4B35E,OAGjC,IAAIorE,GAAkB,EAwCtB,GAtCIvsF,EAAOqnG,SAAWrnG,EAAOqnG,QAAQojE,qBACjCl+E,EAAmC,IAAhBxkF,KAAKE,UAAmBjI,EAAOqnG,QAAQojE,oBAGzD3zK,KAAKk4F,aACNl4F,KAAKk4F,WAAa,IAAI7C,GAAWr1F,KAAKs1F,KAAM,CACxC3N,UAAW3nF,KAAK4yK,gBAChBhrF,SAAU1+E,EAAO0qK,sBAAwB1qK,EAAO0qK,sBAAwB5zK,KAAKi9F,WAC7E9W,OAAQj9E,EAAOi9E,QAAW,GAAEnmF,KAAK4zD,WAAWvxD,QAAQm9G,MAAMngE,UAAUr/C,KAAKqC,QAAQ6F,OACjFggF,OAAQh/E,EAAOg/E,OACf0N,gBAAiB1sF,EAAO2qK,yBACxBhsF,YAAa3+E,EAAO2+E,YACpBC,gBAAiB5+E,EAAO4+E,gBACxB6N,iCAAkCzsF,EAAOysF,iCACzCF,gBAAAA,EACA/9D,SAAU13B,KAAKqC,QAAQ6F,KACvB8/E,gBAAiB9+E,EAAO8+E,gBACxBK,mBAAoBn/E,EAAOm/E,mBAC3BN,aAAc7+E,EAAO4qK,wBAEzBz+E,GAAWe,UAAUhS,uBAAuB,CACxC,eAAkBpkF,KAAK4yK,kBAIvB1pK,EAAOitF,wBACPn2F,KAAKk4F,WAAWb,qBAAqBr3F,OAI7CA,KAAKowK,aAAav2E,yBAIlB75F,KAAKowK,aAAanxE,2BAId/1F,EAAO6qK,sBAAwBzuJ,GAAQu+D,uBAGvC,GAAI36E,EAAOu0J,mBAAoB,CAC3Br3J,GAAO+L,KAAK,8DAEPnS,KAAKg0K,iBACNh0K,KAAKg0K,eAAiB,IAAIxW,GAAiBx9J,KAAMkJ,EAAOu0J,qBAG5D,MAAMwW,EAAwB,IAAI1U,GAElC0U,EAAsBlpJ,GAAG4vI,IAAsC,IAC3D36J,KAAK6sF,aAAa/gE,KAAKyrE,MAE3Bv3F,KAAKg0K,eAAe/V,uBAAuBgW,QAE3C7tK,GAAO6lB,KAAK,0FAMpB,GAAI/iB,EAAOgrK,yBAA2B5uJ,GAAQu+D,uBAC1C,GAAI36E,EAAOu0J,mBAAoB,CACtBz9J,KAAKg0K,iBACNh0K,KAAKg0K,eAAiB,IAAIxW,GAAiBx9J,KAAMkJ,EAAOu0J,qBAG5D,MAAM0W,EAAoB,IAAIzV,GAE9ByV,EAAkBppJ,GAAG4vI,IAAkC,IACnD36J,KAAK6sF,aAAa/gE,KAAKyrE,MAE3Bv3F,KAAKg0K,eAAe/V,uBAAuBkW,QAE3C/tK,GAAO6lB,KAAK,0FAKhB/iB,EAAOkrK,yBACPp0K,KAAKq0K,wBAA0B,IAAIja,GAAuBp6J,MAC1DA,KAAKq0K,wBAAwBtpJ,GAAG4vI,IAAgC,KAC5D36J,KAAK6sF,aAAa/gE,KAAKyrE,OAE3Bv3F,KAAKq0K,wBAAwBtpJ,GAAG4vI,IAA0C2Z,IACtEt0K,KAAK6sF,aAAa/gE,KAAKyrE,EAAgD+8E,OAK3E,iBAAkBprK,GAClBlJ,KAAK+2J,SAAS7tJ,EAAOi5J,cAOzBniK,KAAKu0K,aAAe,IAAIpT,GAAqBnhK,MAG7CA,KAAKw0K,4BAA8B,IAAIzZ,GAA4B/6J,MAE/DkJ,GAAUA,EAAOw6G,gBAAkBx6G,EAAOw6G,eAAeC,YACzD3jH,KAAK2pG,4BACD,SAAUzgG,EAAOw6G,eAAeC,YAIxC3jH,KAAK2pG,4BAA4B,YAAa3pG,KAAK2yK,eAAetjC,qBAM9DnmI,GAAUA,EAAOurK,uBAA0D,UAAjCvrK,EAAOurK,uBACjDz0K,KAAK2pG,4BAA4B,yBAA0BzgG,EAAOurK,wBAU1EtE,GAAgB5xK,UAAUyP,KAAO,SAAS2pC,GAAsC,IAA5B0qE,EAA4B,wDACxEriH,KAAK+5F,MACL/5F,KAAK+5F,KAAK/rF,KAAK2pC,EAAU0qE,GAAoBl+C,MAAK,IAAMnkE,KAAK00K,wBAYrEvE,GAAgB5xK,UAAUovI,2BAA6B,SAAStrI,GAC5D,OAAOsrI,GAA2BlvI,KAAKuB,KAAM,IACtCqC,EACHiqI,iBAAkB6jC,GAAgBqC,mBAO1CrC,GAAgB5xK,UAAUo2K,SAAW,WACjC,OAAO30K,KAAK+5F,MAAQ/5F,KAAK+5F,KAAKqiB,QAOlC+zD,GAAgB5xK,UAAUq2K,aAAe,WACrC,OAAOhzF,QAAQ5hF,KAAKqC,QAAQ6G,OAAOkqF,KAAOpzF,KAAKqC,QAAQ6G,OAAOkqF,IAAI4L,eAGxB,IAA5Bh/F,KAAKqC,QAAQ6G,OAAOkqF,KAQtC+8E,GAAgB5xK,UAAUs2K,qBAAuB,WAC7C,OAAOjzF,QAAQ5hF,KAAKqC,QAAQ6G,OAAOqnG,SAC5BvwG,KAAKqC,QAAQ6G,OAAOqnG,QAAQukE,cAOvC3E,GAAgB5xK,UAAU29G,MAAQnpG,iBA6C9B,GA5CI/S,KAAKgkG,8BACLhkG,KAAKgkG,4BAA4B3f,UACjCrkF,KAAKgkG,4BAA8B,MAEnChkG,KAAKymK,sBACLzmK,KAAKymK,oBAAoBpiF,UACzBrkF,KAAKymK,oBAAsB,MAG3BzmK,KAAK0wK,8BACL1wK,KAAK0wK,4BAA4BrsF,UACjCrkF,KAAK0wK,4BAA8B,MAGnC1wK,KAAK6/J,UACL7/J,KAAK6/J,QAAQh7J,OACb7E,KAAK6/J,QAAU,MAGnB7/J,KAAK00F,iBAAiB/xF,SAAQiuB,GAAS5wB,KAAK+0K,oBAAoBnkJ,KAEhE5wB,KAAKm6F,IAAIC,qBAETp6F,KAAKg1K,oCAEDh1K,KAAKk4F,YACLl4F,KAAKk4F,WAAW7T,UAGpBrkF,KAAKi1K,mBAAqBj1K,KAAKi1K,kBAAkBhmI,SAEjDjvC,KAAKk1K,uBAGDl1K,KAAK05F,mBACL15F,KAAK05F,iBAAiBj/B,QACtBz6D,KAAK05F,iBAAmB,MAExB15F,KAAKy5F,mBACLz5F,KAAKy5F,iBAAiBh/B,QACtBz6D,KAAKy5F,iBAAmB,OAIvBz5F,KAAK+5F,KACN,MAAM,IAAIj0F,MAAM,2CAGpB,MAAMi0F,EAAO/5F,KAAK+5F,KA6BlB,IAAIo7E,EA1BJp7E,EAAK7hF,eACD+hF,GAAWn8D,uBACX99B,KAAK8yK,6BACT/4E,EAAK7hF,eACD+hF,GAAWl8D,oBACX/9B,KAAK+yK,0BACTh5E,EAAK7hF,eACD+hF,GAAWr8D,uBACX59B,KAAKgzK,6BAETj5E,EAAK7hF,eACD+hF,GAAWt8D,8BACX39B,KAAKizK,mBAETl5E,EAAK7hF,eAAe+hF,GAAWn7D,eAAgB9+B,KAAKkzK,mCACpDn5E,EAAK7hF,eAAe+hF,GAAW54D,eAAgBrhC,KAAKozK,qBACpDr5E,EAAK7hF,eAAe+hF,GAAWz4D,WAAYxhC,KAAKozK,qBAChDr5E,EAAK7hF,eAAe+hF,GAAWx4D,iBAAkBzhC,KAAKmzK,4BACtDp5E,EAAK7hF,eAAe+hF,GAAWv4D,cAAe1hC,KAAKozK,qBAEnDpzK,KAAKowK,aAAanyE,sBAElBj+F,KAAK23H,gBAAgB42C,YAAY,MAEjCvuK,KAAK+5F,KAAO,KAIZ,UACUA,EAAKmiB,QACb,MAAO9nG,GACL+gK,EAAa/gK,EAKbpU,KAAK8+F,kBAAkBn8F,SACnB03F,GAAer6F,KAAKk8F,aAAa7B,EAAY0E,YAOrD,GAJI/+F,KAAKm6F,KACLn6F,KAAKm6F,IAAI+6D,UAGTigB,EACA,MAAMA,GAUdhF,GAAgB5xK,UAAU0kK,uBAAyB,WAC/C,OAAOjjK,KAAK6gG,cAAgB7gG,KAAKy5F,iBAAmBz5F,KAAK05F,kBAS7Dy2E,GAAgB5xK,UAAUurG,kBAAoB,WAC1C,MAAM68B,EAAW,GAKjB,OAHA3mI,KAAK05F,kBAAoBitC,EAASziI,KAAKlE,KAAK05F,kBAC5C15F,KAAKy5F,kBAAoBktC,EAASziI,KAAKlE,KAAKy5F,kBAErCktC,GASXwpC,GAAgB5xK,UAAU80K,sBAAwB,SAASl5E,GACvDA,EAAI7iF,YAAYimF,KAAAA,mBAA6B,KACzC,IAAK,MAAMghC,KAAcv+H,KAAKm6F,IAAI6P,YAC9Bu0B,EAAWhsG,gBAAkBvyB,KAAKo1K,4BAA4B72C,OAa1E4xC,GAAgB5xK,UAAU62K,4BAA8B,SAASC,GAC7D,IAAIt3E,GAAas3E,GAAcA,EAAW17E,UAAYs7D,KAAAA,KAAuBogB,EAAW98B,eAEpFx6C,IAAck3D,KAAAA,SAA2Bj1J,KAAKs1K,yB3DhwBjB,I2DiwB7Bv3E,EAAYk3D,KAAAA,kBAGZ3pC,GAAAA,+BACAtrH,KAAKm6F,IAAI27D,oBACLhW,GAA2B9/I,KAAKi9F,WAAY1I,GAAiB,GAC7DwJ,GAGJ/9F,KAAKm6F,IAAI07D,aAAa93D,IAO9BoyE,GAAgB5xK,UAAUkiF,QAAU,WAChC,OAAOzgF,KAAKqC,QAAQ6F,KAAK1J,YAM7B2xK,GAAgB5xK,UAAUmsI,cAAgB,WACtC,OAAO1qI,KAAK4zD,YAMhBu8G,GAAgB5xK,UAAUg3K,cAAgB,WACtC,OAAOv1K,KAAK28F,aAMhBwzE,GAAgB5xK,UAAUi3K,WAAa,WACnC,OAAO5zF,QAAQ5hF,KAAK48F,eAMxBuzE,GAAgB5xK,UAAUk3K,aAAe,WACrC,OAAOz1K,KAAK48F,cAMhBuzE,GAAgB5xK,UAAUwgH,sBAAwB,WAC9C,OAAO/+G,KAAK+5F,MAAQ/5F,KAAK+5F,KAAK6oB,UAAU7D,yBAS5CoxD,GAAgB5xK,UAAUm3K,mBAAqB,SAASC,GACpD,OAAO,IAAInrJ,SAAQ,CAACC,EAASrU,KACpBpW,KAAK++G,wBAKN42D,EACA31K,KAAK+5F,KAAK6oB,UAAUnB,iBAAiBh3F,EAASrU,GAE9CpW,KAAK+5F,KAAK6oB,UAAU1B,YAAYz2F,EAASrU,GAPzCA,QAiBZ+5J,GAAgB5xK,UAAUm2F,eAAiB,SAAS5W,GAChD,IAAI9O,EAAS,GAMb,OAJIhvE,KAAKm6F,MACLnrB,EAAShvE,KAAKm6F,IAAIzF,eAAe5W,IAG9B9O,GAOXmhG,GAAgB5xK,UAAUi4J,mBAAqB,WAC3C,OAAOx2J,KAAKm6F,IAAMn6F,KAAKm6F,IAAIq8D,qBAAuB,MAOtD2Z,GAAgB5xK,UAAU4tJ,mBAAqB,WAC3C,OAAOnsJ,KAAKm6F,IAAMn6F,KAAKm6F,IAAIgyD,qBAAuB,MAOtDgkB,GAAgB5xK,UAAUq3K,oBAAsB,WAC5C,MAAO,CACHC,eAAgB71K,KAAKk4F,WAAWjL,sBAaxCkjF,GAAgB5xK,UAAUwsB,GAAK,SAAS+qJ,EAASjrJ,GACzC7qB,KAAK6sF,cACL7sF,KAAK6sF,aAAa9hE,GAAG+qJ,EAASjrJ,IAYtCslJ,GAAgB5xK,UAAU0vB,IAAM,SAAS6nJ,EAASjrJ,GAC1C7qB,KAAK6sF,cACL7sF,KAAK6sF,aAAa30E,eAAe49J,EAASjrJ,IAKlDslJ,GAAgB5xK,UAAUyuB,iBAAmBmjJ,GAAgB5xK,UAAUwsB,GACvEolJ,GAAgB5xK,UAAU2uB,oBAAsBijJ,GAAgB5xK,UAAU0vB,IAQ1EkiJ,GAAgB5xK,UAAUstK,mBAAqB,SAASkK,EAASlrJ,GACzD7qB,KAAK+5F,MACL/5F,KAAK+5F,KAAKiD,oBAAoB+4E,EAASlrJ,IAS/CslJ,GAAgB5xK,UAAUy3K,sBAAwB,SAASD,EAASlrJ,GAC5D7qB,KAAK+5F,MACL/5F,KAAK+5F,KAAKgvB,uBAAuBgtD,EAASlrJ,IAUlDslJ,GAAgB5xK,UAAU03K,gBAAkB,SACpCl3K,GAA+B,IAAtB+nH,EAAsB,uDAAR,OACvB9mH,KAAK+5F,MACL/5F,KAAK+5F,KAAKuU,YAAYvvG,EAAS+nH,IAWvCqpD,GAAgB5xK,UAAU23K,uBAAyB,SAC3ClvK,EAAIjI,GAA+B,IAAtB+nH,EAAsB,uDAAR,OAC3B9mH,KAAK+5F,MACL/5F,KAAK+5F,KAAKgtB,mBAAmB//G,EAAIjI,EAAS+nH,IASlDqpD,GAAgB5xK,UAAU43K,YAAc,SAASjuK,EAAMqI,GAC/CvQ,KAAK+5F,KACL/5F,KAAK+5F,KAAKiY,uBAAuB9pG,EAAMqI,IAAWvQ,KAAK+5F,KAAKlsC,eAE5DznD,GAAO6lB,KAAK,iDAUpBkkJ,GAAgB5xK,UAAU63K,gBAAkB,SAASluK,EAAMqI,GACvDvQ,KAAKm2K,YAAYjuK,EAAMqI,GACvBvQ,KAAKq2K,cAAcnuK,IAOvBioK,GAAgB5xK,UAAU83K,cAAgB,SAASnuK,GAC3ClI,KAAK+5F,MACL/5F,KAAK+5F,KAAK+X,mBAAmB5pG,IAQrCioK,GAAgB5xK,UAAUkwB,eAAiB,SAASvmB,GAChD,GAAIlI,KAAK+5F,KAAM,CACX,MAAMu8E,EAAU,OAGhB,IAAKpuK,IAASlI,KAAK+5F,KAAK+uB,gBAAgBwtD,GACpC,OAGJt2K,KAAK+5F,KAAKiY,uBAAuBskE,EAAS,CACtC/0H,WAAY,CAAEkG,MAAO,mCACrBh+C,MAAOvB,KACLlI,KAAK+5F,KAAKlsC,iBAQxBsiH,GAAgB5xK,UAAUyoH,WAAa,SAAStM,GACxC16G,KAAK+5F,MAAQ/5F,KAAKq8F,cAClBr8F,KAAK+5F,KAAKitB,WAAWtM,GAErBt0G,GAAO6lB,KAAM,0BAAyBjsB,KAAK+5F,KAAO,GAAK,oBACnD/5F,KAAKq8F,cAAgB,GAAK,qCAQtC8zE,GAAgB5xK,UAAUg4K,eAAiB,WACvC,QAAyBpqK,IAArBnM,KAAKq0B,YAA2B,CAChCr0B,KAAKq0B,YAAc,IAAIN,MAGvB,MAAMyiJ,EAAmBx2K,KAAK00F,eAAeH,IAE7C,IAAK,MAAMkiE,KAAc+f,EACrBx2K,KAAKq0B,YAAY3C,SAAS+kI,GAI9B,MAAMO,EAAoBh3J,KAAKm6F,IAAI4xD,gBAAgBx3D,IAEnD,IAAK,MAAMmO,KAAes0D,EACtBh3J,KAAKq0B,YAAY3C,SAASgxE,GAIlC,OAAO1iG,KAAKq0B,aAQhB87I,GAAgB5xK,UAAUk4K,uBAAyB,WAC/C,OAAOz2K,KAAK+5F,KAAKupB,qBAUrB6sD,GAAgB5xK,UAAUmzB,SAAW,SAASd,GAC1C,MAAMktD,EAAYltD,EAAMgpE,UAClBoQ,EAAchqG,KAAKm6F,IAAIzF,eAAe5W,GAG5C,OAAIksB,EAAYzqG,OAAS,EAEjBqxB,IAAUo5E,EAAY,GACfx/E,QAAQC,QAAQmG,GAGpBpG,QAAQpU,OAAO,IAAItQ,MAAO,qBAAoBg4E,8BAGlD99E,KAAKijI,aAAa,KAAMryG,IAQnCu/I,GAAgB5xK,UAAUm4K,2BAA6B,SAC/C7rF,EACA9B,GACJ,MAAM4tF,EAAY32K,KAAK24J,0BAOlB5vE,GAAO4tF,IAAc5tF,GACtB/oF,KAAK6sF,aAAa/gE,KACdyrE,GACAv3F,KAAKi9F,WAAYpS,IAQ7BslF,GAAgB5xK,UAAUq4K,qBAAuB,SAAShmJ,GActD,IAAIiuE,EAEJ,GAdI7+F,KAAK46F,gBAAkBhqE,EAAMe,iBAAmBf,EAAM+oE,WACtD35F,KAAK46F,gBAAiB,EAGtB56F,KAAK+5F,KAAKywB,gBAAgBxqH,KAAK+5F,KAAKqoB,WAAW,EAAO7tB,KAC/Cv0F,KAAK+6F,qBAAuBnqE,EAAM2B,iBAAmB3B,EAAM+oE,YAClE35F,KAAK+6F,qBAAsB,EAG3B/6F,KAAK+5F,KAAKywB,gBAAgBxqH,KAAK+5F,KAAKqoB,WAAW,EAAO7tB,KAKtDv0F,KAAK06F,mBAAqB9pE,EAAMe,eAAgB,CAChD,MAAMklJ,EAAU92H,GAAAA,QAAAA,mBAA2B//C,KAAK06F,mBAEhDmE,EAAmB7+F,KAAK8iG,aAAa+zE,QAClC,GAAI72K,KAAK66F,wBAA0BjqE,EAAM2B,eAAgB,CAC5D,MAAMskJ,EAAU92H,GAAAA,QAAAA,mBAA2B//C,KAAK66F,wBAEhDgE,EAAmB7+F,KAAK8iG,aAAa+zE,GAKrCjmJ,EAAM2B,iBAAmBjN,GAAQi8D,+BACjCvhF,KAAKo1K,4BAA4BxkJ,GAGrC5wB,KAAK6sF,aAAa/gE,KAAKyrE,GAA0C3mE,EAAOiuE,IAU5EsxE,GAAgB5xK,UAAUu4K,uBAAyB,WAK/C,OAAO92K,KAAK00F,iBACP9oF,QAAOglB,IACJ,MAAMmmJ,EAAYnmJ,EAAMgpE,UAExB,QAAIm9E,IAAcxiF,IACLv0F,KAAKg3K,sBAAuB1xJ,GAAQm8D,kBAAmBn8D,GAAQ07D,kBAEjE+1F,IAAcxiF,KAAoBv0F,KAAKi3K,wBAY9D9G,GAAgB5xK,UAAUw2K,oBAAsB,SAASnkJ,GACrDA,EAAMksH,eAAe,MACrB98I,KAAKm6F,IAAIy8D,iBAAiBhmI,GAC1BA,EAAM1D,oBAAoBy1E,GACtB/xE,EAAMsmJ,aACVtmJ,EAAM1D,oBAAoBy1E,GACtB/xE,EAAMumJ,mBAKNvmJ,EAAM2B,gBAAkB3B,EAAMmtE,YAAcC,KAAAA,SAC5Ch+F,KAAKk4F,WAAW7N,wBAAuB,GAG3CrqF,KAAK6sF,aAAa/gE,KAAKyrE,GAAqC3mE,IAShEu/I,GAAgB5xK,UAAU+zB,YAAc,SAAS1B,GAC7C,OAAO5wB,KAAKijI,aAAaryG,EAAO,OAYpCu/I,GAAgB5xK,UAAU0kI,aAAe,SAASC,EAAUC,GACxD,MAAMi0C,EAA8Bp3K,QAASkjI,MAAAA,OAAT,EAASA,EAAUxwG,YAGvD,OAAI0kJ,GACIl0C,EAASl/C,UAKbm/C,GACIA,EAASn/C,SALFx5D,QAAQpU,OACX,IAAIsmE,GAAgBE,MAU5BsmD,IAAak0C,GACbhxK,GAAO6lB,KAAM,0CAAyCi3G,wCAInDljI,KAAKq3K,gBAAgBD,EAA8Bl0C,EAAW,KAAMC,GACtEh/D,MAAK,KACFizG,GAA+Bp3K,KAAK+0K,oBAAoB7xC,GACxDC,GAAYnjI,KAAKs3K,eAAen0C,IAG3Bi0C,GAAAA,MAA+Bl0C,GAAAA,EAAU3wG,gBAAmB4wG,MAAAA,GAAAA,EAAU5wG,iBACvEvyB,KAAKo1K,4BAA4BjyC,GAIjCi0C,GAAAA,MAA+Bl0C,GAAAA,EAAU3wG,kBAGpC2wG,MAAAA,GAAAA,EAAUyW,sBAAwBxW,MAAAA,GAAAA,EAAUwW,uBACjD35I,KAAKozK,oBAAoBpzK,KAAKijK,0BAGjB,OAAb9/B,IAAsBnjI,KAAK46F,gBAAkB56F,KAAK+6F,sBAClD/6F,KAAK42K,qBAAqBzzC,GAGvB34G,QAAQC,aAElB0jD,OAAM3qE,IACH4C,GAAO5C,MAAO,wBAAuBA,MAAAA,OAAxB,EAAwBA,EAAOuC,SAErCykB,QAAQpU,OAAO5S,QAgBlC2sK,GAAgB5xK,UAAU84K,gBAAkB,SAASn0C,EAAUC,GAC3D,MAAMo0C,EAAuB,GAgB7B,OAdIv3K,KAAK05F,iBACL69E,EAAqBrzK,KACjBlE,KAAK05F,iBAAiBupC,aAAaC,EAAUC,IAEjD/8H,GAAO+L,KAAK,0CAGZnS,KAAKy5F,iBACL89E,EAAqBrzK,KACjBlE,KAAKy5F,iBAAiBwpC,aAAaC,EAAUC,IAEjD/8H,GAAO+L,KAAK,0CAGTqY,QAAQ3T,IAAI0gK,IAWvBpH,GAAgB5xK,UAAU40K,2BAA6B,SAASj5E,EAAe12F,EAAOs6E,GAClF,IAAKoc,EACD,OAEJ9zF,GAAO6lB,KAAM,0BAAyBiuE,cAA0B12F,MAAAA,OAApD,EAAoDA,EAAO80B,qBAAqB90B,MAAAA,OAAhF,EAAgFA,EAAOE,QACnG,MAAMktB,EAAQ5wB,KAAK00F,eAAe5W,GAAW,GAE7C99E,KAAK6sF,aAAa/gE,KAAKyrE,GAA6C3mE,IAOxEu/I,GAAgB5xK,UAAU+4K,eAAiB,SAASn0C,GAChD,GAAIA,EAASxxG,gBAAmBwxG,EAAS5wG,gBAC9B4wG,EAASplC,YAAcC,KAAAA,QAAoB,CAElD,MACMu1C,EADUmZ,GAAItV,oCAEN9nI,MACNjO,GACIA,EAAEm3C,OAAU,GAAE2qF,EAASuV,WAAWlgG,aAC3Bn3C,EAAEijE,QAAU6+D,EAASuV,WAAWp0E,QAE/CivE,GACAl+C,GAAWoD,0BACPi0D,GAAIpV,4BAA4B/D,IAI5CvzI,KAAKm6F,IAAIm8D,cAAcnzB,GAEvBA,EAAS+zC,YAAcl3K,KAAK42K,qBAAqB5zK,KAAKhD,KAAMmjI,GAC5DA,EAASg0C,kBAAoBn3K,KAAK02K,2BAA2B1zK,KAAKhD,MAClEmjI,EAASn2G,iBACL21E,GACAwgC,EAAS+zC,aACb/zC,EAASn2G,iBACL21E,GACAwgC,EAASg0C,mBAEbh0C,EAAS2Z,eAAe98I,MAExBA,KAAK6sF,aAAa/gE,KAAKyrE,GAAmC4rC,IAS9DgtC,GAAgB5xK,UAAUi5K,iBAAmB,SAAS5mJ,GAClD,GAAI06F,GAAAA,gCAA+C16F,EAY/C,OATA5wB,KAAK23H,gBAAgBs4C,kBACjBnwB,GACI9/I,KAAKi9F,WACLrsE,EAAMgpE,UACN,GAEJhpE,EAAMmtE,YAGH,EAGX,MAAM05E,EAAmB,YAInBC,EAAiB9mJ,EAAQA,EAAMmtE,UAAYC,KAAAA,OAGjD,QAAI05E,IAAmB15E,KAAAA,SAAoBh+F,KAAK+5F,KAAK+uB,gBAAgB2uD,KAG1Dz3K,KAAK+5F,KAAKiY,uBAAuBylE,EAAkB,CAAEhuK,MAAOiuK,KAc3EvH,GAAgB5xK,UAAUs+I,oBAAsB,SAAS/+D,EAAWygD,EAAY5kC,GAU5E,OATI2xB,GAAAA,gCAGAtrH,KAAK23H,gBAAgBq4C,mBACjBlwB,GAA2B9/I,KAAKi9F,WAAYnf,EAAW,GACvD6b,KAIH35F,KAAK+5F,OAINjc,IAAcyW,GACPv0F,KAAK+5F,KAAKqvB,uBAAuBzvB,GAGrC35F,KAAK+5F,KAAKuvB,uBAAuB3vB,KAY5Cw2E,GAAgB5xK,UAAUo+I,uBAAyB,SAAS/rH,GACxD,MAAM+mJ,EAAsB,GAc5B,OAZI33K,KAAK05F,iBACLi+E,EAAoBzzK,KAAKlE,KAAK05F,iBAAiBoqC,iBAAiBlzG,IAEhExqB,GAAO4gD,MAAM,uEAGbhnD,KAAKy5F,iBACLk+E,EAAoBzzK,KAAKlE,KAAKy5F,iBAAiBqqC,iBAAiBlzG,IAEhExqB,GAAO4gD,MAAM,uEAGVx8B,QAAQshF,WAAW6rE,GACrBxzG,MAAK,KAEFvzC,EAAM2B,gBAAkBvyB,KAAKo1K,4BAA4BxkJ,OAWrEu/I,GAAgB5xK,UAAUq+I,wBAA0B,SAAShsH,GACzD,MAAMgnJ,EAAuB,GAa7B,OAXI53K,KAAK05F,iBACLk+E,EAAqB1zK,KAAKlE,KAAK05F,iBAAiBsqC,kBAAkBpzG,IAElExqB,GAAO4gD,MAAM,+DAEbhnD,KAAKy5F,iBACLm+E,EAAqB1zK,KAAKlE,KAAKy5F,iBAAiBuqC,kBAAkBpzG,IAElExqB,GAAO4gD,MAAM,+DAGVx8B,QAAQshF,WAAW8rE,GACrBzzG,MAAK,KAEFvzC,EAAM2B,gBAAkBvyB,KAAKo1K,kCAQzCjF,GAAgB5xK,UAAU0nG,QAAU,WAChC,OAAOjmG,KAAK+5F,KAAKxjD,MAUrB45H,GAAgB5xK,UAAUunG,SAAW,WACjC,OAAK9lG,KAAK4zD,WAIH7T,GAAAA,QAAAA,iBAAyB//C,KAAK4zD,WAAWmrC,YACxC/+F,KAAKqC,QAAQ6G,OAAOu8G,aAJjB,MAYf0qD,GAAgB5xK,UAAU89F,YAAc,WACpC,OAAOr8F,KAAK+5F,KAAO/5F,KAAK+5F,KAAKsC,cAAgB,MAQjD8zE,GAAgB5xK,UAAUs5K,KAAO,SAASlgI,GACtC,OAAK33C,KAAKq8F,cAIH,IAAI7xE,SAAQ,CAACC,EAASrU,KACzBpW,KAAK+5F,KAAKyuB,SACN7wE,GAAY,IACZ,IAAMltB,MACNrW,GAAOgC,EAAOhC,KACd,IAAMgC,EAAO+kF,QARV3wE,QAAQpU,OAAO,IAAItQ,MAAM,4BAgBxCqqK,GAAgB5xK,UAAUu5K,OAAS,WAC/B,OAAO93K,KAAK63K,QAWhB1H,GAAgB5xK,UAAUw5K,kBAAoB,SAASxmF,GACnDvxF,KAAKg4K,mBAAmB,CAAEzmF,KAe9B4+E,GAAgB5xK,UAAUy5K,mBAAqB,SAASh2E,GACpD,IAAK7jG,MAAMC,QAAQ4jG,GACf,MAAM,IAAIl8F,MAAM,sDAGpB9F,KAAKszK,uBAAuBvd,gBAAgB/zD,IAOhDmuE,GAAgB5xK,UAAU4kG,SAAW,WACjC,OAAOnjG,KAAKszK,uBAAuBnwE,YAWvCgtE,GAAgB5xK,UAAUw4J,SAAW,SAAS/lB,GAC1C,IAAKjmI,OAAOktK,UAAUjnC,KAAWjmI,OAAO2E,SAASshI,EAAO,IACpD,MAAM,IAAIlrI,MAAO,4BAA2BkrI,KAEhD,MAAM1jI,EAAIvC,OAAOimI,GAEjB,GAAI1jI,GAAK,EACL,MAAM,IAAI8f,WAAW,mCAMzB,GAJAptB,KAAKszK,uBAAuBvc,SAASzpJ,GAIjCtN,KAAKy5F,iBAAkB,CACvB,MAAMy+E,EAAsB,IAAN5qK,EAEtBtN,KAAKy5F,iBACAknC,wBAAuB,EAAMu3C,GAC7B/pG,OAAM3qE,IACH4C,GAAO5C,MACF,2CAA0C00K,KAC3C10K,QAepB2sK,GAAgB5xK,UAAUwhG,UAAY,SAASxO,GAC3C,OAAOvxF,KAAKm6F,IAAI4F,UAAUxO,IAO9B4+E,GAAgB5xK,UAAUugG,gBAAkB,WACxC,OAAOxgG,OAAOiS,OAAOvQ,KAAK8iG,eAS9BqtE,GAAgB5xK,UAAUgjK,oBACpB,WAA8B,IAArB4W,EAAqB,wDAExBr1E,EAAe9iG,KAAK8+F,kBAOxB,OALKq5E,IACDr1E,EAAeA,EAAal3F,QAAOlD,IAAMA,EAAEo9F,cAIxChD,EAAavjG,OAAS,GAQrC4wK,GAAgB5xK,UAAUq0B,mBAAqB,SAAS5rB,GACpD,OAAOhH,KAAK8iG,aAAa97F,IAO7BmpK,GAAgB5xK,UAAU65K,WAAa,SAASpxK,GAC5C,MAAMqzF,EAAcr6F,KAAK4yB,mBAAmB5rB,GAEvCqzF,GAGLr6F,KAAK+5F,KAAKsuB,eAAehuB,EAAY0E,SAAU,UAQnDoxE,GAAgB5xK,UAAU85K,YAAc,SAASrxK,GAC7C,MAAMqzF,EAAcr6F,KAAK4yB,mBAAmB5rB,GACtCsxK,EAAWt4K,KAAKi9F,aAAej2F,EAC/BuvC,EAAOv2C,KAAKu4K,gBAAkB,SAAW,OAE3CD,EACAt4K,KAAK+5F,KAAKsuB,eAAeroH,KAAK+5F,KAAKqoB,UAAW7rE,GACvC8jD,GACPr6F,KAAK+5F,KAAKsuB,eAAehuB,EAAY0E,SAAUxoD,IAUvD45H,GAAgB5xK,UAAUi6K,gBAAkB,SAASxxK,EAAIsxB,GACrD,MAAM+hE,EAAcr6F,KAAK4yB,mBAAmB5rB,GAEvCqzF,GAGLr6F,KAAK+5F,KAAKsjB,KAAKhjB,EAAY0E,SAAUzmE,IAQzC63I,GAAgB5xK,UAAU22K,qBAAuB,WACzCl1K,KAAKy4K,0BACGz4K,KAAK05F,kBAAoB15F,KAAKuhK,sBAAwB,KAC9D9kK,OAAO4H,aAAarE,KAAKy4K,yBACzBz4K,KAAKy4K,wBAA0B,OASvCtI,GAAgB5xK,UAAUm2K,mBAAqB,YAEtC10K,KAAK05F,kBACC15F,KAAKuhK,uBAAyB,IAC7BvhK,KAAKy4K,0BACbz4K,KAAKy4K,wBAA0Bh8K,OAAO6H,YAAW,KAC7CtE,KAAKy4K,wBAA0B,KAC/BpjF,GAAWiE,cAAc3b,G5G/oDG,2B4GipDxB,CACIyV,KAAK,EACL3pF,MA3oDM,gBAqpD1B0mK,GAAgB5xK,UAAUisH,gBAAkB,SAASxjH,EAAI82E,GACrD,MAAM46F,EAAgB56F,GAAwByW,GAE9C,GAAImkF,IAAkBnkF,IAAmBmkF,IAAkBnkF,GAGvD,YAFAnuF,GAAO5C,MAAO,2BAA0Bk1K,KAK5C,MAAMr+E,EAAcr6F,KAAK4yB,mBAAmB5rB,GAEvCqzF,GAGLr6F,KAAK+5F,KAAKywB,gBAAgBnwB,EAAY0E,UAAU,EAAM25E,IAwB1DvI,GAAgB5xK,UAAUy9F,eAAiB,SACnC11C,EAAKq2D,EAAMpmE,EAAMuvD,EAAUvB,EAASztE,EAAQ0tE,EAAUqY,EAAS87D,EAAS5uH,EAAUu7D,GACtF,MAAMt+G,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAEtC,GAAW,UAAPt/C,GAAkBhH,KAAKi9F,aAAej2F,EACtC,OAGJ,MAAMqzF,EACA,IAAIgK,GAAiB/9C,EAAKtmD,KAAM28G,EAAM7W,EAAUvB,EAASztE,EAAQ0tE,GAEvEnK,EAAY6L,QAAQ3vD,GACpB8jD,EAAY0M,WAAW8V,GACvBxiB,EAAYC,YAAYvwC,GACxBswC,EAAY+L,eAAekf,GAE3BtlH,KAAK8iG,aAAa97F,GAAMqzF,EACxBr6F,KAAK6sF,aAAa/gE,KACdyrE,GACAvwF,EACAqzF,GAEJr6F,KAAK44K,gBAAgBv+E,GAGjBr6F,KAAK20K,YACL30K,KAAK64K,uBAGT74K,KAAK00K,sBAYTvE,GAAgB5xK,UAAUy8F,aAAe,WACrCh7F,KAAK64K,wBAST1I,GAAgB5xK,UAAUq6K,gBAAkB,SAASv+E,GACjDA,EAAYoM,cACPtiC,MAAKpa,IACFswC,EAAY0K,cAAgBh7C,EAAS9d,IAAI,0BACzCjsC,KAAK84K,oBAED/uH,EAAS9d,IAAIo9F,KACbhvC,EAAYwB,YAAY,mBAAmB,GAG3C9xC,EAAS9d,IAAI2/D,KACbvR,EAAYwB,YAAY,iBAAiB,MAGhD1tB,OAAM,KAAM,KASrBgiG,GAAgB5xK,UAAU09F,wBAA0B,SAAS31C,EAAKu2D,GAI9D,MACMk8D,EADQ/4K,KAAK8+F,kBACUxvF,MAAK5G,GAAKA,EAAEq2F,WAAaz4C,IAEtD,GAAIyyH,EAAgB,CAChBA,EAAehyE,WAAW8V,GAC1B,MAAM71G,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAEtCtmD,KAAK6sF,aAAa/gE,KACdyrE,GACAvwF,EACA61G,GAOHk8D,EAAelyE,cAChB7mG,KAAK64K,wBAIb1I,GAAgB5xK,UAAU29F,aAAe,SAAS51C,GAC9C,MAAMt/C,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAEtC,GAAW,UAAPt/C,GAAkBhH,KAAKi9F,aAAej2F,EACtC,OAGJ,MAAMqzF,EAAcr6F,KAAK8iG,aAAa97F,GAChCgyK,EAAgBh5K,KAAK8pG,oBAC3B,IAAImvE,EAAoB,GAExB,IAAK,MAAMvtK,KAAWstK,EAAe,CACjC,MAAMxvB,EAAe99I,EAAQ26E,eAAe0lE,gBAAgB/kJ,GAE5DwiJ,IAAiByvB,EAAoB,IAAKA,KAAsBzvB,IAGhE99I,EAAQo2H,2BAA2B96H,GAIvCiyK,EAAkBt2K,SAAQiuB,IACtB5wB,KAAK6sF,aAAa/gE,KAAKyrE,GAAqC3mE,MAG5DypE,WACOr6F,KAAK8iG,aAAa97F,GACzBhH,KAAK6sF,aAAa/gE,KAAKyrE,GAAiCvwF,EAAIqzF,IAG9C,OAAdr6F,KAAK+5F,OACL/5F,KAAK64K,sBAAqB,GAC1B74K,KAAKk1K,yBAkBb/E,GAAgB5xK,UAAUu9F,eAAiB,SACnCohB,EACA25D,EACAqC,EACA5gJ,EACAgtF,GAIJ,GAAIuxD,IAAY72K,KAAKi9F,WACjB,OAGJ,MAAM4B,EAAmB7+F,KAAK8iG,aAAa+zE,GAE3C,GAAI35D,EAMA,OALAl9G,KAAK6sF,aAAa/gE,KACdyrE,GAA8BsH,EAAkBvmE,EAAQgtF,QAE5DtlH,KAAKk8G,QAKT,MAAMi9D,EAAoBn5K,KAAK8iG,aAAao2E,GAE5CC,EAAkB7yE,cAAcgf,GAEhCtlH,KAAK6sF,aAAa/gE,KACdyrE,GAA0CsH,EAAkBs6E,EAAmB7gJ,IAOvF63I,GAAgB5xK,UAAU69F,mBAAqB,SAAS7lD,GAEpDv2C,KAAK6sF,aAAa/gE,KACdyrE,GAAyCv3F,KAAKi9F,WAAY1mD,IAGlE45H,GAAgB5xK,UAAUk+F,kBAAoB,SAASn2C,EAAK/P,GACxD,MAAMvvC,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAChC+zC,EAAcr6F,KAAK4yB,mBAAmB5rB,GAEvCqzF,IAGLA,EAAY6L,QAAQ3vD,GACpBv2C,KAAK6sF,aAAa/gE,KAAKyrE,GAAyCvwF,EAAIuvC,KAGxE45H,GAAgB5xK,UAAU49F,qBAAuB,SAAS71C,EAAKh4B,GAC3D,MAAMtnB,EAAK+4C,GAAAA,QAAAA,mBAA2BuG,GAChC+zC,EAAcr6F,KAAK4yB,mBAAmB5rB,GAEvCqzF,GAIDA,EAAYyK,eAAiBx2E,IAIjC+rE,EAAYyK,aAAex2E,EAC3BtuB,KAAK6sF,aAAa/gE,KACdyrE,EACAvwF,EACAsnB,KAUR6hJ,GAAgB5xK,UAAUi/F,mBAAqB,SAAS5sE,GACpD,GAAIA,EAAMu4D,QAAUnpF,KAAK6gG,cAIrB,YAHAz6F,GAAO+L,KACH,6DAGD,IAAKye,EAAMu4D,OAASnpF,KAAK6gG,cAI5B,YAHAz6F,GAAO+L,KACH,yDAKR,MAAMnL,EAAK4pB,EAAM4B,mBACX6nE,EAAcr6F,KAAK4yB,mBAAmB5rB,GAE5C,IAAKqzF,EAGD,YAFAj0F,GAAO5C,MAAO,gCAA+BwD,KAMjDqzF,EAAY2K,QAAQ9gG,KAAK0sB,GAErB5wB,KAAKq0B,aACLr0B,KAAKq0B,YAAY3C,SAASd,GAG9B,MAAMrG,EAAUvqB,KAAK6sF,aAErBj8D,EAAM5D,iBACF21E,IACA,IAAMp4E,EAAQuB,KAAKyrE,GAA0C3mE,KACjEA,EAAM5D,iBACF21E,IACA,CAAC9X,EAAY9B,KACS/oF,KAAK24J,4BAEL5vE,GACdx+D,EAAQuB,KACJyrE,GACAvwF,EACA6jF,MAKhBtgE,EAAQuB,KAAKyrE,GAAmC3mE,IAUpDu/I,GAAgB5xK,UAAU8/F,eAAiB,SAAS3yF,EAAS4oB,GACrDt0B,KAAKy5F,mBAAqB/tF,IAC1BtF,GAAO+L,KAAK,iBAEZnS,KAAKy5F,iBAAiBilC,UAAUpqG,GAChCt0B,KAAK6sF,aAAa/gE,KAAKyrE,GAA8Cv3F,KAAKy5F,oBAYlF02E,GAAgB5xK,UAAU+/F,gBAAkB,SAAS5yF,EAAS0tK,GACtDp5K,KAAKy5F,mBAAqB/tF,IAC1BtF,GAAO+L,KAAK,wBACZnS,KAAKy5F,iBAAiBw+B,iBAAiBmhD,KAU/CjJ,GAAgB5xK,UAAUk/F,qBAAuB,SAAS47E,GACtDr5K,KAAK8+F,kBAAkBn8F,SAAQ03F,IAC3B,MAAMrrB,EAASqrB,EAAY10B,YAE3B,IAAK,IAAIrmE,EAAI,EAAGA,EAAI0vE,EAAOzvE,OAAQD,IAC/B,GAAI0vE,EAAO1vE,KAAO+5K,EAAc,CAG5Bh/E,EAAY2K,QAAQ1/F,OAAOhG,EAAG,GAE9BU,KAAK6sF,aAAa/gE,KACdyrE,GAAqC8hF,GAErCr5K,KAAKq0B,aACLr0B,KAAKq0B,YAAY/B,YAAY+mJ,GAGjC,SAGTr5K,OAMPmwK,GAAgB5xK,UAAU+6K,mBAAqB,SACvCp/E,EACAikC,GAEJ,IAAIo7C,GAEEv5K,KAAK40K,iBAAmB50K,KAAK60K,wBAA2BvvJ,GAAQ8sD,aAAe9sD,GAAQm8D,gBACzF83F,EAAe,CACXjhJ,OAAQ,UACRyoG,kBAAmB,eACnBngB,SAAU,0CAEP5gH,KAAKy5F,iBAEZ8/E,EAAe,CACXjhJ,OAAQ,OACRyoG,kBAAmB,0BACnBngB,SAAU,qCAEN5gH,KAAKw5K,uBACbD,EAAe,CACXjhJ,OAAQ,UACRyoG,kBAAmB,2BACnBngB,SAAU,kEAEdvrB,GAAWiE,cAAc3b,G5GrhEE,a4GwhE3B47F,EACAv5K,KAAKy5K,oBAAoBv/E,EAAeq/E,GAExCv5K,KAAK05K,uBAAuBx/E,EAAeikC,IAOnDgyC,GAAgB5xK,UAAU6/F,eAAiB,SACnClE,EACAikC,EACAvuG,GAEJ,GAAIsqE,EAAc/Q,MACdnpF,KAAKs5K,mBAAmBp/E,EAAeikC,OACpC,CACH,IAAKn+H,KAAKwlH,QAAQtrB,EAAc2b,WAAY,CACxC,MAAM99D,EAAc,6CASpB,YAPA/3C,KAAKy5K,oBACDv/E,EAAe,CACX5hE,OAAQ,iBACRyoG,kBAAmBhpF,EACnB6oE,SAAU7oE,IAKtB/3C,KAAK25K,uBAAuBz/E,EAAeikC,EAAavuG,KAOhEugJ,GAAgB5xK,UAAUo7K,uBAAyB,SAC3Cz/E,EACAikC,EACAvuG,GAGJ5vB,KAAK05F,iBAAmBQ,EACxBl6F,KAAK+5F,KAAKmB,gBAAgB,oBAAsBtrE,EAChD5vB,KAAKkzK,oCAEDlzK,KAAKwwK,YACLn7E,GAAW+D,oBACPzb,G5G7nEyB,U4G6nEgB,CAAEyV,KAAK,KAGxD,MAAMilE,EACApnD,EAAEktB,GACC7uH,KAAK,4DACLo1C,KAAK,UAEd1kD,KAAK6sF,aAAa/gE,KACdyrE,GACA8gE,GAEJr4J,KAAKk1K,uBACL7/E,GAAWiE,cAAc3b,G5G5nEY,4B4G8nEjC,CACIyV,KAAK,EACL3pF,MAAOmmB,KAGf,IACIsqE,EAAc/R,WACVnoF,KAAK+5F,KACL/5F,KAAKm6F,IACLn6F,KAAK23H,gBACL,IACO33H,KAAKqC,QAAQ6G,OAChBsxH,wBAAyBx6H,KAAKquG,kBAExC,MAAO7qG,GAIL,OAHA+0B,KAAAA,iBAAsC/0B,QACtC4C,GAAO5C,MAAMA,GAMjBxD,KAAKw6F,kBAAkB2jC,EAAajkC,EAAc7T,gBAElD,MAAM2jB,EAAchqG,KAAK82K,yBAEzB,IACI58E,EAAco+B,YACV6F,GACA,KAIQn+H,KAAK6gG,eAAiB7gG,KAAK05F,kBAC3B15F,KAAK45K,wCAGT55K,KAAK6sF,aAAa/gE,KACdyrE,GACA2C,GACCl6F,KAAK6gG,eACN7gG,KAAK6sF,aAAa/gE,KACdyrE,GACA2C,MAGZ12F,IACI+0B,KAAAA,iBAAsC/0B,GACtC4C,GAAO5C,MACH,2CAA4CA,KAEpDwmG,GAIJhqG,KAAKs1K,0BACEp7E,EAAc7T,eAAe8nC,2BAA2BnuH,KAAKs1K,0BAMpElvK,GAAO+L,KAAK,4CACZnS,KAAKk4F,WAAWJ,eACZ93F,KAAK05F,iBAAiBrT,eACtB,SACJrmF,KAAKk4F,WAAW7B,iBAAiBr2F,KAAK05F,iBAAiBrT,gBACzD,MAAO59E,GACL8vB,KAAAA,iBAAsC9vB,GACtCrC,GAAO5C,MAAMiF,KAarB0nK,GAAgB5xK,UAAUi8F,kBAAoB,SAASD,EAAS9yB,GAC5D,IAAI8nE,EAAQ,KACZ,MAAMsqC,EACA5oE,EAAE1W,GACCjrF,KAAK,iCACL5O,QAEgB,IAArBm5K,EAAUt6K,SACVgwI,EAAQsqC,EAAU,GAAGn0H,aAAa,QAGlC6pF,EAEAvvI,KAAKm6F,IAAIk7D,wBAAwB,KAAM9lB,GAGvCvvI,KAAKm6F,IAAIk7D,wBAAwB5tF,EAAI,OAgB7C0oG,GAAgB5xK,UAAUk7K,oBAAsB,SACxCv/E,EACA73F,GACAA,GAAWA,EAAQu+G,UACnBroF,KAAAA,iBAAsC,IAAIzyB,MAAMzD,EAAQu+G,WAI5D1mB,EAAck+B,UACV,MACA50H,IACI4C,GAAO6lB,KACH,qEACiCzoB,KACtC,CACC80B,OAAQj2B,GAAWA,EAAQi2B,OAC3ByoG,kBAAmB1+H,GAAWA,EAAQ0+H,kBACtCF,sBAAsB,KAclCsvC,GAAgB5xK,UAAUggG,YAAc,SAChCrE,EACAinC,EACAC,GAIJ,GAHAh7H,GAAO+L,KACF,eAAcgvH,OAAqBC,UAChClnC,EAAc/Q,SAClB+Q,IAAkBl6F,KAAK05F,iBACvB15F,KAAKwwK,YAAa,EAElBn7E,GAAWiE,cACP3b,G5G3wE2B,Y4G2wEgB,CAAEyV,KAAK,KAGlDpzF,KAAKk4F,aACLl4F,KAAKk4F,WAAW5B,gBACZt2F,KAAK05F,iBAAiBrT,gBAC1BjgF,GAAO+L,KAAK,0BACZnS,KAAKk4F,WAAWR,cACZ13F,KAAK05F,iBAAiBrT,iBAI9BrmF,KAAK05F,iBAAmB,KAGxB15F,KAAKm6F,IAAIoE,mBACN,GAAIrE,IAAkBl6F,KAAKy5F,iBAAkB,CAChD,MAAMqgF,EAAc,GAII,YAApB34C,GAAgD,iBAAfC,GACjCh7H,GAAO+L,KAAK,6BACZkjF,GAAWe,UAAUhS,uBAAuB,CAAE21F,aAAa,KAChC,uBAApB54C,GACW,eAAfC,EAIH/rC,GAAWe,UAAUhS,uBAAuB,CAAE41F,WAAW,IAC9B,YAApB74C,GAAgD,YAAfC,IAGxC04C,EAAY74C,gBAAiB,GAEjCjhI,KAAKi6K,gBAAgBH,QAErB1zK,GAAO5C,MACH,2CACA02F,EAActtC,IACdstC,EAAc2b,UACdsrB,EACAC,IAQZ+uC,GAAgB5xK,UAAUw9F,kBAAoB,SAAS7B,GAC9CA,EAAc/Q,QACfnpF,KAAKk8G,QACLl8G,KAAK6sF,aAAa/gE,KAAKyrE,MAI/B44E,GAAgB5xK,UAAUu6K,kBAAoB,WAC1C,IAAIvI,GAAuB,EAC3B,MAAMztE,EAAe9iG,KAAK8+F,kBAG1B,IAAK,IAAIx/F,EAAI,EAAGA,EAAIwjG,EAAavjG,OAAQD,GAAK,EAC1C,GAAIwjG,EAAaxjG,GAAGknG,eAAgB,CAChC+pE,GAAuB,EACvB,MAGJA,IAAyBvwK,KAAKuwK,uBAC9BvwK,KAAKuwK,qBAAuBA,EAC5BvwK,KAAK6sF,aAAa/gE,KACdyrE,GACAg5E,KASZJ,GAAgB5xK,UAAU27K,gBAAkB,WACxC,OAAOl6K,KAAKuwK,sBAOhBJ,GAAgB5xK,UAAU0+F,SAAW,WACjC,OACIj9F,KAAK+5F,MAAQ/5F,KAAK+5F,KAAKqoB,UACjBriE,GAAAA,QAAAA,mBAA2B//C,KAAK+5F,KAAKqoB,WACrC,MAGd+tD,GAAgB5xK,UAAU8zJ,UAAY,SAASC,EAAO/hI,EAAU9V,GAC5D,MAAM0/J,EAAiBn6K,KAAK24J,0BAExBwhB,EACAA,EAAe9nB,UAAUC,EAAO/hI,EAAU9V,GAE1CrU,GAAO6lB,KAAK,yCAWpBkkJ,GAAgB5xK,UAAUgzK,eAAiB,SAASlvK,GAChD,OAAIrC,KAAK+5F,KACE/5F,KAAKixK,iBAAiBM,eAAelvK,GAGzCmoB,QAAQpU,OAAO,IAAItQ,MAAM,wCAUpCqqK,GAAgB5xK,UAAUmzK,cAAgB,SAAShO,GAC/C,OAAI1jK,KAAK+5F,KACE/5F,KAAKixK,iBAAiBS,cAAchO,GAGxCl5I,QAAQpU,OAAO,IAAItQ,MAAM,wCAMpCqqK,GAAgB5xK,UAAUwrH,sBAAwB,WAC9C,QAAI/pH,KAAK+5F,MACE/5F,KAAK+5F,KAAKgwB,yBAUzBomD,GAAgB5xK,UAAUyrH,KAAO,SAASj/B,GACtC,OAAI/qF,KAAK+5F,KACE/5F,KAAK+5F,KAAKiwB,KAAKj/B,GAGnB,IAAIvgE,SAAQ,CAACC,EAASrU,KACzBA,EAAO,IAAItQ,MAAM,2CAOzBqqK,GAAgB5xK,UAAU2rH,OAAS,WAC/B,OAAIlqH,KAAK+5F,KACE/5F,KAAK+5F,KAAKmwB,SAGd,IAAI1/F,SAAQ,CAACC,EAASrU,KACzBA,EAAO,IAAItQ,MAAM,2CAOzBqqK,GAAgB5xK,UAAU67K,iBAAmB,WACzC,OAAOp6K,KAAKgqH,KAAK,0BAOrBmmD,GAAgB5xK,UAAU87K,gBAAkBlK,GAAgB5xK,UAAU2rH,OAKtEimD,GAAgB5xK,UAAU8rH,eAAiB,WACvC,OAAIrqH,KAAK+5F,KACE/5F,KAAK+5F,KAAKswB,iBAGd,MAMX8lD,GAAgB5xK,UAAU+rH,YAAc,WACpC,OAAItqH,KAAK+5F,KACE/5F,KAAK+5F,KAAKuwB,cAGd,MAQX6lD,GAAgB5xK,UAAU+7K,mBAAqB,WAC3C,GAAIt6K,KAAK+5F,KACL,OAAO/5F,KAAK+5F,KAAKwwB,gBAYzB4lD,GAAgB5xK,UAAUo6J,wBAA0B,WAChD,MAAMjtJ,EAAU1L,KAAK6gG,cAAgB7gG,KAAKy5F,iBAAmBz5F,KAAK05F,iBAElE,OAAOhuF,EAAUA,EAAQ26E,eAAiB,MAW9C8pF,GAAgB5xK,UAAU4nI,mBAAqB,WAC3C,MAAMg0C,EAAiBn6K,KAAK24J,0BAE5B,OAAOwhB,EAAiBA,EAAeh0C,qBAAuB,MASlEgqC,GAAgB5xK,UAAUg8K,oBAAsB,SAASC,GAChDx6K,KAAKq8F,eAMVr8F,KAAKq9F,iBAAmBm9E,EACxBx6K,KAAK+5F,KAAKiY,uBAAuB,aAAc,CAC3CzwD,WAAY,CACRoiB,MAAO62G,EAAO72G,MACdE,MAAO22G,EAAO32G,MACdpc,MAAO,2CAETznD,KAAK+5F,KAAKlsC,gBAZZznD,GAAO6lB,KAAM,qCAAoCjsB,KAAK+5F,KAAO,GAAK,oBAC9D/5F,KAAKq8F,cAAgB,GAAK,qCAkBtC8zE,GAAgB5xK,UAAUk8K,oBAAsB,WAC5C,OAAOz6K,KAAKq9F,kBAMhB8yE,GAAgB5xK,UAAUy4K,kBAAoB,WAC1C,OAAOh3K,KAAKk9F,iBAMhBizE,GAAgB5xK,UAAU04K,kBAAoB,WAC1C,OAAOj3K,KAAKm9F,iBAMhBgzE,GAAgB5xK,UAAUsoJ,mBAAqB,WAC3C,OAAO7mJ,KAAK+5F,KAAKmB,iBAMrBi1E,GAAgB5xK,UAAUorG,4BAA8B,SAASzhG,EAAMuB,GACnEzJ,KAAKm2K,YAAa,qBAAoBjuK,IAAQ,CAAEuB,MAAAA,KAMpD0mK,GAAgB5xK,UAAUm8K,+BAAiC,SAASxyK,GAChElI,KAAKq2K,cAAe,qBAAoBnuK,KACxClI,KAAK+5F,KAAKlsC,gBASdsiH,GAAgB5xK,UAAUo8K,4BAA8B,SAASzyK,GAC7D,MAAMq2D,EAAWv+D,KAAK+5F,KAAKuoB,QAAQT,MAAMvyG,MAAK2xG,GAC1CA,EAAK1nF,UAAa,qBAAoBrxB,MAG1C,OAAOq2D,EAAWA,EAAS90D,WAAQ0C,GAWvCgkK,GAAgB5xK,UAAU06F,aAAe,SACjC2hF,EACAC,GACJ,OAAO76K,KAAKk4F,WAAWe,aAAa2hF,EAAiBC,IAUzD1K,GAAgB5xK,UAAU45F,mBAAqB,WAC3C,OAAOn4F,KAAKk4F,WAAWC,sBAS3Bg4E,GAAgB5xK,UAAUu8K,eAAiB,SAASlqJ,GAAO,MACvD,OAAOA,EAAM+B,UAAN,UAAkB3yB,KAAK24J,iCAAvB,aAAkB,EAAgChkE,aAAa/jE,GAASA,EAAM61H,WASzF0pB,GAAgB5xK,UAAUy6I,eAAiB,SAASpoH,EAAOmoH,GACvD,MAAMpmH,EAAU/B,EAAM+B,UACtB,IAAIrkB,EAAO,KACX,MAAM66E,EAAQv4D,EAAMu4D,MACd4xF,EAAe5xF,EAAQv4D,EAAM4B,mBAAqB,QAClD2nJ,EACAhxF,EACInpF,KAAKy5F,kBAAoBz5F,KAAKy5F,iBAAiBpT,eAC/CrmF,KAAK05F,kBAAoB15F,KAAK05F,iBAAiBrT,eAErD1zD,EAEIwnJ,IACA7rK,EAAO6rK,EAAexlF,aAAa/jE,IAGvCtiB,EAAOsiB,EAAM61H,UAEZ1N,EAAU/xI,IAAOsH,GAAS6rK,GAI/Bn6K,KAAKk4F,WAAWxO,4BACZywF,EACA7rK,EACAqkB,EACAooJ,EACAnqJ,EAAMioH,gBACNE,EAAU/xI,KAUlBmpK,GAAgB5xK,UAAUy6F,mBAAqB,SAASj6F,GACpDs2F,GAAWwD,QAAQ95F,IAUvBoxK,GAAgB5xK,UAAUinH,QAAU,SAASyD,GACzC,OAAOjpH,KAAK+5F,KAAO/5F,KAAK+5F,KAAKyrB,QAAQyD,GAAU,MAMnDknD,GAAgB5xK,UAAUy8K,+BAAiC,WACvDh7K,KAAK6sF,aAAa/gE,KAAKyrE,EACnB4D,IAWRg1E,GAAgB5xK,UAAU08K,oBAAsB,SAASn/G,EAAIzgD,GACzDrb,KAAKm6F,IAAI28D,mBAAmBh7F,EAAIzgD,IAQpC80J,GAAgB5xK,UAAUqyI,yBAA2B,SAASv1H,GAC1Drb,KAAKm6F,IAAIy2C,yBAAyBv1H,IAStC80J,GAAgB5xK,UAAU28K,yBAA2B,SAAS7/J,GAC1Drb,KAAKi7K,oBAAoB,GAAI5/J,IAiBjC80J,GAAgB5xK,UAAU+vG,YAAc,SAChCvvG,GAEgC,IADhC+8D,EACgC,uDAD3B,GACLq/G,EAAgC,wDACpC,MAAMC,SAAqBr8K,EAK3B,GAAoB,WAAhBq8K,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACAn7K,KAAKi7K,oBAAoBn/G,EAAI/8D,OAC1B,CACH,IAAIs8K,EAAgBt8K,EAIhB+nH,EAAc,OAElB,GAAoB,WAAhBs0D,EAA0B,CAC1Bt0D,EAAc,eAGTu0D,EAAcxnK,eAAeu4F,MAC9BivE,EAAcjvE,IAAuB,IAGzC,IACIivE,EAAgB93K,KAAKF,UAAUg4K,GACjC,MAAO5yK,GAGL,YAFArC,GAAO5C,MAAM,6CAA8CiF,IAM/DqzD,EACA97D,KAAKk2K,uBAAuBp6G,EAAIu/G,EAAev0D,GAG/C9mH,KAAKi2K,gBAAgBoF,EAAev0D,QAnCxC1gH,GAAO5C,MAAO,kCAAiC43K,MAyCvDjL,GAAgB5xK,UAAU+6J,wBAA0B,WAChD,OAAOt5J,KAAK6gG,cACN7gG,KAAK+wK,2BAA6B/wK,KAAKi7F,4BASjDk1E,GAAgB5xK,UAAU+8F,uBAAyB,SAAS5vF,IACnDA,EAAQy9E,OAASnpF,KAAKqC,QAAQ6G,OAAOy2H,oBACtC3/H,KAAK6sF,aAAa/gE,KAAKyrE,EAAyC4D,IASxEg1E,GAAgB5xK,UAAUu0K,4BAA8B,SAASpnK,GACzDA,EAAQy9E,MACRnpF,KAAK+wK,4BAA6B,EAElC/wK,KAAKi7F,4BAA6B,EAElCvvF,EAAQy9E,QAAUnpF,KAAK6gG,eACvB7gG,KAAK6sF,aAAa/gE,KAAKyrE,IAS/B44E,GAAgB5xK,UAAUg9F,uBAAyB,SAAS7vF,GAGpDA,EAAQy9E,OAGRkM,GAAWe,UAAUhS,uBAAuB,CAAE41F,WAAW,IAErDh6K,KAAKy5F,kBACLpE,GAAW+D,oBACPxb,G5GvyFiB,S4GyyFb,CACI09C,UAAWt7H,KAAKy5F,iBAAiB+9B,eAIjDx3H,KAAKi6K,gBAAgB,CACjB3hJ,OAAQ,qBACRyoG,kBAAmB,gBAEhBr1H,GAAW1L,KAAK05F,mBAAqBhuF,IAC5C1L,KAAKi1K,kBAAoB,IAAI1b,GAAkBv5J,MAC/CA,KAAKi1K,kBAAkB50K,MAAMqL,KASrCykK,GAAgB5xK,UAAUw0K,yBAA2B,SAASrnK,GACtDA,EAAQy9E,MACRnpF,KAAK+wK,4BAA6B,GAElC/wK,KAAKi7F,4BAA6B,EAClCj7F,KAAKi1K,mBAAqBj1K,KAAKi1K,kBAAkBhmI,UAGjDvjC,EAAQy9E,QAAUnpF,KAAK6gG,eACvB7gG,KAAK6sF,aAAa/gE,KAAKyrE,IAU/B44E,GAAgB5xK,UAAUm7K,uBAAyB,SAC3Cx/E,EACAikC,GACJn+H,KAAK+wK,4BAA6B,EAGlC/wK,KAAKy5F,iBAAmBS,EACxBl6F,KAAKkzK,oCAELlzK,KAAKy5F,iBAAiBtR,WAClBnoF,KAAK+5F,KACL/5F,KAAKm6F,IACLn6F,KAAK23H,gBACL,IACO33H,KAAKqC,QAAQ6G,OAChBsxH,wBAAyBx6H,KAAKquG,kBAGtCjoG,GAAO+L,KAAK,4CAEZ,IAAImpK,EAAWv7H,GAAAA,QAAAA,mBAA2B//C,KAAKy5F,iBAAiBoc,WAEhE,MAAMxb,EAAcr6F,KAAK8iG,aAAaw4E,GAElCjhF,IACAihF,EAAWjhF,EAAYwL,cAAgBy1E,GAG3Ct7K,KAAKk4F,WAAWJ,eACZ93F,KAAKy5F,iBAAiBpT,eACtBi1F,GAEJ,MAAMtxE,EAAchqG,KAAK00F,iBAEzB10F,KAAKy5F,iBAAiB6+B,YAClB6F,GACA,KACI/3H,GAAO4gD,MAAM,uCAEbhnD,KAAK6sF,aAAa/gE,KACdyrE,GACA2C,MAER12F,IACI4C,GAAO5C,MACH,+CAAgDA,KAExDwmG,IAORmmE,GAAgB5xK,UAAUg9K,oBAAsB,WAC5Cv7K,KAAKw7K,iBACD,MAAOx7K,KAAK05F,iBAAiBrT,eAAe0lE,oBAOpDokB,GAAgB5xK,UAAUk9K,oBAAsB,WAC5Cz7K,KAAKw7K,iBACD,MAAOx7K,KAAKy5F,iBAAiBpT,eAAe0lE,oBAUpDokB,GAAgB5xK,UAAUi9K,iBAAmB,SAASroB,EAAS3J,GAC3D,IAAK,MAAM54H,KAAS44H,EAChBpjJ,GAAO+L,KAAM,iBAAgBghJ,YAAkBviI,KAC/C5wB,KAAKw9F,mBAAmB5sE,IAWhCu/I,GAAgB5xK,UAAUy0K,4BAA8B,SAChD94E,GAC0B,OAA1Bl6F,KAAKy5F,mBAILz5F,KAAK07K,yBACC17K,KAAKy5F,iBAAiBkgC,uBAGF,OAA1B35H,KAAK05F,mBACL15F,KAAK27K,yBACC37K,KAAK05F,iBAAiBigC,uBAGhC,IAAIxlH,GAAO,EACX,MAAMynK,EAAmB57K,KAAKqC,QAAQ6G,OAAO0yK,iBAsB7C,GAnBK1hF,EAAc/Q,MAERnpF,KAAKy5F,mBAAqBS,GACjC9zF,GAAO5C,MAAM,0DAEb2Q,GAAO,IACC+lF,EAAcs9B,aACS,iBAArBokD,GACP3qK,KAAKE,SAAWyqK,IACnBx1K,GAAO+L,KAAM,+BAA8BypK,SAC3CvmF,GAAWe,UAAUhS,uBAAuB,CAAE21F,aAAa,IAC3D/5K,KAAKi6K,gBAAgB,CACjB3hJ,OAAQ,UACRyoG,kBAAmB,iBAGvB5sH,GAAO,GAfPA,GAAO,GAkBNgW,MAAMnqB,KAAK07K,4BACRvxJ,MAAMnqB,KAAK27K,0BAA2B,CAC1C,MAAME,EACA77K,KAAK07K,yBAA2B17K,KAAK27K,yBAE3CtmF,GAAWiE,c5Gr4Fb,kC4Gu4FM,CAAE7vF,MAAOoyK,IAGb3hF,EAAc/Q,QAAUnpF,KAAK6gG,eAC7B7gG,KAAK6sF,aAAa/gE,KAAKyrE,GAGvBpjF,IAMJnU,KAAK87K,eAAc,GAGf97K,KAAK05F,iBACL15F,KAAK+7K,yBAEL31K,GAAO+L,KAAK,mDAGhBnS,KAAKy7K,sBAGDz7K,KAAK05F,kBACL15F,KAAK45K,wCAGTxzK,GAAO+L,KAAK,6CACZnS,KAAKk4F,WAAW7B,iBAAiBr2F,KAAKy5F,iBAAiBpT,gBAEvDgP,GAAW+D,oBACPxb,G5G7/F8B,c4G+/F1B,CACI09C,UAAWt7H,KAAKy5F,iBAAiB+9B,iBAajD24C,GAAgB5xK,UAAU00K,kBAAoB,WAA0B,IAAjBvuF,EAAiB,uDAAJ,GAChE,MAAM6pE,GAAWngD,IAAAA,CAAQ1pB,EAAY1kF,KAAK0kF,YAG1C,GADA1kF,KAAK0kF,WAAaA,EACd6pE,EAAS,CACTvuJ,KAAK6sF,aAAa/gE,KAAKyrE,GAA0Cv3F,KAAK0kF,YAEtE,MAAMs3F,EAA+D,SAA3Ch8K,KAAK0kF,WAAW,uBACpCu3F,EAA+D,SAA3Cj8K,KAAK0kF,WAAW,uBAEtC1kF,KAAK+xK,2BAA6BiK,IAClCh8K,KAAK+xK,yBAA2BiK,EAChCh8K,KAAK6sF,aAAa/gE,KAAKyrE,EAAwDykF,GAC/E51K,GAAO+L,KAAM,6CAA4C6pK,MAGzDh8K,KAAKgyK,2BAA6BiK,IAClCj8K,KAAKgyK,yBAA2BiK,EAChCj8K,KAAK6sF,aAAa/gE,KAAKyrE,GAAwD0kF,GAC/E71K,GAAO+L,KAAM,6CAA4C8pK,MAIvC,CAIlB,eAGA,cAGUt5K,SAAQuH,SACMiC,IAApBu4E,EAAWx6E,IACXmrF,GAAWe,UAAUhS,uBAAuB,CACxC,CAACl6E,EAAIgD,QAAQ,IAAK,MAAOw3E,EAAWx6E,UAaxDimK,GAAgB5xK,UAAUknG,YAAc,SAASv7F,GAC7C,OAAOlK,KAAK0kF,WAAWx6E,IAO3BimK,GAAgB5xK,UAAU29K,4BAA8B,WAChDl8K,KAAK4wK,uBACLxqK,GAAO+L,KAAK,mCACZ9N,aAAarE,KAAK4wK,sBAClB5wK,KAAK4wK,qBAAuB,OASpCT,GAAgB5xK,UAAUw9K,uBAAyB,WAC/C/7K,KAAKm8K,oBACD,MAAOn8K,KAAK05F,iBAAiBrT,eAAe0lE,oBAQpDokB,GAAgB5xK,UAAU69K,uBAAyB,WAC/Cp8K,KAAKm8K,oBACD,MAAOn8K,KAAKy5F,iBAAiBpT,eAAe0lE,oBAUpDokB,GAAgB5xK,UAAU49K,oBAAsB,SACxCE,EACA7yB,GACJ,IAAK,MAAM54H,KAAS44H,EAChBpjJ,GAAO+L,KAAM,mBAAkBkqK,YAA0BzrJ,KACzD5wB,KAAKy9F,qBAAqB7sE,IAQlCu/I,GAAgB5xK,UAAU+9K,qCAAuC,WAC7Dl2K,GAAO+L,KAAK,sDACZnS,KAAK05F,iBAAiBinC,wBAAuB,GAAM,GAAMx8D,MACrD,KACI/9D,GAAO+L,KAAK,sDAEhB3O,IACI4C,GAAO5C,MACH,2DACAA,OAWhB2sK,GAAgB5xK,UAAUu9K,cAAgB,SAASx5E,GAC/C,GAAItiG,KAAKozF,MAAQkP,EAAjB,CAMA,GADAtiG,KAAKozF,IAAMkP,EACPA,EAAW,CACXl8F,GAAO+L,KAAK,wCAIZkjF,GAAWe,UAAUhS,uBAAuB,CACxC41F,WAAW,EACXD,aAAa,IAKjB,MAAM7B,EAAoC,IAApBl4K,KAAKmjG,WAE3BnjG,KAAKy5F,iBACAknC,wBAAuB,EAAMu3C,GAC7B/pG,OAAM3qE,IACH4C,GAAO5C,MAEI,+CAAG00K,KAAkB10K,WAGxC4C,GAAO+L,KAAK,mCAIZnS,KAAK05F,kBACL15F,KAAKk4F,WAAWE,gCACZp4F,KAAK05F,iBAAiBrT,gBAAiBic,GAI/CtiG,KAAKswK,YAAc,KAGnBtwK,KAAK6sF,aAAa/gE,KACdyrE,GACAv3F,KACAA,KAAKozF,KACTpzF,KAAK6sF,aAAa/gE,KACdyrE,GACAv3F,KAAKijK,0BAGTjjK,KAAK6sF,aAAa/gE,KACd9rB,KAAKs5J,0BACC/hE,EACAA,QApDNnxF,GAAO4gD,MAAO,8CAA6Cs7C,MA4DnE6tE,GAAgB5xK,UAAUg+K,iBAAmB,SAAS1mE,GAElD,GADA71G,KAAKk8K,8BACDl8K,KAAKy5F,iBAGL,YAFArzF,GAAO5C,MAAM,gCAKjBxD,KAAK+wK,4BAA6B,EAClC/wK,KAAKy5F,iBACCz5F,KAAKs1F,KAAK1hC,WAAW83D,OAAOic,oBAC1B3nI,KAAK+5F,KAAKqoB,UACVvM,GACRzvG,GAAO+L,KACH,gCAAiCnS,KAAK+5F,KAAKqoB,UAAWvM,GAC1D71G,KAAKkzK,oCAELlzK,KAAKy5F,iBAAiBtR,WAClBnoF,KAAK+5F,KACL/5F,KAAKm6F,IACLn6F,KAAK23H,gBACL,IACO33H,KAAKqC,QAAQ6G,OAChBsxH,wBAAyBx6H,KAAKquG,kBAGtCjoG,GAAO+L,KAAK,4CAEZ,IAAImpK,EAAWv7H,GAAAA,QAAAA,mBAA2B//C,KAAKy5F,iBAAiBoc,WAEhE,MAAMxb,EAAcr6F,KAAK8iG,aAAaw4E,GAElCjhF,IACAihF,EAAWjhF,EAAYwL,cAAgBy1E,GAG3Ct7K,KAAKk4F,WAAWJ,eACZ93F,KAAKy5F,iBAAiBpT,eACtBi1F,GAEJ,MAAMtxE,EAAchqG,KAAK00F,iBAEzB10F,KAAKy5F,iBAAiBquB,OAAO9d,IAOjCmmE,GAAgB5xK,UAAUq7K,sCAAwC,WAC9DxzK,GAAO+L,KAAK,wDACZnS,KAAK05F,iBAAiBinC,wBAAuB,GAAO,GAAOx8D,MACvD,KACI/9D,GAAO+L,KAAK,yDAEhB3O,IACI4C,GAAO5C,MACH,4DACAA,OAWhB2sK,GAAgB5xK,UAAUs6K,qBAAuB,SAAS2D,GACtD,IAAKx8K,KAAK40K,gBACC50K,KAAK60K,wBACLvvJ,GAAQ8sD,aACR9sD,GAAQm8D,iBACRzhF,KAAKquG,gBAGZ,YAFAjoG,GAAO+L,KAAK,qBAIhB,MAAMsqK,EAAQz8K,KAAK8+F,kBACbgrE,EAAY2S,EAAMl9K,OAGlBm9K,EAAgB18K,KAAKw5K,qBAQ3B,IALKkD,GAAiB18K,KAAK4wK,sBACvB5wK,KAAKk8K,+BAIJl8K,KAAKy5F,kBAAoBijF,EAAe,CACzC,MAAMrzF,EAAOygF,GAAa2S,EAAM,GAG1BE,EAAO38K,KAAKi9F,WACZ2/E,EAAUvzF,EAAKmZ,QAErB,GAAIm6E,EAAOC,EAKP,YAJAx2K,GAAO4gD,MACH,2DACqC21H,EAAMC,GAG5C,GAAID,IAASC,EAGhB,YAFAx2K,GAAO5C,MAAM,kBAAmBm5K,EAAMC,GAK1C,MAAMt2H,EAAM+iC,EAAK0V,SAEjB,GAAIy9E,EAAe,CACf,GAAIx8K,KAAK4wK,qBAGL,YAFAxqK,GAAO5C,MAAM,+CAIjB4C,GAAO+L,KACF,wBAAuBm0C,WACpBtmD,KAAK8wK,6BACb9wK,KAAK4wK,qBAAuBtsK,WACxBtE,KAAKu8K,iBAAiBv5K,KAAKhD,KAAMsmD,GACX,IAAtBtmD,KAAK8wK,qBAET1qK,GAAO+L,KAAM,wBAAuBm0C,KACpCtmD,KAAKu8K,iBAAiBj2H,QAEnBtmD,KAAKy5F,mBAAqBijF,IACjCt2K,GAAO+L,KAAM,uBAAsBnS,KAAKy5F,iBAAiBoc,aAGrD71G,KAAKy5F,iBAAiB+9B,aAAesyC,EAAY,GACjDz0E,GAAW+D,oBACPxb,G5Gj0GwB,kB4Gm0GhC59E,KAAKi6K,oBAUb9J,GAAgB5xK,UAAUi7K,mBAAqB,WAC3C,MAAMiD,EAAQz8K,KAAK8+F,kBACbgrE,EAAY2S,EAAMl9K,OAClBs9K,OAAmG1wK,IAAtFswK,EAAMntK,MAAK5G,GAAwB,gBAAnBA,EAAEm+F,cAAkCn+F,EAAEg+F,WAAW2iC,MAC9EqzC,EAA8B,IAAd5S,IAAoB+S,EAI1C,OAFAz2K,GAAO4gD,MAAO,mBAAkB8iH,kBAA0B+S,QAAiBH,KAEpEA,GAcXvM,GAAgB5xK,UAAU07K,gBAAkB,WAAuB,IAAd53K,EAAc,uDAAJ,GAC3D,MAAM,OACFi2B,EAAS,UADP,kBAEFyoG,EAAoB,0BAFlB,eAGFE,GAAiB,GACjB5+H,EAEJ,IAAKrC,KAAKy5F,iBAGN,YAFArzF,GAAO5C,MAAM,iCAKjB,MAAMs5K,EAAoB98K,KAAK6gG,cAG3Bi8E,IACI98K,KAAK05F,mBAAqBunC,GAC1BjhI,KAAKs8K,uCAITt8K,KAAKo8K,0BAITh2K,GAAO+L,KAAK,4CACZnS,KAAKk4F,WAAW5B,gBAAgBt2F,KAAKy5F,iBAAiBpT,gBACtDjgF,GAAO+L,KAAK,yCACZnS,KAAKk4F,WAAWR,cAAc13F,KAAKy5F,iBAAiBpT,gBAEpDrmF,KAAKy5F,iBAAiB2+B,WAClB,KACIhyH,GAAO+L,KAAK,mCAEhB3O,IAemB,YAAX80B,GACAlyB,GAAO5C,MAAM,iEAAkEA,KAEpF,CACC80B,OAAAA,EACAyoG,kBAAAA,EACAF,qBAAsB7gI,KAAK+5F,MACpB/5F,KAAK4yB,mBACJmtB,GAAAA,QAAAA,mBAA2B//C,KAAKy5F,iBAAiBoc,cAGjE71G,KAAKy5F,iBAAmB,KAGxBz5F,KAAK87K,eAAc,GAEfgB,IAEI98K,KAAK05F,mBAAqBunC,EAC1BjhI,KAAKu7K,sBAELn1K,GAAO+L,KAAK,mDAWxBg+J,GAAgB5xK,UAAU60K,oBAAsB,SAASl5E,EAAe0rC,GACpE,IAAK1rC,EACD,OAIJ,GAAI0rC,EAAK,CACL,GAAIA,EAAIm3C,KACJ,OAEJn3C,EAAIm3C,MAAO,EAGf,MAAMvG,EAAmBt8E,EAAc7T,eAAeqO,eAAeH,IAC/DE,EAAmByF,EAAc7T,eAAeqO,eAAeH,IACrE,IAAIyoF,GAAkB,EAQtB,GANIxG,GAAoBA,EAAiBj3K,OACrCy9K,EAAkBh9K,KAAK68I,oBAAoBtoD,GAAiBiiF,EAAiB,GAAIA,EAAiB,GAAG78E,WAC9F35F,KAAK68I,oBAAoBtoD,QAAiBpoF,GAAW,KAC5D6wK,GAAkB,GAGlBvoF,GAAoBA,EAAiBl1F,OAAQ,CAC7C,MAAM09K,EAAoBj9K,KAAK68I,oBAC3BtoD,GAAiBE,EAAiB,GAAIA,EAAiB,GAAGkF,WACxDujF,EAAmBl9K,KAAKw3K,iBAAiB/iF,EAAiB,IAEhEuoF,EAAkBA,GAAmBC,GAAqBC,MACvD,CACH,MAAMD,EAAoBj9K,KAAK68I,oBAAoBtoD,QAAiBpoF,GAAW,GACzE+wK,EAAmBl9K,KAAKw3K,mBAE9BwF,EAAkBA,GAAmBC,GAAqBC,EAG9DF,GAAmBh9K,KAAK+5F,KAAKlsC,gBASjCsiH,GAAgB5xK,UAAUsiG,YAAc,WACpC,OAAO7gG,KAAKozF,KAShB+8E,GAAgB5xK,UAAU4+K,sBAAwB,WAC9C,OAAIn9K,KAAK6gG,cACE7gG,KAAKy5F,iBAAiBpT,eAAe8/C,qBAGzC,MASXgqC,GAAgB5xK,UAAU4vH,2BAA6B,SAASC,GAC5D,MAAsB,iBAAXA,GAAuBjkG,MAAMikG,IACpChoH,GAAO5C,MAAO,iBAAgB4qH,+CAEvB,IAGXpuH,KAAKs1K,yBAA2BlnD,EAGhCpuH,KAAK05F,kBAAoB15F,KAAK05F,iBAAiBrT,eAAe8nC,2BAA2BC,GAGzFpuH,KAAKm6F,IAAIg0B,2BAA2BC,IAE7B,IAMX+hD,GAAgB5xK,UAAU6+K,gBAAkB,WACxC,MAAMX,EAAQz8K,KAAK8+F,kBAGnB,GAAqB,IAAjB29E,EAAMl9K,OAKN,MAAM,IAAIuG,MACN,kEANgB,CACpB,MAAMqjH,EAAUszD,EAAM,GAAG19E,SAEzB/+F,KAAKu8K,iBAAiBpzD,KAU9BgnD,GAAgB5xK,UAAU8+K,eAAiB,SAASh7K,GAChDrC,KAAKi6K,gBAAgB53K,IAOzB8tK,GAAgB5xK,UAAU++K,gBAAkB,WACxC,OAAOt9K,KAAK2wK,sBAAsB9nG,YAOtCsnG,GAAgB5xK,UAAUg/K,qBAAuB,SAASliK,GACtDrb,KAAKs1F,KAAK83C,0BAA0BptI,KAAK+5F,KAAK8D,QAASxiF,IAoB3D80J,GAAgB5xK,UAAUkkK,uBAAyB,SAAS5wB,GACxD7xI,KAAKszK,uBAAuB7Q,uBAAuB5wB,IAWvDs+B,GAAgB5xK,UAAU6hI,2BAA6B,SAASF,GAC5DlgI,KAAKszK,uBAAuB9Q,kCAAkCtiC,IAUlEiwC,GAAgB5xK,UAAUkiI,yBAA2B,SAASP,GAC1D,OAAOlgI,KAAKuzK,oBAAoBjQ,+BAA+BpjC,IAgBnEiwC,GAAgB5xK,UAAUuvK,wBACpB,SAAShB,EAAYx+I,GACnB,OAAKtuB,KAAK+5F,KAIH/5F,KAAKgxK,kBACPlD,wBAAwBhB,EAAYx+I,GAJ9B,IAAIxoB,MAAMinK,KAY7BoD,GAAgB5xK,UAAU20K,kCAAoC,WAC1D,MAAMxuD,EAAY1kH,KAAKs6K,sBAEnBt6K,KAAK4xK,mCAAsCltD,GAAgD,OAAnC1kH,KAAK24J,4BAIjEtjE,GAAWiE,cAAchc,GAAsB,SAAU,CACrDonC,UAAAA,EACAnzB,cAAgB,GAAEmzB,KAAa1kH,KAAK4yK,qBAExC5yK,KAAK4xK,kCAAoC9qK,KAAK8oB,QAOlDugJ,GAAgB5xK,UAAUy2K,kCAAoC,WAC1D,MAAMtwD,EAAY1kH,KAAKs6K,qBAElB51D,GAAc1kH,KAAK4xK,mCAKxBv8E,GAAWiE,cAAchc,GAAsB,OAAQ,CACnDonC,UAAAA,EACAnzB,cAAgB,GAAEmzB,KAAa1kH,KAAK4yK,kBACpC5wG,MAAO,CACHzxC,SAAUtf,KAAKC,OAAOpK,KAAK8oB,MAAQ5vB,KAAK4xK,mCAAqC,KAC7E4L,KAAMx9K,KAAK41K,2BAUvBzF,GAAgB5xK,UAAUqrG,sBAAwB,WAC1C5pG,KAAKy5F,kBACLz5F,KAAKi6K,gBAAgB,CACjBl5C,kBAAmB,UACnBE,gBAAgB,IAIpBjhI,KAAK05F,kBACL15F,KAAK05F,iBAAiB0+B,UAClB,MACA50H,IACI4C,GAAO6lB,KAAK,8DAA+DzoB,KAC5E,CACC80B,OAAQ,UACRyoG,kBAAmB,mBACnBE,gBAAgB,EAChBJ,sBAAsB,IAIlC7gI,KAAK64K,sBAAqB,IAQ9B1I,GAAgB5xK,UAAU8vG,cAAgB,WACtC,OAAOzsB,QAAQ5hF,KAAK8xK,gBAAkB9xK,KAAK8xK,eAAeroE,cAS9D0mE,GAAgB5xK,UAAUszK,gBAAkB,WACxC,OAAO3hE,GAAc1yC,YAAYx9D,KAAKqC,QAAQ6G,SASlDinK,GAAgB5xK,UAAUk/K,WAAa,SAASz+E,GACvCh/F,KAAK6xK,kBAMV7xK,KAAK8xK,eAAephE,WAAW1R,GAL3B54F,GAAO6lB,KAAK,6DAepBkkJ,GAAgB5xK,UAAUm/K,sBAAwB,SAAStzE,GACvDpqG,KAAK8xK,eAAejoE,iBAAiBO,IAQzC+lE,GAAgB5xK,UAAUo/K,iBAAmB,WACzC,OAAO/7F,QAAQ5hF,KAAK+5F,MAAQ/5F,KAAK+5F,KAAKowB,WAAW3sD,gBAQrD2yG,GAAgB5xK,UAAUg6K,cAAgB,WACtC,OAAO32F,QAAQ5hF,KAAK+5F,MAAQ/5F,KAAK+5F,KAAKkiB,qBAQ1Ck0D,GAAgB5xK,UAAUm+G,YAAc,WACpC,OAAI18G,KAAK+5F,MAAQ/5F,KAAKq8F,cACXr8F,KAAK+5F,KAAKowB,WAAW/sD,SAGzB5yC,QAAQpU,OACX,IAAItQ,MAAM,yDAQlBqqK,GAAgB5xK,UAAUq/K,aAAe,WACjC59K,KAAK+5F,MAAQ/5F,KAAKq8F,cAClBr8F,KAAK+5F,KAAKowB,WAAWpO,UAErB31G,GAAO6lB,KAAM,4BAA2BjsB,KAAK+5F,KAAO,GAAK,oBACrD/5F,KAAKq8F,cAAgB,GAAK,qCAWtC8zE,GAAgB5xK,UAAUs/K,UAAY,SAASvvJ,EAAa+tF,GACxD,OAAIr8G,KAAK+5F,KACE/5F,KAAK+5F,KAAKowB,WAAWn8G,KAAKsgB,EAAa+tF,GAG3C7xF,QAAQpU,OAAO,IAAItQ,MAAM,gCAOpCqqK,GAAgB5xK,UAAUu/K,gBAAkB,SAAS92K,GAC7ChH,KAAK+5F,MACL/5F,KAAK+5F,KAAKowB,WAAW/M,WAAWp2G,IASxCmpK,GAAgB5xK,UAAUw/K,mBAAqB,SAAS/2K,GAChDhH,KAAK+5F,MACL/5F,KAAK+5F,KAAKowB,WAAW7M,cAAct2G,IAS3CmpK,GAAgB5xK,UAAUy/K,wBAA0B,WAChD,OAAOp8F,QAAQ5hF,KAAK+5F,MAAQ/5F,KAAK+5F,KAAKqwB,kBAAkB5sD,gBAO5D2yG,GAAgB5xK,UAAU0/K,mBAAqB,SAASngG,GAChD99E,KAAK+5F,MAAQ/5F,KAAKq8F,gBACdve,IAAcyW,IAAmBzW,IAAcyW,IACnDv0F,KAAK+5F,KAAKqwB,kBAAkBhtD,QAAO,EAAM0gB,GAEzC13E,GAAO6lB,KAAM,mCAAkCjsB,KAAK+5F,KAAO,GAAK,oBAC5D/5F,KAAKq8F,cAAgB,GAAK,qCAC1Br8F,KAAK+5F,MAAQ/5F,KAAKq8F,cAAgB,0BAA4B,OAQ1E8zE,GAAgB5xK,UAAU2/K,oBAAsB,SAASpgG,GACjD99E,KAAK+5F,MAAQ/5F,KAAKq8F,gBACdve,IAAcyW,IAAmBzW,IAAcyW,IACnDv0F,KAAK+5F,KAAKqwB,kBAAkBhtD,QAAO,EAAO0gB,GAE1C13E,GAAO6lB,KAAM,oCAAmCjsB,KAAK+5F,KAAO,GAAK,oBAC7D/5F,KAAKq8F,cAAgB,GAAK,qCAC1Br8F,KAAK+5F,MAAQ/5F,KAAKq8F,cAAgB,0BAA4B,OAU1E8zE,GAAgB5xK,UAAU4/K,oBAAsB,SAASrgG,EAAW92E,GAChE,GAAIhH,KAAK+5F,MAAQ/5F,KAAKq8F,gBACdve,IAAcyW,IAAmBzW,IAAcyW,IAAkB,CAErE,MAAM8F,EAAcr6F,KAAK4yB,mBAAmB5rB,GAE5C,IAAKqzF,EACD,OAGJr6F,KAAK+5F,KAAKqwB,kBAAkB5Q,QAAQ17B,EAAWuc,EAAY0E,eAE3D34F,GAAO6lB,KAAM,mCAAkCjsB,KAAK+5F,KAAO,GAAK,oBAC5D/5F,KAAKq8F,cAAgB,GAAK,qCAC1Br8F,KAAK+5F,MAAQ/5F,KAAKq8F,cAAgB,0BAA4B,OAU1E8zE,GAAgB5xK,UAAU6/K,mBAAqB,SAAStgG,EAAW92E,GAC/D,GAAIhH,KAAK+5F,MAAQ/5F,KAAKq8F,gBACdve,IAAcyW,IAAmBzW,IAAcyW,IAAkB,CAErE,MAAM8F,EAAcr6F,KAAK4yB,mBAAmB5rB,GAE5C,IAAKqzF,EACD,OAGJr6F,KAAK+5F,KAAKqwB,kBAAkBh0G,OAAO0nE,EAAWuc,EAAY0E,eAE1D34F,GAAO6lB,KAAM,kCAAiCjsB,KAAK+5F,KAAO,GAAK,oBAC3D/5F,KAAKq8F,cAAgB,GAAK,qCAC1Br8F,KAAK+5F,MAAQ/5F,KAAKq8F,cAAgB,0BAA4B,OAS1E8zE,GAAgB5xK,UAAUw+G,iBAAmB,WAAW,MACpD,iBAAO/8G,KAAK+5F,YAAZ,aAAO,EAAWgjB,oBC59HtBk1D,GAAgB1zK,UAAU0tD,QAAU,WAAuB,IAAd5pD,EAAc,uDAAJ,GACnDrC,KAAKs1F,KAAKrpC,QAAQ5pD,EAAQ2E,GAAI3E,EAAQs1C,WAU1Cs6H,GAAgB1zK,UAAUouD,OAAS,SAAStqD,GACxCrC,KAAKs1F,KAAK3oC,OAAOtqD,IAOrB4vK,GAAgB1zK,UAAUgxD,WAAa,WAKnC,OAAOvvD,KAAKs1F,KAAK/lC,cAAc,YAQnC0iH,GAAgB1zK,UAAUwgG,OAAS,WAC/B,OAAO/+F,KAAKs1F,KAAKyJ,UAOrBkzE,GAAgB1zK,UAAU8/K,SAAW,SAAS/0C,GAC1CtpI,KAAKspI,MAAQA,GAWjB2oC,GAAgB1zK,UAAU+/K,oBAAsB,SAASp2K,EAAM7F,GAC3D,OAAO,IAAI8tK,GAAgB,CACvBjoK,KAAAA,EACAgB,OAAQ7G,EACRuxD,WAAY5zD,QASpBiyK,GAAgB1zK,UAAUyuB,iBAAmB,SAASqL,EAAOpgB,GACzDjY,KAAKs1F,KAAKh+E,YAAY+gB,EAAOpgB,IAQjCg6J,GAAgB1zK,UAAU2uB,oBAAsB,SAASmL,EAAOpgB,GAC5DjY,KAAKs1F,KAAKp9E,eAAemgB,EAAOpgB,IAMpCg6J,GAAgB1zK,UAAUsoJ,mBAAqB,WAC3C,OAAO7mJ,KAAKs1F,KAAK4F,iBAUrB+2E,GAAgB1zK,UAAUi9D,WAAa,SAASmrC,GAAyB,IAAhB+K,EAAgB,wDACrE1xG,KAAKs1F,KAAK78C,KAAK+iB,WAAWmrC,EAAS+K,GAAQ,IAU/CugE,GAAgB1zK,UAAUm9D,cAAgB,SAASirC,GAAyB,IAAhB+K,EAAgB,wDACxE1xG,KAAKs1F,KAAK78C,KAAKijB,cAAcirC,EAAS+K,GAAQ,IAMlDugE,GAAgB1zK,UAAUggL,QAAU,WAChC,MAAM1lK,EAAO7Y,KAAKs1F,KAAKo3C,eAEjBqN,EAAW,GAEjBA,EAASxrG,KAAO,IAAIznC,KACpBizI,EAASvxH,IAAM/rB,OAAOwO,SAASuc,KAC/BuyH,EAASh2D,GAAK5iB,UAAUE,UAExB,MAAMl7D,EAAMnG,KAAKs1F,KAAKq3C,aAQtB,OANIxmI,IACA4zI,EAASzkD,KAAOnvF,GAGpB0S,EAAKkhI,SAAWA,EAETlhI,GC9KJ,MAAM0jB,GAAsB,4BAOtBb,GAAsB,0BAWtB8iJ,GACP,uCAEOC,GAAsB,gCCxB7BC,GAAwB,aAExBC,GAAwB,SA0T9B,OArTA,MAKI//K,cACIoB,KAAKyvI,cAAgB,IAAIrlH,MACzBpqB,KAAK4+K,aAAe,GAEpBlyB,GAAIp1I,YACAimF,KAAAA,qBACAn5B,GACIpkE,KAAKyvI,cAAc3jH,KACf+yJ,GACAz6G,KACZsoF,GAAIp1I,YACAimF,KAAAA,uBACAn5B,GACIpkE,KAAK8+K,iBACD9+K,KAAKu0I,uBACLnwE,KAGZsoF,GAAIp1I,YACAimF,KAAAA,qBACAwhF,GAAe/+K,KAAKg/K,yBAAyBD,KAIjD/+K,KAAKi/K,yBAA2B,IAAIz0J,SAAQC,IACxC,IAAK02C,UAAU49G,YAGX,YAFAt0J,GAAQ,GAKZ,MAAMnuB,EAAO0D,KAEP0rG,EAAW,GAEjBA,EAASxnG,KAAKi9D,UAAU49G,YAAYG,MAAM,CAAEh3K,KAAMy2K,KAC7Cx6G,MAAKrtC,IACF92B,KAAKg/K,yBAAyB,CAC1B,CAACzqF,IAAkBv0F,KAAKm/K,sBAAsBroJ,KAElDA,EAAOsoJ,SAAW,WACd,IACI9iL,EAAK0iL,yBAAyB,CAC1B,CAACzqF,IAAkBj4F,EAAK6iL,sBAAsBn/K,QAEpD,MAAOwD,OAKN,KAEV2qE,OAAM,KAAM,KAEjBu9B,EAASxnG,KAAKi9D,UAAU49G,YAAYG,MAAM,CAAEh3K,KAAMw2K,KAC7Cv6G,MAAKrtC,IACF92B,KAAKg/K,yBAAyB,CAC1B,CAACzqF,IAAkBv0F,KAAKm/K,sBAAsBroJ,KAElDA,EAAOsoJ,SAAW,WACd,IACI9iL,EAAK0iL,yBAAyB,CAC1B,CAACzqF,IAAkBj4F,EAAK6iL,sBAAsBn/K,QAEpD,MAAOwD,OAKN,KAEV2qE,OAAM,KAAM,KAEjB3jD,QAAQ3T,IAAI60F,GAAUvnC,MAAKzwD,GAAW+W,EAAQ/W,EAAQkD,OAAMyoK,GAAaA,UAajFF,wBAA6C,IAAvBG,EAAuB,uDAAJ,GAIrC,MAAMxoJ,EAASwoJ,EAAiBhzJ,OAASgzJ,EAAiBxoJ,OAE1D,GAAsB,iBAAXA,EACP,MAAM,IAAIxL,UAGd,MA3G0B,YA2GnBwL,EAUXkoJ,yBAAyBD,GAEf,CAAExqF,GAAiBA,IAChBhiF,MAAK/S,GAAQA,KAAQu/K,GAAeA,EAAYv/K,KAAUQ,KAAK4+K,aAAap/K,OAGjFQ,KAAK4+K,aAAe,IACb5+K,KAAK4+K,gBACLG,GAEP/+K,KAAKyvI,cAAc3jH,KAAK+yJ,GAA6C7+K,KAAK4+K,eAEtE5+K,KAAK4+K,aAAarqF,KAAoBv0F,KAAK4+K,aAAarqF,MAIxDv0F,KAAKkkE,kBAAiB,UAUlC46G,iBAAiBS,EAAUn7G,GACvB,MAAMmvE,EACAnvE,EAAQ90D,MACNjO,GAAgB,gBAAXA,EAAEm3C,MAA0Bn3C,EAAEkjE,WAAag7G,IAEpDhsC,GACAl+C,GAAWoD,0BACPi0D,GAAIpV,4BAA4B/D,IAQ5CrvE,iBAAiBjwD,GACby4I,GAAIxoF,iBAAiBjwD,GASzB2gI,wBACI,OAAO8X,GAAI9X,wBAUfN,wBAAwByC,GACpB,OAAO2V,GAAIpY,wBAAwByC,GAUvCyoC,0BAA0BhgL,GACtB,OAAO,IAAIgrB,SAAQC,IAGXjrB,KAAQQ,KAAK4+K,aACbn0J,EAAQzqB,KAAK4+K,aAAap/K,IAM9BQ,KAAKi/K,yBAAyB96G,MAAKk7G,IAC/B,IAAKA,EAGD,YAFA50J,GAAQ,GAKZ,MAAMihF,EAAW,GAEjB,OAAQlsG,GACR,KAAK+0F,GACDmX,EAASxnG,KACLi9D,UAAU49G,YAAYG,MAAM,CACxBh3K,KAAMy2K,MAEd,MACJ,KAAKpqF,GACDmX,EAASxnG,KACLi9D,UAAU49G,YAAYG,MAAM,CACxBh3K,KAAMw2K,MAEd,MACJ,QACIhzE,EAASxnG,KACLi9D,UAAU49G,YAAYG,MAAM,CACxBh3K,KAAMy2K,MAEdjzE,EAASxnG,KACLi9D,UAAU49G,YAAYG,MAAM,CACxBh3K,KAAMw2K,MAIlBl0J,QAAQ3T,IAAI60F,GAAUvnC,MAClBzwD,GAAW+W,EAAQ/W,EAAQkD,OAAM0oK,IAC7B,IACI,OAAOt/K,KAAKm/K,sBAAsBG,GACpC,MACE,OAAO,SAGf,IAAM70J,GAAQ,WAW9Bg1J,gCACI,QAASn6J,GAAQ8sD,aAAe9sD,GAAQo8D,gBAQ5C6yD,uBACI,OAAOmY,GAAInY,uBAWf4C,qBAAqB5yE,GAWjB,OAVyBmoF,GAAItV,oCAER73I,OAAS,GAI1BS,KAAK8+K,iBACDv6G,EAAUmoF,GAAItV,qCAGfsV,GAAIvV,qBAAqB5yE,GAQpCv3C,iBAAiBqL,EAAOxN,GACpB7qB,KAAKyvI,cAAcn4H,YAAY+gB,EAAOxN,GAQ1CqC,oBAAoBmL,EAAOxN,GACvB7qB,KAAKyvI,cAAcv3H,eAAemgB,EAAOxN,GAO7C60J,UAAUrnJ,GAAgB,2BAAN/xB,EAAM,iCAANA,EAAM,kBACtBtG,KAAKyvI,cAAc3jH,KAAKuM,KAAU/xB,KC1TpCF,IAASyB,EAAAA,EAAAA,wDAwFf,SAAS83K,GAAkBzsC,GACvB,IAAK,MAAMK,KAAUL,EACjBK,EAAO4I,aC7FR,MAAMyjC,GAES,+BAFTA,GAGC,mBAHDA,GAIE,oBCGTx5K,IAASyB,EAAAA,EAAAA,2DASA,MAAMg4K,GAgBjBjhL,cAA0B,IAAdyD,EAAc,uDAAJ,GAClBrC,KAAKg3G,SAAW,CACZ/mC,SAAU,GACVunD,aAAa,EACbsoD,cAAc,EACdC,cAAc,KACX19K,GASPrC,KAAKglG,QAAU,GAOfhlG,KAAKggL,gBAAkB,KAGvBhgL,KAAK45D,SAAW55D,KAAK45D,SAAS52D,KAAKhD,MACnCA,KAAKigL,gBAAkBjgL,KAAKigL,gBAAgBj9K,KAAKhD,MACjDA,KAAKkgL,eAAiBlgL,KAAKkgL,eAAel9K,KAAKhD,MASnDmgL,aACI,OAAOngL,KAAKg3G,SAASmS,QAUzBi3D,eAAeC,GACX,OAAQA,EAAQ37H,KAAK,WACrB,IDhFI,iBCiFA1kD,KAAKsgL,iBAAiBD,GACtB,MAEJ,KAAKT,GACD5/K,KAAKugL,mBAAmBF,GACxB,MAEJ,KAAKT,GACD5/K,KAAKwgL,oBAAoBH,GACzB,MAEJ,IDxFY,iBCyFRrgL,KAAKygL,iBAAiBJ,IAa9BhgL,QAAwB,IAAlB2pG,EAAkB,uDAAJ,GACZhqG,KAAKggL,kBAIThgL,KAAKglG,QAAUhlG,KAAKglG,QAAQt+F,OAAOsjG,GAEnChqG,KAAKggL,gBAAkBhgL,KAAK0gL,wBAE5B1gL,KAAKggL,gBAAgBl4D,OAAO9d,IAShCnlG,OACQ7E,KAAKggL,iBACLhgL,KAAKggL,gBAAgB5nD,YAGzBp4H,KAAKwgL,sBAUTE,wBAOI,MAWMC,EAAiB,CAGnB/1H,WAAW,EACX8gE,OAAQ,CACJ0M,UAAW,QAEf9pE,OAAQtuD,KAAKkgL,eAIblzJ,iBAAkB,IAAM,QAWtB4zJ,EAAe,CACjBzwG,WAAYi5D,MACTppI,KAAKg3G,SAAS/mC,UAgCf4wG,EAAW,CACb7jF,oBAAqB,OACrB9B,gBAAiB,GACjBrO,aAAc,CAAE/gE,KApBJuM,IACZ,OAAQA,GACR,KAAK4hE,KAAAA,sBACL,KAAKA,KAAAA,kBACDj6F,KAAK45D,SAASgmH,GAA0BvnJ,MAiB5CmxF,qBAAsB,KAGX,IAEXT,uBAAwB,OACxBzC,2BAA4B,KAAM,GAiBtCtmH,KAAKiiK,KAAO,IAAIvV,GAVO,CACnBzvD,SAAU,IAAM,IASgB,IAOpCj9F,KAAKiiK,KAAK3qJ,YACNimF,KAAAA,mBACAv9F,KAAKigL,iBAGT,MAAM9F,EAAiB,IAAI1hD,QACvBtsH,OACAA,EACAnM,KAAKg3G,SAASmS,QACdw3D,EACA,CACIhwG,oBAAqB3wE,KAAKg3G,SAAS8oE,aACnC/uG,oBAAqB/wE,KAAKg3G,SAAS+oE,cAEvCa,GACA,EACA5gL,KAAKg3G,SAASwgB,aAalB,OAVuB,IAAIw2C,IAEZO,YAAYsS,GAM3B1G,EAAehyF,WAAW04F,EAAU7gL,KAAKiiK,KAhItB,IAkIZkY,EAYXvgH,SAASw4G,GAAyB,IAAdvoC,EAAc,uDAAJ,GAC1B7pI,KAAKg3G,SAASzxC,QAAQvlE,KAAKg3G,SAASmS,QAASipD,EAAWvoC,GAY5Do2C,gBAAgBa,GACZ9gL,KAAKglG,QAAQ9gG,KAAK48K,GAElB9gL,KAAKg3G,SAAS+pE,eAAeD,GAWjCZ,eAAeztH,GACXzyD,KAAKg3G,SAASgqE,cAAchhL,KAAKg3G,SAASmS,QAAS12D,GAYvD6tH,iBAAiBD,GACRrgL,KAAKggL,gBAMVhgL,KAAKggL,gBAAgBthD,UAAU2hD,GAL3Bj6K,GAAO5C,MAAM,sDAgBrB+8K,mBAAmBF,GACXrgL,KAAKggL,gBACL55K,GAAO5C,MAAM,sDAKjBxD,KAAKggL,gBAAkBhgL,KAAK0gL,wBAE5B1gL,KAAKggL,gBAAgB1nD,YACjB+nD,GACA,SACA,IAAMrgL,KAAK45D,SACP55D,KAAKg3G,SAASmS,QACdy2D,GACA,6BAYZY,sBACIxgL,KAAKglG,QAAQriG,SAAQiuB,GAASA,EAAMyzD,YACpCrkF,KAAKglG,QAAU,GAEXhlG,KAAKggL,iBACLhgL,KAAKggL,gBAAgB9+C,eAGrBlhI,KAAKiiK,OACLjiK,KAAKiiK,KAAK/pJ,eACNqlF,KAAAA,mBACAv9F,KAAKigL,iBAGTjgL,KAAKiiK,KAAK/M,WAYlBurB,iBAAiBJ,GACbrgL,KAAKggL,gBAAgB/nD,iBAAiBooD,ICzY9C,MAAMj6K,IAASyB,EAAAA,EAAAA,gECJTo5K,GAAuB,qBACvB12J,GAAU,IAAIH,MACpB,IAAI82J,IAAe,EACfC,GAAM,KAsHV,UACI92J,KAtDGtX,eAAoB1Q,GACvB,GAAI6+K,GACA,MAAM,IAAIp7K,MAAM,oCAGpB,MAAM,YAAE+hF,EAAF,gBAAeC,EAAf,0BAAgC4N,GAA8BrzF,EAEpE,IAAKwlF,IAAgBC,GAAmB4N,EACpC,MAAM,IAAI5vF,MAAM,yBAOpB,aAzEJ,SAAqBzD,GACjB,IAAIijB,GAAQ07D,gBAIZ,OAAO,IAAIx2D,SAAQC,IACfyO,KAAAA,WACI72B,EAAQwxK,0BAA4Bh4F,IACxB,GACE,OACI1vE,EACCse,MA0DrB22J,CAAY/+K,GAElB8+K,GAAM,IAAI1kL,OAAO+qF,UA1CrB,SAAqBnlF,GACjB,OAAO,IAAImoB,SAAQ,CAACC,EAASrU,KACzB,MAAMirK,EAAQh/K,EAAQwlF,YAChBy5F,EAAYj/K,EAAQylF,gBACpBz5D,EAAShsB,EAAQwwK,cAAgBxwK,EAAQuxK,uBAAyBp1D,GAASX,kBAEjFsjE,GAAIh5F,WAAWk5F,EAAOC,EAAWjzJ,GAAQ,CAACyI,EAAQ/3B,KAC/B,YAAX+3B,GACAqqJ,GAAIp2J,GAAGk2J,IAAsB,WAAa,2BAAT36K,EAAS,yBAATA,EAAS,gBACtCikB,GAAQuB,KAAKm1J,MAAyB36K,MAE1C46K,IAAe,EACfz2J,KAEArU,EAAO,CACH0gB,OAAAA,EACA/3B,QAAAA,MAGT,KAAM,CAAEwiL,oBAAoB,OAyB5BC,CAAYn/K,IAwCnBo/K,QAxBG,WACH,OAAKP,GAIE,IAAI12J,SAAQ,CAACC,EAASrU,KACzBmU,GAAQQ,GAAGk2J,IAAsB,CAACnqJ,EAAQzb,KACvB,YAAXyb,EACArM,EAAQpP,GAERjF,EAAO,CACH0gB,OAAAA,EACAzb,QAAAA,OAMZ8lK,GAAIO,qBAhBGl3J,QAAQpU,OAAO,4CCzG9B,MAAMhQ,IAASyB,EAAAA,EAAAA,6CAMA,MAAM85K,GAIjB/iL,cACIoB,KAAK4hL,UAAW,EAChB5hL,KAAK6hL,cAAgB,GACrB7hL,KAAK8hL,gBAAkB,GAQ3BC,eAAel1K,GACNA,EAAOolB,kBACR7rB,GAAO6lB,KAAK,mDAGhBjsB,KAAK6hL,cAAc39K,KAAK2I,GAU5BxM,QAEI,GAAIL,KAAK4hL,SACL,OAAO5hL,KAAKgiL,UAAUn1K,OAK1B,GAFA7M,KAAK47J,cAAgBX,MAEhBj7J,KAAK6hL,cAActiL,OAGpB,OAFA6G,GAAO6lB,KAAK,8DAEL,KAGXjsB,KAAK4hL,UAAW,EAEhB5hL,KAAKgiL,UAAYhiL,KAAK47J,cAAcqmB,+BAEpC,IAAK,MAAMp1K,KAAU7M,KAAK6hL,cAAe,CACrC,MAAMK,EAAYliL,KAAK47J,cAAclwE,wBAAwB7+E,GAE7Dq1K,EAAUj2H,QAAQjsD,KAAKgiL,WAGvBhiL,KAAK8hL,gBAAgB59K,KAAKg+K,GAG9B,OAAOliL,KAAKgiL,UAAUn1K,OAQ1BgpB,QACI71B,KAAK4hL,UAAW,EAChB5hL,KAAK6hL,cAAgB,GAGrB,IAAK,MAAMK,KAAaliL,KAAK8hL,gBACzBI,EAAU3yH,aAGdvvD,KAAK8hL,gBAAkB,GAEnB9hL,KAAK47J,gBACL57J,KAAK47J,mBAAgBzvJ,IC/CjC,MAAM/F,GAASnE,IAAAA,4BAef,SAASkgL,GAAkC9/K,GACvC,MAAMk/C,EAAa,CACf,gBACIl/C,EAAQ+hE,QAAQ7tC,SAAS,SAC7B,gBACIl0B,EAAQ+hE,QAAQ7tC,SAAS,SAC7B,yBACIl0B,EAAQ+hE,QAAQ7tC,SAAS,YAOjC,OAJIgrB,EAAW6gI,kBACX7gI,EAAWitC,WAAansF,EAAQmsF,YAG7BjtC,EAiCX,SAVA,SAAkCplD,GAC9B,MACkC,iBAAvBM,OAAO4lL,YACR/jL,OAAOmoB,OAAO,GAAIhqB,OAAO4lL,YAAalmL,GACtCA,EAMd,CAAwC,CAEpCuR,QAAS,aAETukK,gBAJoC,GAapCqQ,uBHhGW,MAeX1jL,cAA0B,IAAdyD,EAAc,uDAAJ,GAClB,MAAM,gBACFkgL,KACGhtC,GACHlzI,EAOJrC,KAAKg3G,SAAW,CACZ/mC,SAAUsyG,GAAmBA,EAAgBjtF,KAAK1hC,WAAW83D,OAAOob,gBACjEyO,GAQPv1I,KAAKggL,gBAAkB,KAGvBhgL,KAAKwiL,cAAgBxiL,KAAKwiL,cAAcx/K,KAAKhD,MAC7CA,KAAKkgL,eAAiBlgL,KAAKkgL,eAAel9K,KAAKhD,MAC/CA,KAAKigL,gBAAkBjgL,KAAKigL,gBAAgBj9K,KAAKhD,MAiBrDogL,eAAerhL,GACX,MAAMoqH,EAAUpqH,EAAQq9C,KAExB,IAAK+sE,EACD,OAMJ,GAAInpH,KAAKggL,iBACFhgL,KAAKggL,gBAAgBG,eAAiBh3D,EAOzC,YANAnpH,KAAKwiL,cACDr5D,EACAy2D,GACA,YAMR,MAAMntH,EAAKzyD,KAAKyiL,oBAAoB1jL,EAAQ8Z,KAAK45C,IAC3C4tH,EAAU5tH,GAAMA,EAAGnjD,KAAK,UACxBR,EAASuxK,GAAWA,EAAQ37H,KAAK,UAEnC51C,IAAW8wK,KACX5/K,KAAKggL,gBAAkBhgL,KAAK0gL,sBAAsBv3D,EAAS,CACvDqO,aAAa,EACbuoD,cAAc,KAMlB//K,KAAKggL,iBACLhgL,KAAKggL,gBAAgBI,eAAeC,GAKpCvxK,IAAW8wK,IF3GN,gBE4GF9wK,GACAA,IAAW8wK,IACd5/K,KAAK0iL,uBAebriL,MAAM8oH,GAA2B,IAAlBnf,EAAkB,uDAAJ,GACzBhqG,KAAKggL,gBAAkBhgL,KAAK0gL,sBAAsBv3D,EAAS,CACvDqO,aAAa,EACbuoD,cAAc,IAGlB//K,KAAKggL,gBAAgB3/K,MAAM2pG,GAQ/BnlG,OACQ7E,KAAKggL,iBACLhgL,KAAKggL,gBAAgBn7K,OAGzB7E,KAAKggL,gBAAkB,KAW3ByC,oBAAoBE,GAChB,IACI,MAAMC,GAAS,IAAI39H,WAAYC,gBAAgBy9H,EAAK,YAEpD,OAAO1xE,EAAE2xE,GACX,MAAOn6K,GAGL,OAFArC,GAAO5C,MAAM,kDAEN,MAefk9K,sBAAsBv3D,GAAuB,IAAd9mH,EAAc,uDAAJ,GACrC,IAAK8mH,EACD,MAAM,IAAIrjH,MAAM,mDAGpB,MAAMs0H,EAAY,CACdnqD,SAAUjwE,KAAKg3G,SAAS/mC,SACxB1K,QAASvlE,KAAKwiL,cACdzB,eAAgB/gL,KAAKigL,gBACrBe,cAAehhL,KAAKkgL,eACpB/2D,QAAAA,KACG9mH,GAGP,OAAO,IAAIw9K,GAAkBzlD,GAiBjCooD,cAAcr5D,EAASipD,GAAyB,IAAdvoC,EAAc,uDAAJ,GACxCzjI,GAAO5C,MACH,oCAAqC2lH,EAASipD,EAAWvoC,GAE7D,MAAMp3E,GAAKxS,EAAAA,GAAAA,KAAI,CACX6b,GAAIqtD,EACJ3pH,KAAM,QAEL4B,EAAE,SAAU,CACTqmD,MAAO,oBACP34C,OAAQsjK,IAEXhxK,EAAE,WACFuF,EAAEkjI,GACFliF,KAEL3nD,KAAKkgL,eAAe/2D,EAAS12D,GAEzBzyD,KAAKggL,iBACFhgL,KAAKggL,gBAAgBG,eAAiBh3D,GACzCnpH,KAAK0iL,uBAebzC,gBAAgBa,GACZ,IAAK9gL,KAAKg3G,SAAS+pE,eAIf,OAHA36K,GAAO5C,MAAM,gDACbs9K,EAAiBz8F,UAKrB,MAAMw+F,EAAU/B,EAAiBvuJ,eACjC,IAAIwrE,EAEA8kF,IACA9kF,EAAY/9F,KAAKg3G,SAAS8rE,sBACpB9kF,KAAAA,QAAoBA,KAAAA,QAK9B,MAAMg5C,EAAc8pC,EAAiB/uJ,oBAC/BgxJ,EAAmBr2B,GAAIs2B,kBACzB,CACI,CACIz+G,SACK,SAAQvkE,KAAKggL,gBAAgBG,eAClCriG,UAAW+kG,EAAUtuF,GAAkBA,GACvCu5B,WAAY,QACZjhH,OAAQmqI,EACRpmH,MAAOomH,EAAYtxE,iBAAiB,GACpCq4B,UAAAA,KAIZ/9F,KAAKg3G,SAAS+pE,eAAegC,EAAiB,IAWlD7C,eAAe/2D,EAAS12D,GACpB,GAAKzyD,KAAKg3G,SAASgqE,cAInB,IACI,MAAMiC,GACA,IAAIC,eAAgBC,kBAAkB1wH,EAAG/K,UAAY+K,GAE3DzyD,KAAKg3G,SAASgqE,cAAc73D,EAAS,CAAE12D,GAAIwwH,IAC7C,MAAOx6K,GACLrC,GAAO5C,MAAM,mDAUrBk/K,uBACI1iL,KAAK6E,OAEL7E,KAAKg3G,SAASosE,oBACPpjL,KAAKg3G,SAASosE,uBG7MzBC,UAAW,CACPr/E,4BAA6BvE,GAC7B6jF,UCvHR,CACI9/K,MAAO,CACH+/K,KAAM,OACNhnL,MAAO,QACPinL,oBAAqB,sBACrBC,mBAAoB,qBACpBC,oBAAqB,uBAEzB/yC,KAAM,CACFgzC,KAAM,OACN5iI,OAAQ,UAEZjqB,OAAQ,CACJkiF,IAAK,MACLD,GAAI,KACJoe,QAAS,YDyGTysD,WAAY7W,EACZzpD,oBAAqBC,GAEzB73F,OAAQ,CACJgH,WAAY6kE,EACZ3jC,WAAYq2E,EACZ45C,UAAWlpB,EACX/pI,MAAO+xE,EACP7/B,aAAc+7G,EACdrnB,kBAAmBQ,EACnB6H,QAASa,GAEblqG,OAAQ,CACJ9jC,WAAYyoE,EACZvnC,WAAYs2E,EACZt5G,MAAOgsD,GAEXknG,WAAY,CACRpnG,gBAAeA,IAEnBqnG,UAAW9hL,IAAAA,OACX6gE,aAAckhH,GACd5tF,UAAWf,GAAWe,UACtB/rE,OAAmB,IAAdhoB,EAAc,uDAAJ,GAyBX,GAxBAm8G,GAASn0F,KAAKhoB,EAAQu7G,iBACtBvoB,GAAWhrE,KAAKhoB,GAGhBipH,GAAAA,KAAkB,CACdL,oBAAqB5oH,EAAQ4oH,sBAK5BxuH,OAAOy+F,kBACRz+F,OAAOy+F,gBAAkB,KAGU,IAAnC74F,EAAQ4hL,yBACR79K,GAAO6lB,KAAK,kCACZjsB,KAAKo2F,UAAU/R,WAGfhiF,EAAQ6hL,4BACR3rJ,KAAAA,WACIv4B,KAAKmkL,wBAAwBnhL,KAAKhD,OAGtCA,KAAK0N,QAAS,CACd,MAAM6uF,EAAY,CACdv1F,GAAI,oBACJwF,UAAW,iBACXkB,QAAS1N,KAAK0N,SAGlB2nF,GAAWwD,QAAQt1F,KAAKF,UAAUk5F,IAGtC,OAAOmwD,GAAIriI,KAAKhoB,IAQpB60I,wBAAuB,IACZwV,GAAIxV,0BAWfktC,kBAAiB,IACN13B,GAAI03B,oBAGfr8K,YAAY1B,GACRpE,IAAAA,YAAmBoE,IAWvByB,gBAAgBzB,EAAOW,GACnB/E,IAAAA,gBAAuBoE,EAAOW,IASlCq9K,sBAAsBC,GAClBriL,IAAAA,mBAA0BqiL,IAS9BC,yBAAyBD,GACrBriL,IAAAA,sBAA6BqiL,IAUjCE,oBAAoBniL,GAChBJ,IAAAA,iBAAwBI,IAyC5B2gL,oBAAqE,IAAnD3gL,EAAmD,uDAAzC,GAAIoiL,EAAqC,uCAC7DC,GAAmB,EAEvB,MAAM,iCAAEC,EAAF,qBAAoCC,KAAyBC,GAAgBxiL,EAqBnF,OApB6BsiL,IAAoCF,GAEpC/3B,GAAIrV,2CAItButC,GACPnoL,OAAO6H,YAAW,KACTogL,GACDV,GAAAA,UAA4BnF,MA9PR,KAwP5BmF,GAAAA,UACInF,GACAv5J,GAAQm7D,WASXhkF,OAAOy+F,kBACRz+F,OAAOy+F,gBAAkB,IAE7Bz+F,OAAOy+F,gBAAgB,2BACjBz+F,OAAOqhG,YAAYluE,MAElB88H,GAAIpX,+BAA+BuvC,GACrC1gH,MAAK6K,IAWF,GAVA01G,GAAmB,EAEnBjoL,OAAOy+F,gBAAgB,yBACjBz+F,OAAOqhG,YAAYluE,MAEzBylE,GAAWiE,cACP5b,GACI,UACAykG,GAAkC0C,MAErCn4B,GAAIrqJ,QAAQ4zF,mBACb,IAAK,IAAI32F,EAAI,EAAGA,EAAI0vE,EAAOzvE,OAAQD,IAAK,CACpC,MAAMsxB,EAAQo+C,EAAO1vE,GACfwlL,EAAUl0J,EAAMmB,oBAElBnB,EAAMgpE,YAAcrF,KACpBc,GAAWqB,gBAAgBouF,EACvBl0J,EAAMsuE,cAAcl8F,KAAK4tB,IAC7BA,EAAM5D,iBACF21E,IACA,KACItN,GAAWwC,eAAeitF,OAO9C,MAAMC,EACAr4B,GAAItV,oCAEV,GAAI2tC,EACA,IAAK,IAAIzlL,EAAI,EAAGA,EAAI0vE,EAAOzvE,OAAQD,IACjB0vE,EAAO1vE,GAEfq7I,+BACFoqC,GAMZ,IAAK,MAAMn0J,KAASo+C,EACZp+C,EAAMpxB,OAAS+0F,IACQ,YAApB3jE,EAAMmtE,WACT/9F,KAAKglL,0BAA0Bp0J,EAAMA,MAAO,UAIpD,OAAOo+C,KAEVb,OAAM3qE,IAGH,GAFAkhL,GAAmB,EAEflhL,EAAM0E,OAAS00E,GAA8C,CAI7D,MAAM2f,EAAY,CACdv1F,GAAI,8BACJjI,QAASyE,EAAMzE,SAGnBs2F,GAAWwD,QAAQt1F,KAAKF,UAAUk5F,IAElClH,GAAWiE,cACP5b,GACI,UACA,CACIplD,OAAQ,0CAEjB,GAAI90B,EAAM0E,OAAS00E,GAA4B,CAElD,MAAM2f,EAAY,CACdv1F,GAAI,2BACJ8vB,OAAQtzB,EAAMm5E,IAAIvY,SAGtBixB,GAAWwD,QAAQt1F,KAAKF,UAAUk5F,IAElC,MAAMh7C,EACA4gI,GAAkC9/K,GAExCk/C,EAAWjpB,OAAS,mBACpBipB,EAAW6iB,QAAU5gE,EAAMm5E,IAAIvY,QAAQp2D,KAAK,KAC5CqnF,GAAWiE,cACP5b,GAAwB,QAASn8B,QAClC,CAEH8zC,GAAWsD,uBAAuBn1F,GAElC,MAAM+9C,EACA4gI,GAAkC9/K,GAExCk/C,EAAWjpB,OAAS90B,EAAM0E,KAC1BmtF,GAAWiE,cACP5b,GAAwB,QAASn8B,IAMzC,OAHA9kD,OAAOy+F,gBAAgB,yBACjBz+F,OAAOqhG,YAAYluE,MAElBpF,QAAQpU,OAAO5S,OAoBlCyhL,sBAAqB,CAACC,EAAoBrpB,EAAYR,IAC3CF,GAAgB97J,OAAO6lL,EAAoBrpB,EAAYR,GASlE8pB,iBAAgB,IACL,IAAIxD,GAQfyD,qBAAoB,INjbb,IAAI56J,SAAQC,IACfiiI,GAAIxoF,kBAAiBE,IACjB,MAAMihH,EAAejhH,EAAQx4D,QAAO2nI,GAA0B,eAAhBA,EAAO/6F,OAC/C8sI,EAAqB,GAG3B,IAAK,MAAMC,KAAaF,EAAc,CAClC,MAAMG,EAAgB94B,GAAIpX,+BAA+B,CAAElxE,QAAS,CAAE,SAClE8xE,YAAaqvC,EAAUhhH,WAAYJ,MAAK6K,IAIxC,MAAMp+C,EAAQo+C,EAAO,GACfl9C,EAAiBlB,EAAMmB,oBAO7B,OALAsjE,GAAWqB,gBAAgB5kE,EAAgBlB,EAAMsuE,cAAcl8F,KAAK4tB,IACpEA,EAAM5D,iBAAiB21E,IAAsC,KACzDtN,GAAWwC,eAAe/lE,MAGvBlB,KAGX00J,EAAmBphL,KAAKshL,GAG5Bh7J,QAAQshF,WAAWw5E,GAAoBnhH,MAAKshH,IACxC,MAAMC,EAAqBD,EAAa75K,QAAOlD,GAAkB,cAAbA,EAAEouB,SAChD6uJ,EAAmBF,EAAa75K,QAAOlD,GAAkB,aAAbA,EAAEouB,SAG9C47G,EAAmBgzC,EAAmBr5K,KAAI3D,GAAKA,EAAEe,QACjDm8K,EAAgBD,EAAiBt5K,KAAI3D,GAAKA,EAAEe,QAElD,IAAK,MAAM6uB,KAAUstJ,EACjBx/K,GAAO5C,MAAM,8CAA+C80B,GAIhE,IAAK,MAAMi7G,KAAUb,EACjBa,EAAOxoH,GAAG43E,IAA4C9X,IAK9CA,EAAa,OACb80F,GAAkBjtC,GAClBjoH,EAAQ,CAAE85C,SAAUgvE,EAAOhvE,SACvBshH,YAAatyC,EAAO3iH,MAAM0zC,YAM1ChgE,YAAW,KACPq7K,GAAkBjtC,GAClBjoH,EAAQ,CACJ85C,SAAU,GACVshH,YAAa,OApEX,cMuctBjxC,wBAII,OAHAxuI,GAAO6lB,KAAK,yFAGLjsB,KAAK8iE,aAAa8xE,yBAY7BN,wBAAwByC,GAIpB,OAHA3wI,GAAO6lB,KAAK,2FAGLjsB,KAAK8iE,aAAawxE,wBAAwByC,IAUrD0oC,gCACI,OAAOz/K,KAAK8iE,aAAa28G,iCAQ7BqG,uBAAsB,IACXzwF,GAAWW,oBACXvL,GAAoBY,wBAS/BnnB,iBAAiBjwD,GACb7N,GAAO6lB,KAAK,oFAEZjsB,KAAK8iE,aAAaoB,iBAAiBjwD,IAWvCkwK,wBAAwBplL,EAAS8T,EAAQkzK,EAAQC,EAAOxiL,GACpD4C,GAAO5C,MACF,mBAAkBzE,IAClB,WAAU8T,IACV,SAAQkzK,IACR,WAAUC,IACX,eAAgBxiL,GACpB6xF,GAAW8D,kBAAkB31F,IASjCyiL,eAAe,GAAc,IAAd,SAAEtzE,GAAY,EACzBW,GAAAA,kBAA8B,CAAEX,SAAAA,KAUpCqyE,0BAA0Bp0J,EAAOs1J,GACzB,gBAAiBt1J,GACjBA,EAAMu1J,YAAcD,EAChBt1J,EAAMu1J,cAAgBD,GACtB9/K,GAAO4gD,MAAM,oCAGjB5gD,GAAO4gD,MAAM,yDAIrBo/H,YAldoC,GA0dpCC,KAAM,CACFC,SADE,KAEFptJ,WAFE,KAGF5T,QAAOA,QElkBXihK,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBt6K,IAAjBu6K,EACH,OAAOA,EAAaxqL,QAGrB,IAAIC,EAASoqL,yBAAyBE,GAAY,CACjDz/K,GAAIy/K,EACJE,QAAQ,EACRzqL,QAAS,IAUV,OANA0qL,oBAAoBH,GAAUhoL,KAAKtC,EAAOD,QAASC,EAAQA,EAAOD,QAASsqL,qBAG3ErqL,EAAOwqL,QAAS,EAGTxqL,EAAOD,QCxBfsqL,oBAAoBK,KAAO,GCC3BL,oBAAoBl5K,EAAKnR,IACxB,IAAI2qL,EAAS3qL,GAAUA,EAAOuiB,WAC7B,IAAOviB,EAAiB,QACxB,IAAM,EAEP,OADAqqL,oBAAoBnlL,EAAEylL,EAAQ,CAAE5lL,EAAG4lL,IAC5BA,GCLRN,oBAAoBnlL,EAAI,CAACnF,EAAS6qL,KACjC,IAAI,IAAI78K,KAAO68K,EACXP,oBAAoBp+K,EAAE2+K,EAAY78K,KAASs8K,oBAAoBp+K,EAAElM,EAASgO,IAC5E5L,OAAO+f,eAAeniB,EAASgO,EAAK,CAAEoU,YAAY,EAAMC,IAAKwoK,EAAW78K,MCJ3Es8K,oBAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOjnL,MAAQ,IAAIqN,SAAS,cAAb,GACd,MAAO5E,GACR,GAAsB,iBAAXhM,OAAqB,OAAOA,QALjB,GCAxB+pL,oBAAoBp+K,EAAI,CAAC/J,EAAK4iH,IAAU3iH,OAAOC,UAAUsV,eAAepV,KAAKJ,EAAK4iH,GCClFulE,oBAAoB59K,EAAK1M,IACH,oBAAXsiB,QAA0BA,OAAOC,aAC1CngB,OAAO+f,eAAeniB,EAASsiB,OAAOC,YAAa,CAAEhV,MAAO,WAE7DnL,OAAO+f,eAAeniB,EAAS,aAAc,CAAEuN,OAAO,KCLvD+8K,oBAAoBU,IAAO/qL,IAC1BA,EAAOgrL,MAAQ,GACVhrL,EAAO41G,WAAU51G,EAAO41G,SAAW,IACjC51G,GCAR,IAAIirL,oBAAsBZ,oBAAoB","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/../@jitsi/js-utils/node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/../@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/../@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/../@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/../base64-js/index.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/../lodash.debounce/index.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/../@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/../@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/../@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._facialExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the facial expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFacialExpressions() {\n        return this._facialExpressions;\n    }\n\n    /**\n     * Sets the facial expressions of the user.\n     *\n     * @param {Object} facialExpressions - object with facial expressions.\n     * @returns {void}\n     */\n    setFacialExpressions(facialExpressions) {\n        this._facialExpressions = facialExpressions;\n    }\n\n    /**\n     * Adds a new facial expression to speaker stats.\n     *\n     * @param  {string} facialExpression\n     * @param {number} duration\n     */\n    addFacialExpression(facialExpression, duration) {\n        this._facialExpressions[facialExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS: 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT: 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR: 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD: 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR: 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE: 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR: 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM: 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT: 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED: 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n * and the audio sender limit configured in Jicofo.\n */\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference is in progress of joining.\n */\nexport const CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * The source-add for unmuting of a media track was rejected by Jicofo.\n *\n */\nexport const TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n * and the video sender limit configured in Jicofo.\n */\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n\n/**\n * A new facial expression is added with its duration for a participant\n */\nexport const FACIAL_EXPRESSION_ADDED = 'conference.facial_expression.added';\n\n/**\n * Event fired when a participant is requested to join a given (breakout) room.\n */\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room';\n\n/**\n * Event fired when the breakout rooms data was updated.\n */\nexport const BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated';\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()}, \n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        return this._isBreakoutRoom;\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                }\n\n                // Log only the first video ssrc per endpoint.\n                ssrcs.push(videoSources[0]?.s);\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                }\n                ssrcs.push(audioSources[0]?.s);\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // Only set sourceName for non-P2P case\n                    if (ssrcElement.hasAttribute('name')) {\n                        const sourceName = ssrcElement.getAttribute('name');\n\n                        this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                    }\n                }\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n                },\n                error => {\n                    failure(error);\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            const promise = typeof maxFrameHeight === 'undefined'\n                ? this.peerconnection.configureSenderVideoEncodings()\n                : this.peerconnection.setSenderVideoConstraints(maxFrameHeight);\n\n            return promise;\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                this.peerconnection.removeRemoteTracks(id);\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        if (this.isP2P) {\n                            // Do not remove ssrcs from m-line in p2p mode. If the ssrc is removed and added back to\n                            // the same m-line (on source-add), Chrome/Safari do not render the media even if it is\n                            // being received and decoded from the remote peer. The webrtc spec is not clear about\n                            // m-line re-use and the browser vendors have implemented this differently. Currently work\n                            // around this by changing the media direction, that should be enough for the browser to\n                            // fire the \"removetrack\" event on the associated MediaStream. Also, the current direction\n                            // of the transceiver for p2p will depend on whether a local sources is added or not. It\n                            // will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings();\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings();\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n\n        if (removedAnySSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            const sourceInfo = getSignaledSourceInfo(sdpDiffer);\n\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${sourceInfo.mediaType} ssrcs=${sourceInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, sourceInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends facial expression to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFacialExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('facialExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.facialExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, 0)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const transceiver = this.findTransceiver(mediaType, oldTrack);\n        const track = newTrack?.getTrack() ?? null;\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        if (webrtcStream) {\n            try {\n                this.tpcUtils.addTrack(track, isInitiator);\n            } catch (error) {\n                logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n                return Promise.reject(error);\n            }\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => this.isP2P);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    const negotiationNeeded = Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n        const transceiver = this.tpcUtils.findTransceiver(mediaType, oldTrack);\n\n        return promise\n            .then(() => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                if (transceiver) {\n                    // Set the transceiver direction.\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Renegotiate only in the case of P2P. We rely on 'negotiationeeded' to be fired for JVB.\n                return configureEncodingsPromise.then(() => this.isP2P || negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function() {\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    this._senderVideoMaxHeight = frameHeight;\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome 96 because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n            if (browser.isChromiumBased() && browser.isVersionEqualTo('96')) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain facial expression.\n */\nconst FACIAL_EXPRESSION_MESSAGE_TYPE = 'facial_expression';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACIAL_EXPRESSION_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACIAL_EXPRESSION_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACIAL_EXPRESSION_ADDED,\n            this._onFacialExpressionAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Adds a new facial expression with its duration of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The facial expression with its duration.\n     * @returns {void}\n     * @private\n     */\n    _onFacialExpressionAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.addFacialExpression(data.facialExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFacialExpressions(newStats[userId].facialExpressions);\n        }\n    }\n}\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport VideoType from '../../service/RTC/VideoType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && mediaType === MediaType.AUDIO) {\n                        emitAudioMutedEvent(endpointId, newMutedState);\n                    } else {\n                        emitVideoMutedEvent(endpointId, newMutedState);\n                    }\n                }\n\n                const newVideoType = sourceInfoJSON[sourceName].videoType;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    emitEventsFromHere && emitVideoTypeEvent(endpointId, newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const lastPresence = this.chatRoom.getLastPresence(owner);\n\n            if (!lastPresence) {\n                throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n            }\n\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        return this._remoteSourceState[owner] ? this._remoteSourceState[owner][sourceName] : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.sendSourceVideoType(\n            getSourceNameForJitsiTrack(this.myUserId(), MediaType.VIDEO, 0),\n            videoType\n        );\n    } else {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrackBelongsToConference) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\n\n                // we do not want to send presence update during setEffect switching, which does remove and then add\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this._getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        // FIXME once legacy signaling using 'sendCommand' is removed, signalingLayer.setTrackVideoType must be adjusted\n        // to send the presence (not just modify it).\n        this._signalingLayer.setTrackVideoType(\n            getSourceNameForJitsiTrack(\n                this.myUserId(),\n                track.getType(),\n                0\n            ),\n            track.videoType);\n\n        // TODO: Optimize to detect whether presence was changed, for now always report changed to send presence\n        return true;\n    }\n\n    const videoTypeTagName = 'videoType';\n\n    // if track is missing we revert to default type Camera, the case where we screenshare and\n    // we return to be video muted\n    const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n    // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n    if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n        // we will not use this.sendCommand here to avoid sending the presence immediately, as later we may also set\n        // and the mute status\n        return this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n    }\n\n    return false;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        // TODO When legacy signaling part is removed, remember to adjust signalingLayer.setTrackMuteStatus, so that\n        // it triggers sending the presence (it only updates it for now, because the legacy code below sends).\n        this._signalingLayer.setTrackMuteStatus(\n            getSourceNameForJitsiTrack(this.myUserId(), mediaType, 0),\n            isMuted\n        );\n    }\n\n    if (!this.room) {\n        return false;\n    }\n\n    if (mediaType === MediaType.AUDIO) {\n        return this.room.addAudioInfoToPresence(isMuted);\n    }\n\n    return this.room.addVideoInfoToPresence(isMuted);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this._getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\n    let presenceChanged = false;\n\n    if (localAudioTracks && localAudioTracks.length) {\n        presenceChanged = this._setTrackMuteStatus(MediaType.AUDIO, localAudioTracks[0], localAudioTracks[0].isMuted());\n    } else if (this._setTrackMuteStatus(MediaType.AUDIO, undefined, true)) {\n        presenceChanged = true;\n    }\n\n    if (localVideoTracks && localVideoTracks.length) {\n        const muteStatusChanged = this._setTrackMuteStatus(\n            MediaType.VIDEO, localVideoTracks[0], localVideoTracks[0].isMuted());\n        const videoTypeChanged = this._setNewVideoType(localVideoTracks[0]);\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    } else {\n        const muteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n        const videoTypeChanged = this._setNewVideoType(); // set back to default video type\n\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a facial expression with its duration to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFacialExpression = function(payload) {\n    this.xmpp.sendFacialExpressionEvent(this.room.roomjid, payload);\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init({\n            sourceNameSignaling: options.sourceNameSignaling\n        });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(2809);\n"],"names":["root","factory","exports","module","define","amd","self","ERROR","WINDOW","window","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","split","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint8Array","Uint32Array","Array","isArray","obj","Object","prototype","toString","call","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","constructor","createOutputMethod","outputType","message","Md5","update","createMethod","method","nodeWrap","create","i","length","type","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","this","h0","h1","h2","h3","start","bytes","hBytes","finalized","hashed","first","notString","code","index","charCodeAt","lastByteIndex","hash","finalize","a","b","c","d","bc","da","hex","array","arrayBuffer","base64","v1","v2","v3","base64Str","md5","Logger","require","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","keys","levels","forEach","logLevel","_log","apply","arguments","bind","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","error","formatLogMessage","msg","len","arg","timestamp","prevMessage","prevMessageText","text","count","push","_flush","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","Error","stack","m","match","substr","log","logger","level","args","slice","disableCallerInfo","transports","concat","t","l","logPrefixes","Date","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","grammar","v","name","reg","o","names","format","s","u","e","p","z","r","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","params","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","key","parser","writer","write","parse","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","rawName","attachProperties","validLine","test","sdp","session","media","filter","rtp","fmtp","j","paramReducer","acc","expr","undefined","reduce","map","candidates","parts","component","ip","port","item","substring","stream","scid","paused","formatRegExp","formatStr","replace","x","makeLine","Function","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","Math","floor","random","_restoreSimulcast","numSsrcs","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","async","only_once","fn","called","noConflict","_toString","_isArray","_each","arr","iterator","_map","results","_keys","k","hasOwnProperty","nextTick","setImmediate","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","result","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","addListener","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","abs","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","next","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","max","min","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","assign","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","href","pageUrl","scripts","document","getElementsByTagName","supportsScriptReadyState","createElement","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","matches","url","ignoreMessage","round","_nearestExecutingScript","script","eligibleScripts","readyState","src","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","currentExecutingScript","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","errorListener","resolver","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","_addListener","prepend","events","existing","warning","newListener","emit","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","userId","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","_facialExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFacialExpressions","setFacialExpressions","facialExpressions","addFacialExpression","facialExpression","duration","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","track","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","addTrack","isAudioTrack","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","MediaStream","getAudioTracks","mimeType","ondataavailable","dataEvent","size","removeTrack","isVideoTrack","getParticipantId","recorderToRemove","conference","isLocal","getParticipantById","download","blob","Blob","URL","createObjectURL","body","appendChild","style","click","revokeObjectURL","getRecordingResults","getFileType","wordArray","SphinxService","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","transcriber","answer","offset","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","send","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","reset","TranscriptionService","sendRequest","response","verify","formatResponse","audioBlob","Word","sphinxURL","toReturn","includes","getURL","audioFileBlob","request","XMLHttpRequest","onreadystatechange","DONE","status","responseText","open","setRequestHeader","objects","filler","json","getWord","getBeginTime","getEndTime","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","EventEmitterForwarder","dest","forward","srcEvent","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","RandomUtil","randomHexDigit","randomHexString","randomAlphanumStr","ScriptUtil","loadScript","relativeURL","loadCallback","errorCallback","tagName","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","parentNode","insertBefore","integerHash","string","char","pow","generateUsername","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","H264","OPUS","ULPFEC","VP8","VP9","INACTIVE","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","width","height","IDENTITY_UPDATED","LOCAL_JID","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOIN_IN_PROGRESS","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT","SESSION_ACCEPT_ERROR","SESSION_ACCEPT_TIMEOUT","SOURCE_ADD","SOURCE_ADD_ERROR","SOURCE_REMOVE","SOURCE_REMOVE_ERROR","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_RECEIVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_EVENT","BREAKOUT_ROOMS_UPDATED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","attr","setAttribute","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","getAttribute","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","serialize","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","overrideMimeType","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","sync","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","firstChild","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","lang","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","delete","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","navigator","mozGetUserMedia","userAgent","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","supportsUnifiedPlan","RTCRtpTransceiver","val","compactObject","isEmptyObject","walkStats","stats","base","resultSet","endsWith","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","trackId","shimGetUserMedia","browserDetails","mediaDevices","constraintsToChrome_","mandatory","optional","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","constraints","audio","remap","video","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","then","devices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onError","origGetUserMedia","cs","getVideoTracks","getTracks","DOMException","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","heightSpecified","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","setRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","streams","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","pc","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","sender","origRemoveTrack","idx","origAddStream","addStream","origRemoveStream","removeStream","RTCRtpSender","origGetSenders","senders","shimGetStats","origGetStats","getStats","selector","onSucc","onErr","fixChromeStats_","standardReport","report","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","RTCRtpReceiver","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","streamId","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","signalingState","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","setLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","RTCIceCandidate","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","parseFloat","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","catch","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","createOffer","finally","shimCreateAnswer","origCreateAnswer","createAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","addIceCandidate","successCallback","failureCallback","promise","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","iceServers","newIceServers","server","urls","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","offerToReceiveAudio","audioTransceiver","getTransceivers","setDirection","offerToReceiveVideo","videoTransceiver","shimAudioContext","AudioContext","webkitAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","sdpMid","sdpMLineIndex","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","isFirefox","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","createDataChannel","dataChannel","channel","shimConnectionState","checking","iceConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","DATA_CHANNEL_OPENED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","FACIAL_EXPRESSION_ADDED","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","gum","JitsiTrackErrors","failedConstraintName","minWidth","minHeight","getResolutionFromFailedConstraint","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","supportsVADDetection","supportsRTX","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","reportsQueue","errorData","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","addresses","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","participantId","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","participant","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","_onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","getConference","getProperty","jitsiTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","ljm","workerUrl","workerBlob","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","errorIq","prop","getLoginUrl","urlCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","myroomjid","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","deploymentInfo","userRegion","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","sendPrivateMessage","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_sourceNameSignaling","sourceNameSignaling","isSourceNameSignalingEnabled","_createSourceExtension","owner","sourceCompactJson","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","ScreenObtainer","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","minFrameRate","screen","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","transportToJingle","sctpport","sctpmap","sctpAttrs","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","groups","contents","jingle2media","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","JingleSessionState","doInitialize","addIceCandidates","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","jcand","errorMesssage","sendIceCandidates","cands","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","iceCandidate","outerHTML","readSsrcInfo","ssrcElement","setSSRCOwner","setTrackSourceName","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","removeRemoteTracks","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","removedAnySSRCs","ctx","sourceInfo","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","credential","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFacialExpressionEvent","expression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","jsonObject","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","attachMediaStream","getStreamID","getTrackID","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","getDuration","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","unmute","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","_setTrackMuteStatus","_setConference","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLine","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_sourceName","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","setMute","getSSRC","getSourceName","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","localStreamEncodingsConfig","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","setEncodings","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","audioReceivers","getSynchronizationSources","getLocalVideoTrack","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","existingTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","negotiationNeeded","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFacialExpressionAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","ComponentsVersions","addCommandListener","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","_setNewVideoType","videoTypeTagName","trackVideoType","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","presenceChanged","muteStatusChanged","videoTypeChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFacialExpression","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}